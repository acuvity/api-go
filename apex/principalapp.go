// Code generated by elegen. DO NOT EDIT.
// Source: go.acuvity.ai/elemental (templates/model.gotpl)

package api

import (
	"fmt"
	"slices"

	"github.com/globalsign/mgo/bson"
	"github.com/mitchellh/copystructure"
	"go.acuvity.ai/elemental"
)

// PrincipalAppIdentity represents the Identity of the object.
var PrincipalAppIdentity = elemental.Identity{
	Name:     "principalapp",
	Category: "principalapps",
	Package:  "colektor",
	Private:  false,
}

// PrincipalAppsList represents a list of PrincipalApps
type PrincipalAppsList []*PrincipalApp

// Identity returns the identity of the objects in the list.
func (o PrincipalAppsList) Identity() elemental.Identity {

	return PrincipalAppIdentity
}

// Copy returns a pointer to a copy the PrincipalAppsList.
func (o PrincipalAppsList) Copy() elemental.Identifiables {

	out := slices.Clone(o)
	return &out
}

// Append appends the objects to the a new copy of the PrincipalAppsList.
func (o PrincipalAppsList) Append(objects ...elemental.Identifiable) elemental.Identifiables {

	out := slices.Clone(o)
	for _, obj := range objects {
		out = append(out, obj.(*PrincipalApp))
	}

	return out
}

// List converts the object to an elemental.IdentifiablesList.
func (o PrincipalAppsList) List() elemental.IdentifiablesList {

	out := make(elemental.IdentifiablesList, len(o))
	for i := range len(o) {
		out[i] = o[i]
	}

	return out
}

// DefaultOrder returns the default ordering fields of the content.
func (o PrincipalAppsList) DefaultOrder() []string {

	return []string{}
}

// ToSparse returns the PrincipalAppsList converted to SparsePrincipalAppsList.
// Objects in the list will only contain the given fields. No field means entire field set.
func (o PrincipalAppsList) ToSparse(fields ...string) elemental.Identifiables {

	out := make(SparsePrincipalAppsList, len(o))
	for i := range len(o) {
		out[i] = o[i].ToSparse(fields...).(*SparsePrincipalApp)
	}

	return out
}

// Version returns the version of the content.
func (o PrincipalAppsList) Version() int {

	return 1
}

// PrincipalApp represents the model of a principalapp
type PrincipalApp struct {
	// The component of the application request.
	Component string `json:"component,omitempty" msgpack:"component,omitempty" bson:"component,omitempty" mapstructure:"component,omitempty"`

	// The list of labels attached to an application request.
	Labels []string `json:"labels,omitempty" msgpack:"labels,omitempty" bson:"labels,omitempty" mapstructure:"labels,omitempty"`

	// The name of the application.
	Name string `json:"name,omitempty" msgpack:"name,omitempty" bson:"name,omitempty" mapstructure:"name,omitempty"`

	// The optional user information of the application request.
	User *PrincipalAppUser `json:"user,omitempty" msgpack:"user,omitempty" bson:"user,omitempty" mapstructure:"user,omitempty"`

	ModelVersion int `json:"-" msgpack:"-" bson:"_modelversion"`
}

// NewPrincipalApp returns a new *PrincipalApp
func NewPrincipalApp() *PrincipalApp {

	return &PrincipalApp{
		ModelVersion: 1,
		Labels:       []string{},
	}
}

// Identity returns the Identity of the object.
func (o *PrincipalApp) Identity() elemental.Identity {

	return PrincipalAppIdentity
}

// Identifier returns the value of the object's unique identifier.
func (o *PrincipalApp) Identifier() string {

	return ""
}

// SetIdentifier sets the value of the object's unique identifier.
func (o *PrincipalApp) SetIdentifier(id string) {

}

// GetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *PrincipalApp) GetBSON() (any, error) {

	if o == nil {
		return nil, nil
	}

	s := &mongoAttributesPrincipalApp{}

	s.Component = o.Component
	s.Labels = o.Labels
	s.Name = o.Name
	s.User = o.User

	return s, nil
}

// SetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *PrincipalApp) SetBSON(raw bson.Raw) error {

	if o == nil {
		return nil
	}

	s := &mongoAttributesPrincipalApp{}
	if err := raw.Unmarshal(s); err != nil {
		return err
	}

	o.Component = s.Component
	o.Labels = s.Labels
	o.Name = s.Name
	o.User = s.User

	return nil
}

// Version returns the hardcoded version of the model.
func (o *PrincipalApp) Version() int {

	return 1
}

// BleveType implements the bleve.Classifier Interface.
func (o *PrincipalApp) BleveType() string {

	return "principalapp"
}

// DefaultOrder returns the list of default ordering fields.
func (o *PrincipalApp) DefaultOrder() []string {

	return []string{}
}

// Doc returns the documentation for the object
func (o *PrincipalApp) Doc() string {

	return `Describes the principal information of an application.`
}

func (o *PrincipalApp) String() string {

	return fmt.Sprintf("<%s:%s>", o.Identity().Name, o.Identifier())
}

// ToSparse returns the sparse version of the model.
// The returned object will only contain the given fields. No field means entire field set.
func (o *PrincipalApp) ToSparse(fields ...string) elemental.SparseIdentifiable {

	if len(fields) == 0 {
		// nolint: goimports
		return &SparsePrincipalApp{
			Component: &o.Component,
			Labels:    &o.Labels,
			Name:      &o.Name,
			User:      o.User,
		}
	}

	sp := &SparsePrincipalApp{}
	for _, f := range fields {
		switch f {
		case "component":
			sp.Component = &(o.Component)
		case "labels":
			sp.Labels = &(o.Labels)
		case "name":
			sp.Name = &(o.Name)
		case "user":
			sp.User = o.User
		}
	}

	return sp
}

// Patch apply the non nil value of a *SparsePrincipalApp to the object.
func (o *PrincipalApp) Patch(sparse elemental.SparseIdentifiable) {
	if !sparse.Identity().IsEqual(o.Identity()) {
		panic("cannot patch from a parse with different identity")
	}

	so := sparse.(*SparsePrincipalApp)
	if so.Component != nil {
		o.Component = *so.Component
	}
	if so.Labels != nil {
		o.Labels = *so.Labels
	}
	if so.Name != nil {
		o.Name = *so.Name
	}
	if so.User != nil {
		o.User = so.User
	}
}

// DeepCopy returns a deep copy if the PrincipalApp.
func (o *PrincipalApp) DeepCopy() *PrincipalApp {

	if o == nil {
		return nil
	}

	out := &PrincipalApp{}
	o.DeepCopyInto(out)

	return out
}

// DeepCopyInto copies the receiver into the given *PrincipalApp.
func (o *PrincipalApp) DeepCopyInto(out *PrincipalApp) {

	target, err := copystructure.Copy(o)
	if err != nil {
		panic(fmt.Sprintf("Unable to deepcopy PrincipalApp: %s", err))
	}

	*out = *target.(*PrincipalApp)
}

// Validate valides the current information stored into the structure.
func (o *PrincipalApp) Validate() error {

	errors := elemental.Errors{}
	requiredErrors := elemental.Errors{}

	if o.User != nil {
		elemental.ResetDefaultForZeroValues(o.User)
		if err := o.User.Validate(); err != nil {
			errors = errors.Append(err)
		}
	}

	if len(requiredErrors) > 0 {
		return requiredErrors
	}

	if len(errors) > 0 {
		return errors
	}

	return nil
}

// SpecificationForAttribute returns the AttributeSpecification for the given attribute name key.
func (*PrincipalApp) SpecificationForAttribute(name string) elemental.AttributeSpecification {

	if v, ok := PrincipalAppAttributesMap[name]; ok {
		return v
	}

	// We could not find it, so let's check on the lower case indexed spec map
	return PrincipalAppLowerCaseAttributesMap[name]
}

// AttributeSpecifications returns the full attribute specifications map.
func (*PrincipalApp) AttributeSpecifications() map[string]elemental.AttributeSpecification {

	return PrincipalAppAttributesMap
}

// ValueForAttribute returns the value for the given attribute.
// This is a very advanced function that you should not need but in some
// very specific use cases.
func (o *PrincipalApp) ValueForAttribute(name string) any {

	switch name {
	case "component":
		return o.Component
	case "labels":
		return o.Labels
	case "name":
		return o.Name
	case "user":
		return o.User
	}

	return nil
}

// PrincipalAppAttributesMap represents the map of attribute for PrincipalApp.
var PrincipalAppAttributesMap = map[string]elemental.AttributeSpecification{
	"Component": {
		AllowedChoices: []string{},
		BSONFieldName:  "component",
		ConvertedName:  "Component",
		Description:    `The component of the application request.`,
		Exposed:        true,
		Name:           "component",
		Stored:         true,
		Type:           "string",
	},
	"Labels": {
		AllowedChoices: []string{},
		BSONFieldName:  "labels",
		ConvertedName:  "Labels",
		Description:    `The list of labels attached to an application request.`,
		Exposed:        true,
		Name:           "labels",
		Stored:         true,
		SubType:        "string",
		Type:           "list",
	},
	"Name": {
		AllowedChoices: []string{},
		BSONFieldName:  "name",
		ConvertedName:  "Name",
		Description:    `The name of the application.`,
		Exposed:        true,
		Name:           "name",
		Stored:         true,
		Type:           "string",
	},
	"User": {
		AllowedChoices: []string{},
		BSONFieldName:  "user",
		ConvertedName:  "User",
		Description:    `The optional user information of the application request.`,
		Exposed:        true,
		Name:           "user",
		Stored:         true,
		SubType:        "principalappuser",
		Type:           "ref",
	},
}

// PrincipalAppLowerCaseAttributesMap represents the map of attribute for PrincipalApp.
var PrincipalAppLowerCaseAttributesMap = map[string]elemental.AttributeSpecification{
	"component": {
		AllowedChoices: []string{},
		BSONFieldName:  "component",
		ConvertedName:  "Component",
		Description:    `The component of the application request.`,
		Exposed:        true,
		Name:           "component",
		Stored:         true,
		Type:           "string",
	},
	"labels": {
		AllowedChoices: []string{},
		BSONFieldName:  "labels",
		ConvertedName:  "Labels",
		Description:    `The list of labels attached to an application request.`,
		Exposed:        true,
		Name:           "labels",
		Stored:         true,
		SubType:        "string",
		Type:           "list",
	},
	"name": {
		AllowedChoices: []string{},
		BSONFieldName:  "name",
		ConvertedName:  "Name",
		Description:    `The name of the application.`,
		Exposed:        true,
		Name:           "name",
		Stored:         true,
		Type:           "string",
	},
	"user": {
		AllowedChoices: []string{},
		BSONFieldName:  "user",
		ConvertedName:  "User",
		Description:    `The optional user information of the application request.`,
		Exposed:        true,
		Name:           "user",
		Stored:         true,
		SubType:        "principalappuser",
		Type:           "ref",
	},
}

// SparsePrincipalAppsList represents a list of SparsePrincipalApps
type SparsePrincipalAppsList []*SparsePrincipalApp

// Identity returns the identity of the objects in the list.
func (o SparsePrincipalAppsList) Identity() elemental.Identity {

	return PrincipalAppIdentity
}

// Copy returns a pointer to a copy the SparsePrincipalAppsList.
func (o SparsePrincipalAppsList) Copy() elemental.Identifiables {

	copy := slices.Clone(o)
	return &copy
}

// Append appends the objects to the a new copy of the SparsePrincipalAppsList.
func (o SparsePrincipalAppsList) Append(objects ...elemental.Identifiable) elemental.Identifiables {

	out := slices.Clone(o)
	for _, obj := range objects {
		out = append(out, obj.(*SparsePrincipalApp))
	}

	return out
}

// List converts the object to an elemental.IdentifiablesList.
func (o SparsePrincipalAppsList) List() elemental.IdentifiablesList {

	out := make(elemental.IdentifiablesList, len(o))
	for i := range len(o) {
		out[i] = o[i]
	}

	return out
}

// DefaultOrder returns the default ordering fields of the content.
func (o SparsePrincipalAppsList) DefaultOrder() []string {

	return []string{}
}

// ToPlain returns the SparsePrincipalAppsList converted to PrincipalAppsList.
func (o SparsePrincipalAppsList) ToPlain() elemental.IdentifiablesList {

	out := make(elemental.IdentifiablesList, len(o))
	for i := range len(o) {
		out[i] = o[i].ToPlain()
	}

	return out
}

// Version returns the version of the content.
func (o SparsePrincipalAppsList) Version() int {

	return 1
}

// SparsePrincipalApp represents the sparse version of a principalapp.
type SparsePrincipalApp struct {
	// The component of the application request.
	Component *string `json:"component,omitempty" msgpack:"component,omitempty" bson:"component,omitempty" mapstructure:"component,omitempty"`

	// The list of labels attached to an application request.
	Labels *[]string `json:"labels,omitempty" msgpack:"labels,omitempty" bson:"labels,omitempty" mapstructure:"labels,omitempty"`

	// The name of the application.
	Name *string `json:"name,omitempty" msgpack:"name,omitempty" bson:"name,omitempty" mapstructure:"name,omitempty"`

	// The optional user information of the application request.
	User *PrincipalAppUser `json:"user,omitempty" msgpack:"user,omitempty" bson:"user,omitempty" mapstructure:"user,omitempty"`

	ModelVersion int `json:"-" msgpack:"-" bson:"_modelversion"`
}

// NewSparsePrincipalApp returns a new  SparsePrincipalApp.
func NewSparsePrincipalApp() *SparsePrincipalApp {
	return &SparsePrincipalApp{}
}

// Identity returns the Identity of the sparse object.
func (o *SparsePrincipalApp) Identity() elemental.Identity {

	return PrincipalAppIdentity
}

// Identifier returns the value of the sparse object's unique identifier.
func (o *SparsePrincipalApp) Identifier() string {

	return ""
}

// SetIdentifier sets the value of the sparse object's unique identifier.
func (o *SparsePrincipalApp) SetIdentifier(id string) {

}

// GetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *SparsePrincipalApp) GetBSON() (any, error) {

	if o == nil {
		return nil, nil
	}

	s := &mongoAttributesSparsePrincipalApp{}

	if o.Component != nil {
		s.Component = o.Component
	}
	if o.Labels != nil {
		s.Labels = o.Labels
	}
	if o.Name != nil {
		s.Name = o.Name
	}
	if o.User != nil {
		s.User = o.User
	}

	return s, nil
}

// SetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *SparsePrincipalApp) SetBSON(raw bson.Raw) error {

	if o == nil {
		return nil
	}

	s := &mongoAttributesSparsePrincipalApp{}
	if err := raw.Unmarshal(s); err != nil {
		return err
	}

	if s.Component != nil {
		o.Component = s.Component
	}
	if s.Labels != nil {
		o.Labels = s.Labels
	}
	if s.Name != nil {
		o.Name = s.Name
	}
	if s.User != nil {
		o.User = s.User
	}

	return nil
}

// Version returns the hardcoded version of the model.
func (o *SparsePrincipalApp) Version() int {

	return 1
}

// ToPlain returns the plain version of the sparse model.
func (o *SparsePrincipalApp) ToPlain() elemental.PlainIdentifiable {

	out := NewPrincipalApp()
	if o.Component != nil {
		out.Component = *o.Component
	}
	if o.Labels != nil {
		out.Labels = *o.Labels
	}
	if o.Name != nil {
		out.Name = *o.Name
	}
	if o.User != nil {
		out.User = o.User
	}

	return out
}

// DeepCopy returns a deep copy if the SparsePrincipalApp.
func (o *SparsePrincipalApp) DeepCopy() *SparsePrincipalApp {

	if o == nil {
		return nil
	}

	out := &SparsePrincipalApp{}
	o.DeepCopyInto(out)

	return out
}

// DeepCopyInto copies the receiver into the given *SparsePrincipalApp.
func (o *SparsePrincipalApp) DeepCopyInto(out *SparsePrincipalApp) {

	target, err := copystructure.Copy(o)
	if err != nil {
		panic(fmt.Sprintf("Unable to deepcopy SparsePrincipalApp: %s", err))
	}

	*out = *target.(*SparsePrincipalApp)
}

type mongoAttributesPrincipalApp struct {
	Component string            `bson:"component,omitempty"`
	Labels    []string          `bson:"labels,omitempty"`
	Name      string            `bson:"name,omitempty"`
	User      *PrincipalAppUser `bson:"user,omitempty"`
}
type mongoAttributesSparsePrincipalApp struct {
	Component *string           `bson:"component,omitempty"`
	Labels    *[]string         `bson:"labels,omitempty"`
	Name      *string           `bson:"name,omitempty"`
	User      *PrincipalAppUser `bson:"user,omitempty"`
}
