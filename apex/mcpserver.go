// Code generated by elegen. DO NOT EDIT.
// Source: go.acuvity.ai/elemental (templates/model.gotpl)

package api

import (
	"fmt"

	"github.com/globalsign/mgo/bson"
	"github.com/mitchellh/copystructure"
	"go.acuvity.ai/elemental"
)

// MCPServer represents the model of a mcpserver
type MCPServer struct {
	// The allowed tools that the caller has access to. If empty, this means that the
	// caller has access to all tools provided by this MCP server.
	AllowedTools []string `json:"allowedTools,omitempty" msgpack:"allowedTools,omitempty" bson:"allowedtools,omitempty" mapstructure:"allowedTools,omitempty"`

	// The name of the MCP server.
	Name string `json:"name,omitempty" msgpack:"name,omitempty" bson:"name,omitempty" mapstructure:"name,omitempty"`

	// The URL of the MCP server.
	Url string `json:"url" msgpack:"url" bson:"url" mapstructure:"url,omitempty"`

	ModelVersion int `json:"-" msgpack:"-" bson:"_modelversion"`
}

// NewMCPServer returns a new *MCPServer
func NewMCPServer() *MCPServer {

	return &MCPServer{
		ModelVersion: 1,
		AllowedTools: []string{},
	}
}

// GetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *MCPServer) GetBSON() (any, error) {

	if o == nil {
		return nil, nil
	}

	s := &mongoAttributesMCPServer{}

	s.AllowedTools = o.AllowedTools
	s.Name = o.Name
	s.Url = o.Url

	return s, nil
}

// SetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *MCPServer) SetBSON(raw bson.Raw) error {

	if o == nil || raw.Kind == bson.ElementNil {
		return bson.ErrSetZero
	}

	s := &mongoAttributesMCPServer{}
	if err := raw.Unmarshal(s); err != nil {
		return err
	}

	o.AllowedTools = s.AllowedTools
	o.Name = s.Name
	o.Url = s.Url

	return nil
}

// BleveType implements the bleve.Classifier Interface.
func (o *MCPServer) BleveType() string {

	return "mcpserver"
}

// DeepCopy returns a deep copy if the MCPServer.
func (o *MCPServer) DeepCopy() *MCPServer {

	if o == nil {
		return nil
	}

	out := &MCPServer{}
	o.DeepCopyInto(out)

	return out
}

// DeepCopyInto copies the receiver into the given *MCPServer.
func (o *MCPServer) DeepCopyInto(out *MCPServer) {

	target, err := copystructure.Copy(o)
	if err != nil {
		panic(fmt.Sprintf("Unable to deepcopy MCPServer: %s", err))
	}

	*out = *target.(*MCPServer)
}

// Validate valides the current information stored into the structure.
func (o *MCPServer) Validate() error {

	errors := elemental.Errors{}
	requiredErrors := elemental.Errors{}

	if err := elemental.ValidateRequiredString("url", o.Url); err != nil {
		requiredErrors = requiredErrors.Append(err)
	}

	if err := ValidateURL("url", o.Url); err != nil {
		errors = errors.Append(err)
	}

	if len(requiredErrors) > 0 {
		return requiredErrors
	}

	if len(errors) > 0 {
		return errors
	}

	return nil
}

// SpecificationForAttribute returns the AttributeSpecification for the given attribute name key.
func (*MCPServer) SpecificationForAttribute(name string) elemental.AttributeSpecification {

	if v, ok := MCPServerAttributesMap[name]; ok {
		return v
	}

	// We could not find it, so let's check on the lower case indexed spec map
	return MCPServerLowerCaseAttributesMap[name]
}

// AttributeSpecifications returns the full attribute specifications map.
func (*MCPServer) AttributeSpecifications() map[string]elemental.AttributeSpecification {

	return MCPServerAttributesMap
}

// ValueForAttribute returns the value for the given attribute.
// This is a very advanced function that you should not need but in some
// very specific use cases.
func (o *MCPServer) ValueForAttribute(name string) any {

	switch name {
	case "allowedTools":
		return o.AllowedTools
	case "name":
		return o.Name
	case "url":
		return o.Url
	}

	return nil
}

// MCPServerAttributesMap represents the map of attribute for MCPServer.
var MCPServerAttributesMap = map[string]elemental.AttributeSpecification{
	"AllowedTools": {
		AllowedChoices: []string{},
		BSONFieldName:  "allowedtools",
		ConvertedName:  "AllowedTools",
		Description: `The allowed tools that the caller has access to. If empty, this means that the
caller has access to all tools provided by this MCP server.`,
		Exposed: true,
		Name:    "allowedTools",
		Stored:  true,
		SubType: "string",
		Type:    "list",
	},
	"Name": {
		AllowedChoices: []string{},
		BSONFieldName:  "name",
		ConvertedName:  "Name",
		Description:    `The name of the MCP server.`,
		Exposed:        true,
		Name:           "name",
		Stored:         true,
		Type:           "string",
	},
	"Url": {
		AllowedChoices: []string{},
		BSONFieldName:  "url",
		ConvertedName:  "Url",
		Description:    `The URL of the MCP server.`,
		Exposed:        true,
		Name:           "url",
		Required:       true,
		Stored:         true,
		Type:           "string",
	},
}

// MCPServerLowerCaseAttributesMap represents the map of attribute for MCPServer.
var MCPServerLowerCaseAttributesMap = map[string]elemental.AttributeSpecification{
	"allowedtools": {
		AllowedChoices: []string{},
		BSONFieldName:  "allowedtools",
		ConvertedName:  "AllowedTools",
		Description: `The allowed tools that the caller has access to. If empty, this means that the
caller has access to all tools provided by this MCP server.`,
		Exposed: true,
		Name:    "allowedTools",
		Stored:  true,
		SubType: "string",
		Type:    "list",
	},
	"name": {
		AllowedChoices: []string{},
		BSONFieldName:  "name",
		ConvertedName:  "Name",
		Description:    `The name of the MCP server.`,
		Exposed:        true,
		Name:           "name",
		Stored:         true,
		Type:           "string",
	},
	"url": {
		AllowedChoices: []string{},
		BSONFieldName:  "url",
		ConvertedName:  "Url",
		Description:    `The URL of the MCP server.`,
		Exposed:        true,
		Name:           "url",
		Required:       true,
		Stored:         true,
		Type:           "string",
	},
}

type mongoAttributesMCPServer struct {
	AllowedTools []string `bson:"allowedtools,omitempty"`
	Name         string   `bson:"name,omitempty"`
	Url          string   `bson:"url"`
}
