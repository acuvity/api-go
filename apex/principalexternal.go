// Code generated by elegen. DO NOT EDIT.
// Source: go.acuvity.ai/elemental (templates/model.gotpl)

package api

import (
	"fmt"
	"slices"

	"github.com/globalsign/mgo/bson"
	"github.com/mitchellh/copystructure"
	"go.acuvity.ai/elemental"
)

// PrincipalExternalIdentity represents the Identity of the object.
var PrincipalExternalIdentity = elemental.Identity{
	Name:     "principalexternal",
	Category: "principalexternals",
	Package:  "colektor",
	Private:  false,
}

// PrincipalExternalsList represents a list of PrincipalExternals
type PrincipalExternalsList []*PrincipalExternal

// Identity returns the identity of the objects in the list.
func (o PrincipalExternalsList) Identity() elemental.Identity {

	return PrincipalExternalIdentity
}

// Copy returns a pointer to a copy the PrincipalExternalsList.
func (o PrincipalExternalsList) Copy() elemental.Identifiables {

	out := slices.Clone(o)
	return &out
}

// Append appends the objects to the a new copy of the PrincipalExternalsList.
func (o PrincipalExternalsList) Append(objects ...elemental.Identifiable) elemental.Identifiables {

	out := slices.Clone(o)
	for _, obj := range objects {
		out = append(out, obj.(*PrincipalExternal))
	}

	return out
}

// List converts the object to an elemental.IdentifiablesList.
func (o PrincipalExternalsList) List() elemental.IdentifiablesList {

	out := make(elemental.IdentifiablesList, len(o))
	for i := range len(o) {
		out[i] = o[i]
	}

	return out
}

// DefaultOrder returns the default ordering fields of the content.
func (o PrincipalExternalsList) DefaultOrder() []string {

	return []string{}
}

// ToSparse returns the PrincipalExternalsList converted to SparsePrincipalExternalsList.
// Objects in the list will only contain the given fields. No field means entire field set.
func (o PrincipalExternalsList) ToSparse(fields ...string) elemental.Identifiables {

	out := make(SparsePrincipalExternalsList, len(o))
	for i := range len(o) {
		out[i] = o[i].ToSparse(fields...).(*SparsePrincipalExternal)
	}

	return out
}

// Version returns the version of the content.
func (o PrincipalExternalsList) Version() int {

	return 1
}

// PrincipalExternal represents the model of a principalexternal
type PrincipalExternal struct {
	// The optional user claims of the request. This can be an incomplete list, and
	// claims can be mapped to different keys.
	UserClaims []string `json:"userClaims,omitempty" msgpack:"userClaims,omitempty" bson:"userclaims,omitempty" mapstructure:"userClaims,omitempty"`

	// The optional username of the request.
	Username string `json:"username,omitempty" msgpack:"username,omitempty" bson:"username,omitempty" mapstructure:"username,omitempty"`

	ModelVersion int `json:"-" msgpack:"-" bson:"_modelversion"`
}

// NewPrincipalExternal returns a new *PrincipalExternal
func NewPrincipalExternal() *PrincipalExternal {

	return &PrincipalExternal{
		ModelVersion: 1,
		UserClaims:   []string{},
	}
}

// Identity returns the Identity of the object.
func (o *PrincipalExternal) Identity() elemental.Identity {

	return PrincipalExternalIdentity
}

// Identifier returns the value of the object's unique identifier.
func (o *PrincipalExternal) Identifier() string {

	return ""
}

// SetIdentifier sets the value of the object's unique identifier.
func (o *PrincipalExternal) SetIdentifier(id string) {

}

// GetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *PrincipalExternal) GetBSON() (any, error) {

	if o == nil {
		return nil, nil
	}

	s := &mongoAttributesPrincipalExternal{}

	s.UserClaims = o.UserClaims
	s.Username = o.Username

	return s, nil
}

// SetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *PrincipalExternal) SetBSON(raw bson.Raw) error {

	if o == nil {
		return nil
	}

	s := &mongoAttributesPrincipalExternal{}
	if err := raw.Unmarshal(s); err != nil {
		return err
	}

	o.UserClaims = s.UserClaims
	o.Username = s.Username

	return nil
}

// Version returns the hardcoded version of the model.
func (o *PrincipalExternal) Version() int {

	return 1
}

// BleveType implements the bleve.Classifier Interface.
func (o *PrincipalExternal) BleveType() string {

	return "principalexternal"
}

// DefaultOrder returns the list of default ordering fields.
func (o *PrincipalExternal) DefaultOrder() []string {

	return []string{}
}

// Doc returns the documentation for the object
func (o *PrincipalExternal) Doc() string {

	return `Describes the principal information of an external request.`
}

func (o *PrincipalExternal) String() string {

	return fmt.Sprintf("<%s:%s>", o.Identity().Name, o.Identifier())
}

// ToSparse returns the sparse version of the model.
// The returned object will only contain the given fields. No field means entire field set.
func (o *PrincipalExternal) ToSparse(fields ...string) elemental.SparseIdentifiable {

	if len(fields) == 0 {
		// nolint: goimports
		return &SparsePrincipalExternal{
			UserClaims: &o.UserClaims,
			Username:   &o.Username,
		}
	}

	sp := &SparsePrincipalExternal{}
	for _, f := range fields {
		switch f {
		case "userClaims":
			sp.UserClaims = &(o.UserClaims)
		case "username":
			sp.Username = &(o.Username)
		}
	}

	return sp
}

// Patch apply the non nil value of a *SparsePrincipalExternal to the object.
func (o *PrincipalExternal) Patch(sparse elemental.SparseIdentifiable) {
	if !sparse.Identity().IsEqual(o.Identity()) {
		panic("cannot patch from a parse with different identity")
	}

	so := sparse.(*SparsePrincipalExternal)
	if so.UserClaims != nil {
		o.UserClaims = *so.UserClaims
	}
	if so.Username != nil {
		o.Username = *so.Username
	}
}

// DeepCopy returns a deep copy if the PrincipalExternal.
func (o *PrincipalExternal) DeepCopy() *PrincipalExternal {

	if o == nil {
		return nil
	}

	out := &PrincipalExternal{}
	o.DeepCopyInto(out)

	return out
}

// DeepCopyInto copies the receiver into the given *PrincipalExternal.
func (o *PrincipalExternal) DeepCopyInto(out *PrincipalExternal) {

	target, err := copystructure.Copy(o)
	if err != nil {
		panic(fmt.Sprintf("Unable to deepcopy PrincipalExternal: %s", err))
	}

	*out = *target.(*PrincipalExternal)
}

// Validate valides the current information stored into the structure.
func (o *PrincipalExternal) Validate() error {

	errors := elemental.Errors{}
	requiredErrors := elemental.Errors{}

	if len(requiredErrors) > 0 {
		return requiredErrors
	}

	if len(errors) > 0 {
		return errors
	}

	return nil
}

// SpecificationForAttribute returns the AttributeSpecification for the given attribute name key.
func (*PrincipalExternal) SpecificationForAttribute(name string) elemental.AttributeSpecification {

	if v, ok := PrincipalExternalAttributesMap[name]; ok {
		return v
	}

	// We could not find it, so let's check on the lower case indexed spec map
	return PrincipalExternalLowerCaseAttributesMap[name]
}

// AttributeSpecifications returns the full attribute specifications map.
func (*PrincipalExternal) AttributeSpecifications() map[string]elemental.AttributeSpecification {

	return PrincipalExternalAttributesMap
}

// ValueForAttribute returns the value for the given attribute.
// This is a very advanced function that you should not need but in some
// very specific use cases.
func (o *PrincipalExternal) ValueForAttribute(name string) any {

	switch name {
	case "userClaims":
		return o.UserClaims
	case "username":
		return o.Username
	}

	return nil
}

// PrincipalExternalAttributesMap represents the map of attribute for PrincipalExternal.
var PrincipalExternalAttributesMap = map[string]elemental.AttributeSpecification{
	"UserClaims": {
		AllowedChoices: []string{},
		BSONFieldName:  "userclaims",
		ConvertedName:  "UserClaims",
		Description: `The optional user claims of the request. This can be an incomplete list, and
claims can be mapped to different keys.`,
		Exposed: true,
		Name:    "userClaims",
		Stored:  true,
		SubType: "string",
		Type:    "list",
	},
	"Username": {
		AllowedChoices: []string{},
		BSONFieldName:  "username",
		ConvertedName:  "Username",
		Description:    `The optional username of the request.`,
		Exposed:        true,
		Name:           "username",
		Stored:         true,
		Type:           "string",
	},
}

// PrincipalExternalLowerCaseAttributesMap represents the map of attribute for PrincipalExternal.
var PrincipalExternalLowerCaseAttributesMap = map[string]elemental.AttributeSpecification{
	"userclaims": {
		AllowedChoices: []string{},
		BSONFieldName:  "userclaims",
		ConvertedName:  "UserClaims",
		Description: `The optional user claims of the request. This can be an incomplete list, and
claims can be mapped to different keys.`,
		Exposed: true,
		Name:    "userClaims",
		Stored:  true,
		SubType: "string",
		Type:    "list",
	},
	"username": {
		AllowedChoices: []string{},
		BSONFieldName:  "username",
		ConvertedName:  "Username",
		Description:    `The optional username of the request.`,
		Exposed:        true,
		Name:           "username",
		Stored:         true,
		Type:           "string",
	},
}

// SparsePrincipalExternalsList represents a list of SparsePrincipalExternals
type SparsePrincipalExternalsList []*SparsePrincipalExternal

// Identity returns the identity of the objects in the list.
func (o SparsePrincipalExternalsList) Identity() elemental.Identity {

	return PrincipalExternalIdentity
}

// Copy returns a pointer to a copy the SparsePrincipalExternalsList.
func (o SparsePrincipalExternalsList) Copy() elemental.Identifiables {

	copy := slices.Clone(o)
	return &copy
}

// Append appends the objects to the a new copy of the SparsePrincipalExternalsList.
func (o SparsePrincipalExternalsList) Append(objects ...elemental.Identifiable) elemental.Identifiables {

	out := slices.Clone(o)
	for _, obj := range objects {
		out = append(out, obj.(*SparsePrincipalExternal))
	}

	return out
}

// List converts the object to an elemental.IdentifiablesList.
func (o SparsePrincipalExternalsList) List() elemental.IdentifiablesList {

	out := make(elemental.IdentifiablesList, len(o))
	for i := range len(o) {
		out[i] = o[i]
	}

	return out
}

// DefaultOrder returns the default ordering fields of the content.
func (o SparsePrincipalExternalsList) DefaultOrder() []string {

	return []string{}
}

// ToPlain returns the SparsePrincipalExternalsList converted to PrincipalExternalsList.
func (o SparsePrincipalExternalsList) ToPlain() elemental.IdentifiablesList {

	out := make(elemental.IdentifiablesList, len(o))
	for i := range len(o) {
		out[i] = o[i].ToPlain()
	}

	return out
}

// Version returns the version of the content.
func (o SparsePrincipalExternalsList) Version() int {

	return 1
}

// SparsePrincipalExternal represents the sparse version of a principalexternal.
type SparsePrincipalExternal struct {
	// The optional user claims of the request. This can be an incomplete list, and
	// claims can be mapped to different keys.
	UserClaims *[]string `json:"userClaims,omitempty" msgpack:"userClaims,omitempty" bson:"userclaims,omitempty" mapstructure:"userClaims,omitempty"`

	// The optional username of the request.
	Username *string `json:"username,omitempty" msgpack:"username,omitempty" bson:"username,omitempty" mapstructure:"username,omitempty"`

	ModelVersion int `json:"-" msgpack:"-" bson:"_modelversion"`
}

// NewSparsePrincipalExternal returns a new  SparsePrincipalExternal.
func NewSparsePrincipalExternal() *SparsePrincipalExternal {
	return &SparsePrincipalExternal{}
}

// Identity returns the Identity of the sparse object.
func (o *SparsePrincipalExternal) Identity() elemental.Identity {

	return PrincipalExternalIdentity
}

// Identifier returns the value of the sparse object's unique identifier.
func (o *SparsePrincipalExternal) Identifier() string {

	return ""
}

// SetIdentifier sets the value of the sparse object's unique identifier.
func (o *SparsePrincipalExternal) SetIdentifier(id string) {

}

// GetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *SparsePrincipalExternal) GetBSON() (any, error) {

	if o == nil {
		return nil, nil
	}

	s := &mongoAttributesSparsePrincipalExternal{}

	if o.UserClaims != nil {
		s.UserClaims = o.UserClaims
	}
	if o.Username != nil {
		s.Username = o.Username
	}

	return s, nil
}

// SetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *SparsePrincipalExternal) SetBSON(raw bson.Raw) error {

	if o == nil {
		return nil
	}

	s := &mongoAttributesSparsePrincipalExternal{}
	if err := raw.Unmarshal(s); err != nil {
		return err
	}

	if s.UserClaims != nil {
		o.UserClaims = s.UserClaims
	}
	if s.Username != nil {
		o.Username = s.Username
	}

	return nil
}

// Version returns the hardcoded version of the model.
func (o *SparsePrincipalExternal) Version() int {

	return 1
}

// ToPlain returns the plain version of the sparse model.
func (o *SparsePrincipalExternal) ToPlain() elemental.PlainIdentifiable {

	out := NewPrincipalExternal()
	if o.UserClaims != nil {
		out.UserClaims = *o.UserClaims
	}
	if o.Username != nil {
		out.Username = *o.Username
	}

	return out
}

// DeepCopy returns a deep copy if the SparsePrincipalExternal.
func (o *SparsePrincipalExternal) DeepCopy() *SparsePrincipalExternal {

	if o == nil {
		return nil
	}

	out := &SparsePrincipalExternal{}
	o.DeepCopyInto(out)

	return out
}

// DeepCopyInto copies the receiver into the given *SparsePrincipalExternal.
func (o *SparsePrincipalExternal) DeepCopyInto(out *SparsePrincipalExternal) {

	target, err := copystructure.Copy(o)
	if err != nil {
		panic(fmt.Sprintf("Unable to deepcopy SparsePrincipalExternal: %s", err))
	}

	*out = *target.(*SparsePrincipalExternal)
}

type mongoAttributesPrincipalExternal struct {
	UserClaims []string `bson:"userclaims,omitempty"`
	Username   string   `bson:"username,omitempty"`
}
type mongoAttributesSparsePrincipalExternal struct {
	UserClaims *[]string `bson:"userclaims,omitempty"`
	Username   *string   `bson:"username,omitempty"`
}
