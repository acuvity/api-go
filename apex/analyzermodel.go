// Code generated by elegen. DO NOT EDIT.
// Source: go.acuvity.ai/elemental (templates/model.gotpl)

package api

import (
	"fmt"

	"github.com/globalsign/mgo/bson"
	"github.com/mitchellh/copystructure"
	"go.acuvity.ai/elemental"
)

// AnalyzerModel represents the model of a analyzermodel
type AnalyzerModel struct {
	// The name of the model.
	Name string `json:"name" msgpack:"name" bson:"-" mapstructure:"name,omitempty"`

	// The revision of the model.
	Revision string `json:"revision" msgpack:"revision" bson:"-" mapstructure:"revision,omitempty"`

	ModelVersion int `json:"-" msgpack:"-" bson:"_modelversion"`
}

// NewAnalyzerModel returns a new *AnalyzerModel
func NewAnalyzerModel() *AnalyzerModel {

	return &AnalyzerModel{
		ModelVersion: 1,
	}
}

// GetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *AnalyzerModel) GetBSON() (any, error) {

	if o == nil {
		return nil, nil
	}

	s := &mongoAttributesAnalyzerModel{}

	return s, nil
}

// SetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *AnalyzerModel) SetBSON(raw bson.Raw) error {

	if o == nil {
		return nil
	}

	s := &mongoAttributesAnalyzerModel{}
	if err := raw.Unmarshal(s); err != nil {
		return err
	}

	return nil
}

// BleveType implements the bleve.Classifier Interface.
func (o *AnalyzerModel) BleveType() string {

	return "analyzermodel"
}

// DeepCopy returns a deep copy if the AnalyzerModel.
func (o *AnalyzerModel) DeepCopy() *AnalyzerModel {

	if o == nil {
		return nil
	}

	out := &AnalyzerModel{}
	o.DeepCopyInto(out)

	return out
}

// DeepCopyInto copies the receiver into the given *AnalyzerModel.
func (o *AnalyzerModel) DeepCopyInto(out *AnalyzerModel) {

	target, err := copystructure.Copy(o)
	if err != nil {
		panic(fmt.Sprintf("Unable to deepcopy AnalyzerModel: %s", err))
	}

	*out = *target.(*AnalyzerModel)
}

// Validate valides the current information stored into the structure.
func (o *AnalyzerModel) Validate() error {

	errors := elemental.Errors{}
	requiredErrors := elemental.Errors{}

	if len(requiredErrors) > 0 {
		return requiredErrors
	}

	if len(errors) > 0 {
		return errors
	}

	return nil
}

// SpecificationForAttribute returns the AttributeSpecification for the given attribute name key.
func (*AnalyzerModel) SpecificationForAttribute(name string) elemental.AttributeSpecification {

	if v, ok := AnalyzerModelAttributesMap[name]; ok {
		return v
	}

	// We could not find it, so let's check on the lower case indexed spec map
	return AnalyzerModelLowerCaseAttributesMap[name]
}

// AttributeSpecifications returns the full attribute specifications map.
func (*AnalyzerModel) AttributeSpecifications() map[string]elemental.AttributeSpecification {

	return AnalyzerModelAttributesMap
}

// ValueForAttribute returns the value for the given attribute.
// This is a very advanced function that you should not need but in some
// very specific use cases.
func (o *AnalyzerModel) ValueForAttribute(name string) any {

	switch name {
	case "name":
		return o.Name
	case "revision":
		return o.Revision
	}

	return nil
}

// AnalyzerModelAttributesMap represents the map of attribute for AnalyzerModel.
var AnalyzerModelAttributesMap = map[string]elemental.AttributeSpecification{
	"Name": {
		AllowedChoices: []string{},
		ConvertedName:  "Name",
		Description:    `The name of the model.`,
		Exposed:        true,
		Name:           "name",
		Type:           "string",
	},
	"Revision": {
		AllowedChoices: []string{},
		ConvertedName:  "Revision",
		Description:    `The revision of the model.`,
		Exposed:        true,
		Name:           "revision",
		Type:           "string",
	},
}

// AnalyzerModelLowerCaseAttributesMap represents the map of attribute for AnalyzerModel.
var AnalyzerModelLowerCaseAttributesMap = map[string]elemental.AttributeSpecification{
	"name": {
		AllowedChoices: []string{},
		ConvertedName:  "Name",
		Description:    `The name of the model.`,
		Exposed:        true,
		Name:           "name",
		Type:           "string",
	},
	"revision": {
		AllowedChoices: []string{},
		ConvertedName:  "Revision",
		Description:    `The revision of the model.`,
		Exposed:        true,
		Name:           "revision",
		Type:           "string",
	},
}

type mongoAttributesAnalyzerModel struct {
}
