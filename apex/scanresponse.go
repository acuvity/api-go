// Code generated by elegen. DO NOT EDIT.
// Source: go.acuvity.ai/elemental (templates/model.gotpl)

package api

import (
	"fmt"
	"slices"
	"time"

	"github.com/globalsign/mgo/bson"
	"github.com/mitchellh/copystructure"
	"go.acuvity.ai/elemental"
)

// ScanResponseDecisionValue represents the possible values for attribute "decision".
type ScanResponseDecisionValue string

const (
	// ScanResponseDecisionAllow represents the value Allow.
	ScanResponseDecisionAllow ScanResponseDecisionValue = "Allow"

	// ScanResponseDecisionAsk represents the value Ask.
	ScanResponseDecisionAsk ScanResponseDecisionValue = "Ask"

	// ScanResponseDecisionBypassed represents the value Bypassed.
	ScanResponseDecisionBypassed ScanResponseDecisionValue = "Bypassed"

	// ScanResponseDecisionDeny represents the value Deny.
	ScanResponseDecisionDeny ScanResponseDecisionValue = "Deny"

	// ScanResponseDecisionForbiddenUser represents the value ForbiddenUser.
	ScanResponseDecisionForbiddenUser ScanResponseDecisionValue = "ForbiddenUser"

	// ScanResponseDecisionSkipped represents the value Skipped.
	ScanResponseDecisionSkipped ScanResponseDecisionValue = "Skipped"
)

// ScanResponseTypeValue represents the possible values for attribute "type".
type ScanResponseTypeValue string

const (
	// ScanResponseTypeInput represents the value Input.
	ScanResponseTypeInput ScanResponseTypeValue = "Input"

	// ScanResponseTypeOutput represents the value Output.
	ScanResponseTypeOutput ScanResponseTypeValue = "Output"
)

// ScanResponseIdentity represents the Identity of the object.
var ScanResponseIdentity = elemental.Identity{
	Name:     "scanresponse",
	Category: "scanresponses",
	Package:  "proxy",
	Private:  false,
}

// ScanResponsesList represents a list of ScanResponses
type ScanResponsesList []*ScanResponse

// Identity returns the identity of the objects in the list.
func (o ScanResponsesList) Identity() elemental.Identity {

	return ScanResponseIdentity
}

// Copy returns a pointer to a copy the ScanResponsesList.
func (o ScanResponsesList) Copy() elemental.Identifiables {

	out := slices.Clone(o)
	return &out
}

// Append appends the objects to the a new copy of the ScanResponsesList.
func (o ScanResponsesList) Append(objects ...elemental.Identifiable) elemental.Identifiables {

	out := slices.Clone(o)
	for _, obj := range objects {
		out = append(out, obj.(*ScanResponse))
	}

	return out
}

// List converts the object to an elemental.IdentifiablesList.
func (o ScanResponsesList) List() elemental.IdentifiablesList {

	out := make(elemental.IdentifiablesList, len(o))
	for i := range len(o) {
		out[i] = o[i]
	}

	return out
}

// DefaultOrder returns the default ordering fields of the content.
func (o ScanResponsesList) DefaultOrder() []string {

	return []string{}
}

// ToSparse returns the ScanResponsesList converted to SparseScanResponsesList.
// Objects in the list will only contain the given fields. No field means entire field set.
func (o ScanResponsesList) ToSparse(fields ...string) elemental.Identifiables {

	out := make(SparseScanResponsesList, len(o))
	for i := range len(o) {
		out[i] = o[i].ToSparse(fields...).(*SparseScanResponse)
	}

	return out
}

// Version returns the version of the content.
func (o ScanResponsesList) Version() int {

	return 1
}

// ScanResponse represents the model of a scanresponse
type ScanResponse struct {
	// ID is the identifier of the object.
	ID string `json:"ID,omitempty" msgpack:"ID,omitempty" bson:"-" mapstructure:"ID,omitempty"`

	// List of alerts that got raised during the policy resolution.
	Alerts []*AlertEvent `json:"alerts,omitempty" msgpack:"alerts,omitempty" bson:"alerts,omitempty" mapstructure:"alerts,omitempty"`

	// Annotations attached to the log.
	Annotations map[string]string `json:"annotations,omitempty" msgpack:"annotations,omitempty" bson:"annotations,omitempty" mapstructure:"annotations,omitempty"`

	// The client used to send the request.
	Client string `json:"client,omitempty" msgpack:"client,omitempty" bson:"client,omitempty" mapstructure:"client,omitempty"`

	// The version of the client used to send the request.
	ClientVersion string `json:"clientVersion,omitempty" msgpack:"clientVersion,omitempty" bson:"clientversion,omitempty" mapstructure:"clientVersion,omitempty"`

	// Tell what was the decision about the data.
	Decision ScanResponseDecisionValue `json:"decision" msgpack:"decision" bson:"decision" mapstructure:"decision,omitempty"`

	// The extractions to log.
	Extractions []*Extraction `json:"extractions,omitempty" msgpack:"extractions,omitempty" bson:"extractions,omitempty" mapstructure:"extractions,omitempty"`

	// The hash of the input.
	Hash string `json:"hash" msgpack:"hash" bson:"hash" mapstructure:"hash,omitempty"`

	// Information about latency of various stage of request and response.
	Latency *Latency `json:"latency,omitempty" msgpack:"latency,omitempty" bson:"latency,omitempty" mapstructure:"latency,omitempty"`

	// If this is an MCP message, then the MCP message details will be set here.
	McpMessage *MCPMessage `json:"mcpMessage,omitempty" msgpack:"mcpMessage,omitempty" bson:"mcpmessage,omitempty" mapstructure:"mcpMessage,omitempty"`

	// The model used by the request.
	Model string `json:"model" msgpack:"model" bson:"model" mapstructure:"model,omitempty"`

	// The namespace of the object.
	Namespace string `json:"namespace,omitempty" msgpack:"namespace,omitempty" bson:"namespace,omitempty" mapstructure:"namespace,omitempty"`

	// The name of the particular pipeline that extracted the text.
	PipelineName string `json:"pipelineName" msgpack:"pipelineName" bson:"pipelinename" mapstructure:"pipelineName,omitempty"`

	// The principal of the object.
	Principal *Principal `json:"principal" msgpack:"principal" bson:"principal" mapstructure:"principal,omitempty"`

	// The provider to use.
	Provider string `json:"provider" msgpack:"provider" bson:"provider" mapstructure:"provider,omitempty"`

	// The various reasons returned by the policy engine.
	Reasons []string `json:"reasons,omitempty" msgpack:"reasons,omitempty" bson:"reasons,omitempty" mapstructure:"reasons,omitempty"`

	// The summary of the extractions.
	Summary *ExtractionSummary `json:"summary,omitempty" msgpack:"summary,omitempty" bson:"summary,omitempty" mapstructure:"summary,omitempty"`

	// Set the time of the message request.
	Time time.Time `json:"time,omitempty" msgpack:"time,omitempty" bson:"-" mapstructure:"time,omitempty"`

	// Tool choice instructions for the model of a request.
	ToolChoice *ToolChoice `json:"toolChoice,omitempty" msgpack:"toolChoice,omitempty" bson:"toolchoice,omitempty" mapstructure:"toolChoice,omitempty"`

	// The various tools used by the request.
	Tools map[string]*Tool `json:"tools,omitempty" msgpack:"tools,omitempty" bson:"tools,omitempty" mapstructure:"tools,omitempty"`

	// References to the trace of the request.
	Trace *TraceRef `json:"trace" msgpack:"trace" bson:"trace" mapstructure:"trace,omitempty"`

	// The type of text.
	Type ScanResponseTypeValue `json:"type" msgpack:"type" bson:"type" mapstructure:"type,omitempty"`

	ModelVersion int `json:"-" msgpack:"-" bson:"_modelversion"`
}

// NewScanResponse returns a new *ScanResponse
func NewScanResponse() *ScanResponse {

	return &ScanResponse{
		ModelVersion: 1,
		Annotations:  map[string]string{},
		Principal:    NewPrincipal(),
	}
}

// Identity returns the Identity of the object.
func (o *ScanResponse) Identity() elemental.Identity {

	return ScanResponseIdentity
}

// Identifier returns the value of the object's unique identifier.
func (o *ScanResponse) Identifier() string {

	return o.ID
}

// SetIdentifier sets the value of the object's unique identifier.
func (o *ScanResponse) SetIdentifier(id string) {

	o.ID = id
}

// GetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *ScanResponse) GetBSON() (any, error) {

	if o == nil {
		return nil, nil
	}

	s := &mongoAttributesScanResponse{}

	if o.ID != "" {
		s.ID = bson.ObjectIdHex(o.ID)
	}
	s.Alerts = o.Alerts
	s.Annotations = o.Annotations
	s.Client = o.Client
	s.ClientVersion = o.ClientVersion
	s.Decision = o.Decision
	s.Extractions = o.Extractions
	s.Hash = o.Hash
	s.Latency = o.Latency
	s.McpMessage = o.McpMessage
	s.Model = o.Model
	s.Namespace = o.Namespace
	s.PipelineName = o.PipelineName
	s.Principal = o.Principal
	s.Provider = o.Provider
	s.Reasons = o.Reasons
	s.Summary = o.Summary
	s.ToolChoice = o.ToolChoice
	s.Tools = o.Tools
	s.Trace = o.Trace
	s.Type = o.Type

	return s, nil
}

// SetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *ScanResponse) SetBSON(raw bson.Raw) error {

	if o == nil {
		return nil
	}

	s := &mongoAttributesScanResponse{}
	if err := raw.Unmarshal(s); err != nil {
		return err
	}

	o.ID = s.ID.Hex()
	o.Alerts = s.Alerts
	o.Annotations = s.Annotations
	o.Client = s.Client
	o.ClientVersion = s.ClientVersion
	o.Decision = s.Decision
	o.Extractions = s.Extractions
	o.Hash = s.Hash
	o.Latency = s.Latency
	o.McpMessage = s.McpMessage
	o.Model = s.Model
	o.Namespace = s.Namespace
	o.PipelineName = s.PipelineName
	o.Principal = s.Principal
	o.Provider = s.Provider
	o.Reasons = s.Reasons
	o.Summary = s.Summary
	o.ToolChoice = s.ToolChoice
	o.Tools = s.Tools
	o.Trace = s.Trace
	o.Type = s.Type

	return nil
}

// Version returns the hardcoded version of the model.
func (o *ScanResponse) Version() int {

	return 1
}

// BleveType implements the bleve.Classifier Interface.
func (o *ScanResponse) BleveType() string {

	return "scanresponse"
}

// DefaultOrder returns the list of default ordering fields.
func (o *ScanResponse) DefaultOrder() []string {

	return []string{}
}

// Doc returns the documentation for the object
func (o *ScanResponse) Doc() string {

	return `This is a scan response.`
}

func (o *ScanResponse) String() string {

	return fmt.Sprintf("<%s:%s>", o.Identity().Name, o.Identifier())
}

// GetNamespace returns the Namespace of the receiver.
func (o *ScanResponse) GetNamespace() string {

	return o.Namespace
}

// SetNamespace sets the property Namespace of the receiver using the given value.
func (o *ScanResponse) SetNamespace(namespace string) {

	o.Namespace = namespace
}

// ToSparse returns the sparse version of the model.
// The returned object will only contain the given fields. No field means entire field set.
func (o *ScanResponse) ToSparse(fields ...string) elemental.SparseIdentifiable {

	if len(fields) == 0 {
		// nolint: goimports
		return &SparseScanResponse{
			ID:            &o.ID,
			Alerts:        &o.Alerts,
			Annotations:   &o.Annotations,
			Client:        &o.Client,
			ClientVersion: &o.ClientVersion,
			Decision:      &o.Decision,
			Extractions:   &o.Extractions,
			Hash:          &o.Hash,
			Latency:       o.Latency,
			McpMessage:    o.McpMessage,
			Model:         &o.Model,
			Namespace:     &o.Namespace,
			PipelineName:  &o.PipelineName,
			Principal:     o.Principal,
			Provider:      &o.Provider,
			Reasons:       &o.Reasons,
			Summary:       o.Summary,
			Time:          &o.Time,
			ToolChoice:    o.ToolChoice,
			Tools:         &o.Tools,
			Trace:         o.Trace,
			Type:          &o.Type,
		}
	}

	sp := &SparseScanResponse{}
	for _, f := range fields {
		switch f {
		case "ID":
			sp.ID = &(o.ID)
		case "alerts":
			sp.Alerts = &(o.Alerts)
		case "annotations":
			sp.Annotations = &(o.Annotations)
		case "client":
			sp.Client = &(o.Client)
		case "clientVersion":
			sp.ClientVersion = &(o.ClientVersion)
		case "decision":
			sp.Decision = &(o.Decision)
		case "extractions":
			sp.Extractions = &(o.Extractions)
		case "hash":
			sp.Hash = &(o.Hash)
		case "latency":
			sp.Latency = o.Latency
		case "mcpMessage":
			sp.McpMessage = o.McpMessage
		case "model":
			sp.Model = &(o.Model)
		case "namespace":
			sp.Namespace = &(o.Namespace)
		case "pipelineName":
			sp.PipelineName = &(o.PipelineName)
		case "principal":
			sp.Principal = o.Principal
		case "provider":
			sp.Provider = &(o.Provider)
		case "reasons":
			sp.Reasons = &(o.Reasons)
		case "summary":
			sp.Summary = o.Summary
		case "time":
			sp.Time = &(o.Time)
		case "toolChoice":
			sp.ToolChoice = o.ToolChoice
		case "tools":
			sp.Tools = &(o.Tools)
		case "trace":
			sp.Trace = o.Trace
		case "type":
			sp.Type = &(o.Type)
		}
	}

	return sp
}

// Patch apply the non nil value of a *SparseScanResponse to the object.
func (o *ScanResponse) Patch(sparse elemental.SparseIdentifiable) {
	if !sparse.Identity().IsEqual(o.Identity()) {
		panic("cannot patch from a parse with different identity")
	}

	so := sparse.(*SparseScanResponse)
	if so.ID != nil {
		o.ID = *so.ID
	}
	if so.Alerts != nil {
		o.Alerts = *so.Alerts
	}
	if so.Annotations != nil {
		o.Annotations = *so.Annotations
	}
	if so.Client != nil {
		o.Client = *so.Client
	}
	if so.ClientVersion != nil {
		o.ClientVersion = *so.ClientVersion
	}
	if so.Decision != nil {
		o.Decision = *so.Decision
	}
	if so.Extractions != nil {
		o.Extractions = *so.Extractions
	}
	if so.Hash != nil {
		o.Hash = *so.Hash
	}
	if so.Latency != nil {
		o.Latency = so.Latency
	}
	if so.McpMessage != nil {
		o.McpMessage = so.McpMessage
	}
	if so.Model != nil {
		o.Model = *so.Model
	}
	if so.Namespace != nil {
		o.Namespace = *so.Namespace
	}
	if so.PipelineName != nil {
		o.PipelineName = *so.PipelineName
	}
	if so.Principal != nil {
		o.Principal = so.Principal
	}
	if so.Provider != nil {
		o.Provider = *so.Provider
	}
	if so.Reasons != nil {
		o.Reasons = *so.Reasons
	}
	if so.Summary != nil {
		o.Summary = so.Summary
	}
	if so.Time != nil {
		o.Time = *so.Time
	}
	if so.ToolChoice != nil {
		o.ToolChoice = so.ToolChoice
	}
	if so.Tools != nil {
		o.Tools = *so.Tools
	}
	if so.Trace != nil {
		o.Trace = so.Trace
	}
	if so.Type != nil {
		o.Type = *so.Type
	}
}

// DeepCopy returns a deep copy if the ScanResponse.
func (o *ScanResponse) DeepCopy() *ScanResponse {

	if o == nil {
		return nil
	}

	out := &ScanResponse{}
	o.DeepCopyInto(out)

	return out
}

// DeepCopyInto copies the receiver into the given *ScanResponse.
func (o *ScanResponse) DeepCopyInto(out *ScanResponse) {

	target, err := copystructure.Copy(o)
	if err != nil {
		panic(fmt.Sprintf("Unable to deepcopy ScanResponse: %s", err))
	}

	*out = *target.(*ScanResponse)
}

// Validate valides the current information stored into the structure.
func (o *ScanResponse) Validate() error {

	errors := elemental.Errors{}
	requiredErrors := elemental.Errors{}

	for _, sub := range o.Alerts {
		if sub == nil {
			continue
		}
		elemental.ResetDefaultForZeroValues(sub)
		if err := sub.Validate(); err != nil {
			errors = errors.Append(err)
		}
	}

	if err := elemental.ValidateStringInList("decision", string(o.Decision), []string{"Deny", "Allow", "Ask", "Bypassed", "ForbiddenUser", "Skipped"}, false); err != nil {
		errors = errors.Append(err)
	}

	for _, sub := range o.Extractions {
		if sub == nil {
			continue
		}
		elemental.ResetDefaultForZeroValues(sub)
		if err := sub.Validate(); err != nil {
			errors = errors.Append(err)
		}
	}

	if o.Latency != nil {
		elemental.ResetDefaultForZeroValues(o.Latency)
		if err := o.Latency.Validate(); err != nil {
			errors = errors.Append(err)
		}
	}

	if o.McpMessage != nil {
		elemental.ResetDefaultForZeroValues(o.McpMessage)
		if err := o.McpMessage.Validate(); err != nil {
			errors = errors.Append(err)
		}
	}

	if o.Principal != nil {
		elemental.ResetDefaultForZeroValues(o.Principal)
		if err := o.Principal.Validate(); err != nil {
			errors = errors.Append(err)
		}
	}

	if o.Summary != nil {
		elemental.ResetDefaultForZeroValues(o.Summary)
		if err := o.Summary.Validate(); err != nil {
			errors = errors.Append(err)
		}
	}

	if o.ToolChoice != nil {
		elemental.ResetDefaultForZeroValues(o.ToolChoice)
		if err := o.ToolChoice.Validate(); err != nil {
			errors = errors.Append(err)
		}
	}

	for _, sub := range o.Tools {
		if sub == nil {
			continue
		}
		elemental.ResetDefaultForZeroValues(sub)
		if err := sub.Validate(); err != nil {
			errors = errors.Append(err)
		}
	}

	if o.Trace != nil {
		elemental.ResetDefaultForZeroValues(o.Trace)
		if err := o.Trace.Validate(); err != nil {
			errors = errors.Append(err)
		}
	}

	if err := elemental.ValidateStringInList("type", string(o.Type), []string{"Input", "Output"}, false); err != nil {
		errors = errors.Append(err)
	}

	if len(requiredErrors) > 0 {
		return requiredErrors
	}

	if len(errors) > 0 {
		return errors
	}

	return nil
}

// SpecificationForAttribute returns the AttributeSpecification for the given attribute name key.
func (*ScanResponse) SpecificationForAttribute(name string) elemental.AttributeSpecification {

	if v, ok := ScanResponseAttributesMap[name]; ok {
		return v
	}

	// We could not find it, so let's check on the lower case indexed spec map
	return ScanResponseLowerCaseAttributesMap[name]
}

// AttributeSpecifications returns the full attribute specifications map.
func (*ScanResponse) AttributeSpecifications() map[string]elemental.AttributeSpecification {

	return ScanResponseAttributesMap
}

// ValueForAttribute returns the value for the given attribute.
// This is a very advanced function that you should not need but in some
// very specific use cases.
func (o *ScanResponse) ValueForAttribute(name string) any {

	switch name {
	case "ID":
		return o.ID
	case "alerts":
		return o.Alerts
	case "annotations":
		return o.Annotations
	case "client":
		return o.Client
	case "clientVersion":
		return o.ClientVersion
	case "decision":
		return o.Decision
	case "extractions":
		return o.Extractions
	case "hash":
		return o.Hash
	case "latency":
		return o.Latency
	case "mcpMessage":
		return o.McpMessage
	case "model":
		return o.Model
	case "namespace":
		return o.Namespace
	case "pipelineName":
		return o.PipelineName
	case "principal":
		return o.Principal
	case "provider":
		return o.Provider
	case "reasons":
		return o.Reasons
	case "summary":
		return o.Summary
	case "time":
		return o.Time
	case "toolChoice":
		return o.ToolChoice
	case "tools":
		return o.Tools
	case "trace":
		return o.Trace
	case "type":
		return o.Type
	}

	return nil
}

// ScanResponseAttributesMap represents the map of attribute for ScanResponse.
var ScanResponseAttributesMap = map[string]elemental.AttributeSpecification{
	"ID": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "_id",
		ConvertedName:  "ID",
		Description:    `ID is the identifier of the object.`,
		Exposed:        true,
		Filterable:     true,
		Identifier:     true,
		Name:           "ID",
		Orderable:      true,
		ReadOnly:       true,
		Stored:         true,
		Type:           "string",
	},
	"Alerts": {
		AllowedChoices: []string{},
		BSONFieldName:  "alerts",
		ConvertedName:  "Alerts",
		Description:    `List of alerts that got raised during the policy resolution.`,
		Exposed:        true,
		Name:           "alerts",
		Stored:         true,
		SubType:        "alertevent",
		Type:           "refList",
	},
	"Annotations": {
		AllowedChoices: []string{},
		BSONFieldName:  "annotations",
		ConvertedName:  "Annotations",
		Description:    `Annotations attached to the log.`,
		Exposed:        true,
		Name:           "annotations",
		Stored:         true,
		SubType:        "map[string]string",
		Type:           "external",
	},
	"Client": {
		AllowedChoices: []string{},
		BSONFieldName:  "client",
		ConvertedName:  "Client",
		Description:    `The client used to send the request.`,
		Exposed:        true,
		Name:           "client",
		Stored:         true,
		Type:           "string",
	},
	"ClientVersion": {
		AllowedChoices: []string{},
		BSONFieldName:  "clientversion",
		ConvertedName:  "ClientVersion",
		Description:    `The version of the client used to send the request.`,
		Exposed:        true,
		Name:           "clientVersion",
		Stored:         true,
		Type:           "string",
	},
	"Decision": {
		AllowedChoices: []string{"Deny", "Allow", "Ask", "Bypassed", "ForbiddenUser", "Skipped"},
		BSONFieldName:  "decision",
		ConvertedName:  "Decision",
		Description:    `Tell what was the decision about the data.`,
		Exposed:        true,
		Name:           "decision",
		Stored:         true,
		Type:           "enum",
	},
	"Extractions": {
		AllowedChoices: []string{},
		BSONFieldName:  "extractions",
		ConvertedName:  "Extractions",
		Description:    `The extractions to log.`,
		Exposed:        true,
		Name:           "extractions",
		Stored:         true,
		SubType:        "extraction",
		Type:           "refList",
	},
	"Hash": {
		AllowedChoices: []string{},
		BSONFieldName:  "hash",
		ConvertedName:  "Hash",
		Description:    `The hash of the input.`,
		Exposed:        true,
		Name:           "hash",
		Stored:         true,
		Type:           "string",
	},
	"Latency": {
		AllowedChoices: []string{},
		BSONFieldName:  "latency",
		ConvertedName:  "Latency",
		Description:    `Information about latency of various stage of request and response.`,
		Exposed:        true,
		Name:           "latency",
		Stored:         true,
		SubType:        "latency",
		Type:           "ref",
	},
	"McpMessage": {
		AllowedChoices: []string{},
		BSONFieldName:  "mcpmessage",
		ConvertedName:  "McpMessage",
		Description:    `If this is an MCP message, then the MCP message details will be set here.`,
		Exposed:        true,
		Name:           "mcpMessage",
		Stored:         true,
		SubType:        "mcpmessage",
		Type:           "ref",
	},
	"Model": {
		AllowedChoices: []string{},
		BSONFieldName:  "model",
		ConvertedName:  "Model",
		Description:    `The model used by the request.`,
		Exposed:        true,
		Name:           "model",
		Stored:         true,
		Type:           "string",
	},
	"Namespace": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "namespace",
		ConvertedName:  "Namespace",
		Description:    `The namespace of the object.`,
		Exposed:        true,
		Getter:         true,
		Name:           "namespace",
		Orderable:      true,
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Type:           "string",
	},
	"PipelineName": {
		AllowedChoices: []string{},
		BSONFieldName:  "pipelinename",
		ConvertedName:  "PipelineName",
		Description:    `The name of the particular pipeline that extracted the text.`,
		Exposed:        true,
		Name:           "pipelineName",
		Stored:         true,
		Type:           "string",
	},
	"Principal": {
		AllowedChoices: []string{},
		BSONFieldName:  "principal",
		ConvertedName:  "Principal",
		Description:    `The principal of the object.`,
		Exposed:        true,
		Name:           "principal",
		Required:       true,
		Stored:         true,
		SubType:        "principal",
		Type:           "ref",
	},
	"Provider": {
		AllowedChoices: []string{},
		BSONFieldName:  "provider",
		ConvertedName:  "Provider",
		Description:    `The provider to use.`,
		Exposed:        true,
		Name:           "provider",
		Stored:         true,
		Type:           "string",
	},
	"Reasons": {
		AllowedChoices: []string{},
		BSONFieldName:  "reasons",
		ConvertedName:  "Reasons",
		Description:    `The various reasons returned by the policy engine.`,
		Exposed:        true,
		Name:           "reasons",
		Stored:         true,
		SubType:        "string",
		Type:           "list",
	},
	"Summary": {
		AllowedChoices: []string{},
		BSONFieldName:  "summary",
		ConvertedName:  "Summary",
		Description:    `The summary of the extractions.`,
		Exposed:        true,
		Name:           "summary",
		Stored:         true,
		SubType:        "extractionsummary",
		Type:           "ref",
	},
	"Time": {
		AllowedChoices: []string{},
		ConvertedName:  "Time",
		Description:    `Set the time of the message request.`,
		Exposed:        true,
		Name:           "time",
		Type:           "time",
	},
	"ToolChoice": {
		AllowedChoices: []string{},
		BSONFieldName:  "toolchoice",
		ConvertedName:  "ToolChoice",
		Description:    `Tool choice instructions for the model of a request.`,
		Exposed:        true,
		Name:           "toolChoice",
		Stored:         true,
		SubType:        "toolchoice",
		Type:           "ref",
	},
	"Tools": {
		AllowedChoices: []string{},
		BSONFieldName:  "tools",
		ConvertedName:  "Tools",
		Description:    `The various tools used by the request.`,
		Exposed:        true,
		Name:           "tools",
		Stored:         true,
		SubType:        "tool",
		Type:           "refMap",
	},
	"Trace": {
		AllowedChoices: []string{},
		BSONFieldName:  "trace",
		ConvertedName:  "Trace",
		Description:    `References to the trace of the request.`,
		Exposed:        true,
		Name:           "trace",
		Stored:         true,
		SubType:        "traceref",
		Type:           "ref",
	},
	"Type": {
		AllowedChoices: []string{"Input", "Output"},
		BSONFieldName:  "type",
		ConvertedName:  "Type",
		Description:    `The type of text.`,
		Exposed:        true,
		Name:           "type",
		Stored:         true,
		Type:           "enum",
	},
}

// ScanResponseLowerCaseAttributesMap represents the map of attribute for ScanResponse.
var ScanResponseLowerCaseAttributesMap = map[string]elemental.AttributeSpecification{
	"id": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "_id",
		ConvertedName:  "ID",
		Description:    `ID is the identifier of the object.`,
		Exposed:        true,
		Filterable:     true,
		Identifier:     true,
		Name:           "ID",
		Orderable:      true,
		ReadOnly:       true,
		Stored:         true,
		Type:           "string",
	},
	"alerts": {
		AllowedChoices: []string{},
		BSONFieldName:  "alerts",
		ConvertedName:  "Alerts",
		Description:    `List of alerts that got raised during the policy resolution.`,
		Exposed:        true,
		Name:           "alerts",
		Stored:         true,
		SubType:        "alertevent",
		Type:           "refList",
	},
	"annotations": {
		AllowedChoices: []string{},
		BSONFieldName:  "annotations",
		ConvertedName:  "Annotations",
		Description:    `Annotations attached to the log.`,
		Exposed:        true,
		Name:           "annotations",
		Stored:         true,
		SubType:        "map[string]string",
		Type:           "external",
	},
	"client": {
		AllowedChoices: []string{},
		BSONFieldName:  "client",
		ConvertedName:  "Client",
		Description:    `The client used to send the request.`,
		Exposed:        true,
		Name:           "client",
		Stored:         true,
		Type:           "string",
	},
	"clientversion": {
		AllowedChoices: []string{},
		BSONFieldName:  "clientversion",
		ConvertedName:  "ClientVersion",
		Description:    `The version of the client used to send the request.`,
		Exposed:        true,
		Name:           "clientVersion",
		Stored:         true,
		Type:           "string",
	},
	"decision": {
		AllowedChoices: []string{"Deny", "Allow", "Ask", "Bypassed", "ForbiddenUser", "Skipped"},
		BSONFieldName:  "decision",
		ConvertedName:  "Decision",
		Description:    `Tell what was the decision about the data.`,
		Exposed:        true,
		Name:           "decision",
		Stored:         true,
		Type:           "enum",
	},
	"extractions": {
		AllowedChoices: []string{},
		BSONFieldName:  "extractions",
		ConvertedName:  "Extractions",
		Description:    `The extractions to log.`,
		Exposed:        true,
		Name:           "extractions",
		Stored:         true,
		SubType:        "extraction",
		Type:           "refList",
	},
	"hash": {
		AllowedChoices: []string{},
		BSONFieldName:  "hash",
		ConvertedName:  "Hash",
		Description:    `The hash of the input.`,
		Exposed:        true,
		Name:           "hash",
		Stored:         true,
		Type:           "string",
	},
	"latency": {
		AllowedChoices: []string{},
		BSONFieldName:  "latency",
		ConvertedName:  "Latency",
		Description:    `Information about latency of various stage of request and response.`,
		Exposed:        true,
		Name:           "latency",
		Stored:         true,
		SubType:        "latency",
		Type:           "ref",
	},
	"mcpmessage": {
		AllowedChoices: []string{},
		BSONFieldName:  "mcpmessage",
		ConvertedName:  "McpMessage",
		Description:    `If this is an MCP message, then the MCP message details will be set here.`,
		Exposed:        true,
		Name:           "mcpMessage",
		Stored:         true,
		SubType:        "mcpmessage",
		Type:           "ref",
	},
	"model": {
		AllowedChoices: []string{},
		BSONFieldName:  "model",
		ConvertedName:  "Model",
		Description:    `The model used by the request.`,
		Exposed:        true,
		Name:           "model",
		Stored:         true,
		Type:           "string",
	},
	"namespace": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "namespace",
		ConvertedName:  "Namespace",
		Description:    `The namespace of the object.`,
		Exposed:        true,
		Getter:         true,
		Name:           "namespace",
		Orderable:      true,
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Type:           "string",
	},
	"pipelinename": {
		AllowedChoices: []string{},
		BSONFieldName:  "pipelinename",
		ConvertedName:  "PipelineName",
		Description:    `The name of the particular pipeline that extracted the text.`,
		Exposed:        true,
		Name:           "pipelineName",
		Stored:         true,
		Type:           "string",
	},
	"principal": {
		AllowedChoices: []string{},
		BSONFieldName:  "principal",
		ConvertedName:  "Principal",
		Description:    `The principal of the object.`,
		Exposed:        true,
		Name:           "principal",
		Required:       true,
		Stored:         true,
		SubType:        "principal",
		Type:           "ref",
	},
	"provider": {
		AllowedChoices: []string{},
		BSONFieldName:  "provider",
		ConvertedName:  "Provider",
		Description:    `The provider to use.`,
		Exposed:        true,
		Name:           "provider",
		Stored:         true,
		Type:           "string",
	},
	"reasons": {
		AllowedChoices: []string{},
		BSONFieldName:  "reasons",
		ConvertedName:  "Reasons",
		Description:    `The various reasons returned by the policy engine.`,
		Exposed:        true,
		Name:           "reasons",
		Stored:         true,
		SubType:        "string",
		Type:           "list",
	},
	"summary": {
		AllowedChoices: []string{},
		BSONFieldName:  "summary",
		ConvertedName:  "Summary",
		Description:    `The summary of the extractions.`,
		Exposed:        true,
		Name:           "summary",
		Stored:         true,
		SubType:        "extractionsummary",
		Type:           "ref",
	},
	"time": {
		AllowedChoices: []string{},
		ConvertedName:  "Time",
		Description:    `Set the time of the message request.`,
		Exposed:        true,
		Name:           "time",
		Type:           "time",
	},
	"toolchoice": {
		AllowedChoices: []string{},
		BSONFieldName:  "toolchoice",
		ConvertedName:  "ToolChoice",
		Description:    `Tool choice instructions for the model of a request.`,
		Exposed:        true,
		Name:           "toolChoice",
		Stored:         true,
		SubType:        "toolchoice",
		Type:           "ref",
	},
	"tools": {
		AllowedChoices: []string{},
		BSONFieldName:  "tools",
		ConvertedName:  "Tools",
		Description:    `The various tools used by the request.`,
		Exposed:        true,
		Name:           "tools",
		Stored:         true,
		SubType:        "tool",
		Type:           "refMap",
	},
	"trace": {
		AllowedChoices: []string{},
		BSONFieldName:  "trace",
		ConvertedName:  "Trace",
		Description:    `References to the trace of the request.`,
		Exposed:        true,
		Name:           "trace",
		Stored:         true,
		SubType:        "traceref",
		Type:           "ref",
	},
	"type": {
		AllowedChoices: []string{"Input", "Output"},
		BSONFieldName:  "type",
		ConvertedName:  "Type",
		Description:    `The type of text.`,
		Exposed:        true,
		Name:           "type",
		Stored:         true,
		Type:           "enum",
	},
}

// SparseScanResponsesList represents a list of SparseScanResponses
type SparseScanResponsesList []*SparseScanResponse

// Identity returns the identity of the objects in the list.
func (o SparseScanResponsesList) Identity() elemental.Identity {

	return ScanResponseIdentity
}

// Copy returns a pointer to a copy the SparseScanResponsesList.
func (o SparseScanResponsesList) Copy() elemental.Identifiables {

	copy := slices.Clone(o)
	return &copy
}

// Append appends the objects to the a new copy of the SparseScanResponsesList.
func (o SparseScanResponsesList) Append(objects ...elemental.Identifiable) elemental.Identifiables {

	out := slices.Clone(o)
	for _, obj := range objects {
		out = append(out, obj.(*SparseScanResponse))
	}

	return out
}

// List converts the object to an elemental.IdentifiablesList.
func (o SparseScanResponsesList) List() elemental.IdentifiablesList {

	out := make(elemental.IdentifiablesList, len(o))
	for i := range len(o) {
		out[i] = o[i]
	}

	return out
}

// DefaultOrder returns the default ordering fields of the content.
func (o SparseScanResponsesList) DefaultOrder() []string {

	return []string{}
}

// ToPlain returns the SparseScanResponsesList converted to ScanResponsesList.
func (o SparseScanResponsesList) ToPlain() elemental.IdentifiablesList {

	out := make(elemental.IdentifiablesList, len(o))
	for i := range len(o) {
		out[i] = o[i].ToPlain()
	}

	return out
}

// Version returns the version of the content.
func (o SparseScanResponsesList) Version() int {

	return 1
}

// SparseScanResponse represents the sparse version of a scanresponse.
type SparseScanResponse struct {
	// ID is the identifier of the object.
	ID *string `json:"ID,omitempty" msgpack:"ID,omitempty" bson:"-" mapstructure:"ID,omitempty"`

	// List of alerts that got raised during the policy resolution.
	Alerts *[]*AlertEvent `json:"alerts,omitempty" msgpack:"alerts,omitempty" bson:"alerts,omitempty" mapstructure:"alerts,omitempty"`

	// Annotations attached to the log.
	Annotations *map[string]string `json:"annotations,omitempty" msgpack:"annotations,omitempty" bson:"annotations,omitempty" mapstructure:"annotations,omitempty"`

	// The client used to send the request.
	Client *string `json:"client,omitempty" msgpack:"client,omitempty" bson:"client,omitempty" mapstructure:"client,omitempty"`

	// The version of the client used to send the request.
	ClientVersion *string `json:"clientVersion,omitempty" msgpack:"clientVersion,omitempty" bson:"clientversion,omitempty" mapstructure:"clientVersion,omitempty"`

	// Tell what was the decision about the data.
	Decision *ScanResponseDecisionValue `json:"decision,omitempty" msgpack:"decision,omitempty" bson:"decision,omitempty" mapstructure:"decision,omitempty"`

	// The extractions to log.
	Extractions *[]*Extraction `json:"extractions,omitempty" msgpack:"extractions,omitempty" bson:"extractions,omitempty" mapstructure:"extractions,omitempty"`

	// The hash of the input.
	Hash *string `json:"hash,omitempty" msgpack:"hash,omitempty" bson:"hash,omitempty" mapstructure:"hash,omitempty"`

	// Information about latency of various stage of request and response.
	Latency *Latency `json:"latency,omitempty" msgpack:"latency,omitempty" bson:"latency,omitempty" mapstructure:"latency,omitempty"`

	// If this is an MCP message, then the MCP message details will be set here.
	McpMessage *MCPMessage `json:"mcpMessage,omitempty" msgpack:"mcpMessage,omitempty" bson:"mcpmessage,omitempty" mapstructure:"mcpMessage,omitempty"`

	// The model used by the request.
	Model *string `json:"model,omitempty" msgpack:"model,omitempty" bson:"model,omitempty" mapstructure:"model,omitempty"`

	// The namespace of the object.
	Namespace *string `json:"namespace,omitempty" msgpack:"namespace,omitempty" bson:"namespace,omitempty" mapstructure:"namespace,omitempty"`

	// The name of the particular pipeline that extracted the text.
	PipelineName *string `json:"pipelineName,omitempty" msgpack:"pipelineName,omitempty" bson:"pipelinename,omitempty" mapstructure:"pipelineName,omitempty"`

	// The principal of the object.
	Principal *Principal `json:"principal,omitempty" msgpack:"principal,omitempty" bson:"principal,omitempty" mapstructure:"principal,omitempty"`

	// The provider to use.
	Provider *string `json:"provider,omitempty" msgpack:"provider,omitempty" bson:"provider,omitempty" mapstructure:"provider,omitempty"`

	// The various reasons returned by the policy engine.
	Reasons *[]string `json:"reasons,omitempty" msgpack:"reasons,omitempty" bson:"reasons,omitempty" mapstructure:"reasons,omitempty"`

	// The summary of the extractions.
	Summary *ExtractionSummary `json:"summary,omitempty" msgpack:"summary,omitempty" bson:"summary,omitempty" mapstructure:"summary,omitempty"`

	// Set the time of the message request.
	Time *time.Time `json:"time,omitempty" msgpack:"time,omitempty" bson:"-" mapstructure:"time,omitempty"`

	// Tool choice instructions for the model of a request.
	ToolChoice *ToolChoice `json:"toolChoice,omitempty" msgpack:"toolChoice,omitempty" bson:"toolchoice,omitempty" mapstructure:"toolChoice,omitempty"`

	// The various tools used by the request.
	Tools *map[string]*Tool `json:"tools,omitempty" msgpack:"tools,omitempty" bson:"tools,omitempty" mapstructure:"tools,omitempty"`

	// References to the trace of the request.
	Trace *TraceRef `json:"trace,omitempty" msgpack:"trace,omitempty" bson:"trace,omitempty" mapstructure:"trace,omitempty"`

	// The type of text.
	Type *ScanResponseTypeValue `json:"type,omitempty" msgpack:"type,omitempty" bson:"type,omitempty" mapstructure:"type,omitempty"`

	ModelVersion int `json:"-" msgpack:"-" bson:"_modelversion"`
}

// NewSparseScanResponse returns a new  SparseScanResponse.
func NewSparseScanResponse() *SparseScanResponse {
	return &SparseScanResponse{}
}

// Identity returns the Identity of the sparse object.
func (o *SparseScanResponse) Identity() elemental.Identity {

	return ScanResponseIdentity
}

// Identifier returns the value of the sparse object's unique identifier.
func (o *SparseScanResponse) Identifier() string {

	if o.ID == nil {
		return ""
	}
	return *o.ID
}

// SetIdentifier sets the value of the sparse object's unique identifier.
func (o *SparseScanResponse) SetIdentifier(id string) {

	if id != "" {
		o.ID = &id
	} else {
		o.ID = nil
	}
}

// GetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *SparseScanResponse) GetBSON() (any, error) {

	if o == nil {
		return nil, nil
	}

	s := &mongoAttributesSparseScanResponse{}

	if o.ID != nil {
		s.ID = bson.ObjectIdHex(*o.ID)
	}
	if o.Alerts != nil {
		s.Alerts = o.Alerts
	}
	if o.Annotations != nil {
		s.Annotations = o.Annotations
	}
	if o.Client != nil {
		s.Client = o.Client
	}
	if o.ClientVersion != nil {
		s.ClientVersion = o.ClientVersion
	}
	if o.Decision != nil {
		s.Decision = o.Decision
	}
	if o.Extractions != nil {
		s.Extractions = o.Extractions
	}
	if o.Hash != nil {
		s.Hash = o.Hash
	}
	if o.Latency != nil {
		s.Latency = o.Latency
	}
	if o.McpMessage != nil {
		s.McpMessage = o.McpMessage
	}
	if o.Model != nil {
		s.Model = o.Model
	}
	if o.Namespace != nil {
		s.Namespace = o.Namespace
	}
	if o.PipelineName != nil {
		s.PipelineName = o.PipelineName
	}
	if o.Principal != nil {
		s.Principal = o.Principal
	}
	if o.Provider != nil {
		s.Provider = o.Provider
	}
	if o.Reasons != nil {
		s.Reasons = o.Reasons
	}
	if o.Summary != nil {
		s.Summary = o.Summary
	}
	if o.ToolChoice != nil {
		s.ToolChoice = o.ToolChoice
	}
	if o.Tools != nil {
		s.Tools = o.Tools
	}
	if o.Trace != nil {
		s.Trace = o.Trace
	}
	if o.Type != nil {
		s.Type = o.Type
	}

	return s, nil
}

// SetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *SparseScanResponse) SetBSON(raw bson.Raw) error {

	if o == nil {
		return nil
	}

	s := &mongoAttributesSparseScanResponse{}
	if err := raw.Unmarshal(s); err != nil {
		return err
	}

	id := s.ID.Hex()
	o.ID = &id
	if s.Alerts != nil {
		o.Alerts = s.Alerts
	}
	if s.Annotations != nil {
		o.Annotations = s.Annotations
	}
	if s.Client != nil {
		o.Client = s.Client
	}
	if s.ClientVersion != nil {
		o.ClientVersion = s.ClientVersion
	}
	if s.Decision != nil {
		o.Decision = s.Decision
	}
	if s.Extractions != nil {
		o.Extractions = s.Extractions
	}
	if s.Hash != nil {
		o.Hash = s.Hash
	}
	if s.Latency != nil {
		o.Latency = s.Latency
	}
	if s.McpMessage != nil {
		o.McpMessage = s.McpMessage
	}
	if s.Model != nil {
		o.Model = s.Model
	}
	if s.Namespace != nil {
		o.Namespace = s.Namespace
	}
	if s.PipelineName != nil {
		o.PipelineName = s.PipelineName
	}
	if s.Principal != nil {
		o.Principal = s.Principal
	}
	if s.Provider != nil {
		o.Provider = s.Provider
	}
	if s.Reasons != nil {
		o.Reasons = s.Reasons
	}
	if s.Summary != nil {
		o.Summary = s.Summary
	}
	if s.ToolChoice != nil {
		o.ToolChoice = s.ToolChoice
	}
	if s.Tools != nil {
		o.Tools = s.Tools
	}
	if s.Trace != nil {
		o.Trace = s.Trace
	}
	if s.Type != nil {
		o.Type = s.Type
	}

	return nil
}

// Version returns the hardcoded version of the model.
func (o *SparseScanResponse) Version() int {

	return 1
}

// ToPlain returns the plain version of the sparse model.
func (o *SparseScanResponse) ToPlain() elemental.PlainIdentifiable {

	out := NewScanResponse()
	if o.ID != nil {
		out.ID = *o.ID
	}
	if o.Alerts != nil {
		out.Alerts = *o.Alerts
	}
	if o.Annotations != nil {
		out.Annotations = *o.Annotations
	}
	if o.Client != nil {
		out.Client = *o.Client
	}
	if o.ClientVersion != nil {
		out.ClientVersion = *o.ClientVersion
	}
	if o.Decision != nil {
		out.Decision = *o.Decision
	}
	if o.Extractions != nil {
		out.Extractions = *o.Extractions
	}
	if o.Hash != nil {
		out.Hash = *o.Hash
	}
	if o.Latency != nil {
		out.Latency = o.Latency
	}
	if o.McpMessage != nil {
		out.McpMessage = o.McpMessage
	}
	if o.Model != nil {
		out.Model = *o.Model
	}
	if o.Namespace != nil {
		out.Namespace = *o.Namespace
	}
	if o.PipelineName != nil {
		out.PipelineName = *o.PipelineName
	}
	if o.Principal != nil {
		out.Principal = o.Principal
	}
	if o.Provider != nil {
		out.Provider = *o.Provider
	}
	if o.Reasons != nil {
		out.Reasons = *o.Reasons
	}
	if o.Summary != nil {
		out.Summary = o.Summary
	}
	if o.Time != nil {
		out.Time = *o.Time
	}
	if o.ToolChoice != nil {
		out.ToolChoice = o.ToolChoice
	}
	if o.Tools != nil {
		out.Tools = *o.Tools
	}
	if o.Trace != nil {
		out.Trace = o.Trace
	}
	if o.Type != nil {
		out.Type = *o.Type
	}

	return out
}

// GetNamespace returns the Namespace of the receiver.
func (o *SparseScanResponse) GetNamespace() (out string) {

	if o.Namespace == nil {
		return
	}

	return *o.Namespace
}

// SetNamespace sets the property Namespace of the receiver using the address of the given value.
func (o *SparseScanResponse) SetNamespace(namespace string) {

	o.Namespace = &namespace
}

// DeepCopy returns a deep copy if the SparseScanResponse.
func (o *SparseScanResponse) DeepCopy() *SparseScanResponse {

	if o == nil {
		return nil
	}

	out := &SparseScanResponse{}
	o.DeepCopyInto(out)

	return out
}

// DeepCopyInto copies the receiver into the given *SparseScanResponse.
func (o *SparseScanResponse) DeepCopyInto(out *SparseScanResponse) {

	target, err := copystructure.Copy(o)
	if err != nil {
		panic(fmt.Sprintf("Unable to deepcopy SparseScanResponse: %s", err))
	}

	*out = *target.(*SparseScanResponse)
}

type mongoAttributesScanResponse struct {
	ID            bson.ObjectId             `bson:"_id,omitempty"`
	Alerts        []*AlertEvent             `bson:"alerts,omitempty"`
	Annotations   map[string]string         `bson:"annotations,omitempty"`
	Client        string                    `bson:"client,omitempty"`
	ClientVersion string                    `bson:"clientversion,omitempty"`
	Decision      ScanResponseDecisionValue `bson:"decision"`
	Extractions   []*Extraction             `bson:"extractions,omitempty"`
	Hash          string                    `bson:"hash"`
	Latency       *Latency                  `bson:"latency,omitempty"`
	McpMessage    *MCPMessage               `bson:"mcpmessage,omitempty"`
	Model         string                    `bson:"model"`
	Namespace     string                    `bson:"namespace,omitempty"`
	PipelineName  string                    `bson:"pipelinename"`
	Principal     *Principal                `bson:"principal"`
	Provider      string                    `bson:"provider"`
	Reasons       []string                  `bson:"reasons,omitempty"`
	Summary       *ExtractionSummary        `bson:"summary,omitempty"`
	ToolChoice    *ToolChoice               `bson:"toolchoice,omitempty"`
	Tools         map[string]*Tool          `bson:"tools,omitempty"`
	Trace         *TraceRef                 `bson:"trace"`
	Type          ScanResponseTypeValue     `bson:"type"`
}
type mongoAttributesSparseScanResponse struct {
	ID            bson.ObjectId              `bson:"_id,omitempty"`
	Alerts        *[]*AlertEvent             `bson:"alerts,omitempty"`
	Annotations   *map[string]string         `bson:"annotations,omitempty"`
	Client        *string                    `bson:"client,omitempty"`
	ClientVersion *string                    `bson:"clientversion,omitempty"`
	Decision      *ScanResponseDecisionValue `bson:"decision,omitempty"`
	Extractions   *[]*Extraction             `bson:"extractions,omitempty"`
	Hash          *string                    `bson:"hash,omitempty"`
	Latency       *Latency                   `bson:"latency,omitempty"`
	McpMessage    *MCPMessage                `bson:"mcpmessage,omitempty"`
	Model         *string                    `bson:"model,omitempty"`
	Namespace     *string                    `bson:"namespace,omitempty"`
	PipelineName  *string                    `bson:"pipelinename,omitempty"`
	Principal     *Principal                 `bson:"principal,omitempty"`
	Provider      *string                    `bson:"provider,omitempty"`
	Reasons       *[]string                  `bson:"reasons,omitempty"`
	Summary       *ExtractionSummary         `bson:"summary,omitempty"`
	ToolChoice    *ToolChoice                `bson:"toolchoice,omitempty"`
	Tools         *map[string]*Tool          `bson:"tools,omitempty"`
	Trace         *TraceRef                  `bson:"trace,omitempty"`
	Type          *ScanResponseTypeValue     `bson:"type,omitempty"`
}
