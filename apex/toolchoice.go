// Code generated by elegen. DO NOT EDIT.
// Source: go.acuvity.ai/elemental (templates/model.gotpl)

package api

import (
	"fmt"

	"github.com/globalsign/mgo/bson"
	"github.com/mitchellh/copystructure"
	"go.acuvity.ai/elemental"
)

// ToolChoiceChoiceValue represents the possible values for attribute "choice".
type ToolChoiceChoiceValue string

const (
	// ToolChoiceChoiceAny represents the value Any.
	ToolChoiceChoiceAny ToolChoiceChoiceValue = "Any"

	// ToolChoiceChoiceAuto represents the value Auto.
	ToolChoiceChoiceAuto ToolChoiceChoiceValue = "Auto"

	// ToolChoiceChoiceNone represents the value None.
	ToolChoiceChoiceNone ToolChoiceChoiceValue = "None"

	// ToolChoiceChoiceTool represents the value Tool.
	ToolChoiceChoiceTool ToolChoiceChoiceValue = "Tool"
)

// ToolChoice represents the model of a toolchoice
type ToolChoice struct {
	// Model instructions on tool choice.
	Choice ToolChoiceChoiceValue `json:"choice" msgpack:"choice" bson:"choice" mapstructure:"choice,omitempty"`

	// If choice is Tool, this will be set to the name of the tool to use.
	Name string `json:"name,omitempty" msgpack:"name,omitempty" bson:"name,omitempty" mapstructure:"name,omitempty"`

	ModelVersion int `json:"-" msgpack:"-" bson:"_modelversion"`
}

// NewToolChoice returns a new *ToolChoice
func NewToolChoice() *ToolChoice {

	return &ToolChoice{
		ModelVersion: 1,
		Choice:       ToolChoiceChoiceAuto,
	}
}

// GetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *ToolChoice) GetBSON() (any, error) {

	if o == nil {
		return nil, nil
	}

	s := &mongoAttributesToolChoice{}

	s.Choice = o.Choice
	s.Name = o.Name

	return s, nil
}

// SetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *ToolChoice) SetBSON(raw bson.Raw) error {

	if o == nil {
		return nil
	}

	s := &mongoAttributesToolChoice{}
	if err := raw.Unmarshal(s); err != nil {
		return err
	}

	o.Choice = s.Choice
	o.Name = s.Name

	return nil
}

// BleveType implements the bleve.Classifier Interface.
func (o *ToolChoice) BleveType() string {

	return "toolchoice"
}

// DeepCopy returns a deep copy if the ToolChoice.
func (o *ToolChoice) DeepCopy() *ToolChoice {

	if o == nil {
		return nil
	}

	out := &ToolChoice{}
	o.DeepCopyInto(out)

	return out
}

// DeepCopyInto copies the receiver into the given *ToolChoice.
func (o *ToolChoice) DeepCopyInto(out *ToolChoice) {

	target, err := copystructure.Copy(o)
	if err != nil {
		panic(fmt.Sprintf("Unable to deepcopy ToolChoice: %s", err))
	}

	*out = *target.(*ToolChoice)
}

// Validate valides the current information stored into the structure.
func (o *ToolChoice) Validate() error {

	errors := elemental.Errors{}
	requiredErrors := elemental.Errors{}

	if err := elemental.ValidateRequiredString("choice", string(o.Choice)); err != nil {
		requiredErrors = requiredErrors.Append(err)
	}

	if err := elemental.ValidateStringInList("choice", string(o.Choice), []string{"Auto", "Any", "None", "Tool"}, false); err != nil {
		errors = errors.Append(err)
	}

	if len(requiredErrors) > 0 {
		return requiredErrors
	}

	if len(errors) > 0 {
		return errors
	}

	return nil
}

// SpecificationForAttribute returns the AttributeSpecification for the given attribute name key.
func (*ToolChoice) SpecificationForAttribute(name string) elemental.AttributeSpecification {

	if v, ok := ToolChoiceAttributesMap[name]; ok {
		return v
	}

	// We could not find it, so let's check on the lower case indexed spec map
	return ToolChoiceLowerCaseAttributesMap[name]
}

// AttributeSpecifications returns the full attribute specifications map.
func (*ToolChoice) AttributeSpecifications() map[string]elemental.AttributeSpecification {

	return ToolChoiceAttributesMap
}

// ValueForAttribute returns the value for the given attribute.
// This is a very advanced function that you should not need but in some
// very specific use cases.
func (o *ToolChoice) ValueForAttribute(name string) any {

	switch name {
	case "choice":
		return o.Choice
	case "name":
		return o.Name
	}

	return nil
}

// ToolChoiceAttributesMap represents the map of attribute for ToolChoice.
var ToolChoiceAttributesMap = map[string]elemental.AttributeSpecification{
	"Choice": {
		AllowedChoices: []string{"Auto", "Any", "None", "Tool"},
		BSONFieldName:  "choice",
		ConvertedName:  "Choice",
		DefaultValue:   ToolChoiceChoiceAuto,
		Description:    `Model instructions on tool choice.`,
		Exposed:        true,
		Name:           "choice",
		Required:       true,
		Stored:         true,
		Type:           "enum",
	},
	"Name": {
		AllowedChoices: []string{},
		BSONFieldName:  "name",
		ConvertedName:  "Name",
		Description:    `If choice is Tool, this will be set to the name of the tool to use.`,
		Exposed:        true,
		Name:           "name",
		Stored:         true,
		Type:           "string",
	},
}

// ToolChoiceLowerCaseAttributesMap represents the map of attribute for ToolChoice.
var ToolChoiceLowerCaseAttributesMap = map[string]elemental.AttributeSpecification{
	"choice": {
		AllowedChoices: []string{"Auto", "Any", "None", "Tool"},
		BSONFieldName:  "choice",
		ConvertedName:  "Choice",
		DefaultValue:   ToolChoiceChoiceAuto,
		Description:    `Model instructions on tool choice.`,
		Exposed:        true,
		Name:           "choice",
		Required:       true,
		Stored:         true,
		Type:           "enum",
	},
	"name": {
		AllowedChoices: []string{},
		BSONFieldName:  "name",
		ConvertedName:  "Name",
		Description:    `If choice is Tool, this will be set to the name of the tool to use.`,
		Exposed:        true,
		Name:           "name",
		Stored:         true,
		Type:           "string",
	},
}

type mongoAttributesToolChoice struct {
	Choice ToolChoiceChoiceValue `bson:"choice"`
	Name   string                `bson:"name,omitempty"`
}
