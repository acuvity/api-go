// Code generated by elegen. DO NOT EDIT.
// Source: go.acuvity.ai/elemental (templates/model.gotpl)

package api

import (
	"fmt"
	"time"

	"github.com/globalsign/mgo/bson"
	"github.com/mitchellh/copystructure"
	"go.acuvity.ai/elemental"
)

// AlertEvent represents the model of a alertevent
type AlertEvent struct {
	// The name of the alert definition that triggered the alert event.
	AlertDefinition string `json:"alertDefinition" msgpack:"alertDefinition" bson:"-" mapstructure:"alertDefinition,omitempty"`

	// The namespace of the alert definition.
	AlertDefinitionNamespace string `json:"alertDefinitionNamespace" msgpack:"alertDefinitionNamespace" bson:"-" mapstructure:"alertDefinitionNamespace,omitempty"`

	// The principal of the object.
	Principal *Principal `json:"principal" msgpack:"principal" bson:"principal" mapstructure:"principal,omitempty"`

	// The provider used that the alert came from.
	Provider string `json:"provider" msgpack:"provider" bson:"-" mapstructure:"provider,omitempty"`

	// When the alert event was raised.
	Timestamp time.Time `json:"timestamp,omitempty" msgpack:"timestamp,omitempty" bson:"-" mapstructure:"timestamp,omitempty"`

	ModelVersion int `json:"-" msgpack:"-" bson:"_modelversion"`
}

// NewAlertEvent returns a new *AlertEvent
func NewAlertEvent() *AlertEvent {

	return &AlertEvent{
		ModelVersion: 1,
		Principal:    NewPrincipal(),
	}
}

// GetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *AlertEvent) GetBSON() (any, error) {

	if o == nil {
		return nil, nil
	}

	s := &mongoAttributesAlertEvent{}

	s.Principal = o.Principal

	return s, nil
}

// SetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *AlertEvent) SetBSON(raw bson.Raw) error {

	if o == nil {
		return nil
	}

	s := &mongoAttributesAlertEvent{}
	if err := raw.Unmarshal(s); err != nil {
		return err
	}

	o.Principal = s.Principal

	return nil
}

// BleveType implements the bleve.Classifier Interface.
func (o *AlertEvent) BleveType() string {

	return "alertevent"
}

// DeepCopy returns a deep copy if the AlertEvent.
func (o *AlertEvent) DeepCopy() *AlertEvent {

	if o == nil {
		return nil
	}

	out := &AlertEvent{}
	o.DeepCopyInto(out)

	return out
}

// DeepCopyInto copies the receiver into the given *AlertEvent.
func (o *AlertEvent) DeepCopyInto(out *AlertEvent) {

	target, err := copystructure.Copy(o)
	if err != nil {
		panic(fmt.Sprintf("Unable to deepcopy AlertEvent: %s", err))
	}

	*out = *target.(*AlertEvent)
}

// Validate valides the current information stored into the structure.
func (o *AlertEvent) Validate() error {

	errors := elemental.Errors{}
	requiredErrors := elemental.Errors{}

	if err := elemental.ValidateRequiredString("alertDefinition", o.AlertDefinition); err != nil {
		requiredErrors = requiredErrors.Append(err)
	}

	if o.Principal != nil {
		elemental.ResetDefaultForZeroValues(o.Principal)
		if err := o.Principal.Validate(); err != nil {
			errors = errors.Append(err)
		}
	}

	if len(requiredErrors) > 0 {
		return requiredErrors
	}

	if len(errors) > 0 {
		return errors
	}

	return nil
}

// SpecificationForAttribute returns the AttributeSpecification for the given attribute name key.
func (*AlertEvent) SpecificationForAttribute(name string) elemental.AttributeSpecification {

	if v, ok := AlertEventAttributesMap[name]; ok {
		return v
	}

	// We could not find it, so let's check on the lower case indexed spec map
	return AlertEventLowerCaseAttributesMap[name]
}

// AttributeSpecifications returns the full attribute specifications map.
func (*AlertEvent) AttributeSpecifications() map[string]elemental.AttributeSpecification {

	return AlertEventAttributesMap
}

// ValueForAttribute returns the value for the given attribute.
// This is a very advanced function that you should not need but in some
// very specific use cases.
func (o *AlertEvent) ValueForAttribute(name string) any {

	switch name {
	case "alertDefinition":
		return o.AlertDefinition
	case "alertDefinitionNamespace":
		return o.AlertDefinitionNamespace
	case "principal":
		return o.Principal
	case "provider":
		return o.Provider
	case "timestamp":
		return o.Timestamp
	}

	return nil
}

// AlertEventAttributesMap represents the map of attribute for AlertEvent.
var AlertEventAttributesMap = map[string]elemental.AttributeSpecification{
	"AlertDefinition": {
		AllowedChoices: []string{},
		ConvertedName:  "AlertDefinition",
		Description:    `The name of the alert definition that triggered the alert event.`,
		Exposed:        true,
		Name:           "alertDefinition",
		Required:       true,
		Type:           "string",
	},
	"AlertDefinitionNamespace": {
		AllowedChoices: []string{},
		ConvertedName:  "AlertDefinitionNamespace",
		Description:    `The namespace of the alert definition.`,
		Exposed:        true,
		Name:           "alertDefinitionNamespace",
		Type:           "string",
	},
	"Principal": {
		AllowedChoices: []string{},
		BSONFieldName:  "principal",
		ConvertedName:  "Principal",
		Description:    `The principal of the object.`,
		Exposed:        true,
		Name:           "principal",
		Required:       true,
		Stored:         true,
		SubType:        "principal",
		Type:           "ref",
	},
	"Provider": {
		AllowedChoices: []string{},
		ConvertedName:  "Provider",
		Description:    `The provider used that the alert came from.`,
		Exposed:        true,
		Name:           "provider",
		Type:           "string",
	},
	"Timestamp": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		ConvertedName:  "Timestamp",
		Description:    `When the alert event was raised.`,
		Exposed:        true,
		Name:           "timestamp",
		ReadOnly:       true,
		Type:           "time",
	},
}

// AlertEventLowerCaseAttributesMap represents the map of attribute for AlertEvent.
var AlertEventLowerCaseAttributesMap = map[string]elemental.AttributeSpecification{
	"alertdefinition": {
		AllowedChoices: []string{},
		ConvertedName:  "AlertDefinition",
		Description:    `The name of the alert definition that triggered the alert event.`,
		Exposed:        true,
		Name:           "alertDefinition",
		Required:       true,
		Type:           "string",
	},
	"alertdefinitionnamespace": {
		AllowedChoices: []string{},
		ConvertedName:  "AlertDefinitionNamespace",
		Description:    `The namespace of the alert definition.`,
		Exposed:        true,
		Name:           "alertDefinitionNamespace",
		Type:           "string",
	},
	"principal": {
		AllowedChoices: []string{},
		BSONFieldName:  "principal",
		ConvertedName:  "Principal",
		Description:    `The principal of the object.`,
		Exposed:        true,
		Name:           "principal",
		Required:       true,
		Stored:         true,
		SubType:        "principal",
		Type:           "ref",
	},
	"provider": {
		AllowedChoices: []string{},
		ConvertedName:  "Provider",
		Description:    `The provider used that the alert came from.`,
		Exposed:        true,
		Name:           "provider",
		Type:           "string",
	},
	"timestamp": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		ConvertedName:  "Timestamp",
		Description:    `When the alert event was raised.`,
		Exposed:        true,
		Name:           "timestamp",
		ReadOnly:       true,
		Type:           "time",
	},
}

type mongoAttributesAlertEvent struct {
	Principal *Principal `bson:"principal"`
}
