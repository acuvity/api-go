// Code generated by elegen. DO NOT EDIT.
// Source: go.acuvity.ai/elemental (templates/model.gotpl)

package api

import (
	"fmt"

	"github.com/globalsign/mgo/bson"
	"github.com/mitchellh/copystructure"
	"go.acuvity.ai/elemental"
)

// Extraction represents the model of a extraction
type Extraction struct {
	// The PIIs found during classification.
	//
	// The current list can be obtained through the analyzers API by searching for
	// detector groups 'PIIs' accross all analyzers.
	//
	// Example of PIIs detected: aba_routing_number, address, bank_account,
	// bitcoin_wallet, credit_card, driver_license, email_address, itin_number,
	// location, medical_license, money_amount, passport_number, person, phone_number,
	// ssn.
	//
	// If a key is not present in the map that implies that entity was not detected. If
	// an entity is detected then the value is a score. Here's how to interpret the
	// scores:
	//   - confidence: 'low', 0 < score <0.33
	//   - confidence: 'medium', 0.33 <= score < 0.66
	//   - confidence: 'high', 0.66 <= score <= 1.
	PIIs map[string]float64 `json:"PIIs,omitempty" msgpack:"PIIs,omitempty" bson:"piis,omitempty" mapstructure:"PIIs,omitempty"`

	// Annotations attached to the extraction.
	Annotations map[string]string `json:"annotations,omitempty" msgpack:"annotations,omitempty" bson:"annotations,omitempty" mapstructure:"annotations,omitempty"`

	// The categories are remapping of the modalities in a more human friendly way.
	Categories []Modality `json:"categories,omitempty" msgpack:"categories,omitempty" bson:"categories,omitempty" mapstructure:"categories,omitempty"`

	// The level of general confidentiality of the input.
	Confidentiality float64 `json:"confidentiality,omitempty" msgpack:"confidentiality,omitempty" bson:"confidentiality,omitempty" mapstructure:"confidentiality,omitempty"`

	// The custom data types found during classification.
	//
	// If a key is not present in the map that implies that entity was not detected. If
	// an entity is detected then the value is a score. Here's how to interpret the
	// scores:
	//   - confidence: 'low', 0 < score <0.33
	//   - confidence: 'medium', 0.33 <= score < 0.66
	//   - confidence: 'high', 0.66 <= score <= 1.
	CustomDataTypes map[string]float64 `json:"customDataTypes,omitempty" msgpack:"customDataTypes,omitempty" bson:"customdatatypes,omitempty" mapstructure:"customDataTypes,omitempty"`

	// The data extracted.
	Data string `json:"data" msgpack:"data" bson:"data" mapstructure:"data,omitempty"`

	// The textual detections found while applying policies.
	Detections []*TextualDetection `json:"detections,omitempty" msgpack:"detections,omitempty" bson:"detections,omitempty" mapstructure:"detections,omitempty"`

	// The various exploits attempts.
	//
	// The current list can be obtained through the analyzers API by searching for
	// detector groups 'Exploits' accross all analyzers.
	//
	// Example of exploits detected: jailbreak, prompt_injection, malicious_url.
	//
	// If a key is not present in the map that implies that entity was not detected. If
	// an entity is detected then the value is a score. Here's how to interpret the
	// scores:
	//   - confidence: 'low', 0 < score <0.33
	//   - confidence: 'medium', 0.33 <= score < 0.66
	//   - confidence: 'high', 0.66 <= score <= 1.
	Exploits map[string]float64 `json:"exploits,omitempty" msgpack:"exploits,omitempty" bson:"exploits,omitempty" mapstructure:"exploits,omitempty"`

	// The hash of the extraction.
	Hash string `json:"hash,omitempty" msgpack:"hash,omitempty" bson:"hash,omitempty" mapstructure:"hash,omitempty"`

	// The estimated intent embodied into the text.
	//
	// The current list can be obtained through the analyzers API by searching for
	// detector groups 'Intent' accross all analyzers.
	//
	// Example of intent detected: explain, outline, summarize, write.
	//
	// If a key is not present in the map that implies that entity was not detected. If
	// an entity is detected then the value is a score. Here's how to interpret the
	// scores:
	//   - confidence: 'low', 0 < score <0.33
	//   - confidence: 'medium', 0.33 <= score < 0.66
	//   - confidence: 'high', 0.66 <= score <= 1.
	Intent map[string]float64 `json:"intent,omitempty" msgpack:"intent,omitempty" bson:"intent,omitempty" mapstructure:"intent,omitempty"`

	// If true, this extraction is for internal use only. This can be used by agentic
	// systems to mark an extraction as internal only as opposed to user facing.
	Internal bool `json:"internal,omitempty" msgpack:"internal,omitempty" bson:"internal,omitempty" mapstructure:"internal,omitempty"`

	// If true, the data of the extraction is a file.
	IsFile bool `json:"isFile,omitempty" msgpack:"isFile,omitempty" bson:"isfile,omitempty" mapstructure:"isFile,omitempty"`

	// If true, indicates that the file has been stored.
	IsStored bool `json:"isStored,omitempty" msgpack:"isStored,omitempty" bson:"isstored,omitempty" mapstructure:"isStored,omitempty"`

	// The keywords found during classification.
	//
	// If a key is not present in the map that implies that entity was not detected. If
	// an entity is detected then the value is a score. Here's how to interpret the
	// scores:
	//   - confidence: 'low', 0 < score <0.33
	//   - confidence: 'medium', 0.33 <= score < 0.66
	//   - confidence: 'high', 0.66 <= score <= 1.
	Keywords map[string]float64 `json:"keywords,omitempty" msgpack:"keywords,omitempty" bson:"keywords,omitempty" mapstructure:"keywords,omitempty"`

	// A means of distinguishing what was extracted, such as prompt, input file or
	// code.
	Label string `json:"label,omitempty" msgpack:"label,omitempty" bson:"label,omitempty" mapstructure:"label,omitempty"`

	// The language of the classification.
	//
	// The current list can be obtained through the analyzers API by searching for
	// detector groups 'Languages' accross all analyzers.
	//
	// Example of languages: chinese, english, french, german, gibberish, japanese,
	// russian, spanish.
	//
	// If a key is not present in the map that implies that entity was not detected. If
	// an entity is detected then the value is a score. Here's how to interpret the
	// scores:
	//   - confidence: 'low', 0 < score <0.33
	//   - confidence: 'medium', 0.33 <= score < 0.66
	//   - confidence: 'high', 0.66 <= score <= 1.
	Languages map[string]float64 `json:"languages,omitempty" msgpack:"languages,omitempty" bson:"languages,omitempty" mapstructure:"languages,omitempty"`

	// The various malcontents attempts.
	//
	// The current list can be obtained through the analyzers API by searching for
	// detector groups 'Malcontents' accross all analyzers.
	//
	// Example of malcontents: biased, harmful, toxic.
	//
	// If a key is not present in the map that implies that entity was not detected. If
	// an entity is detected then the value is a score. Here's how to interpret the
	// scores:
	//   - confidence: 'low', 0 < score <0.33
	//   - confidence: 'medium', 0.33 <= score < 0.66
	//   - confidence: 'high', 0.66 <= score <= 1.
	Malcontents map[string]float64 `json:"malcontents,omitempty" msgpack:"malcontents,omitempty" bson:"malcontents,omitempty" mapstructure:"malcontents,omitempty"`

	// The modalities of data detected in the data.
	Modalities []Modality `json:"modalities,omitempty" msgpack:"modalities,omitempty" bson:"modalities,omitempty" mapstructure:"modalities,omitempty"`

	// This is an internal field and has no api meaning.
	OriginalData string `json:"-" msgpack:"-" bson:"-" mapstructure:"-,omitempty"`

	// The level of general organization relevance of the input.
	//
	// If a key is not present in the map that implies that entity was not detected. If
	// an entity is detected then the value is a score. Here's how to interpret the
	// scores:
	//   - confidence: 'low', 0 < score <0.33
	//   - confidence: 'medium', 0.33 <= score < 0.66
	//   - confidence: 'high', 0.66 <= score <= 1.
	Relevance float64 `json:"relevance,omitempty" msgpack:"relevance,omitempty" bson:"relevance,omitempty" mapstructure:"relevance,omitempty"`

	// The secrets found during classification.
	//
	// The current list can be obtained through the analyzers API by searching for
	// detector groups 'Secrets' accross all analyzers.
	//
	// Example of secrets: adafruit, alibaba, anthropic, apideck, apify, atlassian,
	// aws_secret_key, buildkite, checkout, clickuppersonal, contentfulpersonalaccess,
	// credentials, database_url_with_credentials, databricks, denodeploy, dfuse,
	// digitalocean, discord_webhook, docker_hub, doppler, dropbox, endorlabs,
	// fleetbase, flutterwave, frameio, freshdesk, fullstory, github, gitlab,
	// gocardless, google_api, grafana, groq, huggingface, intra42, jwt, klaviyo,
	// launchdarkly, linearapi, locationiq, mailchimp, mailgun, mapbox, maxmind,
	// microsoft_teams_webhook, nightfall, notion, npm, openai, otp_auth_url, pagarme,
	// paystack, planetscale, planetscaledb, portainer, posthog, postman, prefect,
	// private_key, pubnub_publish, pubnub_subscribe, pulumi, ramp, razorpay, readme,
	// rechargepayments, replicate, rubygems, salesforce, sendgrid, sendinblue,
	// shopify, slack_access, slack_bot, slack_refresh, slack_user, slack_webhook,
	// slack_workflow_webhook, sourcegraph, sourcegraphcody, squareapp, squareup,
	// stripe, supabase, tailscale, tines_webhook, trufflehog, twilio, ubidots,
	// voiceflow, web_url_with_credentials, zapierwebhook.
	//
	// If a key is not present in the map that implies that entity was not detected. If
	// an entity is detected then the value is a score. Here's how to interpret the
	// scores:
	//   - confidence: 'low', 0 < score <0.33
	//   - confidence: 'medium', 0.33 <= score < 0.66
	//   - confidence: 'high', 0.66 <= score <= 1.
	Secrets map[string]float64 `json:"secrets,omitempty" msgpack:"secrets,omitempty" bson:"secrets,omitempty" mapstructure:"secrets,omitempty"`

	// The topic of the classification.
	//
	// The current list can be obtained through the analyzers API, with the following
	// conditions:
	//   1. Includes all analyzers EXCEPT those in the 'Modality' group
	//   2. Includes all analyzer detectors EXCEPT those in these groups:
	//     - 'Secrets'
	//     - 'Exploits'
	//     - 'Intent'
	//     - 'PIIs'
	//     - 'Malcontents'
	//
	// Example of topics: category/enterprise, category/healthcare, category/medical,
	// category/personal, contains/blank_image, contains/certificate_signing_request,
	// contains/database_url, contains/handwritten_text, contains/printed_text,
	// contains/public_key, contains/ssh_public_key, contains/web_url,
	// decoded/base32_data, decoded/base58_data, decoded/base64_data,
	// decoded/base64_url_data, decoded/base85_data, decoded/hexadecimal_data,
	// decoded/puny_code_data, decoded/quoted_printable_data,
	// decoded/url_encoding_data, department/compliance, department/cybersecurity,
	// department/finance, department/human_resources,
	// department/information_technology, department/legal, department/logistics,
	// department/marketing, department/performance_evaluation,
	// department/product_management, department/project_management, department/sales,
	// department/strategy, department/support, depict/check, depict/code,
	// depict/document, depict/unclassified, depict/whiteboard, domain/commercial,
	// domain/development, domain/financial, domain/general, domain/regulatory,
	// domain/workforce, extracted/csv_cell_content, extracted/document_text_content,
	// extracted/handwritten_text_content, extracted/pdf_text_content,
	// extracted/pptx_text_content, extracted/spreadsheet_text_content,
	// extracted/typed_text_content, timeframe/current_year, timeframe/future,
	// timeframe/last_year, timeframe/next_year, timeframe/past,
	// transcribed/audio_text_content.
	//
	// If a key is not present in the map that implies that entity was not detected. If
	// an entity is detected then the value is a score. Here's how to interpret the
	// scores:
	//   - confidence: 'low', 0 < score <0.33
	//   - confidence: 'medium', 0.33 <= score < 0.66
	//   - confidence: 'high', 0.66 <= score <= 1.
	Topics map[string]float64 `json:"topics,omitempty" msgpack:"topics,omitempty" bson:"topics,omitempty" mapstructure:"topics,omitempty"`

	ModelVersion int `json:"-" msgpack:"-" bson:"_modelversion"`
}

// NewExtraction returns a new *Extraction
func NewExtraction() *Extraction {

	return &Extraction{
		ModelVersion: 1,
		Annotations:  map[string]string{},
	}
}

// GetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *Extraction) GetBSON() (any, error) {

	if o == nil {
		return nil, nil
	}

	s := &mongoAttributesExtraction{}

	s.PIIs = o.PIIs
	s.Annotations = o.Annotations
	s.Categories = o.Categories
	s.Confidentiality = o.Confidentiality
	s.CustomDataTypes = o.CustomDataTypes
	s.Data = o.Data
	s.Detections = o.Detections
	s.Exploits = o.Exploits
	s.Hash = o.Hash
	s.Intent = o.Intent
	s.Internal = o.Internal
	s.IsFile = o.IsFile
	s.IsStored = o.IsStored
	s.Keywords = o.Keywords
	s.Label = o.Label
	s.Languages = o.Languages
	s.Malcontents = o.Malcontents
	s.Modalities = o.Modalities
	s.Relevance = o.Relevance
	s.Secrets = o.Secrets
	s.Topics = o.Topics

	return s, nil
}

// SetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *Extraction) SetBSON(raw bson.Raw) error {

	if o == nil {
		return nil
	}

	s := &mongoAttributesExtraction{}
	if err := raw.Unmarshal(s); err != nil {
		return err
	}

	o.PIIs = s.PIIs
	o.Annotations = s.Annotations
	o.Categories = s.Categories
	o.Confidentiality = s.Confidentiality
	o.CustomDataTypes = s.CustomDataTypes
	o.Data = s.Data
	o.Detections = s.Detections
	o.Exploits = s.Exploits
	o.Hash = s.Hash
	o.Intent = s.Intent
	o.Internal = s.Internal
	o.IsFile = s.IsFile
	o.IsStored = s.IsStored
	o.Keywords = s.Keywords
	o.Label = s.Label
	o.Languages = s.Languages
	o.Malcontents = s.Malcontents
	o.Modalities = s.Modalities
	o.Relevance = s.Relevance
	o.Secrets = s.Secrets
	o.Topics = s.Topics

	return nil
}

// BleveType implements the bleve.Classifier Interface.
func (o *Extraction) BleveType() string {

	return "extraction"
}

// DeepCopy returns a deep copy if the Extraction.
func (o *Extraction) DeepCopy() *Extraction {

	if o == nil {
		return nil
	}

	out := &Extraction{}
	o.DeepCopyInto(out)

	return out
}

// DeepCopyInto copies the receiver into the given *Extraction.
func (o *Extraction) DeepCopyInto(out *Extraction) {

	target, err := copystructure.Copy(o)
	if err != nil {
		panic(fmt.Sprintf("Unable to deepcopy Extraction: %s", err))
	}

	*out = *target.(*Extraction)
}

// Validate valides the current information stored into the structure.
func (o *Extraction) Validate() error {

	errors := elemental.Errors{}
	requiredErrors := elemental.Errors{}

	for _, sub := range o.Categories {
		elemental.ResetDefaultForZeroValues(sub)
		if err := sub.Validate(); err != nil {
			errors = errors.Append(err)
		}
	}

	for _, sub := range o.Detections {
		if sub == nil {
			continue
		}
		elemental.ResetDefaultForZeroValues(sub)
		if err := sub.Validate(); err != nil {
			errors = errors.Append(err)
		}
	}

	for _, sub := range o.Modalities {
		elemental.ResetDefaultForZeroValues(sub)
		if err := sub.Validate(); err != nil {
			errors = errors.Append(err)
		}
	}

	if len(requiredErrors) > 0 {
		return requiredErrors
	}

	if len(errors) > 0 {
		return errors
	}

	return nil
}

// SpecificationForAttribute returns the AttributeSpecification for the given attribute name key.
func (*Extraction) SpecificationForAttribute(name string) elemental.AttributeSpecification {

	if v, ok := ExtractionAttributesMap[name]; ok {
		return v
	}

	// We could not find it, so let's check on the lower case indexed spec map
	return ExtractionLowerCaseAttributesMap[name]
}

// AttributeSpecifications returns the full attribute specifications map.
func (*Extraction) AttributeSpecifications() map[string]elemental.AttributeSpecification {

	return ExtractionAttributesMap
}

// ValueForAttribute returns the value for the given attribute.
// This is a very advanced function that you should not need but in some
// very specific use cases.
func (o *Extraction) ValueForAttribute(name string) any {

	switch name {
	case "PIIs":
		return o.PIIs
	case "annotations":
		return o.Annotations
	case "categories":
		return o.Categories
	case "confidentiality":
		return o.Confidentiality
	case "customDataTypes":
		return o.CustomDataTypes
	case "data":
		return o.Data
	case "detections":
		return o.Detections
	case "exploits":
		return o.Exploits
	case "hash":
		return o.Hash
	case "intent":
		return o.Intent
	case "internal":
		return o.Internal
	case "isFile":
		return o.IsFile
	case "isStored":
		return o.IsStored
	case "keywords":
		return o.Keywords
	case "label":
		return o.Label
	case "languages":
		return o.Languages
	case "malcontents":
		return o.Malcontents
	case "modalities":
		return o.Modalities
	case "originalData":
		return o.OriginalData
	case "relevance":
		return o.Relevance
	case "secrets":
		return o.Secrets
	case "topics":
		return o.Topics
	}

	return nil
}

// ExtractionAttributesMap represents the map of attribute for Extraction.
var ExtractionAttributesMap = map[string]elemental.AttributeSpecification{
	"PIIs": {
		AllowedChoices: []string{},
		BSONFieldName:  "piis",
		ConvertedName:  "PIIs",
		Description: `The PIIs found during classification.

The current list can be obtained through the analyzers API by searching for
detector groups 'PIIs' accross all analyzers.

Example of PIIs detected: aba_routing_number, address, bank_account,
bitcoin_wallet, credit_card, driver_license, email_address, itin_number,
location, medical_license, money_amount, passport_number, person, phone_number,
ssn.

If a key is not present in the map that implies that entity was not detected. If
an entity is detected then the value is a score. Here's how to interpret the
scores:
  - confidence: 'low', 0 < score <0.33
  - confidence: 'medium', 0.33 <= score < 0.66
  - confidence: 'high', 0.66 <= score <= 1.`,
		Exposed: true,
		Name:    "PIIs",
		Stored:  true,
		SubType: "map[string]float64",
		Type:    "external",
	},
	"Annotations": {
		AllowedChoices: []string{},
		BSONFieldName:  "annotations",
		ConvertedName:  "Annotations",
		Description:    `Annotations attached to the extraction.`,
		Exposed:        true,
		Name:           "annotations",
		Stored:         true,
		SubType:        "map[string]string",
		Type:           "external",
	},
	"Categories": {
		AllowedChoices: []string{},
		BSONFieldName:  "categories",
		ConvertedName:  "Categories",
		Description:    `The categories are remapping of the modalities in a more human friendly way.`,
		Exposed:        true,
		Name:           "categories",
		Stored:         true,
		SubType:        "modality",
		Type:           "refList",
	},
	"Confidentiality": {
		AllowedChoices: []string{},
		BSONFieldName:  "confidentiality",
		ConvertedName:  "Confidentiality",
		Description:    `The level of general confidentiality of the input.`,
		Exposed:        true,
		Name:           "confidentiality",
		Stored:         true,
		Type:           "float",
	},
	"CustomDataTypes": {
		AllowedChoices: []string{},
		BSONFieldName:  "customdatatypes",
		ConvertedName:  "CustomDataTypes",
		Description: `The custom data types found during classification.

If a key is not present in the map that implies that entity was not detected. If
an entity is detected then the value is a score. Here's how to interpret the
scores:
  - confidence: 'low', 0 < score <0.33
  - confidence: 'medium', 0.33 <= score < 0.66
  - confidence: 'high', 0.66 <= score <= 1.`,
		Exposed: true,
		Name:    "customDataTypes",
		Stored:  true,
		SubType: "map[string]float64",
		Type:    "external",
	},
	"Data": {
		AllowedChoices: []string{},
		BSONFieldName:  "data",
		ConvertedName:  "Data",
		Description:    `The data extracted.`,
		Exposed:        true,
		Name:           "data",
		Stored:         true,
		Type:           "string",
	},
	"Detections": {
		AllowedChoices: []string{},
		BSONFieldName:  "detections",
		ConvertedName:  "Detections",
		Description:    `The textual detections found while applying policies.`,
		Exposed:        true,
		Name:           "detections",
		Stored:         true,
		SubType:        "textualdetection",
		Type:           "refList",
	},
	"Exploits": {
		AllowedChoices: []string{},
		BSONFieldName:  "exploits",
		ConvertedName:  "Exploits",
		Description: `The various exploits attempts.

The current list can be obtained through the analyzers API by searching for
detector groups 'Exploits' accross all analyzers.

Example of exploits detected: jailbreak, prompt_injection, malicious_url.

If a key is not present in the map that implies that entity was not detected. If
an entity is detected then the value is a score. Here's how to interpret the
scores:
  - confidence: 'low', 0 < score <0.33
  - confidence: 'medium', 0.33 <= score < 0.66
  - confidence: 'high', 0.66 <= score <= 1.`,
		Exposed: true,
		Name:    "exploits",
		Stored:  true,
		SubType: "map[string]float64",
		Type:    "external",
	},
	"Hash": {
		AllowedChoices: []string{},
		BSONFieldName:  "hash",
		ConvertedName:  "Hash",
		Description:    `The hash of the extraction.`,
		Exposed:        true,
		Name:           "hash",
		Stored:         true,
		Type:           "string",
	},
	"Intent": {
		AllowedChoices: []string{},
		BSONFieldName:  "intent",
		ConvertedName:  "Intent",
		Description: `The estimated intent embodied into the text.

The current list can be obtained through the analyzers API by searching for
detector groups 'Intent' accross all analyzers.

Example of intent detected: explain, outline, summarize, write.

If a key is not present in the map that implies that entity was not detected. If
an entity is detected then the value is a score. Here's how to interpret the
scores:
  - confidence: 'low', 0 < score <0.33
  - confidence: 'medium', 0.33 <= score < 0.66
  - confidence: 'high', 0.66 <= score <= 1.`,
		Exposed: true,
		Name:    "intent",
		Stored:  true,
		SubType: "map[string]float64",
		Type:    "external",
	},
	"Internal": {
		AllowedChoices: []string{},
		BSONFieldName:  "internal",
		ConvertedName:  "Internal",
		Description: `If true, this extraction is for internal use only. This can be used by agentic
systems to mark an extraction as internal only as opposed to user facing.`,
		Exposed: true,
		Name:    "internal",
		Stored:  true,
		Type:    "boolean",
	},
	"IsFile": {
		AllowedChoices: []string{},
		BSONFieldName:  "isfile",
		ConvertedName:  "IsFile",
		Description:    `If true, the data of the extraction is a file.`,
		Exposed:        true,
		Name:           "isFile",
		Stored:         true,
		Type:           "boolean",
	},
	"IsStored": {
		AllowedChoices: []string{},
		BSONFieldName:  "isstored",
		ConvertedName:  "IsStored",
		Description:    `If true, indicates that the file has been stored.`,
		Exposed:        true,
		Name:           "isStored",
		Stored:         true,
		Type:           "boolean",
	},
	"Keywords": {
		AllowedChoices: []string{},
		BSONFieldName:  "keywords",
		ConvertedName:  "Keywords",
		Description: `The keywords found during classification.

If a key is not present in the map that implies that entity was not detected. If
an entity is detected then the value is a score. Here's how to interpret the
scores:
  - confidence: 'low', 0 < score <0.33
  - confidence: 'medium', 0.33 <= score < 0.66
  - confidence: 'high', 0.66 <= score <= 1.`,
		Exposed: true,
		Name:    "keywords",
		Stored:  true,
		SubType: "map[string]float64",
		Type:    "external",
	},
	"Label": {
		AllowedChoices: []string{},
		BSONFieldName:  "label",
		ConvertedName:  "Label",
		Description: `A means of distinguishing what was extracted, such as prompt, input file or
code.`,
		Exposed: true,
		Name:    "label",
		Stored:  true,
		Type:    "string",
	},
	"Languages": {
		AllowedChoices: []string{},
		BSONFieldName:  "languages",
		ConvertedName:  "Languages",
		Description: `The language of the classification.

The current list can be obtained through the analyzers API by searching for
detector groups 'Languages' accross all analyzers.

Example of languages: chinese, english, french, german, gibberish, japanese,
russian, spanish.

If a key is not present in the map that implies that entity was not detected. If
an entity is detected then the value is a score. Here's how to interpret the
scores:
  - confidence: 'low', 0 < score <0.33
  - confidence: 'medium', 0.33 <= score < 0.66
  - confidence: 'high', 0.66 <= score <= 1.`,
		Exposed: true,
		Name:    "languages",
		Stored:  true,
		SubType: "map[string]float64",
		Type:    "external",
	},
	"Malcontents": {
		AllowedChoices: []string{},
		BSONFieldName:  "malcontents",
		ConvertedName:  "Malcontents",
		Description: `The various malcontents attempts.

The current list can be obtained through the analyzers API by searching for
detector groups 'Malcontents' accross all analyzers.

Example of malcontents: biased, harmful, toxic.

If a key is not present in the map that implies that entity was not detected. If
an entity is detected then the value is a score. Here's how to interpret the
scores:
  - confidence: 'low', 0 < score <0.33
  - confidence: 'medium', 0.33 <= score < 0.66
  - confidence: 'high', 0.66 <= score <= 1.`,
		Exposed: true,
		Name:    "malcontents",
		Stored:  true,
		SubType: "map[string]float64",
		Type:    "external",
	},
	"Modalities": {
		AllowedChoices: []string{},
		BSONFieldName:  "modalities",
		ConvertedName:  "Modalities",
		Description:    `The modalities of data detected in the data.`,
		Exposed:        true,
		Name:           "modalities",
		Stored:         true,
		SubType:        "modality",
		Type:           "refList",
	},

	"Relevance": {
		AllowedChoices: []string{},
		BSONFieldName:  "relevance",
		ConvertedName:  "Relevance",
		Description: `The level of general organization relevance of the input.

If a key is not present in the map that implies that entity was not detected. If
an entity is detected then the value is a score. Here's how to interpret the
scores:
  - confidence: 'low', 0 < score <0.33
  - confidence: 'medium', 0.33 <= score < 0.66
  - confidence: 'high', 0.66 <= score <= 1.`,
		Exposed: true,
		Name:    "relevance",
		Stored:  true,
		Type:    "float",
	},
	"Secrets": {
		AllowedChoices: []string{},
		BSONFieldName:  "secrets",
		ConvertedName:  "Secrets",
		Description: `The secrets found during classification.

The current list can be obtained through the analyzers API by searching for
detector groups 'Secrets' accross all analyzers.

Example of secrets: adafruit, alibaba, anthropic, apideck, apify, atlassian,
aws_secret_key, buildkite, checkout, clickuppersonal, contentfulpersonalaccess,
credentials, database_url_with_credentials, databricks, denodeploy, dfuse,
digitalocean, discord_webhook, docker_hub, doppler, dropbox, endorlabs,
fleetbase, flutterwave, frameio, freshdesk, fullstory, github, gitlab,
gocardless, google_api, grafana, groq, huggingface, intra42, jwt, klaviyo,
launchdarkly, linearapi, locationiq, mailchimp, mailgun, mapbox, maxmind,
microsoft_teams_webhook, nightfall, notion, npm, openai, otp_auth_url, pagarme,
paystack, planetscale, planetscaledb, portainer, posthog, postman, prefect,
private_key, pubnub_publish, pubnub_subscribe, pulumi, ramp, razorpay, readme,
rechargepayments, replicate, rubygems, salesforce, sendgrid, sendinblue,
shopify, slack_access, slack_bot, slack_refresh, slack_user, slack_webhook,
slack_workflow_webhook, sourcegraph, sourcegraphcody, squareapp, squareup,
stripe, supabase, tailscale, tines_webhook, trufflehog, twilio, ubidots,
voiceflow, web_url_with_credentials, zapierwebhook.

If a key is not present in the map that implies that entity was not detected. If
an entity is detected then the value is a score. Here's how to interpret the
scores:
  - confidence: 'low', 0 < score <0.33
  - confidence: 'medium', 0.33 <= score < 0.66
  - confidence: 'high', 0.66 <= score <= 1.`,
		Exposed: true,
		Name:    "secrets",
		Stored:  true,
		SubType: "map[string]float64",
		Type:    "external",
	},
	"Topics": {
		AllowedChoices: []string{},
		BSONFieldName:  "topics",
		ConvertedName:  "Topics",
		Description: `The topic of the classification.

The current list can be obtained through the analyzers API, with the following
conditions:
  1. Includes all analyzers EXCEPT those in the 'Modality' group
  2. Includes all analyzer detectors EXCEPT those in these groups:
    - 'Secrets'
    - 'Exploits'
    - 'Intent'
    - 'PIIs'
    - 'Malcontents'

Example of topics: category/enterprise, category/healthcare, category/medical,
category/personal, contains/blank_image, contains/certificate_signing_request,
contains/database_url, contains/handwritten_text, contains/printed_text,
contains/public_key, contains/ssh_public_key, contains/web_url,
decoded/base32_data, decoded/base58_data, decoded/base64_data,
decoded/base64_url_data, decoded/base85_data, decoded/hexadecimal_data,
decoded/puny_code_data, decoded/quoted_printable_data,
decoded/url_encoding_data, department/compliance, department/cybersecurity,
department/finance, department/human_resources,
department/information_technology, department/legal, department/logistics,
department/marketing, department/performance_evaluation,
department/product_management, department/project_management, department/sales,
department/strategy, department/support, depict/check, depict/code,
depict/document, depict/unclassified, depict/whiteboard, domain/commercial,
domain/development, domain/financial, domain/general, domain/regulatory,
domain/workforce, extracted/csv_cell_content, extracted/document_text_content,
extracted/handwritten_text_content, extracted/pdf_text_content,
extracted/pptx_text_content, extracted/spreadsheet_text_content,
extracted/typed_text_content, timeframe/current_year, timeframe/future,
timeframe/last_year, timeframe/next_year, timeframe/past,
transcribed/audio_text_content.

If a key is not present in the map that implies that entity was not detected. If
an entity is detected then the value is a score. Here's how to interpret the
scores:
  - confidence: 'low', 0 < score <0.33
  - confidence: 'medium', 0.33 <= score < 0.66
  - confidence: 'high', 0.66 <= score <= 1.`,
		Exposed: true,
		Name:    "topics",
		Stored:  true,
		SubType: "map[string]float64",
		Type:    "external",
	},
}

// ExtractionLowerCaseAttributesMap represents the map of attribute for Extraction.
var ExtractionLowerCaseAttributesMap = map[string]elemental.AttributeSpecification{
	"piis": {
		AllowedChoices: []string{},
		BSONFieldName:  "piis",
		ConvertedName:  "PIIs",
		Description: `The PIIs found during classification.

The current list can be obtained through the analyzers API by searching for
detector groups 'PIIs' accross all analyzers.

Example of PIIs detected: aba_routing_number, address, bank_account,
bitcoin_wallet, credit_card, driver_license, email_address, itin_number,
location, medical_license, money_amount, passport_number, person, phone_number,
ssn.

If a key is not present in the map that implies that entity was not detected. If
an entity is detected then the value is a score. Here's how to interpret the
scores:
  - confidence: 'low', 0 < score <0.33
  - confidence: 'medium', 0.33 <= score < 0.66
  - confidence: 'high', 0.66 <= score <= 1.`,
		Exposed: true,
		Name:    "PIIs",
		Stored:  true,
		SubType: "map[string]float64",
		Type:    "external",
	},
	"annotations": {
		AllowedChoices: []string{},
		BSONFieldName:  "annotations",
		ConvertedName:  "Annotations",
		Description:    `Annotations attached to the extraction.`,
		Exposed:        true,
		Name:           "annotations",
		Stored:         true,
		SubType:        "map[string]string",
		Type:           "external",
	},
	"categories": {
		AllowedChoices: []string{},
		BSONFieldName:  "categories",
		ConvertedName:  "Categories",
		Description:    `The categories are remapping of the modalities in a more human friendly way.`,
		Exposed:        true,
		Name:           "categories",
		Stored:         true,
		SubType:        "modality",
		Type:           "refList",
	},
	"confidentiality": {
		AllowedChoices: []string{},
		BSONFieldName:  "confidentiality",
		ConvertedName:  "Confidentiality",
		Description:    `The level of general confidentiality of the input.`,
		Exposed:        true,
		Name:           "confidentiality",
		Stored:         true,
		Type:           "float",
	},
	"customdatatypes": {
		AllowedChoices: []string{},
		BSONFieldName:  "customdatatypes",
		ConvertedName:  "CustomDataTypes",
		Description: `The custom data types found during classification.

If a key is not present in the map that implies that entity was not detected. If
an entity is detected then the value is a score. Here's how to interpret the
scores:
  - confidence: 'low', 0 < score <0.33
  - confidence: 'medium', 0.33 <= score < 0.66
  - confidence: 'high', 0.66 <= score <= 1.`,
		Exposed: true,
		Name:    "customDataTypes",
		Stored:  true,
		SubType: "map[string]float64",
		Type:    "external",
	},
	"data": {
		AllowedChoices: []string{},
		BSONFieldName:  "data",
		ConvertedName:  "Data",
		Description:    `The data extracted.`,
		Exposed:        true,
		Name:           "data",
		Stored:         true,
		Type:           "string",
	},
	"detections": {
		AllowedChoices: []string{},
		BSONFieldName:  "detections",
		ConvertedName:  "Detections",
		Description:    `The textual detections found while applying policies.`,
		Exposed:        true,
		Name:           "detections",
		Stored:         true,
		SubType:        "textualdetection",
		Type:           "refList",
	},
	"exploits": {
		AllowedChoices: []string{},
		BSONFieldName:  "exploits",
		ConvertedName:  "Exploits",
		Description: `The various exploits attempts.

The current list can be obtained through the analyzers API by searching for
detector groups 'Exploits' accross all analyzers.

Example of exploits detected: jailbreak, prompt_injection, malicious_url.

If a key is not present in the map that implies that entity was not detected. If
an entity is detected then the value is a score. Here's how to interpret the
scores:
  - confidence: 'low', 0 < score <0.33
  - confidence: 'medium', 0.33 <= score < 0.66
  - confidence: 'high', 0.66 <= score <= 1.`,
		Exposed: true,
		Name:    "exploits",
		Stored:  true,
		SubType: "map[string]float64",
		Type:    "external",
	},
	"hash": {
		AllowedChoices: []string{},
		BSONFieldName:  "hash",
		ConvertedName:  "Hash",
		Description:    `The hash of the extraction.`,
		Exposed:        true,
		Name:           "hash",
		Stored:         true,
		Type:           "string",
	},
	"intent": {
		AllowedChoices: []string{},
		BSONFieldName:  "intent",
		ConvertedName:  "Intent",
		Description: `The estimated intent embodied into the text.

The current list can be obtained through the analyzers API by searching for
detector groups 'Intent' accross all analyzers.

Example of intent detected: explain, outline, summarize, write.

If a key is not present in the map that implies that entity was not detected. If
an entity is detected then the value is a score. Here's how to interpret the
scores:
  - confidence: 'low', 0 < score <0.33
  - confidence: 'medium', 0.33 <= score < 0.66
  - confidence: 'high', 0.66 <= score <= 1.`,
		Exposed: true,
		Name:    "intent",
		Stored:  true,
		SubType: "map[string]float64",
		Type:    "external",
	},
	"internal": {
		AllowedChoices: []string{},
		BSONFieldName:  "internal",
		ConvertedName:  "Internal",
		Description: `If true, this extraction is for internal use only. This can be used by agentic
systems to mark an extraction as internal only as opposed to user facing.`,
		Exposed: true,
		Name:    "internal",
		Stored:  true,
		Type:    "boolean",
	},
	"isfile": {
		AllowedChoices: []string{},
		BSONFieldName:  "isfile",
		ConvertedName:  "IsFile",
		Description:    `If true, the data of the extraction is a file.`,
		Exposed:        true,
		Name:           "isFile",
		Stored:         true,
		Type:           "boolean",
	},
	"isstored": {
		AllowedChoices: []string{},
		BSONFieldName:  "isstored",
		ConvertedName:  "IsStored",
		Description:    `If true, indicates that the file has been stored.`,
		Exposed:        true,
		Name:           "isStored",
		Stored:         true,
		Type:           "boolean",
	},
	"keywords": {
		AllowedChoices: []string{},
		BSONFieldName:  "keywords",
		ConvertedName:  "Keywords",
		Description: `The keywords found during classification.

If a key is not present in the map that implies that entity was not detected. If
an entity is detected then the value is a score. Here's how to interpret the
scores:
  - confidence: 'low', 0 < score <0.33
  - confidence: 'medium', 0.33 <= score < 0.66
  - confidence: 'high', 0.66 <= score <= 1.`,
		Exposed: true,
		Name:    "keywords",
		Stored:  true,
		SubType: "map[string]float64",
		Type:    "external",
	},
	"label": {
		AllowedChoices: []string{},
		BSONFieldName:  "label",
		ConvertedName:  "Label",
		Description: `A means of distinguishing what was extracted, such as prompt, input file or
code.`,
		Exposed: true,
		Name:    "label",
		Stored:  true,
		Type:    "string",
	},
	"languages": {
		AllowedChoices: []string{},
		BSONFieldName:  "languages",
		ConvertedName:  "Languages",
		Description: `The language of the classification.

The current list can be obtained through the analyzers API by searching for
detector groups 'Languages' accross all analyzers.

Example of languages: chinese, english, french, german, gibberish, japanese,
russian, spanish.

If a key is not present in the map that implies that entity was not detected. If
an entity is detected then the value is a score. Here's how to interpret the
scores:
  - confidence: 'low', 0 < score <0.33
  - confidence: 'medium', 0.33 <= score < 0.66
  - confidence: 'high', 0.66 <= score <= 1.`,
		Exposed: true,
		Name:    "languages",
		Stored:  true,
		SubType: "map[string]float64",
		Type:    "external",
	},
	"malcontents": {
		AllowedChoices: []string{},
		BSONFieldName:  "malcontents",
		ConvertedName:  "Malcontents",
		Description: `The various malcontents attempts.

The current list can be obtained through the analyzers API by searching for
detector groups 'Malcontents' accross all analyzers.

Example of malcontents: biased, harmful, toxic.

If a key is not present in the map that implies that entity was not detected. If
an entity is detected then the value is a score. Here's how to interpret the
scores:
  - confidence: 'low', 0 < score <0.33
  - confidence: 'medium', 0.33 <= score < 0.66
  - confidence: 'high', 0.66 <= score <= 1.`,
		Exposed: true,
		Name:    "malcontents",
		Stored:  true,
		SubType: "map[string]float64",
		Type:    "external",
	},
	"modalities": {
		AllowedChoices: []string{},
		BSONFieldName:  "modalities",
		ConvertedName:  "Modalities",
		Description:    `The modalities of data detected in the data.`,
		Exposed:        true,
		Name:           "modalities",
		Stored:         true,
		SubType:        "modality",
		Type:           "refList",
	},

	"relevance": {
		AllowedChoices: []string{},
		BSONFieldName:  "relevance",
		ConvertedName:  "Relevance",
		Description: `The level of general organization relevance of the input.

If a key is not present in the map that implies that entity was not detected. If
an entity is detected then the value is a score. Here's how to interpret the
scores:
  - confidence: 'low', 0 < score <0.33
  - confidence: 'medium', 0.33 <= score < 0.66
  - confidence: 'high', 0.66 <= score <= 1.`,
		Exposed: true,
		Name:    "relevance",
		Stored:  true,
		Type:    "float",
	},
	"secrets": {
		AllowedChoices: []string{},
		BSONFieldName:  "secrets",
		ConvertedName:  "Secrets",
		Description: `The secrets found during classification.

The current list can be obtained through the analyzers API by searching for
detector groups 'Secrets' accross all analyzers.

Example of secrets: adafruit, alibaba, anthropic, apideck, apify, atlassian,
aws_secret_key, buildkite, checkout, clickuppersonal, contentfulpersonalaccess,
credentials, database_url_with_credentials, databricks, denodeploy, dfuse,
digitalocean, discord_webhook, docker_hub, doppler, dropbox, endorlabs,
fleetbase, flutterwave, frameio, freshdesk, fullstory, github, gitlab,
gocardless, google_api, grafana, groq, huggingface, intra42, jwt, klaviyo,
launchdarkly, linearapi, locationiq, mailchimp, mailgun, mapbox, maxmind,
microsoft_teams_webhook, nightfall, notion, npm, openai, otp_auth_url, pagarme,
paystack, planetscale, planetscaledb, portainer, posthog, postman, prefect,
private_key, pubnub_publish, pubnub_subscribe, pulumi, ramp, razorpay, readme,
rechargepayments, replicate, rubygems, salesforce, sendgrid, sendinblue,
shopify, slack_access, slack_bot, slack_refresh, slack_user, slack_webhook,
slack_workflow_webhook, sourcegraph, sourcegraphcody, squareapp, squareup,
stripe, supabase, tailscale, tines_webhook, trufflehog, twilio, ubidots,
voiceflow, web_url_with_credentials, zapierwebhook.

If a key is not present in the map that implies that entity was not detected. If
an entity is detected then the value is a score. Here's how to interpret the
scores:
  - confidence: 'low', 0 < score <0.33
  - confidence: 'medium', 0.33 <= score < 0.66
  - confidence: 'high', 0.66 <= score <= 1.`,
		Exposed: true,
		Name:    "secrets",
		Stored:  true,
		SubType: "map[string]float64",
		Type:    "external",
	},
	"topics": {
		AllowedChoices: []string{},
		BSONFieldName:  "topics",
		ConvertedName:  "Topics",
		Description: `The topic of the classification.

The current list can be obtained through the analyzers API, with the following
conditions:
  1. Includes all analyzers EXCEPT those in the 'Modality' group
  2. Includes all analyzer detectors EXCEPT those in these groups:
    - 'Secrets'
    - 'Exploits'
    - 'Intent'
    - 'PIIs'
    - 'Malcontents'

Example of topics: category/enterprise, category/healthcare, category/medical,
category/personal, contains/blank_image, contains/certificate_signing_request,
contains/database_url, contains/handwritten_text, contains/printed_text,
contains/public_key, contains/ssh_public_key, contains/web_url,
decoded/base32_data, decoded/base58_data, decoded/base64_data,
decoded/base64_url_data, decoded/base85_data, decoded/hexadecimal_data,
decoded/puny_code_data, decoded/quoted_printable_data,
decoded/url_encoding_data, department/compliance, department/cybersecurity,
department/finance, department/human_resources,
department/information_technology, department/legal, department/logistics,
department/marketing, department/performance_evaluation,
department/product_management, department/project_management, department/sales,
department/strategy, department/support, depict/check, depict/code,
depict/document, depict/unclassified, depict/whiteboard, domain/commercial,
domain/development, domain/financial, domain/general, domain/regulatory,
domain/workforce, extracted/csv_cell_content, extracted/document_text_content,
extracted/handwritten_text_content, extracted/pdf_text_content,
extracted/pptx_text_content, extracted/spreadsheet_text_content,
extracted/typed_text_content, timeframe/current_year, timeframe/future,
timeframe/last_year, timeframe/next_year, timeframe/past,
transcribed/audio_text_content.

If a key is not present in the map that implies that entity was not detected. If
an entity is detected then the value is a score. Here's how to interpret the
scores:
  - confidence: 'low', 0 < score <0.33
  - confidence: 'medium', 0.33 <= score < 0.66
  - confidence: 'high', 0.66 <= score <= 1.`,
		Exposed: true,
		Name:    "topics",
		Stored:  true,
		SubType: "map[string]float64",
		Type:    "external",
	},
}

type mongoAttributesExtraction struct {
	PIIs            map[string]float64  `bson:"piis,omitempty"`
	Annotations     map[string]string   `bson:"annotations,omitempty"`
	Categories      []Modality          `bson:"categories,omitempty"`
	Confidentiality float64             `bson:"confidentiality,omitempty"`
	CustomDataTypes map[string]float64  `bson:"customdatatypes,omitempty"`
	Data            string              `bson:"data"`
	Detections      []*TextualDetection `bson:"detections,omitempty"`
	Exploits        map[string]float64  `bson:"exploits,omitempty"`
	Hash            string              `bson:"hash,omitempty"`
	Intent          map[string]float64  `bson:"intent,omitempty"`
	Internal        bool                `bson:"internal,omitempty"`
	IsFile          bool                `bson:"isfile,omitempty"`
	IsStored        bool                `bson:"isstored,omitempty"`
	Keywords        map[string]float64  `bson:"keywords,omitempty"`
	Label           string              `bson:"label,omitempty"`
	Languages       map[string]float64  `bson:"languages,omitempty"`
	Malcontents     map[string]float64  `bson:"malcontents,omitempty"`
	Modalities      []Modality          `bson:"modalities,omitempty"`
	Relevance       float64             `bson:"relevance,omitempty"`
	Secrets         map[string]float64  `bson:"secrets,omitempty"`
	Topics          map[string]float64  `bson:"topics,omitempty"`
}
