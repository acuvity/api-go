// Code generated by elegen. DO NOT EDIT.
// Source: go.acuvity.ai/elemental (templates/identities_registry.gotpl)

package api

import "go.acuvity.ai/elemental"

var (
	identityNamesMap = map[string]elemental.Identity{

		"analyzer": AnalyzerIdentity,

		"latency": LatencyIdentity,

		"policerequest":    PoliceRequestIdentity,
		"policeresponse":   PoliceResponseIdentity,
		"principal":        PrincipalIdentity,
		"principalapp":     PrincipalAppIdentity,
		"principalappuser": PrincipalAppUserIdentity,
		"principaluser":    PrincipalUserIdentity,
		"root":             RootIdentity,
		"scanrequest":      ScanRequestIdentity,
		"scanresponse":     ScanResponseIdentity,

		"traceref": TraceRefIdentity,
	}

	identitycategoriesMap = map[string]elemental.Identity{

		"analyzers": AnalyzerIdentity,

		"latencies": LatencyIdentity,

		"policerequests":    PoliceRequestIdentity,
		"policeresponses":   PoliceResponseIdentity,
		"principals":        PrincipalIdentity,
		"principalapps":     PrincipalAppIdentity,
		"principalappusers": PrincipalAppUserIdentity,
		"principalusers":    PrincipalUserIdentity,
		"root":              RootIdentity,
		"scanrequests":      ScanRequestIdentity,
		"scanresponses":     ScanResponseIdentity,

		"tracerefs": TraceRefIdentity,
	}

	aliasesMap = map[string]elemental.Identity{}

	indexesMap = map[string][][]string{
		"analyzer":         nil,
		"latency":          nil,
		"policerequest":    nil,
		"policeresponse":   nil,
		"principal":        nil,
		"principalapp":     nil,
		"principalappuser": nil,
		"principaluser":    nil,
		"root":             nil,
		"scanrequest":      nil,
		"scanresponse":     nil,
		"traceref":         nil,
	}
)

// ModelVersion returns the current version of the model.
func ModelVersion() float64 { return 1 }

type modelManager struct{}

func (f modelManager) IdentityFromName(name string) elemental.Identity {

	return identityNamesMap[name]
}

func (f modelManager) IdentityFromCategory(category string) elemental.Identity {

	return identitycategoriesMap[category]
}

func (f modelManager) IdentityFromAlias(alias string) elemental.Identity {

	return aliasesMap[alias]
}

func (f modelManager) IdentityFromAny(any string) (i elemental.Identity) {

	if i = f.IdentityFromName(any); !i.IsEmpty() {
		return i
	}

	if i = f.IdentityFromCategory(any); !i.IsEmpty() {
		return i
	}

	return f.IdentityFromAlias(any)
}

func (f modelManager) Identifiable(identity elemental.Identity) elemental.Identifiable {

	switch identity {

	case AnalyzerIdentity:
		return NewAnalyzer()
	case LatencyIdentity:
		return NewLatency()
	case PoliceRequestIdentity:
		return NewPoliceRequest()
	case PoliceResponseIdentity:
		return NewPoliceResponse()
	case PrincipalIdentity:
		return NewPrincipal()
	case PrincipalAppIdentity:
		return NewPrincipalApp()
	case PrincipalAppUserIdentity:
		return NewPrincipalAppUser()
	case PrincipalUserIdentity:
		return NewPrincipalUser()
	case RootIdentity:
		return NewRoot()
	case ScanRequestIdentity:
		return NewScanRequest()
	case ScanResponseIdentity:
		return NewScanResponse()
	case TraceRefIdentity:
		return NewTraceRef()
	default:
		return nil
	}
}

func (f modelManager) SparseIdentifiable(identity elemental.Identity) elemental.SparseIdentifiable {

	switch identity {

	case AnalyzerIdentity:
		return NewSparseAnalyzer()
	case LatencyIdentity:
		return NewSparseLatency()
	case PoliceRequestIdentity:
		return NewSparsePoliceRequest()
	case PoliceResponseIdentity:
		return NewSparsePoliceResponse()
	case PrincipalIdentity:
		return NewSparsePrincipal()
	case PrincipalAppIdentity:
		return NewSparsePrincipalApp()
	case PrincipalAppUserIdentity:
		return NewSparsePrincipalAppUser()
	case PrincipalUserIdentity:
		return NewSparsePrincipalUser()
	case ScanRequestIdentity:
		return NewSparseScanRequest()
	case ScanResponseIdentity:
		return NewSparseScanResponse()
	case TraceRefIdentity:
		return NewSparseTraceRef()
	default:
		return nil
	}
}

func (f modelManager) Indexes(identity elemental.Identity) [][]string {

	return indexesMap[identity.Name]
}

func (f modelManager) IdentifiableFromString(any string) elemental.Identifiable {

	return f.Identifiable(f.IdentityFromAny(any))
}

func (f modelManager) Identifiables(identity elemental.Identity) elemental.Identifiables {

	switch identity {

	case AnalyzerIdentity:
		return &AnalyzersList{}
	case LatencyIdentity:
		return &LatenciesList{}
	case PoliceRequestIdentity:
		return &PoliceRequestsList{}
	case PoliceResponseIdentity:
		return &PoliceResponsesList{}
	case PrincipalIdentity:
		return &PrincipalsList{}
	case PrincipalAppIdentity:
		return &PrincipalAppsList{}
	case PrincipalAppUserIdentity:
		return &PrincipalAppUsersList{}
	case PrincipalUserIdentity:
		return &PrincipalUsersList{}
	case ScanRequestIdentity:
		return &ScanRequestsList{}
	case ScanResponseIdentity:
		return &ScanResponsesList{}
	case TraceRefIdentity:
		return &TraceRefsList{}
	default:
		return nil
	}
}

func (f modelManager) SparseIdentifiables(identity elemental.Identity) elemental.SparseIdentifiables {

	switch identity {

	case AnalyzerIdentity:
		return &SparseAnalyzersList{}
	case LatencyIdentity:
		return &SparseLatenciesList{}
	case PoliceRequestIdentity:
		return &SparsePoliceRequestsList{}
	case PoliceResponseIdentity:
		return &SparsePoliceResponsesList{}
	case PrincipalIdentity:
		return &SparsePrincipalsList{}
	case PrincipalAppIdentity:
		return &SparsePrincipalAppsList{}
	case PrincipalAppUserIdentity:
		return &SparsePrincipalAppUsersList{}
	case PrincipalUserIdentity:
		return &SparsePrincipalUsersList{}
	case ScanRequestIdentity:
		return &SparseScanRequestsList{}
	case ScanResponseIdentity:
		return &SparseScanResponsesList{}
	case TraceRefIdentity:
		return &SparseTraceRefsList{}
	default:
		return nil
	}
}

func (f modelManager) IdentifiablesFromString(any string) elemental.Identifiables {

	return f.Identifiables(f.IdentityFromAny(any))
}

func (f modelManager) Relationships() elemental.RelationshipsRegistry {

	return relationshipsRegistry
}

func (f modelManager) AllIdentities() []elemental.Identity {
	return AllIdentities()
}

func (f modelManager) DetachedFromString(name string) any {

	switch name {

	case "alertevent", "AlertEvent":
		return NewAlertEvent()
	case "analyzermodel", "AnalyzerModel":
		return NewAnalyzerModel()
	case "detectionmatcher", "DetectionMatcher":
		return NewDetectionMatcher()
	case "detector", "Detector":
		return NewDetector()
	case "extraction", "Extraction":
		return NewExtraction()
	case "extractioninformation", "ExtractionInformation":
		return NewExtractionInformation()
	case "extractionrequest", "ExtractionRequest":
		return NewExtractionRequest()
	case "extractionsummary", "ExtractionSummary":
		return NewExtractionSummary()
	case "mcpmessage", "MCPMessage":
		return NewMCPMessage()
	case "mcpserver", "MCPServer":
		return NewMCPServer()
	case "mcptoolannotations", "MCPToolAnnotations":
		return NewMCPToolAnnotations()
	case "modality", "Modality":
		return NewModality()
	case "policeexternaluser", "PoliceExternalUser":
		return NewPoliceExternalUser()
	case "textualdetection", "TextualDetection":
		return NewTextualDetection()
	case "tool", "Tool":
		return NewTool()
	case "toolchoice", "ToolChoice":
		return NewToolChoice()
	case "toolresult", "ToolResult":
		return NewToolResult()
	case "tooluse", "ToolUse":
		return NewToolUse()
	default:
		return nil
	}
}

var manager = modelManager{}

// Manager returns the model elemental.ModelManager.
func Manager() elemental.ModelManager { return manager }

// AllIdentities returns all existing identities.
func AllIdentities() []elemental.Identity {

	return []elemental.Identity{
		AnalyzerIdentity,
		LatencyIdentity,
		PoliceRequestIdentity,
		PoliceResponseIdentity,
		PrincipalIdentity,
		PrincipalAppIdentity,
		PrincipalAppUserIdentity,
		PrincipalUserIdentity,
		RootIdentity,
		ScanRequestIdentity,
		ScanResponseIdentity,
		TraceRefIdentity,
	}
}

// AliasesForIdentity returns all the aliases for the given identity.
func AliasesForIdentity(identity elemental.Identity) []string {

	switch identity {
	case AnalyzerIdentity:
		return []string{}
	case LatencyIdentity:
		return []string{}
	case PoliceRequestIdentity:
		return []string{}
	case PoliceResponseIdentity:
		return []string{}
	case PrincipalIdentity:
		return []string{}
	case PrincipalAppIdentity:
		return []string{}
	case PrincipalAppUserIdentity:
		return []string{}
	case PrincipalUserIdentity:
		return []string{}
	case RootIdentity:
		return []string{}
	case ScanRequestIdentity:
		return []string{}
	case ScanResponseIdentity:
		return []string{}
	case TraceRefIdentity:
		return []string{}
	}

	return nil
}
