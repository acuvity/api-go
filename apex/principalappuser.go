// Code generated by elegen. DO NOT EDIT.
// Source: go.acuvity.ai/elemental (templates/model.gotpl)

package api

import (
	"fmt"
	"slices"

	"github.com/globalsign/mgo/bson"
	"github.com/mitchellh/copystructure"
	"go.acuvity.ai/elemental"
)

// PrincipalAppUserIdentity represents the Identity of the object.
var PrincipalAppUserIdentity = elemental.Identity{
	Name:     "principalappuser",
	Category: "principalappusers",
	Package:  "colektor",
	Private:  false,
}

// PrincipalAppUsersList represents a list of PrincipalAppUsers
type PrincipalAppUsersList []*PrincipalAppUser

// Identity returns the identity of the objects in the list.
func (o PrincipalAppUsersList) Identity() elemental.Identity {

	return PrincipalAppUserIdentity
}

// Copy returns a pointer to a copy the PrincipalAppUsersList.
func (o PrincipalAppUsersList) Copy() elemental.Identifiables {

	out := slices.Clone(o)
	return &out
}

// Append appends the objects to the a new copy of the PrincipalAppUsersList.
func (o PrincipalAppUsersList) Append(objects ...elemental.Identifiable) elemental.Identifiables {

	out := slices.Clone(o)
	for _, obj := range objects {
		out = append(out, obj.(*PrincipalAppUser))
	}

	return out
}

// List converts the object to an elemental.IdentifiablesList.
func (o PrincipalAppUsersList) List() elemental.IdentifiablesList {

	out := make(elemental.IdentifiablesList, len(o))
	for i := range len(o) {
		out[i] = o[i]
	}

	return out
}

// DefaultOrder returns the default ordering fields of the content.
func (o PrincipalAppUsersList) DefaultOrder() []string {

	return []string{}
}

// ToSparse returns the PrincipalAppUsersList converted to SparsePrincipalAppUsersList.
// Objects in the list will only contain the given fields. No field means entire field set.
func (o PrincipalAppUsersList) ToSparse(fields ...string) elemental.Identifiables {

	out := make(SparsePrincipalAppUsersList, len(o))
	for i := range len(o) {
		out[i] = o[i].ToSparse(fields...).(*SparsePrincipalAppUser)
	}

	return out
}

// Version returns the version of the content.
func (o PrincipalAppUsersList) Version() int {

	return 1
}

// PrincipalAppUser represents the model of a principalappuser
type PrincipalAppUser struct {
	// The Email address of the user. This will be derived from the email claims of a
	// token like email, emailAddress or upn.
	Email string `json:"email,omitempty" msgpack:"email,omitempty" bson:"email,omitempty" mapstructure:"email,omitempty"`

	// The given name of the user. This will be derived from the common name claims of
	// a token like name or given_name.
	Name string `json:"name,omitempty" msgpack:"name,omitempty" bson:"name,omitempty" mapstructure:"name,omitempty"`

	// This will be true if the apex was able to validate the token in the request.
	TokenValidated bool `json:"tokenValidated,omitempty" msgpack:"tokenValidated,omitempty" bson:"tokenvalidated,omitempty" mapstructure:"tokenValidated,omitempty"`

	ModelVersion int `json:"-" msgpack:"-" bson:"_modelversion"`
}

// NewPrincipalAppUser returns a new *PrincipalAppUser
func NewPrincipalAppUser() *PrincipalAppUser {

	return &PrincipalAppUser{
		ModelVersion: 1,
	}
}

// Identity returns the Identity of the object.
func (o *PrincipalAppUser) Identity() elemental.Identity {

	return PrincipalAppUserIdentity
}

// Identifier returns the value of the object's unique identifier.
func (o *PrincipalAppUser) Identifier() string {

	return ""
}

// SetIdentifier sets the value of the object's unique identifier.
func (o *PrincipalAppUser) SetIdentifier(id string) {

}

// GetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *PrincipalAppUser) GetBSON() (any, error) {

	if o == nil {
		return nil, nil
	}

	s := &mongoAttributesPrincipalAppUser{}

	s.Email = o.Email
	s.Name = o.Name
	s.TokenValidated = o.TokenValidated

	return s, nil
}

// SetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *PrincipalAppUser) SetBSON(raw bson.Raw) error {

	if o == nil {
		return nil
	}

	s := &mongoAttributesPrincipalAppUser{}
	if err := raw.Unmarshal(s); err != nil {
		return err
	}

	o.Email = s.Email
	o.Name = s.Name
	o.TokenValidated = s.TokenValidated

	return nil
}

// Version returns the hardcoded version of the model.
func (o *PrincipalAppUser) Version() int {

	return 1
}

// BleveType implements the bleve.Classifier Interface.
func (o *PrincipalAppUser) BleveType() string {

	return "principalappuser"
}

// DefaultOrder returns the list of default ordering fields.
func (o *PrincipalAppUser) DefaultOrder() []string {

	return []string{}
}

// Doc returns the documentation for the object
func (o *PrincipalAppUser) Doc() string {

	return `Describes the optional principal information of the user of an application which
is being derived from a bearer token of a request.`
}

func (o *PrincipalAppUser) String() string {

	return fmt.Sprintf("<%s:%s>", o.Identity().Name, o.Identifier())
}

// ToSparse returns the sparse version of the model.
// The returned object will only contain the given fields. No field means entire field set.
func (o *PrincipalAppUser) ToSparse(fields ...string) elemental.SparseIdentifiable {

	if len(fields) == 0 {
		// nolint: goimports
		return &SparsePrincipalAppUser{
			Email:          &o.Email,
			Name:           &o.Name,
			TokenValidated: &o.TokenValidated,
		}
	}

	sp := &SparsePrincipalAppUser{}
	for _, f := range fields {
		switch f {
		case "email":
			sp.Email = &(o.Email)
		case "name":
			sp.Name = &(o.Name)
		case "tokenValidated":
			sp.TokenValidated = &(o.TokenValidated)
		}
	}

	return sp
}

// Patch apply the non nil value of a *SparsePrincipalAppUser to the object.
func (o *PrincipalAppUser) Patch(sparse elemental.SparseIdentifiable) {
	if !sparse.Identity().IsEqual(o.Identity()) {
		panic("cannot patch from a parse with different identity")
	}

	so := sparse.(*SparsePrincipalAppUser)
	if so.Email != nil {
		o.Email = *so.Email
	}
	if so.Name != nil {
		o.Name = *so.Name
	}
	if so.TokenValidated != nil {
		o.TokenValidated = *so.TokenValidated
	}
}

// DeepCopy returns a deep copy if the PrincipalAppUser.
func (o *PrincipalAppUser) DeepCopy() *PrincipalAppUser {

	if o == nil {
		return nil
	}

	out := &PrincipalAppUser{}
	o.DeepCopyInto(out)

	return out
}

// DeepCopyInto copies the receiver into the given *PrincipalAppUser.
func (o *PrincipalAppUser) DeepCopyInto(out *PrincipalAppUser) {

	target, err := copystructure.Copy(o)
	if err != nil {
		panic(fmt.Sprintf("Unable to deepcopy PrincipalAppUser: %s", err))
	}

	*out = *target.(*PrincipalAppUser)
}

// Validate valides the current information stored into the structure.
func (o *PrincipalAppUser) Validate() error {

	errors := elemental.Errors{}
	requiredErrors := elemental.Errors{}

	if len(requiredErrors) > 0 {
		return requiredErrors
	}

	if len(errors) > 0 {
		return errors
	}

	return nil
}

// SpecificationForAttribute returns the AttributeSpecification for the given attribute name key.
func (*PrincipalAppUser) SpecificationForAttribute(name string) elemental.AttributeSpecification {

	if v, ok := PrincipalAppUserAttributesMap[name]; ok {
		return v
	}

	// We could not find it, so let's check on the lower case indexed spec map
	return PrincipalAppUserLowerCaseAttributesMap[name]
}

// AttributeSpecifications returns the full attribute specifications map.
func (*PrincipalAppUser) AttributeSpecifications() map[string]elemental.AttributeSpecification {

	return PrincipalAppUserAttributesMap
}

// ValueForAttribute returns the value for the given attribute.
// This is a very advanced function that you should not need but in some
// very specific use cases.
func (o *PrincipalAppUser) ValueForAttribute(name string) any {

	switch name {
	case "email":
		return o.Email
	case "name":
		return o.Name
	case "tokenValidated":
		return o.TokenValidated
	}

	return nil
}

// PrincipalAppUserAttributesMap represents the map of attribute for PrincipalAppUser.
var PrincipalAppUserAttributesMap = map[string]elemental.AttributeSpecification{
	"Email": {
		AllowedChoices: []string{},
		BSONFieldName:  "email",
		ConvertedName:  "Email",
		Description: `The Email address of the user. This will be derived from the email claims of a
token like email, emailAddress or upn.`,
		Exposed: true,
		Name:    "email",
		Stored:  true,
		Type:    "string",
	},
	"Name": {
		AllowedChoices: []string{},
		BSONFieldName:  "name",
		ConvertedName:  "Name",
		Description: `The given name of the user. This will be derived from the common name claims of
a token like name or given_name.`,
		Exposed: true,
		Name:    "name",
		Stored:  true,
		Type:    "string",
	},
	"TokenValidated": {
		AllowedChoices: []string{},
		BSONFieldName:  "tokenvalidated",
		ConvertedName:  "TokenValidated",
		Description:    `This will be true if the apex was able to validate the token in the request.`,
		Exposed:        true,
		Name:           "tokenValidated",
		Stored:         true,
		Type:           "boolean",
	},
}

// PrincipalAppUserLowerCaseAttributesMap represents the map of attribute for PrincipalAppUser.
var PrincipalAppUserLowerCaseAttributesMap = map[string]elemental.AttributeSpecification{
	"email": {
		AllowedChoices: []string{},
		BSONFieldName:  "email",
		ConvertedName:  "Email",
		Description: `The Email address of the user. This will be derived from the email claims of a
token like email, emailAddress or upn.`,
		Exposed: true,
		Name:    "email",
		Stored:  true,
		Type:    "string",
	},
	"name": {
		AllowedChoices: []string{},
		BSONFieldName:  "name",
		ConvertedName:  "Name",
		Description: `The given name of the user. This will be derived from the common name claims of
a token like name or given_name.`,
		Exposed: true,
		Name:    "name",
		Stored:  true,
		Type:    "string",
	},
	"tokenvalidated": {
		AllowedChoices: []string{},
		BSONFieldName:  "tokenvalidated",
		ConvertedName:  "TokenValidated",
		Description:    `This will be true if the apex was able to validate the token in the request.`,
		Exposed:        true,
		Name:           "tokenValidated",
		Stored:         true,
		Type:           "boolean",
	},
}

// SparsePrincipalAppUsersList represents a list of SparsePrincipalAppUsers
type SparsePrincipalAppUsersList []*SparsePrincipalAppUser

// Identity returns the identity of the objects in the list.
func (o SparsePrincipalAppUsersList) Identity() elemental.Identity {

	return PrincipalAppUserIdentity
}

// Copy returns a pointer to a copy the SparsePrincipalAppUsersList.
func (o SparsePrincipalAppUsersList) Copy() elemental.Identifiables {

	copy := slices.Clone(o)
	return &copy
}

// Append appends the objects to the a new copy of the SparsePrincipalAppUsersList.
func (o SparsePrincipalAppUsersList) Append(objects ...elemental.Identifiable) elemental.Identifiables {

	out := slices.Clone(o)
	for _, obj := range objects {
		out = append(out, obj.(*SparsePrincipalAppUser))
	}

	return out
}

// List converts the object to an elemental.IdentifiablesList.
func (o SparsePrincipalAppUsersList) List() elemental.IdentifiablesList {

	out := make(elemental.IdentifiablesList, len(o))
	for i := range len(o) {
		out[i] = o[i]
	}

	return out
}

// DefaultOrder returns the default ordering fields of the content.
func (o SparsePrincipalAppUsersList) DefaultOrder() []string {

	return []string{}
}

// ToPlain returns the SparsePrincipalAppUsersList converted to PrincipalAppUsersList.
func (o SparsePrincipalAppUsersList) ToPlain() elemental.IdentifiablesList {

	out := make(elemental.IdentifiablesList, len(o))
	for i := range len(o) {
		out[i] = o[i].ToPlain()
	}

	return out
}

// Version returns the version of the content.
func (o SparsePrincipalAppUsersList) Version() int {

	return 1
}

// SparsePrincipalAppUser represents the sparse version of a principalappuser.
type SparsePrincipalAppUser struct {
	// The Email address of the user. This will be derived from the email claims of a
	// token like email, emailAddress or upn.
	Email *string `json:"email,omitempty" msgpack:"email,omitempty" bson:"email,omitempty" mapstructure:"email,omitempty"`

	// The given name of the user. This will be derived from the common name claims of
	// a token like name or given_name.
	Name *string `json:"name,omitempty" msgpack:"name,omitempty" bson:"name,omitempty" mapstructure:"name,omitempty"`

	// This will be true if the apex was able to validate the token in the request.
	TokenValidated *bool `json:"tokenValidated,omitempty" msgpack:"tokenValidated,omitempty" bson:"tokenvalidated,omitempty" mapstructure:"tokenValidated,omitempty"`

	ModelVersion int `json:"-" msgpack:"-" bson:"_modelversion"`
}

// NewSparsePrincipalAppUser returns a new  SparsePrincipalAppUser.
func NewSparsePrincipalAppUser() *SparsePrincipalAppUser {
	return &SparsePrincipalAppUser{}
}

// Identity returns the Identity of the sparse object.
func (o *SparsePrincipalAppUser) Identity() elemental.Identity {

	return PrincipalAppUserIdentity
}

// Identifier returns the value of the sparse object's unique identifier.
func (o *SparsePrincipalAppUser) Identifier() string {

	return ""
}

// SetIdentifier sets the value of the sparse object's unique identifier.
func (o *SparsePrincipalAppUser) SetIdentifier(id string) {

}

// GetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *SparsePrincipalAppUser) GetBSON() (any, error) {

	if o == nil {
		return nil, nil
	}

	s := &mongoAttributesSparsePrincipalAppUser{}

	if o.Email != nil {
		s.Email = o.Email
	}
	if o.Name != nil {
		s.Name = o.Name
	}
	if o.TokenValidated != nil {
		s.TokenValidated = o.TokenValidated
	}

	return s, nil
}

// SetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *SparsePrincipalAppUser) SetBSON(raw bson.Raw) error {

	if o == nil {
		return nil
	}

	s := &mongoAttributesSparsePrincipalAppUser{}
	if err := raw.Unmarshal(s); err != nil {
		return err
	}

	if s.Email != nil {
		o.Email = s.Email
	}
	if s.Name != nil {
		o.Name = s.Name
	}
	if s.TokenValidated != nil {
		o.TokenValidated = s.TokenValidated
	}

	return nil
}

// Version returns the hardcoded version of the model.
func (o *SparsePrincipalAppUser) Version() int {

	return 1
}

// ToPlain returns the plain version of the sparse model.
func (o *SparsePrincipalAppUser) ToPlain() elemental.PlainIdentifiable {

	out := NewPrincipalAppUser()
	if o.Email != nil {
		out.Email = *o.Email
	}
	if o.Name != nil {
		out.Name = *o.Name
	}
	if o.TokenValidated != nil {
		out.TokenValidated = *o.TokenValidated
	}

	return out
}

// DeepCopy returns a deep copy if the SparsePrincipalAppUser.
func (o *SparsePrincipalAppUser) DeepCopy() *SparsePrincipalAppUser {

	if o == nil {
		return nil
	}

	out := &SparsePrincipalAppUser{}
	o.DeepCopyInto(out)

	return out
}

// DeepCopyInto copies the receiver into the given *SparsePrincipalAppUser.
func (o *SparsePrincipalAppUser) DeepCopyInto(out *SparsePrincipalAppUser) {

	target, err := copystructure.Copy(o)
	if err != nil {
		panic(fmt.Sprintf("Unable to deepcopy SparsePrincipalAppUser: %s", err))
	}

	*out = *target.(*SparsePrincipalAppUser)
}

type mongoAttributesPrincipalAppUser struct {
	Email          string `bson:"email,omitempty"`
	Name           string `bson:"name,omitempty"`
	TokenValidated bool   `bson:"tokenvalidated,omitempty"`
}
type mongoAttributesSparsePrincipalAppUser struct {
	Email          *string `bson:"email,omitempty"`
	Name           *string `bson:"name,omitempty"`
	TokenValidated *bool   `bson:"tokenvalidated,omitempty"`
}
