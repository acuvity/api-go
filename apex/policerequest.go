// Code generated by elegen. DO NOT EDIT.
// Source: go.acuvity.ai/elemental (templates/model.gotpl)

package api

import (
	"fmt"
	"slices"

	"github.com/globalsign/mgo/bson"
	"github.com/mitchellh/copystructure"
	"go.acuvity.ai/elemental"
)

// PoliceRequestAnonymizationValue represents the possible values for attribute "anonymization".
type PoliceRequestAnonymizationValue string

const (
	// PoliceRequestAnonymizationFixedSize represents the value FixedSize.
	PoliceRequestAnonymizationFixedSize PoliceRequestAnonymizationValue = "FixedSize"

	// PoliceRequestAnonymizationVariableSize represents the value VariableSize.
	PoliceRequestAnonymizationVariableSize PoliceRequestAnonymizationValue = "VariableSize"
)

// PoliceRequestTypeValue represents the possible values for attribute "type".
type PoliceRequestTypeValue string

const (
	// PoliceRequestTypeInput represents the value Input.
	PoliceRequestTypeInput PoliceRequestTypeValue = "Input"

	// PoliceRequestTypeOutput represents the value Output.
	PoliceRequestTypeOutput PoliceRequestTypeValue = "Output"
)

// PoliceRequestIdentity represents the Identity of the object.
var PoliceRequestIdentity = elemental.Identity{
	Name:     "policerequest",
	Category: "policerequests",
	Package:  "proxy",
	Private:  false,
}

// PoliceRequestsList represents a list of PoliceRequests
type PoliceRequestsList []*PoliceRequest

// Identity returns the identity of the objects in the list.
func (o PoliceRequestsList) Identity() elemental.Identity {

	return PoliceRequestIdentity
}

// Copy returns a pointer to a copy the PoliceRequestsList.
func (o PoliceRequestsList) Copy() elemental.Identifiables {

	out := slices.Clone(o)
	return &out
}

// Append appends the objects to the a new copy of the PoliceRequestsList.
func (o PoliceRequestsList) Append(objects ...elemental.Identifiable) elemental.Identifiables {

	out := slices.Clone(o)
	for _, obj := range objects {
		out = append(out, obj.(*PoliceRequest))
	}

	return out
}

// List converts the object to an elemental.IdentifiablesList.
func (o PoliceRequestsList) List() elemental.IdentifiablesList {

	out := make(elemental.IdentifiablesList, len(o))
	for i := range len(o) {
		out[i] = o[i]
	}

	return out
}

// DefaultOrder returns the default ordering fields of the content.
func (o PoliceRequestsList) DefaultOrder() []string {

	return []string{}
}

// ToSparse returns the PoliceRequestsList converted to SparsePoliceRequestsList.
// Objects in the list will only contain the given fields. No field means entire field set.
func (o PoliceRequestsList) ToSparse(fields ...string) elemental.Identifiables {

	out := make(SparsePoliceRequestsList, len(o))
	for i := range len(o) {
		out[i] = o[i].ToSparse(fields...).(*SparsePoliceRequest)
	}

	return out
}

// Version returns the version of the content.
func (o PoliceRequestsList) Version() int {

	return 1
}

// PoliceRequest represents the model of a policerequest
type PoliceRequest struct {
	// Annotations attached to the extraction.
	Annotations map[string]string `json:"annotations,omitempty" msgpack:"annotations,omitempty" bson:"-" mapstructure:"annotations,omitempty"`

	// How to anonymize the data. If deanonymize is true, then VariablSize is required.
	Anonymization PoliceRequestAnonymizationValue `json:"anonymization" msgpack:"anonymization" bson:"anonymization" mapstructure:"anonymization,omitempty"`

	// In the case of a contentPolicy that asks for a confirmation, this is the
	// hash you must send back to bypass the block. This is only useful when a
	// content policy has been set or is evaluated remotely.
	BypassHash string `json:"bypassHash,omitempty" msgpack:"bypassHash,omitempty" bson:"bypasshash,omitempty" mapstructure:"bypassHash,omitempty"`

	// The extractions to request.
	Extractions []*ExtractionRequest `json:"extractions" msgpack:"extractions" bson:"-" mapstructure:"extractions,omitempty"`

	// Messages to process and provide detections for. Use data in extractions for
	// processing binary data.
	Messages []string `json:"messages,omitempty" msgpack:"messages,omitempty" bson:"-" mapstructure:"messages,omitempty"`

	// The model used by the request.
	Model string `json:"model,omitempty" msgpack:"model,omitempty" bson:"model,omitempty" mapstructure:"model,omitempty"`

	// The name of the provider to use for policy resolutions. If not set, it will
	// default to the principal name (the application itself).
	Provider string `json:"provider,omitempty" msgpack:"provider,omitempty" bson:"-" mapstructure:"provider,omitempty"`

	// The various tools used by the request.
	Tools map[string]*Tool `json:"tools,omitempty" msgpack:"tools,omitempty" bson:"tools,omitempty" mapstructure:"tools,omitempty"`

	// References to the trace of the request.
	Trace *TraceRef `json:"trace,omitempty" msgpack:"trace,omitempty" bson:"trace,omitempty" mapstructure:"trace,omitempty"`

	// The type of text.
	Type PoliceRequestTypeValue `json:"type" msgpack:"type" bson:"type" mapstructure:"type,omitempty"`

	// The user information that the PoliceRequest is passing on to the policy
	// engine that can be used for additional policy resolution.
	User *PoliceExternalUser `json:"user,omitempty" msgpack:"user,omitempty" bson:"-" mapstructure:"user,omitempty"`

	ModelVersion int `json:"-" msgpack:"-" bson:"_modelversion"`
}

// NewPoliceRequest returns a new *PoliceRequest
func NewPoliceRequest() *PoliceRequest {

	return &PoliceRequest{
		ModelVersion:  1,
		Annotations:   map[string]string{},
		Anonymization: PoliceRequestAnonymizationFixedSize,
	}
}

// Identity returns the Identity of the object.
func (o *PoliceRequest) Identity() elemental.Identity {

	return PoliceRequestIdentity
}

// Identifier returns the value of the object's unique identifier.
func (o *PoliceRequest) Identifier() string {

	return ""
}

// SetIdentifier sets the value of the object's unique identifier.
func (o *PoliceRequest) SetIdentifier(id string) {

}

// GetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *PoliceRequest) GetBSON() (any, error) {

	if o == nil {
		return nil, nil
	}

	s := &mongoAttributesPoliceRequest{}

	s.Anonymization = o.Anonymization
	s.BypassHash = o.BypassHash
	s.Model = o.Model
	s.Tools = o.Tools
	s.Trace = o.Trace
	s.Type = o.Type

	return s, nil
}

// SetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *PoliceRequest) SetBSON(raw bson.Raw) error {

	if o == nil || raw.Kind == bson.ElementNil {
		return bson.ErrSetZero
	}

	s := &mongoAttributesPoliceRequest{}
	if err := raw.Unmarshal(s); err != nil {
		return err
	}

	o.Anonymization = s.Anonymization
	o.BypassHash = s.BypassHash
	o.Model = s.Model
	o.Tools = s.Tools
	o.Trace = s.Trace
	o.Type = s.Type

	return nil
}

// Version returns the hardcoded version of the model.
func (o *PoliceRequest) Version() int {

	return 1
}

// BleveType implements the bleve.Classifier Interface.
func (o *PoliceRequest) BleveType() string {

	return "policerequest"
}

// DefaultOrder returns the list of default ordering fields.
func (o *PoliceRequest) DefaultOrder() []string {

	return []string{}
}

// Doc returns the documentation for the object
func (o *PoliceRequest) Doc() string {

	return `This is a scan and police request.`
}

func (o *PoliceRequest) String() string {

	return fmt.Sprintf("<%s:%s>", o.Identity().Name, o.Identifier())
}

// ToSparse returns the sparse version of the model.
// The returned object will only contain the given fields. No field means entire field set.
func (o *PoliceRequest) ToSparse(fields ...string) elemental.SparseIdentifiable {

	if len(fields) == 0 {
		// nolint: goimports
		return &SparsePoliceRequest{
			Annotations:   &o.Annotations,
			Anonymization: &o.Anonymization,
			BypassHash:    &o.BypassHash,
			Extractions:   &o.Extractions,
			Messages:      &o.Messages,
			Model:         &o.Model,
			Provider:      &o.Provider,
			Tools:         &o.Tools,
			Trace:         o.Trace,
			Type:          &o.Type,
			User:          o.User,
		}
	}

	sp := &SparsePoliceRequest{}
	for _, f := range fields {
		switch f {
		case "annotations":
			sp.Annotations = &(o.Annotations)
		case "anonymization":
			sp.Anonymization = &(o.Anonymization)
		case "bypassHash":
			sp.BypassHash = &(o.BypassHash)
		case "extractions":
			sp.Extractions = &(o.Extractions)
		case "messages":
			sp.Messages = &(o.Messages)
		case "model":
			sp.Model = &(o.Model)
		case "provider":
			sp.Provider = &(o.Provider)
		case "tools":
			sp.Tools = &(o.Tools)
		case "trace":
			sp.Trace = o.Trace
		case "type":
			sp.Type = &(o.Type)
		case "user":
			sp.User = o.User
		}
	}

	return sp
}

// Patch apply the non nil value of a *SparsePoliceRequest to the object.
func (o *PoliceRequest) Patch(sparse elemental.SparseIdentifiable) {
	if !sparse.Identity().IsEqual(o.Identity()) {
		panic("cannot patch from a parse with different identity")
	}

	so := sparse.(*SparsePoliceRequest)
	if so.Annotations != nil {
		o.Annotations = *so.Annotations
	}
	if so.Anonymization != nil {
		o.Anonymization = *so.Anonymization
	}
	if so.BypassHash != nil {
		o.BypassHash = *so.BypassHash
	}
	if so.Extractions != nil {
		o.Extractions = *so.Extractions
	}
	if so.Messages != nil {
		o.Messages = *so.Messages
	}
	if so.Model != nil {
		o.Model = *so.Model
	}
	if so.Provider != nil {
		o.Provider = *so.Provider
	}
	if so.Tools != nil {
		o.Tools = *so.Tools
	}
	if so.Trace != nil {
		o.Trace = so.Trace
	}
	if so.Type != nil {
		o.Type = *so.Type
	}
	if so.User != nil {
		o.User = so.User
	}
}

// DeepCopy returns a deep copy if the PoliceRequest.
func (o *PoliceRequest) DeepCopy() *PoliceRequest {

	if o == nil {
		return nil
	}

	out := &PoliceRequest{}
	o.DeepCopyInto(out)

	return out
}

// DeepCopyInto copies the receiver into the given *PoliceRequest.
func (o *PoliceRequest) DeepCopyInto(out *PoliceRequest) {

	target, err := copystructure.Copy(o)
	if err != nil {
		panic(fmt.Sprintf("Unable to deepcopy PoliceRequest: %s", err))
	}

	*out = *target.(*PoliceRequest)
}

// Validate valides the current information stored into the structure.
func (o *PoliceRequest) Validate() error {

	errors := elemental.Errors{}
	requiredErrors := elemental.Errors{}

	if err := elemental.ValidateStringInList("anonymization", string(o.Anonymization), []string{"FixedSize", "VariableSize"}, false); err != nil {
		errors = errors.Append(err)
	}

	for _, sub := range o.Extractions {
		if sub == nil {
			continue
		}
		elemental.ResetDefaultForZeroValues(sub)
		if err := sub.Validate(); err != nil {
			errors = errors.Append(err)
		}
	}

	for _, sub := range o.Tools {
		if sub == nil {
			continue
		}
		elemental.ResetDefaultForZeroValues(sub)
		if err := sub.Validate(); err != nil {
			errors = errors.Append(err)
		}
	}

	if o.Trace != nil {
		elemental.ResetDefaultForZeroValues(o.Trace)
		if err := o.Trace.Validate(); err != nil {
			errors = errors.Append(err)
		}
	}

	if err := elemental.ValidateStringInList("type", string(o.Type), []string{"Input", "Output"}, false); err != nil {
		errors = errors.Append(err)
	}

	if o.User != nil {
		elemental.ResetDefaultForZeroValues(o.User)
		if err := o.User.Validate(); err != nil {
			errors = errors.Append(err)
		}
	}

	if len(requiredErrors) > 0 {
		return requiredErrors
	}

	if len(errors) > 0 {
		return errors
	}

	return nil
}

// SpecificationForAttribute returns the AttributeSpecification for the given attribute name key.
func (*PoliceRequest) SpecificationForAttribute(name string) elemental.AttributeSpecification {

	if v, ok := PoliceRequestAttributesMap[name]; ok {
		return v
	}

	// We could not find it, so let's check on the lower case indexed spec map
	return PoliceRequestLowerCaseAttributesMap[name]
}

// AttributeSpecifications returns the full attribute specifications map.
func (*PoliceRequest) AttributeSpecifications() map[string]elemental.AttributeSpecification {

	return PoliceRequestAttributesMap
}

// ValueForAttribute returns the value for the given attribute.
// This is a very advanced function that you should not need but in some
// very specific use cases.
func (o *PoliceRequest) ValueForAttribute(name string) any {

	switch name {
	case "annotations":
		return o.Annotations
	case "anonymization":
		return o.Anonymization
	case "bypassHash":
		return o.BypassHash
	case "extractions":
		return o.Extractions
	case "messages":
		return o.Messages
	case "model":
		return o.Model
	case "provider":
		return o.Provider
	case "tools":
		return o.Tools
	case "trace":
		return o.Trace
	case "type":
		return o.Type
	case "user":
		return o.User
	}

	return nil
}

// PoliceRequestAttributesMap represents the map of attribute for PoliceRequest.
var PoliceRequestAttributesMap = map[string]elemental.AttributeSpecification{
	"Annotations": {
		AllowedChoices: []string{},
		ConvertedName:  "Annotations",
		Description:    `Annotations attached to the extraction.`,
		Exposed:        true,
		Name:           "annotations",
		SubType:        "map[string]string",
		Type:           "external",
	},
	"Anonymization": {
		AllowedChoices: []string{"FixedSize", "VariableSize"},
		BSONFieldName:  "anonymization",
		ConvertedName:  "Anonymization",
		DefaultValue:   PoliceRequestAnonymizationFixedSize,
		Description:    `How to anonymize the data. If deanonymize is true, then VariablSize is required.`,
		Exposed:        true,
		Name:           "anonymization",
		Stored:         true,
		Type:           "enum",
	},
	"BypassHash": {
		AllowedChoices: []string{},
		BSONFieldName:  "bypasshash",
		ConvertedName:  "BypassHash",
		Description: `In the case of a contentPolicy that asks for a confirmation, this is the
hash you must send back to bypass the block. This is only useful when a
content policy has been set or is evaluated remotely.`,
		Exposed: true,
		Name:    "bypassHash",
		Stored:  true,
		Type:    "string",
	},
	"Extractions": {
		AllowedChoices: []string{},
		ConvertedName:  "Extractions",
		Description:    `The extractions to request.`,
		Exposed:        true,
		Name:           "extractions",
		SubType:        "extractionrequest",
		Type:           "refList",
	},
	"Messages": {
		AllowedChoices: []string{},
		ConvertedName:  "Messages",
		Description: `Messages to process and provide detections for. Use data in extractions for
processing binary data.`,
		Exposed: true,
		Name:    "messages",
		SubType: "string",
		Type:    "list",
	},
	"Model": {
		AllowedChoices: []string{},
		BSONFieldName:  "model",
		ConvertedName:  "Model",
		Description:    `The model used by the request.`,
		Exposed:        true,
		Name:           "model",
		Stored:         true,
		Type:           "string",
	},
	"Provider": {
		AllowedChoices: []string{},
		ConvertedName:  "Provider",
		Description: `The name of the provider to use for policy resolutions. If not set, it will
default to the principal name (the application itself).`,
		Exposed: true,
		Name:    "provider",
		Type:    "string",
	},
	"Tools": {
		AllowedChoices: []string{},
		BSONFieldName:  "tools",
		ConvertedName:  "Tools",
		Description:    `The various tools used by the request.`,
		Exposed:        true,
		Name:           "tools",
		Stored:         true,
		SubType:        "tool",
		Type:           "refMap",
	},
	"Trace": {
		AllowedChoices: []string{},
		BSONFieldName:  "trace",
		ConvertedName:  "Trace",
		Description:    `References to the trace of the request.`,
		Exposed:        true,
		Name:           "trace",
		Stored:         true,
		SubType:        "traceref",
		Type:           "ref",
	},
	"Type": {
		AllowedChoices: []string{"Input", "Output"},
		BSONFieldName:  "type",
		ConvertedName:  "Type",
		Description:    `The type of text.`,
		Exposed:        true,
		Name:           "type",
		Stored:         true,
		Type:           "enum",
	},
	"User": {
		AllowedChoices: []string{},
		ConvertedName:  "User",
		Description: `The user information that the PoliceRequest is passing on to the policy
engine that can be used for additional policy resolution.`,
		Exposed: true,
		Name:    "user",
		SubType: "policeexternaluser",
		Type:    "ref",
	},
}

// PoliceRequestLowerCaseAttributesMap represents the map of attribute for PoliceRequest.
var PoliceRequestLowerCaseAttributesMap = map[string]elemental.AttributeSpecification{
	"annotations": {
		AllowedChoices: []string{},
		ConvertedName:  "Annotations",
		Description:    `Annotations attached to the extraction.`,
		Exposed:        true,
		Name:           "annotations",
		SubType:        "map[string]string",
		Type:           "external",
	},
	"anonymization": {
		AllowedChoices: []string{"FixedSize", "VariableSize"},
		BSONFieldName:  "anonymization",
		ConvertedName:  "Anonymization",
		DefaultValue:   PoliceRequestAnonymizationFixedSize,
		Description:    `How to anonymize the data. If deanonymize is true, then VariablSize is required.`,
		Exposed:        true,
		Name:           "anonymization",
		Stored:         true,
		Type:           "enum",
	},
	"bypasshash": {
		AllowedChoices: []string{},
		BSONFieldName:  "bypasshash",
		ConvertedName:  "BypassHash",
		Description: `In the case of a contentPolicy that asks for a confirmation, this is the
hash you must send back to bypass the block. This is only useful when a
content policy has been set or is evaluated remotely.`,
		Exposed: true,
		Name:    "bypassHash",
		Stored:  true,
		Type:    "string",
	},
	"extractions": {
		AllowedChoices: []string{},
		ConvertedName:  "Extractions",
		Description:    `The extractions to request.`,
		Exposed:        true,
		Name:           "extractions",
		SubType:        "extractionrequest",
		Type:           "refList",
	},
	"messages": {
		AllowedChoices: []string{},
		ConvertedName:  "Messages",
		Description: `Messages to process and provide detections for. Use data in extractions for
processing binary data.`,
		Exposed: true,
		Name:    "messages",
		SubType: "string",
		Type:    "list",
	},
	"model": {
		AllowedChoices: []string{},
		BSONFieldName:  "model",
		ConvertedName:  "Model",
		Description:    `The model used by the request.`,
		Exposed:        true,
		Name:           "model",
		Stored:         true,
		Type:           "string",
	},
	"provider": {
		AllowedChoices: []string{},
		ConvertedName:  "Provider",
		Description: `The name of the provider to use for policy resolutions. If not set, it will
default to the principal name (the application itself).`,
		Exposed: true,
		Name:    "provider",
		Type:    "string",
	},
	"tools": {
		AllowedChoices: []string{},
		BSONFieldName:  "tools",
		ConvertedName:  "Tools",
		Description:    `The various tools used by the request.`,
		Exposed:        true,
		Name:           "tools",
		Stored:         true,
		SubType:        "tool",
		Type:           "refMap",
	},
	"trace": {
		AllowedChoices: []string{},
		BSONFieldName:  "trace",
		ConvertedName:  "Trace",
		Description:    `References to the trace of the request.`,
		Exposed:        true,
		Name:           "trace",
		Stored:         true,
		SubType:        "traceref",
		Type:           "ref",
	},
	"type": {
		AllowedChoices: []string{"Input", "Output"},
		BSONFieldName:  "type",
		ConvertedName:  "Type",
		Description:    `The type of text.`,
		Exposed:        true,
		Name:           "type",
		Stored:         true,
		Type:           "enum",
	},
	"user": {
		AllowedChoices: []string{},
		ConvertedName:  "User",
		Description: `The user information that the PoliceRequest is passing on to the policy
engine that can be used for additional policy resolution.`,
		Exposed: true,
		Name:    "user",
		SubType: "policeexternaluser",
		Type:    "ref",
	},
}

// SparsePoliceRequestsList represents a list of SparsePoliceRequests
type SparsePoliceRequestsList []*SparsePoliceRequest

// Identity returns the identity of the objects in the list.
func (o SparsePoliceRequestsList) Identity() elemental.Identity {

	return PoliceRequestIdentity
}

// Copy returns a pointer to a copy the SparsePoliceRequestsList.
func (o SparsePoliceRequestsList) Copy() elemental.Identifiables {

	copy := slices.Clone(o)
	return &copy
}

// Append appends the objects to the a new copy of the SparsePoliceRequestsList.
func (o SparsePoliceRequestsList) Append(objects ...elemental.Identifiable) elemental.Identifiables {

	out := slices.Clone(o)
	for _, obj := range objects {
		out = append(out, obj.(*SparsePoliceRequest))
	}

	return out
}

// List converts the object to an elemental.IdentifiablesList.
func (o SparsePoliceRequestsList) List() elemental.IdentifiablesList {

	out := make(elemental.IdentifiablesList, len(o))
	for i := range len(o) {
		out[i] = o[i]
	}

	return out
}

// DefaultOrder returns the default ordering fields of the content.
func (o SparsePoliceRequestsList) DefaultOrder() []string {

	return []string{}
}

// ToPlain returns the SparsePoliceRequestsList converted to PoliceRequestsList.
func (o SparsePoliceRequestsList) ToPlain() elemental.IdentifiablesList {

	out := make(elemental.IdentifiablesList, len(o))
	for i := range len(o) {
		out[i] = o[i].ToPlain()
	}

	return out
}

// Version returns the version of the content.
func (o SparsePoliceRequestsList) Version() int {

	return 1
}

// SparsePoliceRequest represents the sparse version of a policerequest.
type SparsePoliceRequest struct {
	// Annotations attached to the extraction.
	Annotations *map[string]string `json:"annotations,omitempty" msgpack:"annotations,omitempty" bson:"-" mapstructure:"annotations,omitempty"`

	// How to anonymize the data. If deanonymize is true, then VariablSize is required.
	Anonymization *PoliceRequestAnonymizationValue `json:"anonymization,omitempty" msgpack:"anonymization,omitempty" bson:"anonymization,omitempty" mapstructure:"anonymization,omitempty"`

	// In the case of a contentPolicy that asks for a confirmation, this is the
	// hash you must send back to bypass the block. This is only useful when a
	// content policy has been set or is evaluated remotely.
	BypassHash *string `json:"bypassHash,omitempty" msgpack:"bypassHash,omitempty" bson:"bypasshash,omitempty" mapstructure:"bypassHash,omitempty"`

	// The extractions to request.
	Extractions *[]*ExtractionRequest `json:"extractions,omitempty" msgpack:"extractions,omitempty" bson:"-" mapstructure:"extractions,omitempty"`

	// Messages to process and provide detections for. Use data in extractions for
	// processing binary data.
	Messages *[]string `json:"messages,omitempty" msgpack:"messages,omitempty" bson:"-" mapstructure:"messages,omitempty"`

	// The model used by the request.
	Model *string `json:"model,omitempty" msgpack:"model,omitempty" bson:"model,omitempty" mapstructure:"model,omitempty"`

	// The name of the provider to use for policy resolutions. If not set, it will
	// default to the principal name (the application itself).
	Provider *string `json:"provider,omitempty" msgpack:"provider,omitempty" bson:"-" mapstructure:"provider,omitempty"`

	// The various tools used by the request.
	Tools *map[string]*Tool `json:"tools,omitempty" msgpack:"tools,omitempty" bson:"tools,omitempty" mapstructure:"tools,omitempty"`

	// References to the trace of the request.
	Trace *TraceRef `json:"trace,omitempty" msgpack:"trace,omitempty" bson:"trace,omitempty" mapstructure:"trace,omitempty"`

	// The type of text.
	Type *PoliceRequestTypeValue `json:"type,omitempty" msgpack:"type,omitempty" bson:"type,omitempty" mapstructure:"type,omitempty"`

	// The user information that the PoliceRequest is passing on to the policy
	// engine that can be used for additional policy resolution.
	User *PoliceExternalUser `json:"user,omitempty" msgpack:"user,omitempty" bson:"-" mapstructure:"user,omitempty"`

	ModelVersion int `json:"-" msgpack:"-" bson:"_modelversion"`
}

// NewSparsePoliceRequest returns a new  SparsePoliceRequest.
func NewSparsePoliceRequest() *SparsePoliceRequest {
	return &SparsePoliceRequest{}
}

// Identity returns the Identity of the sparse object.
func (o *SparsePoliceRequest) Identity() elemental.Identity {

	return PoliceRequestIdentity
}

// Identifier returns the value of the sparse object's unique identifier.
func (o *SparsePoliceRequest) Identifier() string {

	return ""
}

// SetIdentifier sets the value of the sparse object's unique identifier.
func (o *SparsePoliceRequest) SetIdentifier(id string) {

}

// GetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *SparsePoliceRequest) GetBSON() (any, error) {

	if o == nil {
		return nil, nil
	}

	s := &mongoAttributesSparsePoliceRequest{}

	if o.Anonymization != nil {
		s.Anonymization = o.Anonymization
	}
	if o.BypassHash != nil {
		s.BypassHash = o.BypassHash
	}
	if o.Model != nil {
		s.Model = o.Model
	}
	if o.Tools != nil {
		s.Tools = o.Tools
	}
	if o.Trace != nil {
		s.Trace = o.Trace
	}
	if o.Type != nil {
		s.Type = o.Type
	}

	return s, nil
}

// SetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *SparsePoliceRequest) SetBSON(raw bson.Raw) error {

	if o == nil {
		return nil
	}

	s := &mongoAttributesSparsePoliceRequest{}
	if err := raw.Unmarshal(s); err != nil {
		return err
	}

	if s.Anonymization != nil {
		o.Anonymization = s.Anonymization
	}
	if s.BypassHash != nil {
		o.BypassHash = s.BypassHash
	}
	if s.Model != nil {
		o.Model = s.Model
	}
	if s.Tools != nil {
		o.Tools = s.Tools
	}
	if s.Trace != nil {
		o.Trace = s.Trace
	}
	if s.Type != nil {
		o.Type = s.Type
	}

	return nil
}

// Version returns the hardcoded version of the model.
func (o *SparsePoliceRequest) Version() int {

	return 1
}

// ToPlain returns the plain version of the sparse model.
func (o *SparsePoliceRequest) ToPlain() elemental.PlainIdentifiable {

	out := NewPoliceRequest()
	if o.Annotations != nil {
		out.Annotations = *o.Annotations
	}
	if o.Anonymization != nil {
		out.Anonymization = *o.Anonymization
	}
	if o.BypassHash != nil {
		out.BypassHash = *o.BypassHash
	}
	if o.Extractions != nil {
		out.Extractions = *o.Extractions
	}
	if o.Messages != nil {
		out.Messages = *o.Messages
	}
	if o.Model != nil {
		out.Model = *o.Model
	}
	if o.Provider != nil {
		out.Provider = *o.Provider
	}
	if o.Tools != nil {
		out.Tools = *o.Tools
	}
	if o.Trace != nil {
		out.Trace = o.Trace
	}
	if o.Type != nil {
		out.Type = *o.Type
	}
	if o.User != nil {
		out.User = o.User
	}

	return out
}

// DeepCopy returns a deep copy if the SparsePoliceRequest.
func (o *SparsePoliceRequest) DeepCopy() *SparsePoliceRequest {

	if o == nil {
		return nil
	}

	out := &SparsePoliceRequest{}
	o.DeepCopyInto(out)

	return out
}

// DeepCopyInto copies the receiver into the given *SparsePoliceRequest.
func (o *SparsePoliceRequest) DeepCopyInto(out *SparsePoliceRequest) {

	target, err := copystructure.Copy(o)
	if err != nil {
		panic(fmt.Sprintf("Unable to deepcopy SparsePoliceRequest: %s", err))
	}

	*out = *target.(*SparsePoliceRequest)
}

type mongoAttributesPoliceRequest struct {
	Anonymization PoliceRequestAnonymizationValue `bson:"anonymization"`
	BypassHash    string                          `bson:"bypasshash,omitempty"`
	Model         string                          `bson:"model,omitempty"`
	Tools         map[string]*Tool                `bson:"tools,omitempty"`
	Trace         *TraceRef                       `bson:"trace,omitempty"`
	Type          PoliceRequestTypeValue          `bson:"type"`
}
type mongoAttributesSparsePoliceRequest struct {
	Anonymization *PoliceRequestAnonymizationValue `bson:"anonymization,omitempty"`
	BypassHash    *string                          `bson:"bypasshash,omitempty"`
	Model         *string                          `bson:"model,omitempty"`
	Tools         *map[string]*Tool                `bson:"tools,omitempty"`
	Trace         *TraceRef                        `bson:"trace,omitempty"`
	Type          *PoliceRequestTypeValue          `bson:"type,omitempty"`
}
