// Code generated by elegen. DO NOT EDIT.
// Source: go.acuvity.ai/elemental (templates/identities_registry.gotpl)

package api

import "go.acuvity.ai/elemental"

var (
	identityNamesMap = map[string]elemental.Identity{

		"analyzer": AnalyzerIdentity,

		"latency": LatencyIdentity,

		"principal":     PrincipalIdentity,
		"principalapp":  PrincipalAppIdentity,
		"principaluser": PrincipalUserIdentity,
		"root":          RootIdentity,
	}

	identitycategoriesMap = map[string]elemental.Identity{

		"analyzers": AnalyzerIdentity,

		"latencies": LatencyIdentity,

		"principals":     PrincipalIdentity,
		"principalapps":  PrincipalAppIdentity,
		"principalusers": PrincipalUserIdentity,
		"root":           RootIdentity,
	}

	aliasesMap = map[string]elemental.Identity{}

	indexesMap = map[string][][]string{
		"analyzer":      nil,
		"latency":       nil,
		"principal":     nil,
		"principalapp":  nil,
		"principaluser": nil,
		"root":          nil,
	}
)

// ModelVersion returns the current version of the model.
func ModelVersion() float64 { return 1 }

type modelManager struct{}

func (f modelManager) IdentityFromName(name string) elemental.Identity {

	return identityNamesMap[name]
}

func (f modelManager) IdentityFromCategory(category string) elemental.Identity {

	return identitycategoriesMap[category]
}

func (f modelManager) IdentityFromAlias(alias string) elemental.Identity {

	return aliasesMap[alias]
}

func (f modelManager) IdentityFromAny(any string) (i elemental.Identity) {

	if i = f.IdentityFromName(any); !i.IsEmpty() {
		return i
	}

	if i = f.IdentityFromCategory(any); !i.IsEmpty() {
		return i
	}

	return f.IdentityFromAlias(any)
}

func (f modelManager) Identifiable(identity elemental.Identity) elemental.Identifiable {

	switch identity {

	case AnalyzerIdentity:
		return NewAnalyzer()
	case LatencyIdentity:
		return NewLatency()
	case PrincipalIdentity:
		return NewPrincipal()
	case PrincipalAppIdentity:
		return NewPrincipalApp()
	case PrincipalUserIdentity:
		return NewPrincipalUser()
	case RootIdentity:
		return NewRoot()
	default:
		return nil
	}
}

func (f modelManager) SparseIdentifiable(identity elemental.Identity) elemental.SparseIdentifiable {

	switch identity {

	case AnalyzerIdentity:
		return NewSparseAnalyzer()
	case LatencyIdentity:
		return NewSparseLatency()
	case PrincipalIdentity:
		return NewSparsePrincipal()
	case PrincipalAppIdentity:
		return NewSparsePrincipalApp()
	case PrincipalUserIdentity:
		return NewSparsePrincipalUser()
	default:
		return nil
	}
}

func (f modelManager) Indexes(identity elemental.Identity) [][]string {

	return indexesMap[identity.Name]
}

func (f modelManager) IdentifiableFromString(any string) elemental.Identifiable {

	return f.Identifiable(f.IdentityFromAny(any))
}

func (f modelManager) Identifiables(identity elemental.Identity) elemental.Identifiables {

	switch identity {

	case AnalyzerIdentity:
		return &AnalyzersList{}
	case LatencyIdentity:
		return &LatenciesList{}
	case PrincipalIdentity:
		return &PrincipalsList{}
	case PrincipalAppIdentity:
		return &PrincipalAppsList{}
	case PrincipalUserIdentity:
		return &PrincipalUsersList{}
	default:
		return nil
	}
}

func (f modelManager) SparseIdentifiables(identity elemental.Identity) elemental.SparseIdentifiables {

	switch identity {

	case AnalyzerIdentity:
		return &SparseAnalyzersList{}
	case LatencyIdentity:
		return &SparseLatenciesList{}
	case PrincipalIdentity:
		return &SparsePrincipalsList{}
	case PrincipalAppIdentity:
		return &SparsePrincipalAppsList{}
	case PrincipalUserIdentity:
		return &SparsePrincipalUsersList{}
	default:
		return nil
	}
}

func (f modelManager) IdentifiablesFromString(any string) elemental.Identifiables {

	return f.Identifiables(f.IdentityFromAny(any))
}

func (f modelManager) Relationships() elemental.RelationshipsRegistry {

	return relationshipsRegistry
}

func (f modelManager) AllIdentities() []elemental.Identity {
	return AllIdentities()
}

var manager = modelManager{}

// Manager returns the model elemental.ModelManager.
func Manager() elemental.ModelManager { return manager }

// AllIdentities returns all existing identities.
func AllIdentities() []elemental.Identity {

	return []elemental.Identity{
		AnalyzerIdentity,
		LatencyIdentity,
		PrincipalIdentity,
		PrincipalAppIdentity,
		PrincipalUserIdentity,
		RootIdentity,
	}
}

// AliasesForIdentity returns all the aliases for the given identity.
func AliasesForIdentity(identity elemental.Identity) []string {

	switch identity {
	case AnalyzerIdentity:
		return []string{}
	case LatencyIdentity:
		return []string{}
	case PrincipalIdentity:
		return []string{}
	case PrincipalAppIdentity:
		return []string{}
	case PrincipalUserIdentity:
		return []string{}
	case RootIdentity:
		return []string{}
	}

	return nil
}
