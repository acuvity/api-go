// Code generated by elegen. DO NOT EDIT.
// Source: go.acuvity.ai/elemental (templates/model.gotpl)

package api

import (
	"fmt"

	"github.com/globalsign/mgo/bson"
	"github.com/mitchellh/copystructure"
	"go.acuvity.ai/elemental"
)

// Modality represents the model of a modality
type Modality struct {
	// The group of data.
	Group string `json:"group" msgpack:"group" bson:"group" mapstructure:"group,omitempty"`

	// The type of data.
	Type string `json:"type" msgpack:"type" bson:"type" mapstructure:"type,omitempty"`

	ModelVersion int `json:"-" msgpack:"-" bson:"_modelversion"`
}

// NewModality returns a new *Modality
func NewModality() *Modality {

	return &Modality{
		ModelVersion: 1,
	}
}

// GetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *Modality) GetBSON() (any, error) {

	if o == nil {
		return nil, nil
	}

	s := &mongoAttributesModality{}

	s.Group = o.Group
	s.Type = o.Type

	return s, nil
}

// SetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *Modality) SetBSON(raw bson.Raw) error {

	if o == nil {
		return nil
	}

	s := &mongoAttributesModality{}
	if err := raw.Unmarshal(s); err != nil {
		return err
	}

	o.Group = s.Group
	o.Type = s.Type

	return nil
}

// BleveType implements the bleve.Classifier Interface.
func (o *Modality) BleveType() string {

	return "modality"
}

// DeepCopy returns a deep copy if the Modality.
func (o *Modality) DeepCopy() *Modality {

	if o == nil {
		return nil
	}

	out := &Modality{}
	o.DeepCopyInto(out)

	return out
}

// DeepCopyInto copies the receiver into the given *Modality.
func (o *Modality) DeepCopyInto(out *Modality) {

	target, err := copystructure.Copy(o)
	if err != nil {
		panic(fmt.Sprintf("Unable to deepcopy Modality: %s", err))
	}

	*out = *target.(*Modality)
}

// Validate valides the current information stored into the structure.
func (o *Modality) Validate() error {

	errors := elemental.Errors{}
	requiredErrors := elemental.Errors{}

	if err := elemental.ValidateRequiredString("group", o.Group); err != nil {
		requiredErrors = requiredErrors.Append(err)
	}

	if err := elemental.ValidateRequiredString("type", o.Type); err != nil {
		requiredErrors = requiredErrors.Append(err)
	}

	if len(requiredErrors) > 0 {
		return requiredErrors
	}

	if len(errors) > 0 {
		return errors
	}

	return nil
}

// SpecificationForAttribute returns the AttributeSpecification for the given attribute name key.
func (*Modality) SpecificationForAttribute(name string) elemental.AttributeSpecification {

	if v, ok := ModalityAttributesMap[name]; ok {
		return v
	}

	// We could not find it, so let's check on the lower case indexed spec map
	return ModalityLowerCaseAttributesMap[name]
}

// AttributeSpecifications returns the full attribute specifications map.
func (*Modality) AttributeSpecifications() map[string]elemental.AttributeSpecification {

	return ModalityAttributesMap
}

// ValueForAttribute returns the value for the given attribute.
// This is a very advanced function that you should not need but in some
// very specific use cases.
func (o *Modality) ValueForAttribute(name string) any {

	switch name {
	case "group":
		return o.Group
	case "type":
		return o.Type
	}

	return nil
}

// ModalityAttributesMap represents the map of attribute for Modality.
var ModalityAttributesMap = map[string]elemental.AttributeSpecification{
	"Group": {
		AllowedChoices: []string{},
		BSONFieldName:  "group",
		ConvertedName:  "Group",
		Description:    `The group of data.`,
		Exposed:        true,
		Name:           "group",
		Required:       true,
		Stored:         true,
		Type:           "string",
	},
	"Type": {
		AllowedChoices: []string{},
		BSONFieldName:  "type",
		ConvertedName:  "Type",
		Description:    `The type of data.`,
		Exposed:        true,
		Name:           "type",
		Required:       true,
		Stored:         true,
		Type:           "string",
	},
}

// ModalityLowerCaseAttributesMap represents the map of attribute for Modality.
var ModalityLowerCaseAttributesMap = map[string]elemental.AttributeSpecification{
	"group": {
		AllowedChoices: []string{},
		BSONFieldName:  "group",
		ConvertedName:  "Group",
		Description:    `The group of data.`,
		Exposed:        true,
		Name:           "group",
		Required:       true,
		Stored:         true,
		Type:           "string",
	},
	"type": {
		AllowedChoices: []string{},
		BSONFieldName:  "type",
		ConvertedName:  "Type",
		Description:    `The type of data.`,
		Exposed:        true,
		Name:           "type",
		Required:       true,
		Stored:         true,
		Type:           "string",
	},
}

type mongoAttributesModality struct {
	Group string `bson:"group"`
	Type  string `bson:"type"`
}
