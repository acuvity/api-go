// Code generated by elegen. DO NOT EDIT.
// Source: go.acuvity.ai/elemental (templates/model.gotpl)

package api

import (
	"fmt"

	"github.com/globalsign/mgo/bson"
	"github.com/mitchellh/copystructure"
	"go.acuvity.ai/elemental"
)

// ExtractionRequest represents the model of a extractionrequest
type ExtractionRequest struct {
	// Annotations attached to the extraction.
	Annotations map[string]string `json:"annotations,omitempty" msgpack:"annotations,omitempty" bson:"annotations,omitempty" mapstructure:"annotations,omitempty"`

	// The binary data to request extraction for.
	Data []byte `json:"data" msgpack:"data" bson:"-" mapstructure:"data,omitempty"`

	// If true, this extraction is for internal use only. This can be used by agentic
	// systems to mark an extraction as internal only as opposed to user facing.
	Internal bool `json:"internal,omitempty" msgpack:"internal,omitempty" bson:"internal,omitempty" mapstructure:"internal,omitempty"`

	// If true, the data of the extraction is a file.
	IsFile bool `json:"isFile,omitempty" msgpack:"isFile,omitempty" bson:"isfile,omitempty" mapstructure:"isFile,omitempty"`

	// If true, indicates that the file has been stored.
	IsStored bool `json:"isStored,omitempty" msgpack:"isStored,omitempty" bson:"isstored,omitempty" mapstructure:"isStored,omitempty"`

	// A means of distinguishing what was extracted, such as prompt, input file or
	// code.
	Label string `json:"label,omitempty" msgpack:"label,omitempty" bson:"label,omitempty" mapstructure:"label,omitempty"`

	// This is an internal field and has no api meaning.
	OriginalData string `json:"-" msgpack:"-" bson:"-" mapstructure:"-,omitempty"`

	ModelVersion int `json:"-" msgpack:"-" bson:"_modelversion"`
}

// NewExtractionRequest returns a new *ExtractionRequest
func NewExtractionRequest() *ExtractionRequest {

	return &ExtractionRequest{
		ModelVersion: 1,
		Annotations:  map[string]string{},
		Data:         []byte{},
	}
}

// GetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *ExtractionRequest) GetBSON() (any, error) {

	if o == nil {
		return nil, nil
	}

	s := &mongoAttributesExtractionRequest{}

	s.Annotations = o.Annotations
	s.Internal = o.Internal
	s.IsFile = o.IsFile
	s.IsStored = o.IsStored
	s.Label = o.Label

	return s, nil
}

// SetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *ExtractionRequest) SetBSON(raw bson.Raw) error {

	if o == nil {
		return nil
	}

	s := &mongoAttributesExtractionRequest{}
	if err := raw.Unmarshal(s); err != nil {
		return err
	}

	o.Annotations = s.Annotations
	o.Internal = s.Internal
	o.IsFile = s.IsFile
	o.IsStored = s.IsStored
	o.Label = s.Label

	return nil
}

// BleveType implements the bleve.Classifier Interface.
func (o *ExtractionRequest) BleveType() string {

	return "extractionrequest"
}

// DeepCopy returns a deep copy if the ExtractionRequest.
func (o *ExtractionRequest) DeepCopy() *ExtractionRequest {

	if o == nil {
		return nil
	}

	out := &ExtractionRequest{}
	o.DeepCopyInto(out)

	return out
}

// DeepCopyInto copies the receiver into the given *ExtractionRequest.
func (o *ExtractionRequest) DeepCopyInto(out *ExtractionRequest) {

	target, err := copystructure.Copy(o)
	if err != nil {
		panic(fmt.Sprintf("Unable to deepcopy ExtractionRequest: %s", err))
	}

	*out = *target.(*ExtractionRequest)
}

// Validate valides the current information stored into the structure.
func (o *ExtractionRequest) Validate() error {

	errors := elemental.Errors{}
	requiredErrors := elemental.Errors{}

	if len(requiredErrors) > 0 {
		return requiredErrors
	}

	if len(errors) > 0 {
		return errors
	}

	return nil
}

// SpecificationForAttribute returns the AttributeSpecification for the given attribute name key.
func (*ExtractionRequest) SpecificationForAttribute(name string) elemental.AttributeSpecification {

	if v, ok := ExtractionRequestAttributesMap[name]; ok {
		return v
	}

	// We could not find it, so let's check on the lower case indexed spec map
	return ExtractionRequestLowerCaseAttributesMap[name]
}

// AttributeSpecifications returns the full attribute specifications map.
func (*ExtractionRequest) AttributeSpecifications() map[string]elemental.AttributeSpecification {

	return ExtractionRequestAttributesMap
}

// ValueForAttribute returns the value for the given attribute.
// This is a very advanced function that you should not need but in some
// very specific use cases.
func (o *ExtractionRequest) ValueForAttribute(name string) any {

	switch name {
	case "annotations":
		return o.Annotations
	case "data":
		return o.Data
	case "internal":
		return o.Internal
	case "isFile":
		return o.IsFile
	case "isStored":
		return o.IsStored
	case "label":
		return o.Label
	case "originalData":
		return o.OriginalData
	}

	return nil
}

// ExtractionRequestAttributesMap represents the map of attribute for ExtractionRequest.
var ExtractionRequestAttributesMap = map[string]elemental.AttributeSpecification{
	"Annotations": {
		AllowedChoices: []string{},
		BSONFieldName:  "annotations",
		ConvertedName:  "Annotations",
		Description:    `Annotations attached to the extraction.`,
		Exposed:        true,
		Name:           "annotations",
		Stored:         true,
		SubType:        "map[string]string",
		Type:           "external",
	},
	"Data": {
		AllowedChoices: []string{},
		ConvertedName:  "Data",
		Description:    `The binary data to request extraction for.`,
		Exposed:        true,
		Name:           "data",
		SubType:        "[]byte",
		Type:           "external",
	},
	"Internal": {
		AllowedChoices: []string{},
		BSONFieldName:  "internal",
		ConvertedName:  "Internal",
		Description: `If true, this extraction is for internal use only. This can be used by agentic
systems to mark an extraction as internal only as opposed to user facing.`,
		Exposed: true,
		Name:    "internal",
		Stored:  true,
		Type:    "boolean",
	},
	"IsFile": {
		AllowedChoices: []string{},
		BSONFieldName:  "isfile",
		ConvertedName:  "IsFile",
		Description:    `If true, the data of the extraction is a file.`,
		Exposed:        true,
		Name:           "isFile",
		Stored:         true,
		Type:           "boolean",
	},
	"IsStored": {
		AllowedChoices: []string{},
		BSONFieldName:  "isstored",
		ConvertedName:  "IsStored",
		Description:    `If true, indicates that the file has been stored.`,
		Exposed:        true,
		Name:           "isStored",
		Stored:         true,
		Type:           "boolean",
	},
	"Label": {
		AllowedChoices: []string{},
		BSONFieldName:  "label",
		ConvertedName:  "Label",
		Description: `A means of distinguishing what was extracted, such as prompt, input file or
code.`,
		Exposed: true,
		Name:    "label",
		Stored:  true,
		Type:    "string",
	},
	"OriginalData": {
		AllowedChoices: []string{},
		ConvertedName:  "OriginalData",
		Description:    `This is an internal field and has no api meaning.`,
		Name:           "originalData",
		Type:           "string",
	},
}

// ExtractionRequestLowerCaseAttributesMap represents the map of attribute for ExtractionRequest.
var ExtractionRequestLowerCaseAttributesMap = map[string]elemental.AttributeSpecification{
	"annotations": {
		AllowedChoices: []string{},
		BSONFieldName:  "annotations",
		ConvertedName:  "Annotations",
		Description:    `Annotations attached to the extraction.`,
		Exposed:        true,
		Name:           "annotations",
		Stored:         true,
		SubType:        "map[string]string",
		Type:           "external",
	},
	"data": {
		AllowedChoices: []string{},
		ConvertedName:  "Data",
		Description:    `The binary data to request extraction for.`,
		Exposed:        true,
		Name:           "data",
		SubType:        "[]byte",
		Type:           "external",
	},
	"internal": {
		AllowedChoices: []string{},
		BSONFieldName:  "internal",
		ConvertedName:  "Internal",
		Description: `If true, this extraction is for internal use only. This can be used by agentic
systems to mark an extraction as internal only as opposed to user facing.`,
		Exposed: true,
		Name:    "internal",
		Stored:  true,
		Type:    "boolean",
	},
	"isfile": {
		AllowedChoices: []string{},
		BSONFieldName:  "isfile",
		ConvertedName:  "IsFile",
		Description:    `If true, the data of the extraction is a file.`,
		Exposed:        true,
		Name:           "isFile",
		Stored:         true,
		Type:           "boolean",
	},
	"isstored": {
		AllowedChoices: []string{},
		BSONFieldName:  "isstored",
		ConvertedName:  "IsStored",
		Description:    `If true, indicates that the file has been stored.`,
		Exposed:        true,
		Name:           "isStored",
		Stored:         true,
		Type:           "boolean",
	},
	"label": {
		AllowedChoices: []string{},
		BSONFieldName:  "label",
		ConvertedName:  "Label",
		Description: `A means of distinguishing what was extracted, such as prompt, input file or
code.`,
		Exposed: true,
		Name:    "label",
		Stored:  true,
		Type:    "string",
	},
	"originaldata": {
		AllowedChoices: []string{},
		ConvertedName:  "OriginalData",
		Description:    `This is an internal field and has no api meaning.`,
		Name:           "originalData",
		Type:           "string",
	},
}

type mongoAttributesExtractionRequest struct {
	Annotations map[string]string `bson:"annotations,omitempty"`
	Internal    bool              `bson:"internal,omitempty"`
	IsFile      bool              `bson:"isfile,omitempty"`
	IsStored    bool              `bson:"isstored,omitempty"`
	Label       string            `bson:"label,omitempty"`
}
