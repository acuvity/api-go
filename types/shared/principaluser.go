// Code generated by elegen. DO NOT EDIT.
// Source: go.acuvity.ai/elemental (templates/model.gotpl)

package api

import (
	"fmt"

	"github.com/globalsign/mgo/bson"
	"github.com/mitchellh/copystructure"
	"go.acuvity.ai/elemental"
)

// PrincipalUserIdentity represents the Identity of the object.
var PrincipalUserIdentity = elemental.Identity{
	Name:     "principaluser",
	Category: "principalusers",
	Package:  "colektor",
	Private:  false,
}

// PrincipalUsersList represents a list of PrincipalUsers
type PrincipalUsersList []*PrincipalUser

// Identity returns the identity of the objects in the list.
func (o PrincipalUsersList) Identity() elemental.Identity {

	return PrincipalUserIdentity
}

// Copy returns a pointer to a copy the PrincipalUsersList.
func (o PrincipalUsersList) Copy() elemental.Identifiables {

	out := append(PrincipalUsersList{}, o...)
	return &out
}

// Append appends the objects to the a new copy of the PrincipalUsersList.
func (o PrincipalUsersList) Append(objects ...elemental.Identifiable) elemental.Identifiables {

	out := append(PrincipalUsersList{}, o...)
	for _, obj := range objects {
		out = append(out, obj.(*PrincipalUser))
	}

	return out
}

// List converts the object to an elemental.IdentifiablesList.
func (o PrincipalUsersList) List() elemental.IdentifiablesList {

	out := make(elemental.IdentifiablesList, len(o))
	for i := 0; i < len(o); i++ {
		out[i] = o[i]
	}

	return out
}

// DefaultOrder returns the default ordering fields of the content.
func (o PrincipalUsersList) DefaultOrder() []string {

	return []string{}
}

// ToSparse returns the PrincipalUsersList converted to SparsePrincipalUsersList.
// Objects in the list will only contain the given fields. No field means entire field set.
func (o PrincipalUsersList) ToSparse(fields ...string) elemental.Identifiables {

	out := make(SparsePrincipalUsersList, len(o))
	for i := 0; i < len(o); i++ {
		out[i] = o[i].ToSparse(fields...).(*SparsePrincipalUser)
	}

	return out
}

// Version returns the version of the content.
func (o PrincipalUsersList) Version() int {

	return 1
}

// PrincipalUser represents the model of a principaluser
type PrincipalUser struct {
	// Identification bit that will be used to identify the origin of the request.
	Name string `json:"name" msgpack:"name" bson:"name" mapstructure:"name,omitempty"`

	ModelVersion int `json:"-" msgpack:"-" bson:"_modelversion"`
}

// NewPrincipalUser returns a new *PrincipalUser
func NewPrincipalUser() *PrincipalUser {

	return &PrincipalUser{
		ModelVersion: 1,
	}
}

// Identity returns the Identity of the object.
func (o *PrincipalUser) Identity() elemental.Identity {

	return PrincipalUserIdentity
}

// Identifier returns the value of the object's unique identifier.
func (o *PrincipalUser) Identifier() string {

	return ""
}

// SetIdentifier sets the value of the object's unique identifier.
func (o *PrincipalUser) SetIdentifier(id string) {

}

// GetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *PrincipalUser) GetBSON() (any, error) {

	if o == nil {
		return nil, nil
	}

	s := &mongoAttributesPrincipalUser{}

	s.Name = o.Name

	return s, nil
}

// SetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *PrincipalUser) SetBSON(raw bson.Raw) error {

	if o == nil {
		return nil
	}

	s := &mongoAttributesPrincipalUser{}
	if err := raw.Unmarshal(s); err != nil {
		return err
	}

	o.Name = s.Name

	return nil
}

// Version returns the hardcoded version of the model.
func (o *PrincipalUser) Version() int {

	return 1
}

// BleveType implements the bleve.Classifier Interface.
func (o *PrincipalUser) BleveType() string {

	return "principaluser"
}

// DefaultOrder returns the list of default ordering fields.
func (o *PrincipalUser) DefaultOrder() []string {

	return []string{}
}

// Doc returns the documentation for the object
func (o *PrincipalUser) Doc() string {

	return `Describes the principal information of a user.`
}

func (o *PrincipalUser) String() string {

	return fmt.Sprintf("<%s:%s>", o.Identity().Name, o.Identifier())
}

// ToSparse returns the sparse version of the model.
// The returned object will only contain the given fields. No field means entire field set.
func (o *PrincipalUser) ToSparse(fields ...string) elemental.SparseIdentifiable {

	if len(fields) == 0 {
		// nolint: goimports
		return &SparsePrincipalUser{
			Name: &o.Name,
		}
	}

	sp := &SparsePrincipalUser{}
	for _, f := range fields {
		switch f {
		case "name":
			sp.Name = &(o.Name)
		}
	}

	return sp
}

// Patch apply the non nil value of a *SparsePrincipalUser to the object.
func (o *PrincipalUser) Patch(sparse elemental.SparseIdentifiable) {
	if !sparse.Identity().IsEqual(o.Identity()) {
		panic("cannot patch from a parse with different identity")
	}

	so := sparse.(*SparsePrincipalUser)
	if so.Name != nil {
		o.Name = *so.Name
	}
}

// DeepCopy returns a deep copy if the PrincipalUser.
func (o *PrincipalUser) DeepCopy() *PrincipalUser {

	if o == nil {
		return nil
	}

	out := &PrincipalUser{}
	o.DeepCopyInto(out)

	return out
}

// DeepCopyInto copies the receiver into the given *PrincipalUser.
func (o *PrincipalUser) DeepCopyInto(out *PrincipalUser) {

	target, err := copystructure.Copy(o)
	if err != nil {
		panic(fmt.Sprintf("Unable to deepcopy PrincipalUser: %s", err))
	}

	*out = *target.(*PrincipalUser)
}

// Validate valides the current information stored into the structure.
func (o *PrincipalUser) Validate() error {

	errors := elemental.Errors{}
	requiredErrors := elemental.Errors{}

	if len(requiredErrors) > 0 {
		return requiredErrors
	}

	if len(errors) > 0 {
		return errors
	}

	return nil
}

// SpecificationForAttribute returns the AttributeSpecification for the given attribute name key.
func (*PrincipalUser) SpecificationForAttribute(name string) elemental.AttributeSpecification {

	if v, ok := PrincipalUserAttributesMap[name]; ok {
		return v
	}

	// We could not find it, so let's check on the lower case indexed spec map
	return PrincipalUserLowerCaseAttributesMap[name]
}

// AttributeSpecifications returns the full attribute specifications map.
func (*PrincipalUser) AttributeSpecifications() map[string]elemental.AttributeSpecification {

	return PrincipalUserAttributesMap
}

// ValueForAttribute returns the value for the given attribute.
// This is a very advanced function that you should not need but in some
// very specific use cases.
func (o *PrincipalUser) ValueForAttribute(name string) any {

	switch name {
	case "name":
		return o.Name
	}

	return nil
}

// PrincipalUserAttributesMap represents the map of attribute for PrincipalUser.
var PrincipalUserAttributesMap = map[string]elemental.AttributeSpecification{
	"Name": {
		AllowedChoices: []string{},
		BSONFieldName:  "name",
		ConvertedName:  "Name",
		Description:    `Identification bit that will be used to identify the origin of the request.`,
		Exposed:        true,
		Name:           "name",
		Stored:         true,
		Type:           "string",
	},
}

// PrincipalUserLowerCaseAttributesMap represents the map of attribute for PrincipalUser.
var PrincipalUserLowerCaseAttributesMap = map[string]elemental.AttributeSpecification{
	"name": {
		AllowedChoices: []string{},
		BSONFieldName:  "name",
		ConvertedName:  "Name",
		Description:    `Identification bit that will be used to identify the origin of the request.`,
		Exposed:        true,
		Name:           "name",
		Stored:         true,
		Type:           "string",
	},
}

// SparsePrincipalUsersList represents a list of SparsePrincipalUsers
type SparsePrincipalUsersList []*SparsePrincipalUser

// Identity returns the identity of the objects in the list.
func (o SparsePrincipalUsersList) Identity() elemental.Identity {

	return PrincipalUserIdentity
}

// Copy returns a pointer to a copy the SparsePrincipalUsersList.
func (o SparsePrincipalUsersList) Copy() elemental.Identifiables {

	copy := append(SparsePrincipalUsersList{}, o...)
	return &copy
}

// Append appends the objects to the a new copy of the SparsePrincipalUsersList.
func (o SparsePrincipalUsersList) Append(objects ...elemental.Identifiable) elemental.Identifiables {

	out := append(SparsePrincipalUsersList{}, o...)
	for _, obj := range objects {
		out = append(out, obj.(*SparsePrincipalUser))
	}

	return out
}

// List converts the object to an elemental.IdentifiablesList.
func (o SparsePrincipalUsersList) List() elemental.IdentifiablesList {

	out := make(elemental.IdentifiablesList, len(o))
	for i := 0; i < len(o); i++ {
		out[i] = o[i]
	}

	return out
}

// DefaultOrder returns the default ordering fields of the content.
func (o SparsePrincipalUsersList) DefaultOrder() []string {

	return []string{}
}

// ToPlain returns the SparsePrincipalUsersList converted to PrincipalUsersList.
func (o SparsePrincipalUsersList) ToPlain() elemental.IdentifiablesList {

	out := make(elemental.IdentifiablesList, len(o))
	for i := 0; i < len(o); i++ {
		out[i] = o[i].ToPlain()
	}

	return out
}

// Version returns the version of the content.
func (o SparsePrincipalUsersList) Version() int {

	return 1
}

// SparsePrincipalUser represents the sparse version of a principaluser.
type SparsePrincipalUser struct {
	// Identification bit that will be used to identify the origin of the request.
	Name *string `json:"name,omitempty" msgpack:"name,omitempty" bson:"name,omitempty" mapstructure:"name,omitempty"`

	ModelVersion int `json:"-" msgpack:"-" bson:"_modelversion"`
}

// NewSparsePrincipalUser returns a new  SparsePrincipalUser.
func NewSparsePrincipalUser() *SparsePrincipalUser {
	return &SparsePrincipalUser{}
}

// Identity returns the Identity of the sparse object.
func (o *SparsePrincipalUser) Identity() elemental.Identity {

	return PrincipalUserIdentity
}

// Identifier returns the value of the sparse object's unique identifier.
func (o *SparsePrincipalUser) Identifier() string {

	return ""
}

// SetIdentifier sets the value of the sparse object's unique identifier.
func (o *SparsePrincipalUser) SetIdentifier(id string) {

}

// GetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *SparsePrincipalUser) GetBSON() (any, error) {

	if o == nil {
		return nil, nil
	}

	s := &mongoAttributesSparsePrincipalUser{}

	if o.Name != nil {
		s.Name = o.Name
	}

	return s, nil
}

// SetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *SparsePrincipalUser) SetBSON(raw bson.Raw) error {

	if o == nil {
		return nil
	}

	s := &mongoAttributesSparsePrincipalUser{}
	if err := raw.Unmarshal(s); err != nil {
		return err
	}

	if s.Name != nil {
		o.Name = s.Name
	}

	return nil
}

// Version returns the hardcoded version of the model.
func (o *SparsePrincipalUser) Version() int {

	return 1
}

// ToPlain returns the plain version of the sparse model.
func (o *SparsePrincipalUser) ToPlain() elemental.PlainIdentifiable {

	out := NewPrincipalUser()
	if o.Name != nil {
		out.Name = *o.Name
	}

	return out
}

// DeepCopy returns a deep copy if the SparsePrincipalUser.
func (o *SparsePrincipalUser) DeepCopy() *SparsePrincipalUser {

	if o == nil {
		return nil
	}

	out := &SparsePrincipalUser{}
	o.DeepCopyInto(out)

	return out
}

// DeepCopyInto copies the receiver into the given *SparsePrincipalUser.
func (o *SparsePrincipalUser) DeepCopyInto(out *SparsePrincipalUser) {

	target, err := copystructure.Copy(o)
	if err != nil {
		panic(fmt.Sprintf("Unable to deepcopy SparsePrincipalUser: %s", err))
	}

	*out = *target.(*SparsePrincipalUser)
}

type mongoAttributesPrincipalUser struct {
	Name string `bson:"name"`
}
type mongoAttributesSparsePrincipalUser struct {
	Name *string `bson:"name,omitempty"`
}
