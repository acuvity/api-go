// Code generated by elegen. DO NOT EDIT.
// Source: go.acuvity.ai/elemental (templates/model.gotpl)

package api

import (
	"fmt"

	"github.com/globalsign/mgo/bson"
	"github.com/mitchellh/copystructure"
	"go.acuvity.ai/elemental"
)

// ErrorTransformerIdentity represents the Identity of the object.
var ErrorTransformerIdentity = elemental.Identity{
	Name:     "errortransformer",
	Category: "errortransformers",
	Package:  "lain",
	Private:  false,
}

// ErrorTransformersList represents a list of ErrorTransformers
type ErrorTransformersList []*ErrorTransformer

// Identity returns the identity of the objects in the list.
func (o ErrorTransformersList) Identity() elemental.Identity {

	return ErrorTransformerIdentity
}

// Copy returns a pointer to a copy the ErrorTransformersList.
func (o ErrorTransformersList) Copy() elemental.Identifiables {

	out := append(ErrorTransformersList{}, o...)
	return &out
}

// Append appends the objects to the a new copy of the ErrorTransformersList.
func (o ErrorTransformersList) Append(objects ...elemental.Identifiable) elemental.Identifiables {

	out := append(ErrorTransformersList{}, o...)
	for _, obj := range objects {
		out = append(out, obj.(*ErrorTransformer))
	}

	return out
}

// List converts the object to an elemental.IdentifiablesList.
func (o ErrorTransformersList) List() elemental.IdentifiablesList {

	out := make(elemental.IdentifiablesList, len(o))
	for i := 0; i < len(o); i++ {
		out[i] = o[i]
	}

	return out
}

// DefaultOrder returns the default ordering fields of the content.
func (o ErrorTransformersList) DefaultOrder() []string {

	return []string{}
}

// ToSparse returns the ErrorTransformersList converted to SparseErrorTransformersList.
// Objects in the list will only contain the given fields. No field means entire field set.
func (o ErrorTransformersList) ToSparse(fields ...string) elemental.Identifiables {

	out := make(SparseErrorTransformersList, len(o))
	for i := 0; i < len(o); i++ {
		out[i] = o[i].ToSparse(fields...).(*SparseErrorTransformer)
	}

	return out
}

// Version returns the version of the content.
func (o ErrorTransformersList) Version() int {

	return 1
}

// ErrorTransformer represents the model of a errortransformer
type ErrorTransformer struct {
	// The Content-Type to use when returning a formatted error.
	ContentType string `json:"contentType" msgpack:"contentType" bson:"contenttype" mapstructure:"contentType,omitempty"`

	// HTTP status code to return, instead of the classical one.
	StatusCode int `json:"statusCode" msgpack:"statusCode" bson:"statuscode" mapstructure:"statusCode,omitempty"`

	// Go template to process and transform the error. The delimiters
	// are << and >> to prevent collision with acuctl templating.
	// The template will be passed the following informations:
	//
	// - `.Messages`: a list of string containing the messages to return.
	// - `.Code`: The original status code.
	// - `.TransformedCode`: The transformed status code.
	// - `.Action`: The policy decision action (ask or deny).
	//
	// All the sprig text function are available.
	Template string `json:"template" msgpack:"template" bson:"template" mapstructure:"template,omitempty"`

	ModelVersion int `json:"-" msgpack:"-" bson:"_modelversion"`
}

// NewErrorTransformer returns a new *ErrorTransformer
func NewErrorTransformer() *ErrorTransformer {

	return &ErrorTransformer{
		ModelVersion: 1,
		ContentType:  "application/json",
	}
}

// Identity returns the Identity of the object.
func (o *ErrorTransformer) Identity() elemental.Identity {

	return ErrorTransformerIdentity
}

// Identifier returns the value of the object's unique identifier.
func (o *ErrorTransformer) Identifier() string {

	return ""
}

// SetIdentifier sets the value of the object's unique identifier.
func (o *ErrorTransformer) SetIdentifier(id string) {

}

// GetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *ErrorTransformer) GetBSON() (any, error) {

	if o == nil {
		return nil, nil
	}

	s := &mongoAttributesErrorTransformer{}

	s.ContentType = o.ContentType
	s.StatusCode = o.StatusCode
	s.Template = o.Template

	return s, nil
}

// SetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *ErrorTransformer) SetBSON(raw bson.Raw) error {

	if o == nil {
		return nil
	}

	s := &mongoAttributesErrorTransformer{}
	if err := raw.Unmarshal(s); err != nil {
		return err
	}

	o.ContentType = s.ContentType
	o.StatusCode = s.StatusCode
	o.Template = s.Template

	return nil
}

// Version returns the hardcoded version of the model.
func (o *ErrorTransformer) Version() int {

	return 1
}

// BleveType implements the bleve.Classifier Interface.
func (o *ErrorTransformer) BleveType() string {

	return "errortransformer"
}

// DefaultOrder returns the list of default ordering fields.
func (o *ErrorTransformer) DefaultOrder() []string {

	return []string{}
}

// Doc returns the documentation for the object
func (o *ErrorTransformer) Doc() string {

	return `Used to transform errors before sending them back to the client.`
}

func (o *ErrorTransformer) String() string {

	return fmt.Sprintf("<%s:%s>", o.Identity().Name, o.Identifier())
}

// ToSparse returns the sparse version of the model.
// The returned object will only contain the given fields. No field means entire field set.
func (o *ErrorTransformer) ToSparse(fields ...string) elemental.SparseIdentifiable {

	if len(fields) == 0 {
		// nolint: goimports
		return &SparseErrorTransformer{
			ContentType: &o.ContentType,
			StatusCode:  &o.StatusCode,
			Template:    &o.Template,
		}
	}

	sp := &SparseErrorTransformer{}
	for _, f := range fields {
		switch f {
		case "contentType":
			sp.ContentType = &(o.ContentType)
		case "statusCode":
			sp.StatusCode = &(o.StatusCode)
		case "template":
			sp.Template = &(o.Template)
		}
	}

	return sp
}

// Patch apply the non nil value of a *SparseErrorTransformer to the object.
func (o *ErrorTransformer) Patch(sparse elemental.SparseIdentifiable) {
	if !sparse.Identity().IsEqual(o.Identity()) {
		panic("cannot patch from a parse with different identity")
	}

	so := sparse.(*SparseErrorTransformer)
	if so.ContentType != nil {
		o.ContentType = *so.ContentType
	}
	if so.StatusCode != nil {
		o.StatusCode = *so.StatusCode
	}
	if so.Template != nil {
		o.Template = *so.Template
	}
}

// DeepCopy returns a deep copy if the ErrorTransformer.
func (o *ErrorTransformer) DeepCopy() *ErrorTransformer {

	if o == nil {
		return nil
	}

	out := &ErrorTransformer{}
	o.DeepCopyInto(out)

	return out
}

// DeepCopyInto copies the receiver into the given *ErrorTransformer.
func (o *ErrorTransformer) DeepCopyInto(out *ErrorTransformer) {

	target, err := copystructure.Copy(o)
	if err != nil {
		panic(fmt.Sprintf("Unable to deepcopy ErrorTransformer: %s", err))
	}

	*out = *target.(*ErrorTransformer)
}

// Validate valides the current information stored into the structure.
func (o *ErrorTransformer) Validate() error {

	errors := elemental.Errors{}
	requiredErrors := elemental.Errors{}

	if len(requiredErrors) > 0 {
		return requiredErrors
	}

	if len(errors) > 0 {
		return errors
	}

	return nil
}

// SpecificationForAttribute returns the AttributeSpecification for the given attribute name key.
func (*ErrorTransformer) SpecificationForAttribute(name string) elemental.AttributeSpecification {

	if v, ok := ErrorTransformerAttributesMap[name]; ok {
		return v
	}

	// We could not find it, so let's check on the lower case indexed spec map
	return ErrorTransformerLowerCaseAttributesMap[name]
}

// AttributeSpecifications returns the full attribute specifications map.
func (*ErrorTransformer) AttributeSpecifications() map[string]elemental.AttributeSpecification {

	return ErrorTransformerAttributesMap
}

// ValueForAttribute returns the value for the given attribute.
// This is a very advanced function that you should not need but in some
// very specific use cases.
func (o *ErrorTransformer) ValueForAttribute(name string) any {

	switch name {
	case "contentType":
		return o.ContentType
	case "statusCode":
		return o.StatusCode
	case "template":
		return o.Template
	}

	return nil
}

// ErrorTransformerAttributesMap represents the map of attribute for ErrorTransformer.
var ErrorTransformerAttributesMap = map[string]elemental.AttributeSpecification{
	"ContentType": {
		AllowedChoices: []string{},
		BSONFieldName:  "contenttype",
		ConvertedName:  "ContentType",
		DefaultValue:   "application/json",
		Description:    `The Content-Type to use when returning a formatted error.`,
		Exposed:        true,
		Name:           "contentType",
		Stored:         true,
		Type:           "string",
	},
	"StatusCode": {
		AllowedChoices: []string{},
		BSONFieldName:  "statuscode",
		ConvertedName:  "StatusCode",
		Description:    `HTTP status code to return, instead of the classical one.`,
		Exposed:        true,
		Name:           "statusCode",
		Stored:         true,
		Type:           "integer",
	},
	"Template": {
		AllowedChoices: []string{},
		BSONFieldName:  "template",
		ConvertedName:  "Template",
		Description: `Go template to process and transform the error. The delimiters
are << and >> to prevent collision with acuctl templating.
The template will be passed the following informations:

- ` + "`" + `.Messages` + "`" + `: a list of string containing the messages to return.
- ` + "`" + `.Code` + "`" + `: The original status code.
- ` + "`" + `.TransformedCode` + "`" + `: The transformed status code.
- ` + "`" + `.Action` + "`" + `: The policy decision action (ask or deny).

All the sprig text function are available.`,
		Exposed: true,
		Name:    "template",
		Stored:  true,
		Type:    "string",
	},
}

// ErrorTransformerLowerCaseAttributesMap represents the map of attribute for ErrorTransformer.
var ErrorTransformerLowerCaseAttributesMap = map[string]elemental.AttributeSpecification{
	"contenttype": {
		AllowedChoices: []string{},
		BSONFieldName:  "contenttype",
		ConvertedName:  "ContentType",
		DefaultValue:   "application/json",
		Description:    `The Content-Type to use when returning a formatted error.`,
		Exposed:        true,
		Name:           "contentType",
		Stored:         true,
		Type:           "string",
	},
	"statuscode": {
		AllowedChoices: []string{},
		BSONFieldName:  "statuscode",
		ConvertedName:  "StatusCode",
		Description:    `HTTP status code to return, instead of the classical one.`,
		Exposed:        true,
		Name:           "statusCode",
		Stored:         true,
		Type:           "integer",
	},
	"template": {
		AllowedChoices: []string{},
		BSONFieldName:  "template",
		ConvertedName:  "Template",
		Description: `Go template to process and transform the error. The delimiters
are << and >> to prevent collision with acuctl templating.
The template will be passed the following informations:

- ` + "`" + `.Messages` + "`" + `: a list of string containing the messages to return.
- ` + "`" + `.Code` + "`" + `: The original status code.
- ` + "`" + `.TransformedCode` + "`" + `: The transformed status code.
- ` + "`" + `.Action` + "`" + `: The policy decision action (ask or deny).

All the sprig text function are available.`,
		Exposed: true,
		Name:    "template",
		Stored:  true,
		Type:    "string",
	},
}

// SparseErrorTransformersList represents a list of SparseErrorTransformers
type SparseErrorTransformersList []*SparseErrorTransformer

// Identity returns the identity of the objects in the list.
func (o SparseErrorTransformersList) Identity() elemental.Identity {

	return ErrorTransformerIdentity
}

// Copy returns a pointer to a copy the SparseErrorTransformersList.
func (o SparseErrorTransformersList) Copy() elemental.Identifiables {

	copy := append(SparseErrorTransformersList{}, o...)
	return &copy
}

// Append appends the objects to the a new copy of the SparseErrorTransformersList.
func (o SparseErrorTransformersList) Append(objects ...elemental.Identifiable) elemental.Identifiables {

	out := append(SparseErrorTransformersList{}, o...)
	for _, obj := range objects {
		out = append(out, obj.(*SparseErrorTransformer))
	}

	return out
}

// List converts the object to an elemental.IdentifiablesList.
func (o SparseErrorTransformersList) List() elemental.IdentifiablesList {

	out := make(elemental.IdentifiablesList, len(o))
	for i := 0; i < len(o); i++ {
		out[i] = o[i]
	}

	return out
}

// DefaultOrder returns the default ordering fields of the content.
func (o SparseErrorTransformersList) DefaultOrder() []string {

	return []string{}
}

// ToPlain returns the SparseErrorTransformersList converted to ErrorTransformersList.
func (o SparseErrorTransformersList) ToPlain() elemental.IdentifiablesList {

	out := make(elemental.IdentifiablesList, len(o))
	for i := 0; i < len(o); i++ {
		out[i] = o[i].ToPlain()
	}

	return out
}

// Version returns the version of the content.
func (o SparseErrorTransformersList) Version() int {

	return 1
}

// SparseErrorTransformer represents the sparse version of a errortransformer.
type SparseErrorTransformer struct {
	// The Content-Type to use when returning a formatted error.
	ContentType *string `json:"contentType,omitempty" msgpack:"contentType,omitempty" bson:"contenttype,omitempty" mapstructure:"contentType,omitempty"`

	// HTTP status code to return, instead of the classical one.
	StatusCode *int `json:"statusCode,omitempty" msgpack:"statusCode,omitempty" bson:"statuscode,omitempty" mapstructure:"statusCode,omitempty"`

	// Go template to process and transform the error. The delimiters
	// are << and >> to prevent collision with acuctl templating.
	// The template will be passed the following informations:
	//
	// - `.Messages`: a list of string containing the messages to return.
	// - `.Code`: The original status code.
	// - `.TransformedCode`: The transformed status code.
	// - `.Action`: The policy decision action (ask or deny).
	//
	// All the sprig text function are available.
	Template *string `json:"template,omitempty" msgpack:"template,omitempty" bson:"template,omitempty" mapstructure:"template,omitempty"`

	ModelVersion int `json:"-" msgpack:"-" bson:"_modelversion"`
}

// NewSparseErrorTransformer returns a new  SparseErrorTransformer.
func NewSparseErrorTransformer() *SparseErrorTransformer {
	return &SparseErrorTransformer{}
}

// Identity returns the Identity of the sparse object.
func (o *SparseErrorTransformer) Identity() elemental.Identity {

	return ErrorTransformerIdentity
}

// Identifier returns the value of the sparse object's unique identifier.
func (o *SparseErrorTransformer) Identifier() string {

	return ""
}

// SetIdentifier sets the value of the sparse object's unique identifier.
func (o *SparseErrorTransformer) SetIdentifier(id string) {

}

// GetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *SparseErrorTransformer) GetBSON() (any, error) {

	if o == nil {
		return nil, nil
	}

	s := &mongoAttributesSparseErrorTransformer{}

	if o.ContentType != nil {
		s.ContentType = o.ContentType
	}
	if o.StatusCode != nil {
		s.StatusCode = o.StatusCode
	}
	if o.Template != nil {
		s.Template = o.Template
	}

	return s, nil
}

// SetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *SparseErrorTransformer) SetBSON(raw bson.Raw) error {

	if o == nil {
		return nil
	}

	s := &mongoAttributesSparseErrorTransformer{}
	if err := raw.Unmarshal(s); err != nil {
		return err
	}

	if s.ContentType != nil {
		o.ContentType = s.ContentType
	}
	if s.StatusCode != nil {
		o.StatusCode = s.StatusCode
	}
	if s.Template != nil {
		o.Template = s.Template
	}

	return nil
}

// Version returns the hardcoded version of the model.
func (o *SparseErrorTransformer) Version() int {

	return 1
}

// ToPlain returns the plain version of the sparse model.
func (o *SparseErrorTransformer) ToPlain() elemental.PlainIdentifiable {

	out := NewErrorTransformer()
	if o.ContentType != nil {
		out.ContentType = *o.ContentType
	}
	if o.StatusCode != nil {
		out.StatusCode = *o.StatusCode
	}
	if o.Template != nil {
		out.Template = *o.Template
	}

	return out
}

// DeepCopy returns a deep copy if the SparseErrorTransformer.
func (o *SparseErrorTransformer) DeepCopy() *SparseErrorTransformer {

	if o == nil {
		return nil
	}

	out := &SparseErrorTransformer{}
	o.DeepCopyInto(out)

	return out
}

// DeepCopyInto copies the receiver into the given *SparseErrorTransformer.
func (o *SparseErrorTransformer) DeepCopyInto(out *SparseErrorTransformer) {

	target, err := copystructure.Copy(o)
	if err != nil {
		panic(fmt.Sprintf("Unable to deepcopy SparseErrorTransformer: %s", err))
	}

	*out = *target.(*SparseErrorTransformer)
}

type mongoAttributesErrorTransformer struct {
	ContentType string `bson:"contenttype"`
	StatusCode  int    `bson:"statuscode"`
	Template    string `bson:"template"`
}
type mongoAttributesSparseErrorTransformer struct {
	ContentType *string `bson:"contenttype,omitempty"`
	StatusCode  *int    `bson:"statuscode,omitempty"`
	Template    *string `bson:"template,omitempty"`
}
