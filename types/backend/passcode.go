// Code generated by elegen. DO NOT EDIT.
// Source: go.acuvity.ai/elemental (templates/model.gotpl)

package api

import (
	"fmt"
	"time"

	"github.com/globalsign/mgo/bson"
	"github.com/mitchellh/copystructure"
	"go.acuvity.ai/elemental"
)

// PasscodeIdentity represents the Identity of the object.
var PasscodeIdentity = elemental.Identity{
	Name:     "passcode",
	Category: "passcodes",
	Package:  "amaterasu",
	Private:  true,
}

// PasscodesList represents a list of Passcodes
type PasscodesList []*Passcode

// Identity returns the identity of the objects in the list.
func (o PasscodesList) Identity() elemental.Identity {

	return PasscodeIdentity
}

// Copy returns a pointer to a copy the PasscodesList.
func (o PasscodesList) Copy() elemental.Identifiables {

	out := append(PasscodesList{}, o...)
	return &out
}

// Append appends the objects to the a new copy of the PasscodesList.
func (o PasscodesList) Append(objects ...elemental.Identifiable) elemental.Identifiables {

	out := append(PasscodesList{}, o...)
	for _, obj := range objects {
		out = append(out, obj.(*Passcode))
	}

	return out
}

// List converts the object to an elemental.IdentifiablesList.
func (o PasscodesList) List() elemental.IdentifiablesList {

	out := make(elemental.IdentifiablesList, len(o))
	for i := 0; i < len(o); i++ {
		out[i] = o[i]
	}

	return out
}

// DefaultOrder returns the default ordering fields of the content.
func (o PasscodesList) DefaultOrder() []string {

	return []string{}
}

// ToSparse returns the PasscodesList converted to SparsePasscodesList.
// Objects in the list will only contain the given fields. No field means entire field set.
func (o PasscodesList) ToSparse(fields ...string) elemental.Identifiables {

	out := make(SparsePasscodesList, len(o))
	for i := 0; i < len(o); i++ {
		out[i] = o[i].ToSparse(fields...).(*SparsePasscode)
	}

	return out
}

// Version returns the version of the content.
func (o PasscodesList) Version() int {

	return 1
}

// Passcode represents the model of a passcode
type Passcode struct {
	// ID is the identifier of the object.
	ID string `json:"ID,omitempty" msgpack:"ID,omitempty" bson:"-" mapstructure:"ID,omitempty"`

	// Creation date of the object.
	CreateTime time.Time `json:"createTime" msgpack:"createTime" bson:"createtime" mapstructure:"createTime,omitempty"`

	// The email of the customer. An email wih a login link will be sent.
	Email string `json:"email" msgpack:"email" bson:"email" mapstructure:"email,omitempty"`

	// The date after which the secret will not be valid anymore. This is computed
	// using the validity property.
	Expiration time.Time `json:"expiration" msgpack:"expiration" bson:"expiration" mapstructure:"expiration,omitempty"`

	// The namespace of the object.
	Namespace string `json:"namespace,omitempty" msgpack:"namespace,omitempty" bson:"namespace,omitempty" mapstructure:"namespace,omitempty"`

	// The organization name.
	Organization string `json:"organization" msgpack:"organization" bson:"organization" mapstructure:"organization,omitempty"`

	// The secret to login.
	Secret string `json:"-" msgpack:"-" bson:"secret" mapstructure:"-,omitempty"`

	// Last update date of the object.
	UpdateTime time.Time `json:"updateTime" msgpack:"updateTime" bson:"updatetime" mapstructure:"updateTime,omitempty"`

	// The validity duration of the secret.
	Validity string `json:"validity" msgpack:"validity" bson:"-" mapstructure:"validity,omitempty"`

	// Hash of the object used to shard the data.
	ZHash int `json:"-" msgpack:"-" bson:"zhash" mapstructure:"-,omitempty"`

	// Sharding zone.
	Zone int `json:"-" msgpack:"-" bson:"zone" mapstructure:"-,omitempty"`

	ModelVersion int `json:"-" msgpack:"-" bson:"_modelversion"`
}

// NewPasscode returns a new *Passcode
func NewPasscode() *Passcode {

	return &Passcode{
		ModelVersion: 1,
		Validity:     "48h",
	}
}

// Identity returns the Identity of the object.
func (o *Passcode) Identity() elemental.Identity {

	return PasscodeIdentity
}

// Identifier returns the value of the object's unique identifier.
func (o *Passcode) Identifier() string {

	return o.ID
}

// SetIdentifier sets the value of the object's unique identifier.
func (o *Passcode) SetIdentifier(id string) {

	o.ID = id
}

// GetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *Passcode) GetBSON() (any, error) {

	if o == nil {
		return nil, nil
	}

	s := &mongoAttributesPasscode{}

	if o.ID != "" {
		s.ID = bson.ObjectIdHex(o.ID)
	}
	s.CreateTime = o.CreateTime
	s.Email = o.Email
	s.Expiration = o.Expiration
	s.Namespace = o.Namespace
	s.Organization = o.Organization
	s.Secret = o.Secret
	s.UpdateTime = o.UpdateTime
	s.ZHash = o.ZHash
	s.Zone = o.Zone

	return s, nil
}

// SetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *Passcode) SetBSON(raw bson.Raw) error {

	if o == nil {
		return nil
	}

	s := &mongoAttributesPasscode{}
	if err := raw.Unmarshal(s); err != nil {
		return err
	}

	o.ID = s.ID.Hex()
	o.CreateTime = s.CreateTime
	o.Email = s.Email
	o.Expiration = s.Expiration
	o.Namespace = s.Namespace
	o.Organization = s.Organization
	o.Secret = s.Secret
	o.UpdateTime = s.UpdateTime
	o.ZHash = s.ZHash
	o.Zone = s.Zone

	return nil
}

// Version returns the hardcoded version of the model.
func (o *Passcode) Version() int {

	return 1
}

// BleveType implements the bleve.Classifier Interface.
func (o *Passcode) BleveType() string {

	return "passcode"
}

// DefaultOrder returns the list of default ordering fields.
func (o *Passcode) DefaultOrder() []string {

	return []string{}
}

// Doc returns the documentation for the object
func (o *Passcode) Doc() string {

	return `Register a passcode.`
}

func (o *Passcode) String() string {

	return fmt.Sprintf("<%s:%s>", o.Identity().Name, o.Identifier())
}

// GetCreateTime returns the CreateTime of the receiver.
func (o *Passcode) GetCreateTime() time.Time {

	return o.CreateTime
}

// SetCreateTime sets the property CreateTime of the receiver using the given value.
func (o *Passcode) SetCreateTime(createTime time.Time) {

	o.CreateTime = createTime
}

// GetNamespace returns the Namespace of the receiver.
func (o *Passcode) GetNamespace() string {

	return o.Namespace
}

// SetNamespace sets the property Namespace of the receiver using the given value.
func (o *Passcode) SetNamespace(namespace string) {

	o.Namespace = namespace
}

// GetUpdateTime returns the UpdateTime of the receiver.
func (o *Passcode) GetUpdateTime() time.Time {

	return o.UpdateTime
}

// SetUpdateTime sets the property UpdateTime of the receiver using the given value.
func (o *Passcode) SetUpdateTime(updateTime time.Time) {

	o.UpdateTime = updateTime
}

// GetZHash returns the ZHash of the receiver.
func (o *Passcode) GetZHash() int {

	return o.ZHash
}

// SetZHash sets the property ZHash of the receiver using the given value.
func (o *Passcode) SetZHash(zHash int) {

	o.ZHash = zHash
}

// GetZone returns the Zone of the receiver.
func (o *Passcode) GetZone() int {

	return o.Zone
}

// SetZone sets the property Zone of the receiver using the given value.
func (o *Passcode) SetZone(zone int) {

	o.Zone = zone
}

// ToSparse returns the sparse version of the model.
// The returned object will only contain the given fields. No field means entire field set.
func (o *Passcode) ToSparse(fields ...string) elemental.SparseIdentifiable {

	if len(fields) == 0 {
		// nolint: goimports
		return &SparsePasscode{
			ID:           &o.ID,
			CreateTime:   &o.CreateTime,
			Email:        &o.Email,
			Expiration:   &o.Expiration,
			Namespace:    &o.Namespace,
			Organization: &o.Organization,
			Secret:       &o.Secret,
			UpdateTime:   &o.UpdateTime,
			Validity:     &o.Validity,
			ZHash:        &o.ZHash,
			Zone:         &o.Zone,
		}
	}

	sp := &SparsePasscode{}
	for _, f := range fields {
		switch f {
		case "ID":
			sp.ID = &(o.ID)
		case "createTime":
			sp.CreateTime = &(o.CreateTime)
		case "email":
			sp.Email = &(o.Email)
		case "expiration":
			sp.Expiration = &(o.Expiration)
		case "namespace":
			sp.Namespace = &(o.Namespace)
		case "organization":
			sp.Organization = &(o.Organization)
		case "secret":
			sp.Secret = &(o.Secret)
		case "updateTime":
			sp.UpdateTime = &(o.UpdateTime)
		case "validity":
			sp.Validity = &(o.Validity)
		case "zHash":
			sp.ZHash = &(o.ZHash)
		case "zone":
			sp.Zone = &(o.Zone)
		}
	}

	return sp
}

// EncryptAttributes encrypts the attributes marked as `encrypted` using the given encrypter.
func (o *Passcode) EncryptAttributes(encrypter elemental.AttributeEncrypter) (err error) {

	if o.Secret, err = encrypter.EncryptString(o.Secret); err != nil {
		return fmt.Errorf("unable to encrypt attribute 'Secret' for 'Passcode' (%s): %s", o.Identifier(), err)
	}

	return nil
}

// DecryptAttributes decrypts the attributes marked as `encrypted` using the given decrypter.
func (o *Passcode) DecryptAttributes(encrypter elemental.AttributeEncrypter) (err error) {

	if o.Secret, err = encrypter.DecryptString(o.Secret); err != nil {
		return fmt.Errorf("unable to decrypt attribute 'Secret' for 'Passcode' (%s): %s", o.Identifier(), err)
	}

	return nil
}

// Patch apply the non nil value of a *SparsePasscode to the object.
func (o *Passcode) Patch(sparse elemental.SparseIdentifiable) {
	if !sparse.Identity().IsEqual(o.Identity()) {
		panic("cannot patch from a parse with different identity")
	}

	so := sparse.(*SparsePasscode)
	if so.ID != nil {
		o.ID = *so.ID
	}
	if so.CreateTime != nil {
		o.CreateTime = *so.CreateTime
	}
	if so.Email != nil {
		o.Email = *so.Email
	}
	if so.Expiration != nil {
		o.Expiration = *so.Expiration
	}
	if so.Namespace != nil {
		o.Namespace = *so.Namespace
	}
	if so.Organization != nil {
		o.Organization = *so.Organization
	}
	if so.Secret != nil {
		o.Secret = *so.Secret
	}
	if so.UpdateTime != nil {
		o.UpdateTime = *so.UpdateTime
	}
	if so.Validity != nil {
		o.Validity = *so.Validity
	}
	if so.ZHash != nil {
		o.ZHash = *so.ZHash
	}
	if so.Zone != nil {
		o.Zone = *so.Zone
	}
}

// DeepCopy returns a deep copy if the Passcode.
func (o *Passcode) DeepCopy() *Passcode {

	if o == nil {
		return nil
	}

	out := &Passcode{}
	o.DeepCopyInto(out)

	return out
}

// DeepCopyInto copies the receiver into the given *Passcode.
func (o *Passcode) DeepCopyInto(out *Passcode) {

	target, err := copystructure.Copy(o)
	if err != nil {
		panic(fmt.Sprintf("Unable to deepcopy Passcode: %s", err))
	}

	*out = *target.(*Passcode)
}

// Validate valides the current information stored into the structure.
func (o *Passcode) Validate() error {

	errors := elemental.Errors{}
	requiredErrors := elemental.Errors{}

	if err := elemental.ValidateRequiredString("email", o.Email); err != nil {
		requiredErrors = requiredErrors.Append(err)
	}

	if err := ValidateEmail("email", o.Email); err != nil {
		errors = errors.Append(err)
	}

	if err := elemental.ValidateRequiredString("validity", o.Validity); err != nil {
		requiredErrors = requiredErrors.Append(err)
	}

	if err := ValidateDuration("validity", o.Validity); err != nil {
		errors = errors.Append(err)
	}

	if len(requiredErrors) > 0 {
		return requiredErrors
	}

	if len(errors) > 0 {
		return errors
	}

	return nil
}

// SpecificationForAttribute returns the AttributeSpecification for the given attribute name key.
func (*Passcode) SpecificationForAttribute(name string) elemental.AttributeSpecification {

	if v, ok := PasscodeAttributesMap[name]; ok {
		return v
	}

	// We could not find it, so let's check on the lower case indexed spec map
	return PasscodeLowerCaseAttributesMap[name]
}

// AttributeSpecifications returns the full attribute specifications map.
func (*Passcode) AttributeSpecifications() map[string]elemental.AttributeSpecification {

	return PasscodeAttributesMap
}

// ValueForAttribute returns the value for the given attribute.
// This is a very advanced function that you should not need but in some
// very specific use cases.
func (o *Passcode) ValueForAttribute(name string) any {

	switch name {
	case "ID":
		return o.ID
	case "createTime":
		return o.CreateTime
	case "email":
		return o.Email
	case "expiration":
		return o.Expiration
	case "namespace":
		return o.Namespace
	case "organization":
		return o.Organization
	case "secret":
		return o.Secret
	case "updateTime":
		return o.UpdateTime
	case "validity":
		return o.Validity
	case "zHash":
		return o.ZHash
	case "zone":
		return o.Zone
	}

	return nil
}

// PasscodeAttributesMap represents the map of attribute for Passcode.
var PasscodeAttributesMap = map[string]elemental.AttributeSpecification{
	"ID": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "_id",
		ConvertedName:  "ID",
		Description:    `ID is the identifier of the object.`,
		Exposed:        true,
		Filterable:     true,
		Identifier:     true,
		Name:           "ID",
		Orderable:      true,
		ReadOnly:       true,
		Stored:         true,
		Type:           "string",
	},
	"CreateTime": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "createtime",
		ConvertedName:  "CreateTime",
		Description:    `Creation date of the object.`,
		Exposed:        true,
		Getter:         true,
		Name:           "createTime",
		Orderable:      true,
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Type:           "time",
	},
	"Email": {
		AllowedChoices: []string{},
		BSONFieldName:  "email",
		ConvertedName:  "Email",
		CreationOnly:   true,
		Description:    `The email of the customer. An email wih a login link will be sent.`,
		Exposed:        true,
		Name:           "email",
		Required:       true,
		Stored:         true,
		Type:           "string",
	},
	"Expiration": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "expiration",
		ConvertedName:  "Expiration",
		Description: `The date after which the secret will not be valid anymore. This is computed
using the validity property.`,
		Exposed:  true,
		Name:     "expiration",
		ReadOnly: true,
		Stored:   true,
		Type:     "time",
	},
	"Namespace": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "namespace",
		ConvertedName:  "Namespace",
		Description:    `The namespace of the object.`,
		Exposed:        true,
		Getter:         true,
		Name:           "namespace",
		Orderable:      true,
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Type:           "string",
	},
	"Organization": {
		AllowedChoices: []string{},
		BSONFieldName:  "organization",
		ConvertedName:  "Organization",
		Description:    `The organization name.`,
		Exposed:        true,
		Name:           "organization",
		Stored:         true,
		Type:           "string",
	},
	"Secret": {
		AllowedChoices: []string{},
		BSONFieldName:  "secret",
		ConvertedName:  "Secret",
		Description:    `The secret to login.`,
		Encrypted:      true,
		Name:           "secret",
		Secret:         true,
		Stored:         true,
		Type:           "string",
	},
	"UpdateTime": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "updatetime",
		ConvertedName:  "UpdateTime",
		Description:    `Last update date of the object.`,
		Exposed:        true,
		Getter:         true,
		Name:           "updateTime",
		Orderable:      true,
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Type:           "time",
	},
	"Validity": {
		AllowedChoices: []string{},
		ConvertedName:  "Validity",
		DefaultValue:   "48h",
		Description:    `The validity duration of the secret.`,
		Exposed:        true,
		Name:           "validity",
		Required:       true,
		Type:           "string",
	},
	"ZHash": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "zhash",
		ConvertedName:  "ZHash",
		Description:    `Hash of the object used to shard the data.`,
		Getter:         true,
		Name:           "zHash",
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Type:           "integer",
	},
	"Zone": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "zone",
		ConvertedName:  "Zone",
		Description:    `Sharding zone.`,
		Getter:         true,
		Name:           "zone",
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Transient:      true,
		Type:           "integer",
	},
}

// PasscodeLowerCaseAttributesMap represents the map of attribute for Passcode.
var PasscodeLowerCaseAttributesMap = map[string]elemental.AttributeSpecification{
	"id": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "_id",
		ConvertedName:  "ID",
		Description:    `ID is the identifier of the object.`,
		Exposed:        true,
		Filterable:     true,
		Identifier:     true,
		Name:           "ID",
		Orderable:      true,
		ReadOnly:       true,
		Stored:         true,
		Type:           "string",
	},
	"createtime": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "createtime",
		ConvertedName:  "CreateTime",
		Description:    `Creation date of the object.`,
		Exposed:        true,
		Getter:         true,
		Name:           "createTime",
		Orderable:      true,
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Type:           "time",
	},
	"email": {
		AllowedChoices: []string{},
		BSONFieldName:  "email",
		ConvertedName:  "Email",
		CreationOnly:   true,
		Description:    `The email of the customer. An email wih a login link will be sent.`,
		Exposed:        true,
		Name:           "email",
		Required:       true,
		Stored:         true,
		Type:           "string",
	},
	"expiration": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "expiration",
		ConvertedName:  "Expiration",
		Description: `The date after which the secret will not be valid anymore. This is computed
using the validity property.`,
		Exposed:  true,
		Name:     "expiration",
		ReadOnly: true,
		Stored:   true,
		Type:     "time",
	},
	"namespace": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "namespace",
		ConvertedName:  "Namespace",
		Description:    `The namespace of the object.`,
		Exposed:        true,
		Getter:         true,
		Name:           "namespace",
		Orderable:      true,
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Type:           "string",
	},
	"organization": {
		AllowedChoices: []string{},
		BSONFieldName:  "organization",
		ConvertedName:  "Organization",
		Description:    `The organization name.`,
		Exposed:        true,
		Name:           "organization",
		Stored:         true,
		Type:           "string",
	},
	"secret": {
		AllowedChoices: []string{},
		BSONFieldName:  "secret",
		ConvertedName:  "Secret",
		Description:    `The secret to login.`,
		Encrypted:      true,
		Name:           "secret",
		Secret:         true,
		Stored:         true,
		Type:           "string",
	},
	"updatetime": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "updatetime",
		ConvertedName:  "UpdateTime",
		Description:    `Last update date of the object.`,
		Exposed:        true,
		Getter:         true,
		Name:           "updateTime",
		Orderable:      true,
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Type:           "time",
	},
	"validity": {
		AllowedChoices: []string{},
		ConvertedName:  "Validity",
		DefaultValue:   "48h",
		Description:    `The validity duration of the secret.`,
		Exposed:        true,
		Name:           "validity",
		Required:       true,
		Type:           "string",
	},
	"zhash": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "zhash",
		ConvertedName:  "ZHash",
		Description:    `Hash of the object used to shard the data.`,
		Getter:         true,
		Name:           "zHash",
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Type:           "integer",
	},
	"zone": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "zone",
		ConvertedName:  "Zone",
		Description:    `Sharding zone.`,
		Getter:         true,
		Name:           "zone",
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Transient:      true,
		Type:           "integer",
	},
}

// SparsePasscodesList represents a list of SparsePasscodes
type SparsePasscodesList []*SparsePasscode

// Identity returns the identity of the objects in the list.
func (o SparsePasscodesList) Identity() elemental.Identity {

	return PasscodeIdentity
}

// Copy returns a pointer to a copy the SparsePasscodesList.
func (o SparsePasscodesList) Copy() elemental.Identifiables {

	copy := append(SparsePasscodesList{}, o...)
	return &copy
}

// Append appends the objects to the a new copy of the SparsePasscodesList.
func (o SparsePasscodesList) Append(objects ...elemental.Identifiable) elemental.Identifiables {

	out := append(SparsePasscodesList{}, o...)
	for _, obj := range objects {
		out = append(out, obj.(*SparsePasscode))
	}

	return out
}

// List converts the object to an elemental.IdentifiablesList.
func (o SparsePasscodesList) List() elemental.IdentifiablesList {

	out := make(elemental.IdentifiablesList, len(o))
	for i := 0; i < len(o); i++ {
		out[i] = o[i]
	}

	return out
}

// DefaultOrder returns the default ordering fields of the content.
func (o SparsePasscodesList) DefaultOrder() []string {

	return []string{}
}

// ToPlain returns the SparsePasscodesList converted to PasscodesList.
func (o SparsePasscodesList) ToPlain() elemental.IdentifiablesList {

	out := make(elemental.IdentifiablesList, len(o))
	for i := 0; i < len(o); i++ {
		out[i] = o[i].ToPlain()
	}

	return out
}

// Version returns the version of the content.
func (o SparsePasscodesList) Version() int {

	return 1
}

// SparsePasscode represents the sparse version of a passcode.
type SparsePasscode struct {
	// ID is the identifier of the object.
	ID *string `json:"ID,omitempty" msgpack:"ID,omitempty" bson:"-" mapstructure:"ID,omitempty"`

	// Creation date of the object.
	CreateTime *time.Time `json:"createTime,omitempty" msgpack:"createTime,omitempty" bson:"createtime,omitempty" mapstructure:"createTime,omitempty"`

	// The email of the customer. An email wih a login link will be sent.
	Email *string `json:"email,omitempty" msgpack:"email,omitempty" bson:"email,omitempty" mapstructure:"email,omitempty"`

	// The date after which the secret will not be valid anymore. This is computed
	// using the validity property.
	Expiration *time.Time `json:"expiration,omitempty" msgpack:"expiration,omitempty" bson:"expiration,omitempty" mapstructure:"expiration,omitempty"`

	// The namespace of the object.
	Namespace *string `json:"namespace,omitempty" msgpack:"namespace,omitempty" bson:"namespace,omitempty" mapstructure:"namespace,omitempty"`

	// The organization name.
	Organization *string `json:"organization,omitempty" msgpack:"organization,omitempty" bson:"organization,omitempty" mapstructure:"organization,omitempty"`

	// The secret to login.
	Secret *string `json:"-" msgpack:"-" bson:"secret,omitempty" mapstructure:"-,omitempty"`

	// Last update date of the object.
	UpdateTime *time.Time `json:"updateTime,omitempty" msgpack:"updateTime,omitempty" bson:"updatetime,omitempty" mapstructure:"updateTime,omitempty"`

	// The validity duration of the secret.
	Validity *string `json:"validity,omitempty" msgpack:"validity,omitempty" bson:"-" mapstructure:"validity,omitempty"`

	// Hash of the object used to shard the data.
	ZHash *int `json:"-" msgpack:"-" bson:"zhash,omitempty" mapstructure:"-,omitempty"`

	// Sharding zone.
	Zone *int `json:"-" msgpack:"-" bson:"zone,omitempty" mapstructure:"-,omitempty"`

	ModelVersion int `json:"-" msgpack:"-" bson:"_modelversion"`
}

// NewSparsePasscode returns a new  SparsePasscode.
func NewSparsePasscode() *SparsePasscode {
	return &SparsePasscode{}
}

// Identity returns the Identity of the sparse object.
func (o *SparsePasscode) Identity() elemental.Identity {

	return PasscodeIdentity
}

// Identifier returns the value of the sparse object's unique identifier.
func (o *SparsePasscode) Identifier() string {

	if o.ID == nil {
		return ""
	}
	return *o.ID
}

// SetIdentifier sets the value of the sparse object's unique identifier.
func (o *SparsePasscode) SetIdentifier(id string) {

	if id != "" {
		o.ID = &id
	} else {
		o.ID = nil
	}
}

// GetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *SparsePasscode) GetBSON() (any, error) {

	if o == nil {
		return nil, nil
	}

	s := &mongoAttributesSparsePasscode{}

	if o.ID != nil {
		s.ID = bson.ObjectIdHex(*o.ID)
	}
	if o.CreateTime != nil {
		s.CreateTime = o.CreateTime
	}
	if o.Email != nil {
		s.Email = o.Email
	}
	if o.Expiration != nil {
		s.Expiration = o.Expiration
	}
	if o.Namespace != nil {
		s.Namespace = o.Namespace
	}
	if o.Organization != nil {
		s.Organization = o.Organization
	}
	if o.Secret != nil {
		s.Secret = o.Secret
	}
	if o.UpdateTime != nil {
		s.UpdateTime = o.UpdateTime
	}
	if o.ZHash != nil {
		s.ZHash = o.ZHash
	}
	if o.Zone != nil {
		s.Zone = o.Zone
	}

	return s, nil
}

// SetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *SparsePasscode) SetBSON(raw bson.Raw) error {

	if o == nil {
		return nil
	}

	s := &mongoAttributesSparsePasscode{}
	if err := raw.Unmarshal(s); err != nil {
		return err
	}

	id := s.ID.Hex()
	o.ID = &id
	if s.CreateTime != nil {
		o.CreateTime = s.CreateTime
	}
	if s.Email != nil {
		o.Email = s.Email
	}
	if s.Expiration != nil {
		o.Expiration = s.Expiration
	}
	if s.Namespace != nil {
		o.Namespace = s.Namespace
	}
	if s.Organization != nil {
		o.Organization = s.Organization
	}
	if s.Secret != nil {
		o.Secret = s.Secret
	}
	if s.UpdateTime != nil {
		o.UpdateTime = s.UpdateTime
	}
	if s.ZHash != nil {
		o.ZHash = s.ZHash
	}
	if s.Zone != nil {
		o.Zone = s.Zone
	}

	return nil
}

// Version returns the hardcoded version of the model.
func (o *SparsePasscode) Version() int {

	return 1
}

// ToPlain returns the plain version of the sparse model.
func (o *SparsePasscode) ToPlain() elemental.PlainIdentifiable {

	out := NewPasscode()
	if o.ID != nil {
		out.ID = *o.ID
	}
	if o.CreateTime != nil {
		out.CreateTime = *o.CreateTime
	}
	if o.Email != nil {
		out.Email = *o.Email
	}
	if o.Expiration != nil {
		out.Expiration = *o.Expiration
	}
	if o.Namespace != nil {
		out.Namespace = *o.Namespace
	}
	if o.Organization != nil {
		out.Organization = *o.Organization
	}
	if o.Secret != nil {
		out.Secret = *o.Secret
	}
	if o.UpdateTime != nil {
		out.UpdateTime = *o.UpdateTime
	}
	if o.Validity != nil {
		out.Validity = *o.Validity
	}
	if o.ZHash != nil {
		out.ZHash = *o.ZHash
	}
	if o.Zone != nil {
		out.Zone = *o.Zone
	}

	return out
}

// EncryptAttributes encrypts the attributes marked as `encrypted` using the given encrypter.
func (o *SparsePasscode) EncryptAttributes(encrypter elemental.AttributeEncrypter) (err error) {

	if *o.Secret, err = encrypter.EncryptString(*o.Secret); err != nil {
		return fmt.Errorf("unable to encrypt attribute 'Secret' for 'SparsePasscode' (%s): %s", o.Identifier(), err)
	}

	return nil
}

// DecryptAttributes decrypts the attributes marked as `encrypted` using the given decrypter.
func (o *SparsePasscode) DecryptAttributes(encrypter elemental.AttributeEncrypter) (err error) {

	if *o.Secret, err = encrypter.DecryptString(*o.Secret); err != nil {
		return fmt.Errorf("unable to decrypt attribute 'Secret' for 'SparsePasscode' (%s): %s", o.Identifier(), err)
	}

	return nil
}

// GetCreateTime returns the CreateTime of the receiver.
func (o *SparsePasscode) GetCreateTime() (out time.Time) {

	if o.CreateTime == nil {
		return
	}

	return *o.CreateTime
}

// SetCreateTime sets the property CreateTime of the receiver using the address of the given value.
func (o *SparsePasscode) SetCreateTime(createTime time.Time) {

	o.CreateTime = &createTime
}

// GetNamespace returns the Namespace of the receiver.
func (o *SparsePasscode) GetNamespace() (out string) {

	if o.Namespace == nil {
		return
	}

	return *o.Namespace
}

// SetNamespace sets the property Namespace of the receiver using the address of the given value.
func (o *SparsePasscode) SetNamespace(namespace string) {

	o.Namespace = &namespace
}

// GetUpdateTime returns the UpdateTime of the receiver.
func (o *SparsePasscode) GetUpdateTime() (out time.Time) {

	if o.UpdateTime == nil {
		return
	}

	return *o.UpdateTime
}

// SetUpdateTime sets the property UpdateTime of the receiver using the address of the given value.
func (o *SparsePasscode) SetUpdateTime(updateTime time.Time) {

	o.UpdateTime = &updateTime
}

// GetZHash returns the ZHash of the receiver.
func (o *SparsePasscode) GetZHash() (out int) {

	if o.ZHash == nil {
		return
	}

	return *o.ZHash
}

// SetZHash sets the property ZHash of the receiver using the address of the given value.
func (o *SparsePasscode) SetZHash(zHash int) {

	o.ZHash = &zHash
}

// GetZone returns the Zone of the receiver.
func (o *SparsePasscode) GetZone() (out int) {

	if o.Zone == nil {
		return
	}

	return *o.Zone
}

// SetZone sets the property Zone of the receiver using the address of the given value.
func (o *SparsePasscode) SetZone(zone int) {

	o.Zone = &zone
}

// DeepCopy returns a deep copy if the SparsePasscode.
func (o *SparsePasscode) DeepCopy() *SparsePasscode {

	if o == nil {
		return nil
	}

	out := &SparsePasscode{}
	o.DeepCopyInto(out)

	return out
}

// DeepCopyInto copies the receiver into the given *SparsePasscode.
func (o *SparsePasscode) DeepCopyInto(out *SparsePasscode) {

	target, err := copystructure.Copy(o)
	if err != nil {
		panic(fmt.Sprintf("Unable to deepcopy SparsePasscode: %s", err))
	}

	*out = *target.(*SparsePasscode)
}

type mongoAttributesPasscode struct {
	ID           bson.ObjectId `bson:"_id,omitempty"`
	CreateTime   time.Time     `bson:"createtime"`
	Email        string        `bson:"email"`
	Expiration   time.Time     `bson:"expiration"`
	Namespace    string        `bson:"namespace,omitempty"`
	Organization string        `bson:"organization"`
	Secret       string        `bson:"secret"`
	UpdateTime   time.Time     `bson:"updatetime"`
	ZHash        int           `bson:"zhash"`
	Zone         int           `bson:"zone"`
}
type mongoAttributesSparsePasscode struct {
	ID           bson.ObjectId `bson:"_id,omitempty"`
	CreateTime   *time.Time    `bson:"createtime,omitempty"`
	Email        *string       `bson:"email,omitempty"`
	Expiration   *time.Time    `bson:"expiration,omitempty"`
	Namespace    *string       `bson:"namespace,omitempty"`
	Organization *string       `bson:"organization,omitempty"`
	Secret       *string       `bson:"secret,omitempty"`
	UpdateTime   *time.Time    `bson:"updatetime,omitempty"`
	ZHash        *int          `bson:"zhash,omitempty"`
	Zone         *int          `bson:"zone,omitempty"`
}
