// Code generated by elegen. DO NOT EDIT.
// Source: go.acuvity.ai/elemental (templates/model.gotpl)

package api

import (
	"fmt"

	"github.com/globalsign/mgo/bson"
	"github.com/mitchellh/copystructure"
	"go.acuvity.ai/elemental"
)

// PasscodeCheckIdentity represents the Identity of the object.
var PasscodeCheckIdentity = elemental.Identity{
	Name:     "passcodecheck",
	Category: "passcodechecks",
	Package:  "amaterasu",
	Private:  true,
}

// PasscodeChecksList represents a list of PasscodeChecks
type PasscodeChecksList []*PasscodeCheck

// Identity returns the identity of the objects in the list.
func (o PasscodeChecksList) Identity() elemental.Identity {

	return PasscodeCheckIdentity
}

// Copy returns a pointer to a copy the PasscodeChecksList.
func (o PasscodeChecksList) Copy() elemental.Identifiables {

	out := append(PasscodeChecksList{}, o...)
	return &out
}

// Append appends the objects to the a new copy of the PasscodeChecksList.
func (o PasscodeChecksList) Append(objects ...elemental.Identifiable) elemental.Identifiables {

	out := append(PasscodeChecksList{}, o...)
	for _, obj := range objects {
		out = append(out, obj.(*PasscodeCheck))
	}

	return out
}

// List converts the object to an elemental.IdentifiablesList.
func (o PasscodeChecksList) List() elemental.IdentifiablesList {

	out := make(elemental.IdentifiablesList, len(o))
	for i := 0; i < len(o); i++ {
		out[i] = o[i]
	}

	return out
}

// DefaultOrder returns the default ordering fields of the content.
func (o PasscodeChecksList) DefaultOrder() []string {

	return []string{}
}

// ToSparse returns the PasscodeChecksList converted to SparsePasscodeChecksList.
// Objects in the list will only contain the given fields. No field means entire field set.
func (o PasscodeChecksList) ToSparse(fields ...string) elemental.Identifiables {

	out := make(SparsePasscodeChecksList, len(o))
	for i := 0; i < len(o); i++ {
		out[i] = o[i].ToSparse(fields...).(*SparsePasscodeCheck)
	}

	return out
}

// Version returns the version of the content.
func (o PasscodeChecksList) Version() int {

	return 1
}

// PasscodeCheck represents the model of a passcodecheck
type PasscodeCheck struct {
	// The password associated to the username.
	Password string `json:"password" msgpack:"password" bson:"-" mapstructure:"password,omitempty"`

	// The username.
	Username string `json:"username" msgpack:"username" bson:"-" mapstructure:"username,omitempty"`

	ModelVersion int `json:"-" msgpack:"-" bson:"_modelversion"`
}

// NewPasscodeCheck returns a new *PasscodeCheck
func NewPasscodeCheck() *PasscodeCheck {

	return &PasscodeCheck{
		ModelVersion: 1,
	}
}

// Identity returns the Identity of the object.
func (o *PasscodeCheck) Identity() elemental.Identity {

	return PasscodeCheckIdentity
}

// Identifier returns the value of the object's unique identifier.
func (o *PasscodeCheck) Identifier() string {

	return ""
}

// SetIdentifier sets the value of the object's unique identifier.
func (o *PasscodeCheck) SetIdentifier(id string) {

}

// GetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *PasscodeCheck) GetBSON() (any, error) {

	if o == nil {
		return nil, nil
	}

	s := &mongoAttributesPasscodeCheck{}

	return s, nil
}

// SetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *PasscodeCheck) SetBSON(raw bson.Raw) error {

	if o == nil {
		return nil
	}

	s := &mongoAttributesPasscodeCheck{}
	if err := raw.Unmarshal(s); err != nil {
		return err
	}

	return nil
}

// Version returns the hardcoded version of the model.
func (o *PasscodeCheck) Version() int {

	return 1
}

// BleveType implements the bleve.Classifier Interface.
func (o *PasscodeCheck) BleveType() string {

	return "passcodecheck"
}

// DefaultOrder returns the list of default ordering fields.
func (o *PasscodeCheck) DefaultOrder() []string {

	return []string{}
}

// Doc returns the documentation for the object
func (o *PasscodeCheck) Doc() string {

	return `Verify a passcode. This spec is A3s HTTP source compliant.`
}

func (o *PasscodeCheck) String() string {

	return fmt.Sprintf("<%s:%s>", o.Identity().Name, o.Identifier())
}

// ToSparse returns the sparse version of the model.
// The returned object will only contain the given fields. No field means entire field set.
func (o *PasscodeCheck) ToSparse(fields ...string) elemental.SparseIdentifiable {

	if len(fields) == 0 {
		// nolint: goimports
		return &SparsePasscodeCheck{
			Password: &o.Password,
			Username: &o.Username,
		}
	}

	sp := &SparsePasscodeCheck{}
	for _, f := range fields {
		switch f {
		case "password":
			sp.Password = &(o.Password)
		case "username":
			sp.Username = &(o.Username)
		}
	}

	return sp
}

// Patch apply the non nil value of a *SparsePasscodeCheck to the object.
func (o *PasscodeCheck) Patch(sparse elemental.SparseIdentifiable) {
	if !sparse.Identity().IsEqual(o.Identity()) {
		panic("cannot patch from a parse with different identity")
	}

	so := sparse.(*SparsePasscodeCheck)
	if so.Password != nil {
		o.Password = *so.Password
	}
	if so.Username != nil {
		o.Username = *so.Username
	}
}

// DeepCopy returns a deep copy if the PasscodeCheck.
func (o *PasscodeCheck) DeepCopy() *PasscodeCheck {

	if o == nil {
		return nil
	}

	out := &PasscodeCheck{}
	o.DeepCopyInto(out)

	return out
}

// DeepCopyInto copies the receiver into the given *PasscodeCheck.
func (o *PasscodeCheck) DeepCopyInto(out *PasscodeCheck) {

	target, err := copystructure.Copy(o)
	if err != nil {
		panic(fmt.Sprintf("Unable to deepcopy PasscodeCheck: %s", err))
	}

	*out = *target.(*PasscodeCheck)
}

// Validate valides the current information stored into the structure.
func (o *PasscodeCheck) Validate() error {

	errors := elemental.Errors{}
	requiredErrors := elemental.Errors{}

	if err := elemental.ValidateRequiredString("password", o.Password); err != nil {
		requiredErrors = requiredErrors.Append(err)
	}

	if err := elemental.ValidateRequiredString("username", o.Username); err != nil {
		requiredErrors = requiredErrors.Append(err)
	}

	if len(requiredErrors) > 0 {
		return requiredErrors
	}

	if len(errors) > 0 {
		return errors
	}

	return nil
}

// SpecificationForAttribute returns the AttributeSpecification for the given attribute name key.
func (*PasscodeCheck) SpecificationForAttribute(name string) elemental.AttributeSpecification {

	if v, ok := PasscodeCheckAttributesMap[name]; ok {
		return v
	}

	// We could not find it, so let's check on the lower case indexed spec map
	return PasscodeCheckLowerCaseAttributesMap[name]
}

// AttributeSpecifications returns the full attribute specifications map.
func (*PasscodeCheck) AttributeSpecifications() map[string]elemental.AttributeSpecification {

	return PasscodeCheckAttributesMap
}

// ValueForAttribute returns the value for the given attribute.
// This is a very advanced function that you should not need but in some
// very specific use cases.
func (o *PasscodeCheck) ValueForAttribute(name string) any {

	switch name {
	case "password":
		return o.Password
	case "username":
		return o.Username
	}

	return nil
}

// PasscodeCheckAttributesMap represents the map of attribute for PasscodeCheck.
var PasscodeCheckAttributesMap = map[string]elemental.AttributeSpecification{
	"Password": {
		AllowedChoices: []string{},
		ConvertedName:  "Password",
		Description:    `The password associated to the username.`,
		Exposed:        true,
		Name:           "password",
		Required:       true,
		Type:           "string",
	},
	"Username": {
		AllowedChoices: []string{},
		ConvertedName:  "Username",
		Description:    `The username.`,
		Exposed:        true,
		Name:           "username",
		Required:       true,
		Type:           "string",
	},
}

// PasscodeCheckLowerCaseAttributesMap represents the map of attribute for PasscodeCheck.
var PasscodeCheckLowerCaseAttributesMap = map[string]elemental.AttributeSpecification{
	"password": {
		AllowedChoices: []string{},
		ConvertedName:  "Password",
		Description:    `The password associated to the username.`,
		Exposed:        true,
		Name:           "password",
		Required:       true,
		Type:           "string",
	},
	"username": {
		AllowedChoices: []string{},
		ConvertedName:  "Username",
		Description:    `The username.`,
		Exposed:        true,
		Name:           "username",
		Required:       true,
		Type:           "string",
	},
}

// SparsePasscodeChecksList represents a list of SparsePasscodeChecks
type SparsePasscodeChecksList []*SparsePasscodeCheck

// Identity returns the identity of the objects in the list.
func (o SparsePasscodeChecksList) Identity() elemental.Identity {

	return PasscodeCheckIdentity
}

// Copy returns a pointer to a copy the SparsePasscodeChecksList.
func (o SparsePasscodeChecksList) Copy() elemental.Identifiables {

	copy := append(SparsePasscodeChecksList{}, o...)
	return &copy
}

// Append appends the objects to the a new copy of the SparsePasscodeChecksList.
func (o SparsePasscodeChecksList) Append(objects ...elemental.Identifiable) elemental.Identifiables {

	out := append(SparsePasscodeChecksList{}, o...)
	for _, obj := range objects {
		out = append(out, obj.(*SparsePasscodeCheck))
	}

	return out
}

// List converts the object to an elemental.IdentifiablesList.
func (o SparsePasscodeChecksList) List() elemental.IdentifiablesList {

	out := make(elemental.IdentifiablesList, len(o))
	for i := 0; i < len(o); i++ {
		out[i] = o[i]
	}

	return out
}

// DefaultOrder returns the default ordering fields of the content.
func (o SparsePasscodeChecksList) DefaultOrder() []string {

	return []string{}
}

// ToPlain returns the SparsePasscodeChecksList converted to PasscodeChecksList.
func (o SparsePasscodeChecksList) ToPlain() elemental.IdentifiablesList {

	out := make(elemental.IdentifiablesList, len(o))
	for i := 0; i < len(o); i++ {
		out[i] = o[i].ToPlain()
	}

	return out
}

// Version returns the version of the content.
func (o SparsePasscodeChecksList) Version() int {

	return 1
}

// SparsePasscodeCheck represents the sparse version of a passcodecheck.
type SparsePasscodeCheck struct {
	// The password associated to the username.
	Password *string `json:"password,omitempty" msgpack:"password,omitempty" bson:"-" mapstructure:"password,omitempty"`

	// The username.
	Username *string `json:"username,omitempty" msgpack:"username,omitempty" bson:"-" mapstructure:"username,omitempty"`

	ModelVersion int `json:"-" msgpack:"-" bson:"_modelversion"`
}

// NewSparsePasscodeCheck returns a new  SparsePasscodeCheck.
func NewSparsePasscodeCheck() *SparsePasscodeCheck {
	return &SparsePasscodeCheck{}
}

// Identity returns the Identity of the sparse object.
func (o *SparsePasscodeCheck) Identity() elemental.Identity {

	return PasscodeCheckIdentity
}

// Identifier returns the value of the sparse object's unique identifier.
func (o *SparsePasscodeCheck) Identifier() string {

	return ""
}

// SetIdentifier sets the value of the sparse object's unique identifier.
func (o *SparsePasscodeCheck) SetIdentifier(id string) {

}

// GetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *SparsePasscodeCheck) GetBSON() (any, error) {

	if o == nil {
		return nil, nil
	}

	s := &mongoAttributesSparsePasscodeCheck{}

	return s, nil
}

// SetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *SparsePasscodeCheck) SetBSON(raw bson.Raw) error {

	if o == nil {
		return nil
	}

	s := &mongoAttributesSparsePasscodeCheck{}
	if err := raw.Unmarshal(s); err != nil {
		return err
	}

	return nil
}

// Version returns the hardcoded version of the model.
func (o *SparsePasscodeCheck) Version() int {

	return 1
}

// ToPlain returns the plain version of the sparse model.
func (o *SparsePasscodeCheck) ToPlain() elemental.PlainIdentifiable {

	out := NewPasscodeCheck()
	if o.Password != nil {
		out.Password = *o.Password
	}
	if o.Username != nil {
		out.Username = *o.Username
	}

	return out
}

// DeepCopy returns a deep copy if the SparsePasscodeCheck.
func (o *SparsePasscodeCheck) DeepCopy() *SparsePasscodeCheck {

	if o == nil {
		return nil
	}

	out := &SparsePasscodeCheck{}
	o.DeepCopyInto(out)

	return out
}

// DeepCopyInto copies the receiver into the given *SparsePasscodeCheck.
func (o *SparsePasscodeCheck) DeepCopyInto(out *SparsePasscodeCheck) {

	target, err := copystructure.Copy(o)
	if err != nil {
		panic(fmt.Sprintf("Unable to deepcopy SparsePasscodeCheck: %s", err))
	}

	*out = *target.(*SparsePasscodeCheck)
}

type mongoAttributesPasscodeCheck struct {
}
type mongoAttributesSparsePasscodeCheck struct {
}
