// Code generated by elegen. DO NOT EDIT.
// Source: go.acuvity.ai/elemental (templates/model.gotpl)

package api

import (
	"fmt"
	"time"

	"github.com/globalsign/mgo/bson"
	"github.com/mitchellh/copystructure"
	"go.acuvity.ai/elemental"
)

// AlertIdentity represents the Identity of the object.
var AlertIdentity = elemental.Identity{
	Name:     "alert",
	Category: "alerts",
	Package:  "avi",
	Private:  false,
}

// AlertsList represents a list of Alerts
type AlertsList []*Alert

// Identity returns the identity of the objects in the list.
func (o AlertsList) Identity() elemental.Identity {

	return AlertIdentity
}

// Copy returns a pointer to a copy the AlertsList.
func (o AlertsList) Copy() elemental.Identifiables {

	out := append(AlertsList{}, o...)
	return &out
}

// Append appends the objects to the a new copy of the AlertsList.
func (o AlertsList) Append(objects ...elemental.Identifiable) elemental.Identifiables {

	out := append(AlertsList{}, o...)
	for _, obj := range objects {
		out = append(out, obj.(*Alert))
	}

	return out
}

// List converts the object to an elemental.IdentifiablesList.
func (o AlertsList) List() elemental.IdentifiablesList {

	out := make(elemental.IdentifiablesList, len(o))
	for i := 0; i < len(o); i++ {
		out[i] = o[i]
	}

	return out
}

// DefaultOrder returns the default ordering fields of the content.
func (o AlertsList) DefaultOrder() []string {

	return []string{}
}

// ToSparse returns the AlertsList converted to SparseAlertsList.
// Objects in the list will only contain the given fields. No field means entire field set.
func (o AlertsList) ToSparse(fields ...string) elemental.Identifiables {

	out := make(SparseAlertsList, len(o))
	for i := 0; i < len(o); i++ {
		out[i] = o[i].ToSparse(fields...).(*SparseAlert)
	}

	return out
}

// Version returns the version of the content.
func (o AlertsList) Version() int {

	return 1
}

// Alert represents the model of a alert
type Alert struct {
	// ID is the identifier of the object.
	ID string `json:"ID,omitempty" msgpack:"ID,omitempty" bson:"-" mapstructure:"ID,omitempty"`

	// The alert definition that triggered the alert.
	AlertDefinition *AlertDefinition `json:"alertDefinition,omitempty" msgpack:"alertDefinition,omitempty" bson:"-" mapstructure:"alertDefinition,omitempty"`

	// The name identifier of the alert definition that triggered the alert.
	AlertDefinitionName string `json:"alertDefinitionName" msgpack:"alertDefinitionName" bson:"alertdefinitionname" mapstructure:"alertDefinitionName,omitempty"`

	// The events related to the alert.
	AlertEvents []*AlertEvent `json:"alertEvents,omitempty" msgpack:"alertEvents,omitempty" bson:"-" mapstructure:"alertEvents,omitempty"`

	// The number of times the alert was raised.
	Counter int `json:"counter" msgpack:"counter" bson:"counter" mapstructure:"counter,omitempty"`

	// Creation date of the object.
	CreateTime time.Time `json:"createTime" msgpack:"createTime" bson:"createtime" mapstructure:"createTime,omitempty"`

	// When the alert was last raised.
	End time.Time `json:"end" msgpack:"end" bson:"end" mapstructure:"end,omitempty"`

	// The namespace of the object.
	Namespace string `json:"namespace,omitempty" msgpack:"namespace,omitempty" bson:"namespace,omitempty" mapstructure:"namespace,omitempty"`

	// When the alert was first raised.
	Start time.Time `json:"start" msgpack:"start" bson:"start" mapstructure:"start,omitempty"`

	// Last update date of the object.
	UpdateTime time.Time `json:"updateTime" msgpack:"updateTime" bson:"updatetime" mapstructure:"updateTime,omitempty"`

	// Hash of the object used to shard the data.
	ZHash int `json:"-" msgpack:"-" bson:"zhash" mapstructure:"-,omitempty"`

	// Sharding zone.
	Zone int `json:"-" msgpack:"-" bson:"zone" mapstructure:"-,omitempty"`

	ModelVersion int `json:"-" msgpack:"-" bson:"_modelversion"`
}

// NewAlert returns a new *Alert
func NewAlert() *Alert {

	return &Alert{
		ModelVersion: 1,
		Counter:      1,
	}
}

// Identity returns the Identity of the object.
func (o *Alert) Identity() elemental.Identity {

	return AlertIdentity
}

// Identifier returns the value of the object's unique identifier.
func (o *Alert) Identifier() string {

	return o.ID
}

// SetIdentifier sets the value of the object's unique identifier.
func (o *Alert) SetIdentifier(id string) {

	o.ID = id
}

// GetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *Alert) GetBSON() (any, error) {

	if o == nil {
		return nil, nil
	}

	s := &mongoAttributesAlert{}

	if o.ID != "" {
		s.ID = bson.ObjectIdHex(o.ID)
	}
	s.AlertDefinitionName = o.AlertDefinitionName
	s.Counter = o.Counter
	s.CreateTime = o.CreateTime
	s.End = o.End
	s.Namespace = o.Namespace
	s.Start = o.Start
	s.UpdateTime = o.UpdateTime
	s.ZHash = o.ZHash
	s.Zone = o.Zone

	return s, nil
}

// SetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *Alert) SetBSON(raw bson.Raw) error {

	if o == nil {
		return nil
	}

	s := &mongoAttributesAlert{}
	if err := raw.Unmarshal(s); err != nil {
		return err
	}

	o.ID = s.ID.Hex()
	o.AlertDefinitionName = s.AlertDefinitionName
	o.Counter = s.Counter
	o.CreateTime = s.CreateTime
	o.End = s.End
	o.Namespace = s.Namespace
	o.Start = s.Start
	o.UpdateTime = s.UpdateTime
	o.ZHash = s.ZHash
	o.Zone = s.Zone

	return nil
}

// Version returns the hardcoded version of the model.
func (o *Alert) Version() int {

	return 1
}

// BleveType implements the bleve.Classifier Interface.
func (o *Alert) BleveType() string {

	return "alert"
}

// DefaultOrder returns the list of default ordering fields.
func (o *Alert) DefaultOrder() []string {

	return []string{}
}

// Doc returns the documentation for the object
func (o *Alert) Doc() string {

	return `Represents an alert.`
}

func (o *Alert) String() string {

	return fmt.Sprintf("<%s:%s>", o.Identity().Name, o.Identifier())
}

// GetCreateTime returns the CreateTime of the receiver.
func (o *Alert) GetCreateTime() time.Time {

	return o.CreateTime
}

// SetCreateTime sets the property CreateTime of the receiver using the given value.
func (o *Alert) SetCreateTime(createTime time.Time) {

	o.CreateTime = createTime
}

// GetNamespace returns the Namespace of the receiver.
func (o *Alert) GetNamespace() string {

	return o.Namespace
}

// SetNamespace sets the property Namespace of the receiver using the given value.
func (o *Alert) SetNamespace(namespace string) {

	o.Namespace = namespace
}

// GetUpdateTime returns the UpdateTime of the receiver.
func (o *Alert) GetUpdateTime() time.Time {

	return o.UpdateTime
}

// SetUpdateTime sets the property UpdateTime of the receiver using the given value.
func (o *Alert) SetUpdateTime(updateTime time.Time) {

	o.UpdateTime = updateTime
}

// GetZHash returns the ZHash of the receiver.
func (o *Alert) GetZHash() int {

	return o.ZHash
}

// SetZHash sets the property ZHash of the receiver using the given value.
func (o *Alert) SetZHash(zHash int) {

	o.ZHash = zHash
}

// GetZone returns the Zone of the receiver.
func (o *Alert) GetZone() int {

	return o.Zone
}

// SetZone sets the property Zone of the receiver using the given value.
func (o *Alert) SetZone(zone int) {

	o.Zone = zone
}

// ToSparse returns the sparse version of the model.
// The returned object will only contain the given fields. No field means entire field set.
func (o *Alert) ToSparse(fields ...string) elemental.SparseIdentifiable {

	if len(fields) == 0 {
		// nolint: goimports
		return &SparseAlert{
			ID:                  &o.ID,
			AlertDefinition:     o.AlertDefinition,
			AlertDefinitionName: &o.AlertDefinitionName,
			AlertEvents:         &o.AlertEvents,
			Counter:             &o.Counter,
			CreateTime:          &o.CreateTime,
			End:                 &o.End,
			Namespace:           &o.Namespace,
			Start:               &o.Start,
			UpdateTime:          &o.UpdateTime,
			ZHash:               &o.ZHash,
			Zone:                &o.Zone,
		}
	}

	sp := &SparseAlert{}
	for _, f := range fields {
		switch f {
		case "ID":
			sp.ID = &(o.ID)
		case "alertDefinition":
			sp.AlertDefinition = o.AlertDefinition
		case "alertDefinitionName":
			sp.AlertDefinitionName = &(o.AlertDefinitionName)
		case "alertEvents":
			sp.AlertEvents = &(o.AlertEvents)
		case "counter":
			sp.Counter = &(o.Counter)
		case "createTime":
			sp.CreateTime = &(o.CreateTime)
		case "end":
			sp.End = &(o.End)
		case "namespace":
			sp.Namespace = &(o.Namespace)
		case "start":
			sp.Start = &(o.Start)
		case "updateTime":
			sp.UpdateTime = &(o.UpdateTime)
		case "zHash":
			sp.ZHash = &(o.ZHash)
		case "zone":
			sp.Zone = &(o.Zone)
		}
	}

	return sp
}

// Patch apply the non nil value of a *SparseAlert to the object.
func (o *Alert) Patch(sparse elemental.SparseIdentifiable) {
	if !sparse.Identity().IsEqual(o.Identity()) {
		panic("cannot patch from a parse with different identity")
	}

	so := sparse.(*SparseAlert)
	if so.ID != nil {
		o.ID = *so.ID
	}
	if so.AlertDefinition != nil {
		o.AlertDefinition = so.AlertDefinition
	}
	if so.AlertDefinitionName != nil {
		o.AlertDefinitionName = *so.AlertDefinitionName
	}
	if so.AlertEvents != nil {
		o.AlertEvents = *so.AlertEvents
	}
	if so.Counter != nil {
		o.Counter = *so.Counter
	}
	if so.CreateTime != nil {
		o.CreateTime = *so.CreateTime
	}
	if so.End != nil {
		o.End = *so.End
	}
	if so.Namespace != nil {
		o.Namespace = *so.Namespace
	}
	if so.Start != nil {
		o.Start = *so.Start
	}
	if so.UpdateTime != nil {
		o.UpdateTime = *so.UpdateTime
	}
	if so.ZHash != nil {
		o.ZHash = *so.ZHash
	}
	if so.Zone != nil {
		o.Zone = *so.Zone
	}
}

// DeepCopy returns a deep copy if the Alert.
func (o *Alert) DeepCopy() *Alert {

	if o == nil {
		return nil
	}

	out := &Alert{}
	o.DeepCopyInto(out)

	return out
}

// DeepCopyInto copies the receiver into the given *Alert.
func (o *Alert) DeepCopyInto(out *Alert) {

	target, err := copystructure.Copy(o)
	if err != nil {
		panic(fmt.Sprintf("Unable to deepcopy Alert: %s", err))
	}

	*out = *target.(*Alert)
}

// Validate valides the current information stored into the structure.
func (o *Alert) Validate() error {

	errors := elemental.Errors{}
	requiredErrors := elemental.Errors{}

	if err := elemental.ValidateRequiredString("alertDefinitionName", o.AlertDefinitionName); err != nil {
		requiredErrors = requiredErrors.Append(err)
	}

	if err := elemental.ValidateRequiredInt("counter", o.Counter); err != nil {
		requiredErrors = requiredErrors.Append(err)
	}

	if err := elemental.ValidateRequiredTime("end", o.End); err != nil {
		requiredErrors = requiredErrors.Append(err)
	}

	if err := elemental.ValidateRequiredTime("start", o.Start); err != nil {
		requiredErrors = requiredErrors.Append(err)
	}

	if len(requiredErrors) > 0 {
		return requiredErrors
	}

	if len(errors) > 0 {
		return errors
	}

	return nil
}

// SpecificationForAttribute returns the AttributeSpecification for the given attribute name key.
func (*Alert) SpecificationForAttribute(name string) elemental.AttributeSpecification {

	if v, ok := AlertAttributesMap[name]; ok {
		return v
	}

	// We could not find it, so let's check on the lower case indexed spec map
	return AlertLowerCaseAttributesMap[name]
}

// AttributeSpecifications returns the full attribute specifications map.
func (*Alert) AttributeSpecifications() map[string]elemental.AttributeSpecification {

	return AlertAttributesMap
}

// ValueForAttribute returns the value for the given attribute.
// This is a very advanced function that you should not need but in some
// very specific use cases.
func (o *Alert) ValueForAttribute(name string) any {

	switch name {
	case "ID":
		return o.ID
	case "alertDefinition":
		return o.AlertDefinition
	case "alertDefinitionName":
		return o.AlertDefinitionName
	case "alertEvents":
		return o.AlertEvents
	case "counter":
		return o.Counter
	case "createTime":
		return o.CreateTime
	case "end":
		return o.End
	case "namespace":
		return o.Namespace
	case "start":
		return o.Start
	case "updateTime":
		return o.UpdateTime
	case "zHash":
		return o.ZHash
	case "zone":
		return o.Zone
	}

	return nil
}

// AlertAttributesMap represents the map of attribute for Alert.
var AlertAttributesMap = map[string]elemental.AttributeSpecification{
	"ID": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "_id",
		ConvertedName:  "ID",
		Description:    `ID is the identifier of the object.`,
		Exposed:        true,
		Filterable:     true,
		Identifier:     true,
		Name:           "ID",
		Orderable:      true,
		ReadOnly:       true,
		Stored:         true,
		Type:           "string",
	},
	"AlertDefinition": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		ConvertedName:  "AlertDefinition",
		Description:    `The alert definition that triggered the alert.`,
		Exposed:        true,
		Name:           "alertDefinition",
		ReadOnly:       true,
		SubType:        "alertdefinition",
		Transient:      true,
		Type:           "ref",
	},
	"AlertDefinitionName": {
		AllowedChoices: []string{},
		BSONFieldName:  "alertdefinitionname",
		ConvertedName:  "AlertDefinitionName",
		CreationOnly:   true,
		Description:    `The name identifier of the alert definition that triggered the alert.`,
		Exposed:        true,
		Name:           "alertDefinitionName",
		Required:       true,
		Stored:         true,
		Type:           "string",
	},
	"AlertEvents": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		ConvertedName:  "AlertEvents",
		Description:    `The events related to the alert.`,
		Exposed:        true,
		Name:           "alertEvents",
		ReadOnly:       true,
		SubType:        "alertevent",
		Transient:      true,
		Type:           "refList",
	},
	"Counter": {
		AllowedChoices: []string{},
		BSONFieldName:  "counter",
		ConvertedName:  "Counter",
		DefaultValue:   1,
		Description:    `The number of times the alert was raised.`,
		Exposed:        true,
		Name:           "counter",
		Required:       true,
		Stored:         true,
		Type:           "integer",
	},
	"CreateTime": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "createtime",
		ConvertedName:  "CreateTime",
		Description:    `Creation date of the object.`,
		Exposed:        true,
		Getter:         true,
		Name:           "createTime",
		Orderable:      true,
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Type:           "time",
	},
	"End": {
		AllowedChoices: []string{},
		BSONFieldName:  "end",
		ConvertedName:  "End",
		Description:    `When the alert was last raised.`,
		Exposed:        true,
		Name:           "end",
		Required:       true,
		Stored:         true,
		Type:           "time",
	},
	"Namespace": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "namespace",
		ConvertedName:  "Namespace",
		Description:    `The namespace of the object.`,
		Exposed:        true,
		Getter:         true,
		Name:           "namespace",
		Orderable:      true,
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Type:           "string",
	},
	"Start": {
		AllowedChoices: []string{},
		BSONFieldName:  "start",
		ConvertedName:  "Start",
		CreationOnly:   true,
		Description:    `When the alert was first raised.`,
		Exposed:        true,
		Name:           "start",
		Required:       true,
		Stored:         true,
		Type:           "time",
	},
	"UpdateTime": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "updatetime",
		ConvertedName:  "UpdateTime",
		Description:    `Last update date of the object.`,
		Exposed:        true,
		Getter:         true,
		Name:           "updateTime",
		Orderable:      true,
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Type:           "time",
	},
	"ZHash": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "zhash",
		ConvertedName:  "ZHash",
		Description:    `Hash of the object used to shard the data.`,
		Getter:         true,
		Name:           "zHash",
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Type:           "integer",
	},
	"Zone": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "zone",
		ConvertedName:  "Zone",
		Description:    `Sharding zone.`,
		Getter:         true,
		Name:           "zone",
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Transient:      true,
		Type:           "integer",
	},
}

// AlertLowerCaseAttributesMap represents the map of attribute for Alert.
var AlertLowerCaseAttributesMap = map[string]elemental.AttributeSpecification{
	"id": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "_id",
		ConvertedName:  "ID",
		Description:    `ID is the identifier of the object.`,
		Exposed:        true,
		Filterable:     true,
		Identifier:     true,
		Name:           "ID",
		Orderable:      true,
		ReadOnly:       true,
		Stored:         true,
		Type:           "string",
	},
	"alertdefinition": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		ConvertedName:  "AlertDefinition",
		Description:    `The alert definition that triggered the alert.`,
		Exposed:        true,
		Name:           "alertDefinition",
		ReadOnly:       true,
		SubType:        "alertdefinition",
		Transient:      true,
		Type:           "ref",
	},
	"alertdefinitionname": {
		AllowedChoices: []string{},
		BSONFieldName:  "alertdefinitionname",
		ConvertedName:  "AlertDefinitionName",
		CreationOnly:   true,
		Description:    `The name identifier of the alert definition that triggered the alert.`,
		Exposed:        true,
		Name:           "alertDefinitionName",
		Required:       true,
		Stored:         true,
		Type:           "string",
	},
	"alertevents": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		ConvertedName:  "AlertEvents",
		Description:    `The events related to the alert.`,
		Exposed:        true,
		Name:           "alertEvents",
		ReadOnly:       true,
		SubType:        "alertevent",
		Transient:      true,
		Type:           "refList",
	},
	"counter": {
		AllowedChoices: []string{},
		BSONFieldName:  "counter",
		ConvertedName:  "Counter",
		DefaultValue:   1,
		Description:    `The number of times the alert was raised.`,
		Exposed:        true,
		Name:           "counter",
		Required:       true,
		Stored:         true,
		Type:           "integer",
	},
	"createtime": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "createtime",
		ConvertedName:  "CreateTime",
		Description:    `Creation date of the object.`,
		Exposed:        true,
		Getter:         true,
		Name:           "createTime",
		Orderable:      true,
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Type:           "time",
	},
	"end": {
		AllowedChoices: []string{},
		BSONFieldName:  "end",
		ConvertedName:  "End",
		Description:    `When the alert was last raised.`,
		Exposed:        true,
		Name:           "end",
		Required:       true,
		Stored:         true,
		Type:           "time",
	},
	"namespace": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "namespace",
		ConvertedName:  "Namespace",
		Description:    `The namespace of the object.`,
		Exposed:        true,
		Getter:         true,
		Name:           "namespace",
		Orderable:      true,
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Type:           "string",
	},
	"start": {
		AllowedChoices: []string{},
		BSONFieldName:  "start",
		ConvertedName:  "Start",
		CreationOnly:   true,
		Description:    `When the alert was first raised.`,
		Exposed:        true,
		Name:           "start",
		Required:       true,
		Stored:         true,
		Type:           "time",
	},
	"updatetime": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "updatetime",
		ConvertedName:  "UpdateTime",
		Description:    `Last update date of the object.`,
		Exposed:        true,
		Getter:         true,
		Name:           "updateTime",
		Orderable:      true,
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Type:           "time",
	},
	"zhash": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "zhash",
		ConvertedName:  "ZHash",
		Description:    `Hash of the object used to shard the data.`,
		Getter:         true,
		Name:           "zHash",
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Type:           "integer",
	},
	"zone": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "zone",
		ConvertedName:  "Zone",
		Description:    `Sharding zone.`,
		Getter:         true,
		Name:           "zone",
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Transient:      true,
		Type:           "integer",
	},
}

// SparseAlertsList represents a list of SparseAlerts
type SparseAlertsList []*SparseAlert

// Identity returns the identity of the objects in the list.
func (o SparseAlertsList) Identity() elemental.Identity {

	return AlertIdentity
}

// Copy returns a pointer to a copy the SparseAlertsList.
func (o SparseAlertsList) Copy() elemental.Identifiables {

	copy := append(SparseAlertsList{}, o...)
	return &copy
}

// Append appends the objects to the a new copy of the SparseAlertsList.
func (o SparseAlertsList) Append(objects ...elemental.Identifiable) elemental.Identifiables {

	out := append(SparseAlertsList{}, o...)
	for _, obj := range objects {
		out = append(out, obj.(*SparseAlert))
	}

	return out
}

// List converts the object to an elemental.IdentifiablesList.
func (o SparseAlertsList) List() elemental.IdentifiablesList {

	out := make(elemental.IdentifiablesList, len(o))
	for i := 0; i < len(o); i++ {
		out[i] = o[i]
	}

	return out
}

// DefaultOrder returns the default ordering fields of the content.
func (o SparseAlertsList) DefaultOrder() []string {

	return []string{}
}

// ToPlain returns the SparseAlertsList converted to AlertsList.
func (o SparseAlertsList) ToPlain() elemental.IdentifiablesList {

	out := make(elemental.IdentifiablesList, len(o))
	for i := 0; i < len(o); i++ {
		out[i] = o[i].ToPlain()
	}

	return out
}

// Version returns the version of the content.
func (o SparseAlertsList) Version() int {

	return 1
}

// SparseAlert represents the sparse version of a alert.
type SparseAlert struct {
	// ID is the identifier of the object.
	ID *string `json:"ID,omitempty" msgpack:"ID,omitempty" bson:"-" mapstructure:"ID,omitempty"`

	// The alert definition that triggered the alert.
	AlertDefinition *AlertDefinition `json:"alertDefinition,omitempty" msgpack:"alertDefinition,omitempty" bson:"-" mapstructure:"alertDefinition,omitempty"`

	// The name identifier of the alert definition that triggered the alert.
	AlertDefinitionName *string `json:"alertDefinitionName,omitempty" msgpack:"alertDefinitionName,omitempty" bson:"alertdefinitionname,omitempty" mapstructure:"alertDefinitionName,omitempty"`

	// The events related to the alert.
	AlertEvents *[]*AlertEvent `json:"alertEvents,omitempty" msgpack:"alertEvents,omitempty" bson:"-" mapstructure:"alertEvents,omitempty"`

	// The number of times the alert was raised.
	Counter *int `json:"counter,omitempty" msgpack:"counter,omitempty" bson:"counter,omitempty" mapstructure:"counter,omitempty"`

	// Creation date of the object.
	CreateTime *time.Time `json:"createTime,omitempty" msgpack:"createTime,omitempty" bson:"createtime,omitempty" mapstructure:"createTime,omitempty"`

	// When the alert was last raised.
	End *time.Time `json:"end,omitempty" msgpack:"end,omitempty" bson:"end,omitempty" mapstructure:"end,omitempty"`

	// The namespace of the object.
	Namespace *string `json:"namespace,omitempty" msgpack:"namespace,omitempty" bson:"namespace,omitempty" mapstructure:"namespace,omitempty"`

	// When the alert was first raised.
	Start *time.Time `json:"start,omitempty" msgpack:"start,omitempty" bson:"start,omitempty" mapstructure:"start,omitempty"`

	// Last update date of the object.
	UpdateTime *time.Time `json:"updateTime,omitempty" msgpack:"updateTime,omitempty" bson:"updatetime,omitempty" mapstructure:"updateTime,omitempty"`

	// Hash of the object used to shard the data.
	ZHash *int `json:"-" msgpack:"-" bson:"zhash,omitempty" mapstructure:"-,omitempty"`

	// Sharding zone.
	Zone *int `json:"-" msgpack:"-" bson:"zone,omitempty" mapstructure:"-,omitempty"`

	ModelVersion int `json:"-" msgpack:"-" bson:"_modelversion"`
}

// NewSparseAlert returns a new  SparseAlert.
func NewSparseAlert() *SparseAlert {
	return &SparseAlert{}
}

// Identity returns the Identity of the sparse object.
func (o *SparseAlert) Identity() elemental.Identity {

	return AlertIdentity
}

// Identifier returns the value of the sparse object's unique identifier.
func (o *SparseAlert) Identifier() string {

	if o.ID == nil {
		return ""
	}
	return *o.ID
}

// SetIdentifier sets the value of the sparse object's unique identifier.
func (o *SparseAlert) SetIdentifier(id string) {

	if id != "" {
		o.ID = &id
	} else {
		o.ID = nil
	}
}

// GetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *SparseAlert) GetBSON() (any, error) {

	if o == nil {
		return nil, nil
	}

	s := &mongoAttributesSparseAlert{}

	if o.ID != nil {
		s.ID = bson.ObjectIdHex(*o.ID)
	}
	if o.AlertDefinitionName != nil {
		s.AlertDefinitionName = o.AlertDefinitionName
	}
	if o.Counter != nil {
		s.Counter = o.Counter
	}
	if o.CreateTime != nil {
		s.CreateTime = o.CreateTime
	}
	if o.End != nil {
		s.End = o.End
	}
	if o.Namespace != nil {
		s.Namespace = o.Namespace
	}
	if o.Start != nil {
		s.Start = o.Start
	}
	if o.UpdateTime != nil {
		s.UpdateTime = o.UpdateTime
	}
	if o.ZHash != nil {
		s.ZHash = o.ZHash
	}
	if o.Zone != nil {
		s.Zone = o.Zone
	}

	return s, nil
}

// SetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *SparseAlert) SetBSON(raw bson.Raw) error {

	if o == nil {
		return nil
	}

	s := &mongoAttributesSparseAlert{}
	if err := raw.Unmarshal(s); err != nil {
		return err
	}

	id := s.ID.Hex()
	o.ID = &id
	if s.AlertDefinitionName != nil {
		o.AlertDefinitionName = s.AlertDefinitionName
	}
	if s.Counter != nil {
		o.Counter = s.Counter
	}
	if s.CreateTime != nil {
		o.CreateTime = s.CreateTime
	}
	if s.End != nil {
		o.End = s.End
	}
	if s.Namespace != nil {
		o.Namespace = s.Namespace
	}
	if s.Start != nil {
		o.Start = s.Start
	}
	if s.UpdateTime != nil {
		o.UpdateTime = s.UpdateTime
	}
	if s.ZHash != nil {
		o.ZHash = s.ZHash
	}
	if s.Zone != nil {
		o.Zone = s.Zone
	}

	return nil
}

// Version returns the hardcoded version of the model.
func (o *SparseAlert) Version() int {

	return 1
}

// ToPlain returns the plain version of the sparse model.
func (o *SparseAlert) ToPlain() elemental.PlainIdentifiable {

	out := NewAlert()
	if o.ID != nil {
		out.ID = *o.ID
	}
	if o.AlertDefinition != nil {
		out.AlertDefinition = o.AlertDefinition
	}
	if o.AlertDefinitionName != nil {
		out.AlertDefinitionName = *o.AlertDefinitionName
	}
	if o.AlertEvents != nil {
		out.AlertEvents = *o.AlertEvents
	}
	if o.Counter != nil {
		out.Counter = *o.Counter
	}
	if o.CreateTime != nil {
		out.CreateTime = *o.CreateTime
	}
	if o.End != nil {
		out.End = *o.End
	}
	if o.Namespace != nil {
		out.Namespace = *o.Namespace
	}
	if o.Start != nil {
		out.Start = *o.Start
	}
	if o.UpdateTime != nil {
		out.UpdateTime = *o.UpdateTime
	}
	if o.ZHash != nil {
		out.ZHash = *o.ZHash
	}
	if o.Zone != nil {
		out.Zone = *o.Zone
	}

	return out
}

// GetCreateTime returns the CreateTime of the receiver.
func (o *SparseAlert) GetCreateTime() (out time.Time) {

	if o.CreateTime == nil {
		return
	}

	return *o.CreateTime
}

// SetCreateTime sets the property CreateTime of the receiver using the address of the given value.
func (o *SparseAlert) SetCreateTime(createTime time.Time) {

	o.CreateTime = &createTime
}

// GetNamespace returns the Namespace of the receiver.
func (o *SparseAlert) GetNamespace() (out string) {

	if o.Namespace == nil {
		return
	}

	return *o.Namespace
}

// SetNamespace sets the property Namespace of the receiver using the address of the given value.
func (o *SparseAlert) SetNamespace(namespace string) {

	o.Namespace = &namespace
}

// GetUpdateTime returns the UpdateTime of the receiver.
func (o *SparseAlert) GetUpdateTime() (out time.Time) {

	if o.UpdateTime == nil {
		return
	}

	return *o.UpdateTime
}

// SetUpdateTime sets the property UpdateTime of the receiver using the address of the given value.
func (o *SparseAlert) SetUpdateTime(updateTime time.Time) {

	o.UpdateTime = &updateTime
}

// GetZHash returns the ZHash of the receiver.
func (o *SparseAlert) GetZHash() (out int) {

	if o.ZHash == nil {
		return
	}

	return *o.ZHash
}

// SetZHash sets the property ZHash of the receiver using the address of the given value.
func (o *SparseAlert) SetZHash(zHash int) {

	o.ZHash = &zHash
}

// GetZone returns the Zone of the receiver.
func (o *SparseAlert) GetZone() (out int) {

	if o.Zone == nil {
		return
	}

	return *o.Zone
}

// SetZone sets the property Zone of the receiver using the address of the given value.
func (o *SparseAlert) SetZone(zone int) {

	o.Zone = &zone
}

// DeepCopy returns a deep copy if the SparseAlert.
func (o *SparseAlert) DeepCopy() *SparseAlert {

	if o == nil {
		return nil
	}

	out := &SparseAlert{}
	o.DeepCopyInto(out)

	return out
}

// DeepCopyInto copies the receiver into the given *SparseAlert.
func (o *SparseAlert) DeepCopyInto(out *SparseAlert) {

	target, err := copystructure.Copy(o)
	if err != nil {
		panic(fmt.Sprintf("Unable to deepcopy SparseAlert: %s", err))
	}

	*out = *target.(*SparseAlert)
}

type mongoAttributesAlert struct {
	ID                  bson.ObjectId `bson:"_id,omitempty"`
	AlertDefinitionName string        `bson:"alertdefinitionname"`
	Counter             int           `bson:"counter"`
	CreateTime          time.Time     `bson:"createtime"`
	End                 time.Time     `bson:"end"`
	Namespace           string        `bson:"namespace,omitempty"`
	Start               time.Time     `bson:"start"`
	UpdateTime          time.Time     `bson:"updatetime"`
	ZHash               int           `bson:"zhash"`
	Zone                int           `bson:"zone"`
}
type mongoAttributesSparseAlert struct {
	ID                  bson.ObjectId `bson:"_id,omitempty"`
	AlertDefinitionName *string       `bson:"alertdefinitionname,omitempty"`
	Counter             *int          `bson:"counter,omitempty"`
	CreateTime          *time.Time    `bson:"createtime,omitempty"`
	End                 *time.Time    `bson:"end,omitempty"`
	Namespace           *string       `bson:"namespace,omitempty"`
	Start               *time.Time    `bson:"start,omitempty"`
	UpdateTime          *time.Time    `bson:"updatetime,omitempty"`
	ZHash               *int          `bson:"zhash,omitempty"`
	Zone                *int          `bson:"zone,omitempty"`
}
