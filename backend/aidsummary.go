// Code generated by elegen. DO NOT EDIT.
// Source: go.acuvity.ai/elemental (templates/model.gotpl)

package api

import (
	"fmt"

	"github.com/globalsign/mgo/bson"
	"github.com/mitchellh/copystructure"
	"go.acuvity.ai/elemental"
)

// AIDSummaryLevelValue represents the possible values for attribute "level".
type AIDSummaryLevelValue string

const (
	// AIDSummaryLevelCritical represents the value Critical.
	AIDSummaryLevelCritical AIDSummaryLevelValue = "Critical"

	// AIDSummaryLevelHigh represents the value High.
	AIDSummaryLevelHigh AIDSummaryLevelValue = "High"

	// AIDSummaryLevelLow represents the value Low.
	AIDSummaryLevelLow AIDSummaryLevelValue = "Low"

	// AIDSummaryLevelMedium represents the value Medium.
	AIDSummaryLevelMedium AIDSummaryLevelValue = "Medium"
)

// AIDSummary represents the model of a aidsummary
type AIDSummary struct {
	// The list of compliances.
	Compliances []string `json:"compliances,omitempty" msgpack:"compliances,omitempty" bson:"compliances,omitempty" mapstructure:"compliances,omitempty"`

	// The level of the risk.
	Level AIDSummaryLevelValue `json:"level" msgpack:"level" bson:"level" mapstructure:"level,omitempty"`

	// If true, the provider uses its own in-house model.
	OwnModel bool `json:"ownModel,omitempty" msgpack:"ownModel,omitempty" bson:"ownmodel,omitempty" mapstructure:"ownModel,omitempty"`

	// The residencies of the data.
	Residencies []string `json:"residencies,omitempty" msgpack:"residencies,omitempty" bson:"residencies,omitempty" mapstructure:"residencies,omitempty"`

	// List of retention policies.
	Retentions []string `json:"retentions,omitempty" msgpack:"retentions,omitempty" bson:"retentions,omitempty" mapstructure:"retentions,omitempty"`

	// If true, the provider shares data with third-party vendors.
	Sharing bool `json:"sharing,omitempty" msgpack:"sharing,omitempty" bson:"sharing,omitempty" mapstructure:"sharing,omitempty"`

	// If true, the provider use customer data to train their model.
	Training bool `json:"training,omitempty" msgpack:"training,omitempty" bson:"training,omitempty" mapstructure:"training,omitempty"`

	ModelVersion int `json:"-" msgpack:"-" bson:"_modelversion"`
}

// NewAIDSummary returns a new *AIDSummary
func NewAIDSummary() *AIDSummary {

	return &AIDSummary{
		ModelVersion: 1,
		Compliances:  []string{},
		Residencies:  []string{},
		Retentions:   []string{},
	}
}

// GetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *AIDSummary) GetBSON() (any, error) {

	if o == nil {
		return nil, nil
	}

	s := &mongoAttributesAIDSummary{}

	s.Compliances = o.Compliances
	s.Level = o.Level
	s.OwnModel = o.OwnModel
	s.Residencies = o.Residencies
	s.Retentions = o.Retentions
	s.Sharing = o.Sharing
	s.Training = o.Training

	return s, nil
}

// SetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *AIDSummary) SetBSON(raw bson.Raw) error {

	if o == nil || raw.Kind == bson.ElementNil {
		return bson.ErrSetZero
	}

	s := &mongoAttributesAIDSummary{}
	if err := raw.Unmarshal(s); err != nil {
		return err
	}

	o.Compliances = s.Compliances
	o.Level = s.Level
	o.OwnModel = s.OwnModel
	o.Residencies = s.Residencies
	o.Retentions = s.Retentions
	o.Sharing = s.Sharing
	o.Training = s.Training

	return nil
}

// BleveType implements the bleve.Classifier Interface.
func (o *AIDSummary) BleveType() string {

	return "aidsummary"
}

// DeepCopy returns a deep copy if the AIDSummary.
func (o *AIDSummary) DeepCopy() *AIDSummary {

	if o == nil {
		return nil
	}

	out := &AIDSummary{}
	o.DeepCopyInto(out)

	return out
}

// DeepCopyInto copies the receiver into the given *AIDSummary.
func (o *AIDSummary) DeepCopyInto(out *AIDSummary) {

	target, err := copystructure.Copy(o)
	if err != nil {
		panic(fmt.Sprintf("Unable to deepcopy AIDSummary: %s", err))
	}

	*out = *target.(*AIDSummary)
}

// Validate valides the current information stored into the structure.
func (o *AIDSummary) Validate() error {

	errors := elemental.Errors{}
	requiredErrors := elemental.Errors{}

	if err := elemental.ValidateRequiredString("level", string(o.Level)); err != nil {
		requiredErrors = requiredErrors.Append(err)
	}

	if err := elemental.ValidateStringInList("level", string(o.Level), []string{"Low", "Medium", "High", "Critical"}, false); err != nil {
		errors = errors.Append(err)
	}

	if len(requiredErrors) > 0 {
		return requiredErrors
	}

	if len(errors) > 0 {
		return errors
	}

	return nil
}

// SpecificationForAttribute returns the AttributeSpecification for the given attribute name key.
func (*AIDSummary) SpecificationForAttribute(name string) elemental.AttributeSpecification {

	if v, ok := AIDSummaryAttributesMap[name]; ok {
		return v
	}

	// We could not find it, so let's check on the lower case indexed spec map
	return AIDSummaryLowerCaseAttributesMap[name]
}

// AttributeSpecifications returns the full attribute specifications map.
func (*AIDSummary) AttributeSpecifications() map[string]elemental.AttributeSpecification {

	return AIDSummaryAttributesMap
}

// ValueForAttribute returns the value for the given attribute.
// This is a very advanced function that you should not need but in some
// very specific use cases.
func (o *AIDSummary) ValueForAttribute(name string) any {

	switch name {
	case "compliances":
		return o.Compliances
	case "level":
		return o.Level
	case "ownModel":
		return o.OwnModel
	case "residencies":
		return o.Residencies
	case "retentions":
		return o.Retentions
	case "sharing":
		return o.Sharing
	case "training":
		return o.Training
	}

	return nil
}

// AIDSummaryAttributesMap represents the map of attribute for AIDSummary.
var AIDSummaryAttributesMap = map[string]elemental.AttributeSpecification{
	"Compliances": {
		AllowedChoices: []string{},
		BSONFieldName:  "compliances",
		ConvertedName:  "Compliances",
		Description:    `The list of compliances.`,
		Exposed:        true,
		Name:           "compliances",
		Stored:         true,
		SubType:        "string",
		Type:           "list",
	},
	"Level": {
		AllowedChoices: []string{"Low", "Medium", "High", "Critical"},
		BSONFieldName:  "level",
		ConvertedName:  "Level",
		Description:    `The level of the risk.`,
		Exposed:        true,
		Name:           "level",
		Required:       true,
		Stored:         true,
		Type:           "enum",
	},
	"OwnModel": {
		AllowedChoices: []string{},
		BSONFieldName:  "ownmodel",
		ConvertedName:  "OwnModel",
		Description:    `If true, the provider uses its own in-house model.`,
		Exposed:        true,
		Name:           "ownModel",
		Stored:         true,
		Type:           "boolean",
	},
	"Residencies": {
		AllowedChoices: []string{},
		BSONFieldName:  "residencies",
		ConvertedName:  "Residencies",
		Description:    `The residencies of the data.`,
		Exposed:        true,
		Name:           "residencies",
		Stored:         true,
		SubType:        "string",
		Type:           "list",
	},
	"Retentions": {
		AllowedChoices: []string{},
		BSONFieldName:  "retentions",
		ConvertedName:  "Retentions",
		Description:    `List of retention policies.`,
		Exposed:        true,
		Name:           "retentions",
		Stored:         true,
		SubType:        "string",
		Type:           "list",
	},
	"Sharing": {
		AllowedChoices: []string{},
		BSONFieldName:  "sharing",
		ConvertedName:  "Sharing",
		Description:    `If true, the provider shares data with third-party vendors.`,
		Exposed:        true,
		Name:           "sharing",
		Stored:         true,
		Type:           "boolean",
	},
	"Training": {
		AllowedChoices: []string{},
		BSONFieldName:  "training",
		ConvertedName:  "Training",
		Description:    `If true, the provider use customer data to train their model.`,
		Exposed:        true,
		Name:           "training",
		Stored:         true,
		Type:           "boolean",
	},
}

// AIDSummaryLowerCaseAttributesMap represents the map of attribute for AIDSummary.
var AIDSummaryLowerCaseAttributesMap = map[string]elemental.AttributeSpecification{
	"compliances": {
		AllowedChoices: []string{},
		BSONFieldName:  "compliances",
		ConvertedName:  "Compliances",
		Description:    `The list of compliances.`,
		Exposed:        true,
		Name:           "compliances",
		Stored:         true,
		SubType:        "string",
		Type:           "list",
	},
	"level": {
		AllowedChoices: []string{"Low", "Medium", "High", "Critical"},
		BSONFieldName:  "level",
		ConvertedName:  "Level",
		Description:    `The level of the risk.`,
		Exposed:        true,
		Name:           "level",
		Required:       true,
		Stored:         true,
		Type:           "enum",
	},
	"ownmodel": {
		AllowedChoices: []string{},
		BSONFieldName:  "ownmodel",
		ConvertedName:  "OwnModel",
		Description:    `If true, the provider uses its own in-house model.`,
		Exposed:        true,
		Name:           "ownModel",
		Stored:         true,
		Type:           "boolean",
	},
	"residencies": {
		AllowedChoices: []string{},
		BSONFieldName:  "residencies",
		ConvertedName:  "Residencies",
		Description:    `The residencies of the data.`,
		Exposed:        true,
		Name:           "residencies",
		Stored:         true,
		SubType:        "string",
		Type:           "list",
	},
	"retentions": {
		AllowedChoices: []string{},
		BSONFieldName:  "retentions",
		ConvertedName:  "Retentions",
		Description:    `List of retention policies.`,
		Exposed:        true,
		Name:           "retentions",
		Stored:         true,
		SubType:        "string",
		Type:           "list",
	},
	"sharing": {
		AllowedChoices: []string{},
		BSONFieldName:  "sharing",
		ConvertedName:  "Sharing",
		Description:    `If true, the provider shares data with third-party vendors.`,
		Exposed:        true,
		Name:           "sharing",
		Stored:         true,
		Type:           "boolean",
	},
	"training": {
		AllowedChoices: []string{},
		BSONFieldName:  "training",
		ConvertedName:  "Training",
		Description:    `If true, the provider use customer data to train their model.`,
		Exposed:        true,
		Name:           "training",
		Stored:         true,
		Type:           "boolean",
	},
}

type mongoAttributesAIDSummary struct {
	Compliances []string             `bson:"compliances,omitempty"`
	Level       AIDSummaryLevelValue `bson:"level"`
	OwnModel    bool                 `bson:"ownmodel,omitempty"`
	Residencies []string             `bson:"residencies,omitempty"`
	Retentions  []string             `bson:"retentions,omitempty"`
	Sharing     bool                 `bson:"sharing,omitempty"`
	Training    bool                 `bson:"training,omitempty"`
}
