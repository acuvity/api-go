// Code generated by elegen. DO NOT EDIT.
// Source: go.acuvity.ai/elemental (templates/identities_registry.gotpl)

package api

import "go.acuvity.ai/elemental"

var (
	identityNamesMap = map[string]elemental.Identity{
		"accesspolicy": AccessPolicyIdentity,

		"agent":       AgentIdentity,
		"agentconfig": AgentConfigIdentity,

		"agentdiscovery":  AgentDiscoveryIdentity,
		"aidomain":        AIDomainIdentity,
		"alert":           AlertIdentity,
		"alertdefinition": AlertDefinitionIdentity,

		"alerttrigger": AlertTriggerIdentity,

		"analyzer": AnalyzerIdentity,

		"apiauthorization": APIAuthorizationIdentity,
		"app":              AppIdentity,
		"appcomponent":     AppComponentIdentity,
		"apptoken":         AppTokenIdentity,
		"authsettings":     AuthSettingsIdentity,
		"contentpolicy":    ContentPolicyIdentity,
		"customdataset":    CustomDataSetIdentity,
		"customdatatype":   CustomDataTypeIdentity,

		"errortransformer": ErrorTransformerIdentity,

		"extractor": ExtractorIdentity,

		"feedback":     FeedbackIdentity,
		"gitbooktoken": GitbookTokenIdentity,

		"ignoreddomain":         IgnoredDomainIdentity,
		"import":                ImportIdentity,
		"ingressproviderconfig": IngressProviderConfigIdentity,

		"labelvalue": LabelValueIdentity,
		"landing":    LandingIdentity,
		"latency":    LatencyIdentity,

		"metric":           MetricIdentity,
		"metriclabelvalue": MetricLabelValueIdentity,
		"metricrange":      MetricRangeIdentity,
		"metricserie":      MetricSerieIdentity,

		"orgsettings": OrgSettingsIdentity,
		"orgstorage":  OrgStorageIdentity,

		"pacconfig":    PACConfigIdentity,
		"pagedataview": PageDataViewIdentity,

		"policyupdate": PolicyUpdateIdentity,

		"principal":      PrincipalIdentity,
		"principalapp":   PrincipalAppIdentity,
		"principaluser":  PrincipalUserIdentity,
		"project":        ProjectIdentity,
		"provider":       ProviderIdentity,
		"providerdetail": ProviderDetailIdentity,

		"providerteam":  ProviderTeamIdentity,
		"providertoken": ProviderTokenIdentity,

		"proxyconf":      ProxyConfIdentity,
		"proxyroundtrip": ProxyRoundtripIdentity,
		"query":          QueryIdentity,
		"queryrange":     QueryRangeIdentity,
		"role":           RoleIdentity,
		"root":           RootIdentity,
		"schemaversion":  SchemaVersionIdentity,
		"serie":          SerieIdentity,
		"signup":         SignupIdentity,
		"sink":           SinkIdentity,
		"sinkemail":      SinkEmailIdentity,
		"sinkpagerduty":  SinkPagerDutyIdentity,
		"sinkslack":      SinkSlackIdentity,
		"sinksplunk":     SinkSplunkIdentity,
		"team":           TeamIdentity,

		"trace":              TraceIdentity,
		"traceref":           TraceRefIdentity,
		"tracesearch":        TraceSearchIdentity,
		"tracetagkeys":       TraceTagKeysIdentity,
		"tracetagvalues":     TraceTagValuesIdentity,
		"usertoken":          UserTokenIdentity,
		"visitedurl":         VisitedURLIdentity,
		"watchedorg":         WatchedOrgIdentity,
		"webextensionconfig": WebExtensionConfigIdentity,
	}

	identitycategoriesMap = map[string]elemental.Identity{
		"accesspolicies": AccessPolicyIdentity,

		"agents":       AgentIdentity,
		"agentconfigs": AgentConfigIdentity,

		"agentdiscoveries": AgentDiscoveryIdentity,
		"aidomains":        AIDomainIdentity,
		"alerts":           AlertIdentity,
		"alertdefinitions": AlertDefinitionIdentity,

		"alerttriggers": AlertTriggerIdentity,

		"analyzers": AnalyzerIdentity,

		"apiauthorizations": APIAuthorizationIdentity,
		"apps":              AppIdentity,
		"appcomponents":     AppComponentIdentity,
		"apptokens":         AppTokenIdentity,
		"authsettings":      AuthSettingsIdentity,
		"contentpolicies":   ContentPolicyIdentity,
		"customdatasets":    CustomDataSetIdentity,
		"customdatatypes":   CustomDataTypeIdentity,

		"errortransformers": ErrorTransformerIdentity,

		"extractors": ExtractorIdentity,

		"feedbacks":     FeedbackIdentity,
		"gitbooktokens": GitbookTokenIdentity,

		"ignoreddomains":         IgnoredDomainIdentity,
		"import":                 ImportIdentity,
		"ingressproviderconfigs": IngressProviderConfigIdentity,

		"labelvalues": LabelValueIdentity,
		"landings":    LandingIdentity,
		"latencies":   LatencyIdentity,

		"metrics":           MetricIdentity,
		"metriclabelvalues": MetricLabelValueIdentity,
		"metricranges":      MetricRangeIdentity,
		"metricseries":      MetricSerieIdentity,

		"orgsettings": OrgSettingsIdentity,
		"orgstorages": OrgStorageIdentity,

		"pacconfigs":    PACConfigIdentity,
		"pagedataviews": PageDataViewIdentity,

		"policyupdates": PolicyUpdateIdentity,

		"principals":      PrincipalIdentity,
		"principalapps":   PrincipalAppIdentity,
		"principalusers":  PrincipalUserIdentity,
		"projects":        ProjectIdentity,
		"providers":       ProviderIdentity,
		"providerdetails": ProviderDetailIdentity,

		"providerteams":  ProviderTeamIdentity,
		"providertokens": ProviderTokenIdentity,

		"proxyconfs":      ProxyConfIdentity,
		"proxyroundtrips": ProxyRoundtripIdentity,
		"queries":         QueryIdentity,
		"queryranges":     QueryRangeIdentity,
		"roles":           RoleIdentity,
		"root":            RootIdentity,
		"schemaversions":  SchemaVersionIdentity,
		"series":          SerieIdentity,
		"signups":         SignupIdentity,
		"sinks":           SinkIdentity,
		"sinkemail":       SinkEmailIdentity,
		"sinkpagerduty":   SinkPagerDutyIdentity,
		"sinkslack":       SinkSlackIdentity,
		"sinksplunk":      SinkSplunkIdentity,
		"teams":           TeamIdentity,

		"traces":              TraceIdentity,
		"tracerefs":           TraceRefIdentity,
		"tracesearches":       TraceSearchIdentity,
		"tracetagkeys":        TraceTagKeysIdentity,
		"tracetagvalues":      TraceTagValuesIdentity,
		"usertokens":          UserTokenIdentity,
		"visitedurls":         VisitedURLIdentity,
		"watchedorgs":         WatchedOrgIdentity,
		"webextensionconfigs": WebExtensionConfigIdentity,
	}

	aliasesMap = map[string]elemental.Identity{}

	indexesMap = map[string][][]string{
		"accesspolicy": {
			{":shard", ":unique", "zone", "zHash"},
			{"namespace", "importLabel"},
			{"namespace", "name"},
		},
		"agent": {
			{":shard", ":unique", "zone", "zHash"},
			{"namespace", "importLabel"},
		},
		"agentconfig": {
			{":shard", ":unique", "zone", "zHash"},
			{"namespace", "importLabel"},
			{"namespace", "name"},
		},
		"agentdiscovery": {
			{"namespace", "importLabel"},
		},
		"aidomain": {
			{":shard", ":unique", "zone", "zHash"},
			{"namespace", "domain"},
			{"namespace", "importLabel"},
			{"namespace", "providerName"},
		},
		"alert": {
			{":shard", ":unique", "zone", "zHash"},
			{"namespace", "alertDefinitionName"},
		},
		"alertdefinition": {
			{":shard", ":unique", "zone", "zHash"},
			{"namespace", "importLabel"},
			{"namespace", "name"},
		},
		"alerttrigger": nil,
		"analyzer":     nil,
		"apiauthorization": {
			{":shard", ":unique", "zone", "zHash"},
			{"namespace", "importLabel"},
			{"namespace", "name"},
		},
		"app": {
			{":shard", ":unique", "zone", "zHash"},
			{"namespace", "importLabel"},
		},
		"appcomponent": nil,
		"apptoken": {
			{":shard", ":unique", "zone", "zHash"},
			{"namespace"},
			{"namespace", "email"},
		},
		"authsettings": nil,
		"contentpolicy": {
			{":shard", ":unique", "zone", "zHash"},
			{"namespace", "importLabel"},
			{"namespace", "name"},
		},
		"customdataset": {
			{":shard", ":unique", "zone", "zHash"},
			{"namespace", "importLabel"},
			{"namespace", "name"},
		},
		"customdatatype": {
			{":shard", ":unique", "zone", "zHash"},
			{"namespace", "importLabel"},
			{"namespace", "name"},
		},
		"errortransformer": nil,
		"extractor": {
			{":shard", ":unique", "zone", "zHash"},
			{"namespace", "importLabel"},
			{"namespace", "name"},
		},
		"feedback": {
			{":shard", ":unique", "zone", "zHash"},
			{"namespace", "logHash", "key", "value"},
		},
		"gitbooktoken": nil,
		"ignoreddomain": {
			{":shard", ":unique", "zone", "zHash"},
			{"namespace", "domain"},
			{"namespace", "importLabel"},
		},
		"import":                nil,
		"ingressproviderconfig": nil,
		"labelvalue":            nil,
		"landing":               nil,
		"latency":               nil,
		"metric":                nil,
		"metriclabelvalue":      nil,
		"metricrange":           nil,
		"metricserie":           nil,
		"orgsettings": {
			{":shard", ":unique", "zone", "zHash"},
			{"fingerprints"},
			{"namespace", "importLabel"},
			{"namespace", "name"},
		},
		"orgstorage": {
			{":shard", ":unique", "zone", "zHash"},
			{"namespace", "importLabel"},
			{"namespace", "name"},
		},
		"pacconfig": {
			{":shard", ":unique", "zone", "zHash"},
			{"namespace", "importLabel"},
			{"namespace", "name"},
		},
		"pagedataview": {
			{":shard", ":unique", "zone", "zHash"},
			{"namespace", "name"},
			{"namespace", "pageID"},
		},
		"policyupdate":  nil,
		"principal":     nil,
		"principalapp":  nil,
		"principaluser": nil,
		"project": {
			{":shard", ":unique", "zone", "zHash"},
			{"namespace", "importLabel"},
			{"namespace", "name"},
		},
		"provider": {
			{":shard", ":unique", "zone", "zHash"},
			{"namespace", "importLabel"},
			{"namespace", "name"},
		},
		"providerdetail": nil,
		"providerteam": {
			{":shard", ":unique", "zone", "zHash"},
			{"namespace", "importLabel"},
			{"namespace", "name"},
		},
		"providertoken": {
			{":shard", ":unique", "zone", "zHash"},
			{"namespace", "importLabel"},
			{"namespace", "name"},
		},
		"proxyconf": nil,
		"proxyroundtrip": {
			{"namespace", "importLabel"},
		},
		"query":         nil,
		"queryrange":    nil,
		"role":          nil,
		"root":          nil,
		"schemaversion": nil,
		"serie":         nil,
		"signup": {
			{":shard", ":unique", "zone", "zHash"},
		},
		"sink": {
			{":shard", ":unique", "zone", "zHash"},
			{"namespace", "importLabel"},
			{"namespace", "name"},
		},
		"sinkemail":     nil,
		"sinkpagerduty": nil,
		"sinkslack":     nil,
		"sinksplunk":    nil,
		"team": {
			{":shard", ":unique", "zone", "zHash"},
			{"namespace", "importLabel"},
			{"namespace", "name"},
		},
		"trace":          nil,
		"traceref":       nil,
		"tracesearch":    nil,
		"tracetagkeys":   nil,
		"tracetagvalues": nil,
		"usertoken": {
			{":shard", ":unique", "zone", "zHash"},
			{"namespace"},
			{"namespace", "email"},
		},
		"visitedurl": {
			{"namespace", "importLabel"},
		},
		"watchedorg": nil,
		"webextensionconfig": {
			{":shard", ":unique", "zone", "zHash"},
			{"namespace", "importLabel"},
			{"namespace", "name"},
		},
	}
)

// ModelVersion returns the current version of the model.
func ModelVersion() float64 { return 1 }

type modelManager struct{}

func (f modelManager) IdentityFromName(name string) elemental.Identity {

	return identityNamesMap[name]
}

func (f modelManager) IdentityFromCategory(category string) elemental.Identity {

	return identitycategoriesMap[category]
}

func (f modelManager) IdentityFromAlias(alias string) elemental.Identity {

	return aliasesMap[alias]
}

func (f modelManager) IdentityFromAny(any string) (i elemental.Identity) {

	if i = f.IdentityFromName(any); !i.IsEmpty() {
		return i
	}

	if i = f.IdentityFromCategory(any); !i.IsEmpty() {
		return i
	}

	return f.IdentityFromAlias(any)
}

func (f modelManager) Identifiable(identity elemental.Identity) elemental.Identifiable {

	switch identity {

	case AccessPolicyIdentity:
		return NewAccessPolicy()
	case AgentIdentity:
		return NewAgent()
	case AgentConfigIdentity:
		return NewAgentConfig()
	case AgentDiscoveryIdentity:
		return NewAgentDiscovery()
	case AIDomainIdentity:
		return NewAIDomain()
	case AlertIdentity:
		return NewAlert()
	case AlertDefinitionIdentity:
		return NewAlertDefinition()
	case AlertTriggerIdentity:
		return NewAlertTrigger()
	case AnalyzerIdentity:
		return NewAnalyzer()
	case APIAuthorizationIdentity:
		return NewAPIAuthorization()
	case AppIdentity:
		return NewApp()
	case AppComponentIdentity:
		return NewAppComponent()
	case AppTokenIdentity:
		return NewAppToken()
	case AuthSettingsIdentity:
		return NewAuthSettings()
	case ContentPolicyIdentity:
		return NewContentPolicy()
	case CustomDataSetIdentity:
		return NewCustomDataSet()
	case CustomDataTypeIdentity:
		return NewCustomDataType()
	case ErrorTransformerIdentity:
		return NewErrorTransformer()
	case ExtractorIdentity:
		return NewExtractor()
	case FeedbackIdentity:
		return NewFeedback()
	case GitbookTokenIdentity:
		return NewGitbookToken()
	case IgnoredDomainIdentity:
		return NewIgnoredDomain()
	case ImportIdentity:
		return NewImport()
	case IngressProviderConfigIdentity:
		return NewIngressProviderConfig()
	case LabelValueIdentity:
		return NewLabelValue()
	case LandingIdentity:
		return NewLanding()
	case LatencyIdentity:
		return NewLatency()
	case MetricIdentity:
		return NewMetric()
	case MetricLabelValueIdentity:
		return NewMetricLabelValue()
	case MetricRangeIdentity:
		return NewMetricRange()
	case MetricSerieIdentity:
		return NewMetricSerie()
	case OrgSettingsIdentity:
		return NewOrgSettings()
	case OrgStorageIdentity:
		return NewOrgStorage()
	case PACConfigIdentity:
		return NewPACConfig()
	case PageDataViewIdentity:
		return NewPageDataView()
	case PolicyUpdateIdentity:
		return NewPolicyUpdate()
	case PrincipalIdentity:
		return NewPrincipal()
	case PrincipalAppIdentity:
		return NewPrincipalApp()
	case PrincipalUserIdentity:
		return NewPrincipalUser()
	case ProjectIdentity:
		return NewProject()
	case ProviderIdentity:
		return NewProvider()
	case ProviderDetailIdentity:
		return NewProviderDetail()
	case ProviderTeamIdentity:
		return NewProviderTeam()
	case ProviderTokenIdentity:
		return NewProviderToken()
	case ProxyConfIdentity:
		return NewProxyConf()
	case ProxyRoundtripIdentity:
		return NewProxyRoundtrip()
	case QueryIdentity:
		return NewQuery()
	case QueryRangeIdentity:
		return NewQueryRange()
	case RoleIdentity:
		return NewRole()
	case RootIdentity:
		return NewRoot()
	case SchemaVersionIdentity:
		return NewSchemaVersion()
	case SerieIdentity:
		return NewSerie()
	case SignupIdentity:
		return NewSignup()
	case SinkIdentity:
		return NewSink()
	case SinkEmailIdentity:
		return NewSinkEmail()
	case SinkPagerDutyIdentity:
		return NewSinkPagerDuty()
	case SinkSlackIdentity:
		return NewSinkSlack()
	case SinkSplunkIdentity:
		return NewSinkSplunk()
	case TeamIdentity:
		return NewTeam()
	case TraceIdentity:
		return NewTrace()
	case TraceRefIdentity:
		return NewTraceRef()
	case TraceSearchIdentity:
		return NewTraceSearch()
	case TraceTagKeysIdentity:
		return NewTraceTagKeys()
	case TraceTagValuesIdentity:
		return NewTraceTagValues()
	case UserTokenIdentity:
		return NewUserToken()
	case VisitedURLIdentity:
		return NewVisitedURL()
	case WatchedOrgIdentity:
		return NewWatchedOrg()
	case WebExtensionConfigIdentity:
		return NewWebExtensionConfig()
	default:
		return nil
	}
}

func (f modelManager) SparseIdentifiable(identity elemental.Identity) elemental.SparseIdentifiable {

	switch identity {

	case AccessPolicyIdentity:
		return NewSparseAccessPolicy()
	case AgentIdentity:
		return NewSparseAgent()
	case AgentConfigIdentity:
		return NewSparseAgentConfig()
	case AgentDiscoveryIdentity:
		return NewSparseAgentDiscovery()
	case AIDomainIdentity:
		return NewSparseAIDomain()
	case AlertIdentity:
		return NewSparseAlert()
	case AlertDefinitionIdentity:
		return NewSparseAlertDefinition()
	case AlertTriggerIdentity:
		return NewSparseAlertTrigger()
	case AnalyzerIdentity:
		return NewSparseAnalyzer()
	case APIAuthorizationIdentity:
		return NewSparseAPIAuthorization()
	case AppIdentity:
		return NewSparseApp()
	case AppComponentIdentity:
		return NewSparseAppComponent()
	case AppTokenIdentity:
		return NewSparseAppToken()
	case AuthSettingsIdentity:
		return NewSparseAuthSettings()
	case ContentPolicyIdentity:
		return NewSparseContentPolicy()
	case CustomDataSetIdentity:
		return NewSparseCustomDataSet()
	case CustomDataTypeIdentity:
		return NewSparseCustomDataType()
	case ErrorTransformerIdentity:
		return NewSparseErrorTransformer()
	case ExtractorIdentity:
		return NewSparseExtractor()
	case FeedbackIdentity:
		return NewSparseFeedback()
	case GitbookTokenIdentity:
		return NewSparseGitbookToken()
	case IgnoredDomainIdentity:
		return NewSparseIgnoredDomain()
	case ImportIdentity:
		return NewSparseImport()
	case IngressProviderConfigIdentity:
		return NewSparseIngressProviderConfig()
	case LabelValueIdentity:
		return NewSparseLabelValue()
	case LandingIdentity:
		return NewSparseLanding()
	case LatencyIdentity:
		return NewSparseLatency()
	case MetricIdentity:
		return NewSparseMetric()
	case MetricLabelValueIdentity:
		return NewSparseMetricLabelValue()
	case MetricRangeIdentity:
		return NewSparseMetricRange()
	case MetricSerieIdentity:
		return NewSparseMetricSerie()
	case OrgSettingsIdentity:
		return NewSparseOrgSettings()
	case OrgStorageIdentity:
		return NewSparseOrgStorage()
	case PACConfigIdentity:
		return NewSparsePACConfig()
	case PageDataViewIdentity:
		return NewSparsePageDataView()
	case PolicyUpdateIdentity:
		return NewSparsePolicyUpdate()
	case PrincipalIdentity:
		return NewSparsePrincipal()
	case PrincipalAppIdentity:
		return NewSparsePrincipalApp()
	case PrincipalUserIdentity:
		return NewSparsePrincipalUser()
	case ProjectIdentity:
		return NewSparseProject()
	case ProviderIdentity:
		return NewSparseProvider()
	case ProviderDetailIdentity:
		return NewSparseProviderDetail()
	case ProviderTeamIdentity:
		return NewSparseProviderTeam()
	case ProviderTokenIdentity:
		return NewSparseProviderToken()
	case ProxyConfIdentity:
		return NewSparseProxyConf()
	case ProxyRoundtripIdentity:
		return NewSparseProxyRoundtrip()
	case QueryIdentity:
		return NewSparseQuery()
	case QueryRangeIdentity:
		return NewSparseQueryRange()
	case RoleIdentity:
		return NewSparseRole()
	case SchemaVersionIdentity:
		return NewSparseSchemaVersion()
	case SerieIdentity:
		return NewSparseSerie()
	case SignupIdentity:
		return NewSparseSignup()
	case SinkIdentity:
		return NewSparseSink()
	case SinkEmailIdentity:
		return NewSparseSinkEmail()
	case SinkPagerDutyIdentity:
		return NewSparseSinkPagerDuty()
	case SinkSlackIdentity:
		return NewSparseSinkSlack()
	case SinkSplunkIdentity:
		return NewSparseSinkSplunk()
	case TeamIdentity:
		return NewSparseTeam()
	case TraceIdentity:
		return NewSparseTrace()
	case TraceRefIdentity:
		return NewSparseTraceRef()
	case TraceSearchIdentity:
		return NewSparseTraceSearch()
	case TraceTagKeysIdentity:
		return NewSparseTraceTagKeys()
	case TraceTagValuesIdentity:
		return NewSparseTraceTagValues()
	case UserTokenIdentity:
		return NewSparseUserToken()
	case VisitedURLIdentity:
		return NewSparseVisitedURL()
	case WatchedOrgIdentity:
		return NewSparseWatchedOrg()
	case WebExtensionConfigIdentity:
		return NewSparseWebExtensionConfig()
	default:
		return nil
	}
}

func (f modelManager) Indexes(identity elemental.Identity) [][]string {

	return indexesMap[identity.Name]
}

func (f modelManager) IdentifiableFromString(any string) elemental.Identifiable {

	return f.Identifiable(f.IdentityFromAny(any))
}

func (f modelManager) Identifiables(identity elemental.Identity) elemental.Identifiables {

	switch identity {

	case AccessPolicyIdentity:
		return &AccessPoliciesList{}
	case AgentIdentity:
		return &AgentsList{}
	case AgentConfigIdentity:
		return &AgentConfigsList{}
	case AgentDiscoveryIdentity:
		return &AgentDiscoveriesList{}
	case AIDomainIdentity:
		return &AIDomainsList{}
	case AlertIdentity:
		return &AlertsList{}
	case AlertDefinitionIdentity:
		return &AlertDefinitionsList{}
	case AlertTriggerIdentity:
		return &AlertTriggersList{}
	case AnalyzerIdentity:
		return &AnalyzersList{}
	case APIAuthorizationIdentity:
		return &APIAuthorizationsList{}
	case AppIdentity:
		return &AppsList{}
	case AppComponentIdentity:
		return &AppComponentsList{}
	case AppTokenIdentity:
		return &AppTokensList{}
	case AuthSettingsIdentity:
		return &AuthSettingsList{}
	case ContentPolicyIdentity:
		return &ContentPoliciesList{}
	case CustomDataSetIdentity:
		return &CustomDataSetsList{}
	case CustomDataTypeIdentity:
		return &CustomDataTypesList{}
	case ErrorTransformerIdentity:
		return &ErrorTransformersList{}
	case ExtractorIdentity:
		return &ExtractorsList{}
	case FeedbackIdentity:
		return &FeedbacksList{}
	case GitbookTokenIdentity:
		return &GitbookTokensList{}
	case IgnoredDomainIdentity:
		return &IgnoredDomainsList{}
	case ImportIdentity:
		return &ImportsList{}
	case IngressProviderConfigIdentity:
		return &IngressProviderConfigsList{}
	case LabelValueIdentity:
		return &LabelValuesList{}
	case LandingIdentity:
		return &LandingsList{}
	case LatencyIdentity:
		return &LatenciesList{}
	case MetricIdentity:
		return &MetricsList{}
	case MetricLabelValueIdentity:
		return &MetricLabelValuesList{}
	case MetricRangeIdentity:
		return &MetricRangesList{}
	case MetricSerieIdentity:
		return &MetricSeriesList{}
	case OrgSettingsIdentity:
		return &OrgSettingsList{}
	case OrgStorageIdentity:
		return &OrgStoragesList{}
	case PACConfigIdentity:
		return &PACConfigsList{}
	case PageDataViewIdentity:
		return &PageDataViewsList{}
	case PolicyUpdateIdentity:
		return &PolicyUpdatesList{}
	case PrincipalIdentity:
		return &PrincipalsList{}
	case PrincipalAppIdentity:
		return &PrincipalAppsList{}
	case PrincipalUserIdentity:
		return &PrincipalUsersList{}
	case ProjectIdentity:
		return &ProjectsList{}
	case ProviderIdentity:
		return &ProvidersList{}
	case ProviderDetailIdentity:
		return &ProviderDetailsList{}
	case ProviderTeamIdentity:
		return &ProviderTeamsList{}
	case ProviderTokenIdentity:
		return &ProviderTokensList{}
	case ProxyConfIdentity:
		return &ProxyConfsList{}
	case ProxyRoundtripIdentity:
		return &ProxyRoundtripsList{}
	case QueryIdentity:
		return &QueriesList{}
	case QueryRangeIdentity:
		return &QueryRangesList{}
	case RoleIdentity:
		return &RolesList{}
	case SchemaVersionIdentity:
		return &SchemaVersionsList{}
	case SerieIdentity:
		return &SeriesList{}
	case SignupIdentity:
		return &SignupsList{}
	case SinkIdentity:
		return &SinksList{}
	case SinkEmailIdentity:
		return &SinkEmailsList{}
	case SinkPagerDutyIdentity:
		return &SinkPagerDutiesList{}
	case SinkSlackIdentity:
		return &SinkSlacksList{}
	case SinkSplunkIdentity:
		return &SinkSplunksList{}
	case TeamIdentity:
		return &TeamsList{}
	case TraceIdentity:
		return &TracesList{}
	case TraceRefIdentity:
		return &TraceRefsList{}
	case TraceSearchIdentity:
		return &TraceSearchesList{}
	case TraceTagKeysIdentity:
		return &TraceTagKeysList{}
	case TraceTagValuesIdentity:
		return &TraceTagValuesList{}
	case UserTokenIdentity:
		return &UserTokensList{}
	case VisitedURLIdentity:
		return &VisitedURLsList{}
	case WatchedOrgIdentity:
		return &WatchedOrgsList{}
	case WebExtensionConfigIdentity:
		return &WebExtensionConfigsList{}
	default:
		return nil
	}
}

func (f modelManager) SparseIdentifiables(identity elemental.Identity) elemental.SparseIdentifiables {

	switch identity {

	case AccessPolicyIdentity:
		return &SparseAccessPoliciesList{}
	case AgentIdentity:
		return &SparseAgentsList{}
	case AgentConfigIdentity:
		return &SparseAgentConfigsList{}
	case AgentDiscoveryIdentity:
		return &SparseAgentDiscoveriesList{}
	case AIDomainIdentity:
		return &SparseAIDomainsList{}
	case AlertIdentity:
		return &SparseAlertsList{}
	case AlertDefinitionIdentity:
		return &SparseAlertDefinitionsList{}
	case AlertTriggerIdentity:
		return &SparseAlertTriggersList{}
	case AnalyzerIdentity:
		return &SparseAnalyzersList{}
	case APIAuthorizationIdentity:
		return &SparseAPIAuthorizationsList{}
	case AppIdentity:
		return &SparseAppsList{}
	case AppComponentIdentity:
		return &SparseAppComponentsList{}
	case AppTokenIdentity:
		return &SparseAppTokensList{}
	case AuthSettingsIdentity:
		return &SparseAuthSettingsList{}
	case ContentPolicyIdentity:
		return &SparseContentPoliciesList{}
	case CustomDataSetIdentity:
		return &SparseCustomDataSetsList{}
	case CustomDataTypeIdentity:
		return &SparseCustomDataTypesList{}
	case ErrorTransformerIdentity:
		return &SparseErrorTransformersList{}
	case ExtractorIdentity:
		return &SparseExtractorsList{}
	case FeedbackIdentity:
		return &SparseFeedbacksList{}
	case GitbookTokenIdentity:
		return &SparseGitbookTokensList{}
	case IgnoredDomainIdentity:
		return &SparseIgnoredDomainsList{}
	case ImportIdentity:
		return &SparseImportsList{}
	case IngressProviderConfigIdentity:
		return &SparseIngressProviderConfigsList{}
	case LabelValueIdentity:
		return &SparseLabelValuesList{}
	case LandingIdentity:
		return &SparseLandingsList{}
	case LatencyIdentity:
		return &SparseLatenciesList{}
	case MetricIdentity:
		return &SparseMetricsList{}
	case MetricLabelValueIdentity:
		return &SparseMetricLabelValuesList{}
	case MetricRangeIdentity:
		return &SparseMetricRangesList{}
	case MetricSerieIdentity:
		return &SparseMetricSeriesList{}
	case OrgSettingsIdentity:
		return &SparseOrgSettingsList{}
	case OrgStorageIdentity:
		return &SparseOrgStoragesList{}
	case PACConfigIdentity:
		return &SparsePACConfigsList{}
	case PageDataViewIdentity:
		return &SparsePageDataViewsList{}
	case PolicyUpdateIdentity:
		return &SparsePolicyUpdatesList{}
	case PrincipalIdentity:
		return &SparsePrincipalsList{}
	case PrincipalAppIdentity:
		return &SparsePrincipalAppsList{}
	case PrincipalUserIdentity:
		return &SparsePrincipalUsersList{}
	case ProjectIdentity:
		return &SparseProjectsList{}
	case ProviderIdentity:
		return &SparseProvidersList{}
	case ProviderDetailIdentity:
		return &SparseProviderDetailsList{}
	case ProviderTeamIdentity:
		return &SparseProviderTeamsList{}
	case ProviderTokenIdentity:
		return &SparseProviderTokensList{}
	case ProxyConfIdentity:
		return &SparseProxyConfsList{}
	case ProxyRoundtripIdentity:
		return &SparseProxyRoundtripsList{}
	case QueryIdentity:
		return &SparseQueriesList{}
	case QueryRangeIdentity:
		return &SparseQueryRangesList{}
	case RoleIdentity:
		return &SparseRolesList{}
	case SchemaVersionIdentity:
		return &SparseSchemaVersionsList{}
	case SerieIdentity:
		return &SparseSeriesList{}
	case SignupIdentity:
		return &SparseSignupsList{}
	case SinkIdentity:
		return &SparseSinksList{}
	case SinkEmailIdentity:
		return &SparseSinkEmailsList{}
	case SinkPagerDutyIdentity:
		return &SparseSinkPagerDutiesList{}
	case SinkSlackIdentity:
		return &SparseSinkSlacksList{}
	case SinkSplunkIdentity:
		return &SparseSinkSplunksList{}
	case TeamIdentity:
		return &SparseTeamsList{}
	case TraceIdentity:
		return &SparseTracesList{}
	case TraceRefIdentity:
		return &SparseTraceRefsList{}
	case TraceSearchIdentity:
		return &SparseTraceSearchesList{}
	case TraceTagKeysIdentity:
		return &SparseTraceTagKeysList{}
	case TraceTagValuesIdentity:
		return &SparseTraceTagValuesList{}
	case UserTokenIdentity:
		return &SparseUserTokensList{}
	case VisitedURLIdentity:
		return &SparseVisitedURLsList{}
	case WatchedOrgIdentity:
		return &SparseWatchedOrgsList{}
	case WebExtensionConfigIdentity:
		return &SparseWebExtensionConfigsList{}
	default:
		return nil
	}
}

func (f modelManager) IdentifiablesFromString(any string) elemental.Identifiables {

	return f.Identifiables(f.IdentityFromAny(any))
}

func (f modelManager) Relationships() elemental.RelationshipsRegistry {

	return relationshipsRegistry
}

func (f modelManager) AllIdentities() []elemental.Identity {
	return AllIdentities()
}

var manager = modelManager{}

// Manager returns the model elemental.ModelManager.
func Manager() elemental.ModelManager { return manager }

// AllIdentities returns all existing identities.
func AllIdentities() []elemental.Identity {

	return []elemental.Identity{
		AccessPolicyIdentity,
		AgentIdentity,
		AgentConfigIdentity,
		AgentDiscoveryIdentity,
		AIDomainIdentity,
		AlertIdentity,
		AlertDefinitionIdentity,
		AlertTriggerIdentity,
		AnalyzerIdentity,
		APIAuthorizationIdentity,
		AppIdentity,
		AppComponentIdentity,
		AppTokenIdentity,
		AuthSettingsIdentity,
		ContentPolicyIdentity,
		CustomDataSetIdentity,
		CustomDataTypeIdentity,
		ErrorTransformerIdentity,
		ExtractorIdentity,
		FeedbackIdentity,
		GitbookTokenIdentity,
		IgnoredDomainIdentity,
		ImportIdentity,
		IngressProviderConfigIdentity,
		LabelValueIdentity,
		LandingIdentity,
		LatencyIdentity,
		MetricIdentity,
		MetricLabelValueIdentity,
		MetricRangeIdentity,
		MetricSerieIdentity,
		OrgSettingsIdentity,
		OrgStorageIdentity,
		PACConfigIdentity,
		PageDataViewIdentity,
		PolicyUpdateIdentity,
		PrincipalIdentity,
		PrincipalAppIdentity,
		PrincipalUserIdentity,
		ProjectIdentity,
		ProviderIdentity,
		ProviderDetailIdentity,
		ProviderTeamIdentity,
		ProviderTokenIdentity,
		ProxyConfIdentity,
		ProxyRoundtripIdentity,
		QueryIdentity,
		QueryRangeIdentity,
		RoleIdentity,
		RootIdentity,
		SchemaVersionIdentity,
		SerieIdentity,
		SignupIdentity,
		SinkIdentity,
		SinkEmailIdentity,
		SinkPagerDutyIdentity,
		SinkSlackIdentity,
		SinkSplunkIdentity,
		TeamIdentity,
		TraceIdentity,
		TraceRefIdentity,
		TraceSearchIdentity,
		TraceTagKeysIdentity,
		TraceTagValuesIdentity,
		UserTokenIdentity,
		VisitedURLIdentity,
		WatchedOrgIdentity,
		WebExtensionConfigIdentity,
	}
}

// AliasesForIdentity returns all the aliases for the given identity.
func AliasesForIdentity(identity elemental.Identity) []string {

	switch identity {
	case AccessPolicyIdentity:
		return []string{}
	case AgentIdentity:
		return []string{}
	case AgentConfigIdentity:
		return []string{}
	case AgentDiscoveryIdentity:
		return []string{}
	case AIDomainIdentity:
		return []string{}
	case AlertIdentity:
		return []string{}
	case AlertDefinitionIdentity:
		return []string{}
	case AlertTriggerIdentity:
		return []string{}
	case AnalyzerIdentity:
		return []string{}
	case APIAuthorizationIdentity:
		return []string{}
	case AppIdentity:
		return []string{}
	case AppComponentIdentity:
		return []string{}
	case AppTokenIdentity:
		return []string{}
	case AuthSettingsIdentity:
		return []string{}
	case ContentPolicyIdentity:
		return []string{}
	case CustomDataSetIdentity:
		return []string{}
	case CustomDataTypeIdentity:
		return []string{}
	case ErrorTransformerIdentity:
		return []string{}
	case ExtractorIdentity:
		return []string{}
	case FeedbackIdentity:
		return []string{}
	case GitbookTokenIdentity:
		return []string{}
	case IgnoredDomainIdentity:
		return []string{}
	case ImportIdentity:
		return []string{}
	case IngressProviderConfigIdentity:
		return []string{}
	case LabelValueIdentity:
		return []string{}
	case LandingIdentity:
		return []string{}
	case LatencyIdentity:
		return []string{}
	case MetricIdentity:
		return []string{}
	case MetricLabelValueIdentity:
		return []string{}
	case MetricRangeIdentity:
		return []string{}
	case MetricSerieIdentity:
		return []string{}
	case OrgSettingsIdentity:
		return []string{}
	case OrgStorageIdentity:
		return []string{}
	case PACConfigIdentity:
		return []string{}
	case PageDataViewIdentity:
		return []string{}
	case PolicyUpdateIdentity:
		return []string{}
	case PrincipalIdentity:
		return []string{}
	case PrincipalAppIdentity:
		return []string{}
	case PrincipalUserIdentity:
		return []string{}
	case ProjectIdentity:
		return []string{}
	case ProviderIdentity:
		return []string{}
	case ProviderDetailIdentity:
		return []string{}
	case ProviderTeamIdentity:
		return []string{}
	case ProviderTokenIdentity:
		return []string{}
	case ProxyConfIdentity:
		return []string{}
	case ProxyRoundtripIdentity:
		return []string{}
	case QueryIdentity:
		return []string{}
	case QueryRangeIdentity:
		return []string{}
	case RoleIdentity:
		return []string{}
	case RootIdentity:
		return []string{}
	case SchemaVersionIdentity:
		return []string{}
	case SerieIdentity:
		return []string{}
	case SignupIdentity:
		return []string{}
	case SinkIdentity:
		return []string{}
	case SinkEmailIdentity:
		return []string{}
	case SinkPagerDutyIdentity:
		return []string{}
	case SinkSlackIdentity:
		return []string{}
	case SinkSplunkIdentity:
		return []string{}
	case TeamIdentity:
		return []string{}
	case TraceIdentity:
		return []string{}
	case TraceRefIdentity:
		return []string{}
	case TraceSearchIdentity:
		return []string{}
	case TraceTagKeysIdentity:
		return []string{}
	case TraceTagValuesIdentity:
		return []string{}
	case UserTokenIdentity:
		return []string{}
	case VisitedURLIdentity:
		return []string{}
	case WatchedOrgIdentity:
		return []string{}
	case WebExtensionConfigIdentity:
		return []string{}
	}

	return nil
}
