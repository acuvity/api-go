// Code generated by elegen. DO NOT EDIT.
// Source: go.acuvity.ai/elemental (templates/model.gotpl)

package api

import (
	"fmt"

	"github.com/globalsign/mgo/bson"
	"github.com/mitchellh/copystructure"
	"go.acuvity.ai/elemental"
)

// DetectionConfidenceValue represents the possible values for attribute "confidence".
type DetectionConfidenceValue string

const (
	// DetectionConfidenceHigh represents the value High.
	DetectionConfidenceHigh DetectionConfidenceValue = "High"

	// DetectionConfidenceLow represents the value Low.
	DetectionConfidenceLow DetectionConfidenceValue = "Low"

	// DetectionConfidenceMedium represents the value Medium.
	DetectionConfidenceMedium DetectionConfidenceValue = "Medium"

	// DetectionConfidenceUnlikely represents the value Unlikely.
	DetectionConfidenceUnlikely DetectionConfidenceValue = "Unlikely"
)

// Detection represents the model of a detection
type Detection struct {
	// The confidence level of the detection.
	Confidence DetectionConfidenceValue `json:"confidence" msgpack:"confidence" bson:"-" mapstructure:"confidence,omitempty"`

	// The description of the detection.
	Description string `json:"description" msgpack:"description" bson:"-" mapstructure:"description,omitempty"`

	// The end position of the poisitional detection.
	End int `json:"end" msgpack:"end" bson:"-" mapstructure:"end,omitempty"`

	// The group the detection belongs to.
	Group string `json:"group" msgpack:"group" bson:"-" mapstructure:"group,omitempty"`

	// The label returned by the model.
	Label string `json:"label" msgpack:"label" bson:"-" mapstructure:"label,omitempty"`

	// The name of the detection.
	Name string `json:"name" msgpack:"name" bson:"-" mapstructure:"name,omitempty"`

	// Tell if the detection is positional.
	Positional bool `json:"positional" msgpack:"positional" bson:"-" mapstructure:"positional,omitempty"`

	// The raw score of the detection retuned by the model.
	Raw_score float64 `json:"raw_score" msgpack:"raw_score" bson:"-" mapstructure:"raw_score,omitempty"`

	// The normalized score of the detection against its confidence level thresholds.
	// Between 0 and 1 as low <0.33, 0.33<=Medium<0.66, high >=0.66.
	Score float64 `json:"score" msgpack:"score" bson:"-" mapstructure:"score,omitempty"`

	// The start position of the poisitional detection.
	Start int `json:"start" msgpack:"start" bson:"-" mapstructure:"start,omitempty"`

	ModelVersion int `json:"-" msgpack:"-" bson:"_modelversion"`
}

// NewDetection returns a new *Detection
func NewDetection() *Detection {

	return &Detection{
		ModelVersion: 1,
	}
}

// GetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *Detection) GetBSON() (any, error) {

	if o == nil {
		return nil, nil
	}

	s := &mongoAttributesDetection{}

	return s, nil
}

// SetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *Detection) SetBSON(raw bson.Raw) error {

	if o == nil || raw.Kind == bson.ElementNil {
		return bson.ErrSetZero
	}

	s := &mongoAttributesDetection{}
	if err := raw.Unmarshal(s); err != nil {
		return err
	}

	return nil
}

// BleveType implements the bleve.Classifier Interface.
func (o *Detection) BleveType() string {

	return "detection"
}

// DeepCopy returns a deep copy if the Detection.
func (o *Detection) DeepCopy() *Detection {

	if o == nil {
		return nil
	}

	out := &Detection{}
	o.DeepCopyInto(out)

	return out
}

// DeepCopyInto copies the receiver into the given *Detection.
func (o *Detection) DeepCopyInto(out *Detection) {

	target, err := copystructure.Copy(o)
	if err != nil {
		panic(fmt.Sprintf("Unable to deepcopy Detection: %s", err))
	}

	*out = *target.(*Detection)
}

// Validate valides the current information stored into the structure.
func (o *Detection) Validate() error {

	errors := elemental.Errors{}
	requiredErrors := elemental.Errors{}

	if err := elemental.ValidateStringInList("confidence", string(o.Confidence), []string{"Unlikely", "Low", "Medium", "High"}, false); err != nil {
		errors = errors.Append(err)
	}

	if len(requiredErrors) > 0 {
		return requiredErrors
	}

	if len(errors) > 0 {
		return errors
	}

	return nil
}

// SpecificationForAttribute returns the AttributeSpecification for the given attribute name key.
func (*Detection) SpecificationForAttribute(name string) elemental.AttributeSpecification {

	if v, ok := DetectionAttributesMap[name]; ok {
		return v
	}

	// We could not find it, so let's check on the lower case indexed spec map
	return DetectionLowerCaseAttributesMap[name]
}

// AttributeSpecifications returns the full attribute specifications map.
func (*Detection) AttributeSpecifications() map[string]elemental.AttributeSpecification {

	return DetectionAttributesMap
}

// ValueForAttribute returns the value for the given attribute.
// This is a very advanced function that you should not need but in some
// very specific use cases.
func (o *Detection) ValueForAttribute(name string) any {

	switch name {
	case "confidence":
		return o.Confidence
	case "description":
		return o.Description
	case "end":
		return o.End
	case "group":
		return o.Group
	case "label":
		return o.Label
	case "name":
		return o.Name
	case "positional":
		return o.Positional
	case "raw_score":
		return o.Raw_score
	case "score":
		return o.Score
	case "start":
		return o.Start
	}

	return nil
}

// DetectionAttributesMap represents the map of attribute for Detection.
var DetectionAttributesMap = map[string]elemental.AttributeSpecification{
	"Confidence": {
		AllowedChoices: []string{"Unlikely", "Low", "Medium", "High"},
		ConvertedName:  "Confidence",
		Description:    `The confidence level of the detection.`,
		Exposed:        true,
		Name:           "confidence",
		Type:           "enum",
	},
	"Description": {
		AllowedChoices: []string{},
		ConvertedName:  "Description",
		Description:    `The description of the detection.`,
		Exposed:        true,
		Name:           "description",
		Type:           "string",
	},
	"End": {
		AllowedChoices: []string{},
		ConvertedName:  "End",
		Description:    `The end position of the poisitional detection.`,
		Exposed:        true,
		Name:           "end",
		Type:           "integer",
	},
	"Group": {
		AllowedChoices: []string{},
		ConvertedName:  "Group",
		Description:    `The group the detection belongs to.`,
		Exposed:        true,
		Name:           "group",
		Type:           "string",
	},
	"Label": {
		AllowedChoices: []string{},
		ConvertedName:  "Label",
		Description:    `The label returned by the model.`,
		Exposed:        true,
		Name:           "label",
		Type:           "string",
	},
	"Name": {
		AllowedChoices: []string{},
		ConvertedName:  "Name",
		Description:    `The name of the detection.`,
		Exposed:        true,
		Name:           "name",
		Type:           "string",
	},
	"Positional": {
		AllowedChoices: []string{},
		ConvertedName:  "Positional",
		Description:    `Tell if the detection is positional.`,
		Exposed:        true,
		Name:           "positional",
		Type:           "boolean",
	},
	"Raw_score": {
		AllowedChoices: []string{},
		ConvertedName:  "Raw_score",
		Description:    `The raw score of the detection retuned by the model.`,
		Exposed:        true,
		Name:           "raw_score",
		Type:           "float",
	},
	"Score": {
		AllowedChoices: []string{},
		ConvertedName:  "Score",
		Description: `The normalized score of the detection against its confidence level thresholds.
Between 0 and 1 as low <0.33, 0.33<=Medium<0.66, high >=0.66.`,
		Exposed: true,
		Name:    "score",
		Type:    "float",
	},
	"Start": {
		AllowedChoices: []string{},
		ConvertedName:  "Start",
		Description:    `The start position of the poisitional detection.`,
		Exposed:        true,
		Name:           "start",
		Type:           "integer",
	},
}

// DetectionLowerCaseAttributesMap represents the map of attribute for Detection.
var DetectionLowerCaseAttributesMap = map[string]elemental.AttributeSpecification{
	"confidence": {
		AllowedChoices: []string{"Unlikely", "Low", "Medium", "High"},
		ConvertedName:  "Confidence",
		Description:    `The confidence level of the detection.`,
		Exposed:        true,
		Name:           "confidence",
		Type:           "enum",
	},
	"description": {
		AllowedChoices: []string{},
		ConvertedName:  "Description",
		Description:    `The description of the detection.`,
		Exposed:        true,
		Name:           "description",
		Type:           "string",
	},
	"end": {
		AllowedChoices: []string{},
		ConvertedName:  "End",
		Description:    `The end position of the poisitional detection.`,
		Exposed:        true,
		Name:           "end",
		Type:           "integer",
	},
	"group": {
		AllowedChoices: []string{},
		ConvertedName:  "Group",
		Description:    `The group the detection belongs to.`,
		Exposed:        true,
		Name:           "group",
		Type:           "string",
	},
	"label": {
		AllowedChoices: []string{},
		ConvertedName:  "Label",
		Description:    `The label returned by the model.`,
		Exposed:        true,
		Name:           "label",
		Type:           "string",
	},
	"name": {
		AllowedChoices: []string{},
		ConvertedName:  "Name",
		Description:    `The name of the detection.`,
		Exposed:        true,
		Name:           "name",
		Type:           "string",
	},
	"positional": {
		AllowedChoices: []string{},
		ConvertedName:  "Positional",
		Description:    `Tell if the detection is positional.`,
		Exposed:        true,
		Name:           "positional",
		Type:           "boolean",
	},
	"raw_score": {
		AllowedChoices: []string{},
		ConvertedName:  "Raw_score",
		Description:    `The raw score of the detection retuned by the model.`,
		Exposed:        true,
		Name:           "raw_score",
		Type:           "float",
	},
	"score": {
		AllowedChoices: []string{},
		ConvertedName:  "Score",
		Description: `The normalized score of the detection against its confidence level thresholds.
Between 0 and 1 as low <0.33, 0.33<=Medium<0.66, high >=0.66.`,
		Exposed: true,
		Name:    "score",
		Type:    "float",
	},
	"start": {
		AllowedChoices: []string{},
		ConvertedName:  "Start",
		Description:    `The start position of the poisitional detection.`,
		Exposed:        true,
		Name:           "start",
		Type:           "integer",
	},
}

type mongoAttributesDetection struct {
}
