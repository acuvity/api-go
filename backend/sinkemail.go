// Code generated by elegen. DO NOT EDIT.
// Source: go.acuvity.ai/elemental (templates/model.gotpl)

package api

import (
	"fmt"
	"slices"

	"github.com/globalsign/mgo/bson"
	"github.com/mitchellh/copystructure"
	"go.acuvity.ai/elemental"
)

// SinkEmailIdentity represents the Identity of the object.
var SinkEmailIdentity = elemental.Identity{
	Name:     "sinkemail",
	Category: "sinkemail",
	Package:  "avi",
	Private:  false,
}

// SinkEmailsList represents a list of SinkEmails
type SinkEmailsList []*SinkEmail

// Identity returns the identity of the objects in the list.
func (o SinkEmailsList) Identity() elemental.Identity {

	return SinkEmailIdentity
}

// Copy returns a pointer to a copy the SinkEmailsList.
func (o SinkEmailsList) Copy() elemental.Identifiables {

	out := slices.Clone(o)
	return &out
}

// Append appends the objects to the a new copy of the SinkEmailsList.
func (o SinkEmailsList) Append(objects ...elemental.Identifiable) elemental.Identifiables {

	out := slices.Clone(o)
	for _, obj := range objects {
		out = append(out, obj.(*SinkEmail))
	}

	return out
}

// List converts the object to an elemental.IdentifiablesList.
func (o SinkEmailsList) List() elemental.IdentifiablesList {

	out := make(elemental.IdentifiablesList, len(o))
	for i := range len(o) {
		out[i] = o[i]
	}

	return out
}

// DefaultOrder returns the default ordering fields of the content.
func (o SinkEmailsList) DefaultOrder() []string {

	return []string{}
}

// ToSparse returns the SinkEmailsList converted to SparseSinkEmailsList.
// Objects in the list will only contain the given fields. No field means entire field set.
func (o SinkEmailsList) ToSparse(fields ...string) elemental.Identifiables {

	out := make(SparseSinkEmailsList, len(o))
	for i := range len(o) {
		out[i] = o[i].ToSparse(fields...).(*SparseSinkEmail)
	}

	return out
}

// Version returns the version of the content.
func (o SinkEmailsList) Version() int {

	return 1
}

// SinkEmail represents the model of a sinkemail
type SinkEmail struct {
	// The list of email recipients the notification will be sent to.
	Recipients []string `json:"recipients" msgpack:"recipients" bson:"recipients" mapstructure:"recipients,omitempty"`

	ModelVersion int `json:"-" msgpack:"-" bson:"_modelversion"`
}

// NewSinkEmail returns a new *SinkEmail
func NewSinkEmail() *SinkEmail {

	return &SinkEmail{
		ModelVersion: 1,
		Recipients:   []string{},
	}
}

// Identity returns the Identity of the object.
func (o *SinkEmail) Identity() elemental.Identity {

	return SinkEmailIdentity
}

// Identifier returns the value of the object's unique identifier.
func (o *SinkEmail) Identifier() string {

	return ""
}

// SetIdentifier sets the value of the object's unique identifier.
func (o *SinkEmail) SetIdentifier(id string) {

}

// GetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *SinkEmail) GetBSON() (any, error) {

	if o == nil {
		return nil, nil
	}

	s := &mongoAttributesSinkEmail{}

	s.Recipients = o.Recipients

	return s, nil
}

// SetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *SinkEmail) SetBSON(raw bson.Raw) error {

	if o == nil || raw.Kind == bson.ElementNil {
		return bson.ErrSetZero
	}

	s := &mongoAttributesSinkEmail{}
	if err := raw.Unmarshal(s); err != nil {
		return err
	}

	o.Recipients = s.Recipients

	return nil
}

// Version returns the hardcoded version of the model.
func (o *SinkEmail) Version() int {

	return 1
}

// BleveType implements the bleve.Classifier Interface.
func (o *SinkEmail) BleveType() string {

	return "sinkemail"
}

// DefaultOrder returns the list of default ordering fields.
func (o *SinkEmail) DefaultOrder() []string {

	return []string{}
}

// Doc returns the documentation for the object
func (o *SinkEmail) Doc() string {

	return `Additional configuration for sending an email.`
}

func (o *SinkEmail) String() string {

	return fmt.Sprintf("<%s:%s>", o.Identity().Name, o.Identifier())
}

// ToSparse returns the sparse version of the model.
// The returned object will only contain the given fields. No field means entire field set.
func (o *SinkEmail) ToSparse(fields ...string) elemental.SparseIdentifiable {

	if len(fields) == 0 {
		// nolint: goimports
		return &SparseSinkEmail{
			Recipients: &o.Recipients,
		}
	}

	sp := &SparseSinkEmail{}
	for _, f := range fields {
		switch f {
		case "recipients":
			sp.Recipients = &(o.Recipients)
		}
	}

	return sp
}

// Patch apply the non nil value of a *SparseSinkEmail to the object.
func (o *SinkEmail) Patch(sparse elemental.SparseIdentifiable) {
	if !sparse.Identity().IsEqual(o.Identity()) {
		panic("cannot patch from a parse with different identity")
	}

	so := sparse.(*SparseSinkEmail)
	if so.Recipients != nil {
		o.Recipients = *so.Recipients
	}
}

// DeepCopy returns a deep copy if the SinkEmail.
func (o *SinkEmail) DeepCopy() *SinkEmail {

	if o == nil {
		return nil
	}

	out := &SinkEmail{}
	o.DeepCopyInto(out)

	return out
}

// DeepCopyInto copies the receiver into the given *SinkEmail.
func (o *SinkEmail) DeepCopyInto(out *SinkEmail) {

	target, err := copystructure.Copy(o)
	if err != nil {
		panic(fmt.Sprintf("Unable to deepcopy SinkEmail: %s", err))
	}

	*out = *target.(*SinkEmail)
}

// Validate valides the current information stored into the structure.
func (o *SinkEmail) Validate() error {

	errors := elemental.Errors{}
	requiredErrors := elemental.Errors{}

	if err := elemental.ValidateRequiredExternal("recipients", o.Recipients); err != nil {
		requiredErrors = requiredErrors.Append(err)
	}

	if err := ValidateEmails("recipients", o.Recipients); err != nil {
		errors = errors.Append(err)
	}

	if len(requiredErrors) > 0 {
		return requiredErrors
	}

	if len(errors) > 0 {
		return errors
	}

	return nil
}

// SpecificationForAttribute returns the AttributeSpecification for the given attribute name key.
func (*SinkEmail) SpecificationForAttribute(name string) elemental.AttributeSpecification {

	if v, ok := SinkEmailAttributesMap[name]; ok {
		return v
	}

	// We could not find it, so let's check on the lower case indexed spec map
	return SinkEmailLowerCaseAttributesMap[name]
}

// AttributeSpecifications returns the full attribute specifications map.
func (*SinkEmail) AttributeSpecifications() map[string]elemental.AttributeSpecification {

	return SinkEmailAttributesMap
}

// ValueForAttribute returns the value for the given attribute.
// This is a very advanced function that you should not need but in some
// very specific use cases.
func (o *SinkEmail) ValueForAttribute(name string) any {

	switch name {
	case "recipients":
		return o.Recipients
	}

	return nil
}

// SinkEmailAttributesMap represents the map of attribute for SinkEmail.
var SinkEmailAttributesMap = map[string]elemental.AttributeSpecification{
	"Recipients": {
		AllowedChoices: []string{},
		BSONFieldName:  "recipients",
		ConvertedName:  "Recipients",
		Description:    `The list of email recipients the notification will be sent to.`,
		Exposed:        true,
		Name:           "recipients",
		Required:       true,
		Stored:         true,
		SubType:        "string",
		Type:           "list",
	},
}

// SinkEmailLowerCaseAttributesMap represents the map of attribute for SinkEmail.
var SinkEmailLowerCaseAttributesMap = map[string]elemental.AttributeSpecification{
	"recipients": {
		AllowedChoices: []string{},
		BSONFieldName:  "recipients",
		ConvertedName:  "Recipients",
		Description:    `The list of email recipients the notification will be sent to.`,
		Exposed:        true,
		Name:           "recipients",
		Required:       true,
		Stored:         true,
		SubType:        "string",
		Type:           "list",
	},
}

// SparseSinkEmailsList represents a list of SparseSinkEmails
type SparseSinkEmailsList []*SparseSinkEmail

// Identity returns the identity of the objects in the list.
func (o SparseSinkEmailsList) Identity() elemental.Identity {

	return SinkEmailIdentity
}

// Copy returns a pointer to a copy the SparseSinkEmailsList.
func (o SparseSinkEmailsList) Copy() elemental.Identifiables {

	copy := slices.Clone(o)
	return &copy
}

// Append appends the objects to the a new copy of the SparseSinkEmailsList.
func (o SparseSinkEmailsList) Append(objects ...elemental.Identifiable) elemental.Identifiables {

	out := slices.Clone(o)
	for _, obj := range objects {
		out = append(out, obj.(*SparseSinkEmail))
	}

	return out
}

// List converts the object to an elemental.IdentifiablesList.
func (o SparseSinkEmailsList) List() elemental.IdentifiablesList {

	out := make(elemental.IdentifiablesList, len(o))
	for i := range len(o) {
		out[i] = o[i]
	}

	return out
}

// DefaultOrder returns the default ordering fields of the content.
func (o SparseSinkEmailsList) DefaultOrder() []string {

	return []string{}
}

// ToPlain returns the SparseSinkEmailsList converted to SinkEmailsList.
func (o SparseSinkEmailsList) ToPlain() elemental.IdentifiablesList {

	out := make(elemental.IdentifiablesList, len(o))
	for i := range len(o) {
		out[i] = o[i].ToPlain()
	}

	return out
}

// Version returns the version of the content.
func (o SparseSinkEmailsList) Version() int {

	return 1
}

// SparseSinkEmail represents the sparse version of a sinkemail.
type SparseSinkEmail struct {
	// The list of email recipients the notification will be sent to.
	Recipients *[]string `json:"recipients,omitempty" msgpack:"recipients,omitempty" bson:"recipients,omitempty" mapstructure:"recipients,omitempty"`

	ModelVersion int `json:"-" msgpack:"-" bson:"_modelversion"`
}

// NewSparseSinkEmail returns a new  SparseSinkEmail.
func NewSparseSinkEmail() *SparseSinkEmail {
	return &SparseSinkEmail{}
}

// Identity returns the Identity of the sparse object.
func (o *SparseSinkEmail) Identity() elemental.Identity {

	return SinkEmailIdentity
}

// Identifier returns the value of the sparse object's unique identifier.
func (o *SparseSinkEmail) Identifier() string {

	return ""
}

// SetIdentifier sets the value of the sparse object's unique identifier.
func (o *SparseSinkEmail) SetIdentifier(id string) {

}

// GetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *SparseSinkEmail) GetBSON() (any, error) {

	if o == nil {
		return nil, nil
	}

	s := &mongoAttributesSparseSinkEmail{}

	if o.Recipients != nil {
		s.Recipients = o.Recipients
	}

	return s, nil
}

// SetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *SparseSinkEmail) SetBSON(raw bson.Raw) error {

	if o == nil {
		return nil
	}

	s := &mongoAttributesSparseSinkEmail{}
	if err := raw.Unmarshal(s); err != nil {
		return err
	}

	if s.Recipients != nil {
		o.Recipients = s.Recipients
	}

	return nil
}

// Version returns the hardcoded version of the model.
func (o *SparseSinkEmail) Version() int {

	return 1
}

// ToPlain returns the plain version of the sparse model.
func (o *SparseSinkEmail) ToPlain() elemental.PlainIdentifiable {

	out := NewSinkEmail()
	if o.Recipients != nil {
		out.Recipients = *o.Recipients
	}

	return out
}

// DeepCopy returns a deep copy if the SparseSinkEmail.
func (o *SparseSinkEmail) DeepCopy() *SparseSinkEmail {

	if o == nil {
		return nil
	}

	out := &SparseSinkEmail{}
	o.DeepCopyInto(out)

	return out
}

// DeepCopyInto copies the receiver into the given *SparseSinkEmail.
func (o *SparseSinkEmail) DeepCopyInto(out *SparseSinkEmail) {

	target, err := copystructure.Copy(o)
	if err != nil {
		panic(fmt.Sprintf("Unable to deepcopy SparseSinkEmail: %s", err))
	}

	*out = *target.(*SparseSinkEmail)
}

type mongoAttributesSinkEmail struct {
	Recipients []string `bson:"recipients"`
}
type mongoAttributesSparseSinkEmail struct {
	Recipients *[]string `bson:"recipients,omitempty"`
}
