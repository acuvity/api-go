// Code generated by elegen. DO NOT EDIT.
// Source: go.acuvity.ai/elemental (templates/model.gotpl)

package api

import (
	"fmt"

	"github.com/globalsign/mgo/bson"
	"github.com/mitchellh/copystructure"
	"go.acuvity.ai/elemental"
)

// OTLPReceiverProtocolValue represents the possible values for attribute "protocol".
type OTLPReceiverProtocolValue string

const (
	// OTLPReceiverProtocolGRPC represents the value GRPC.
	OTLPReceiverProtocolGRPC OTLPReceiverProtocolValue = "GRPC"

	// OTLPReceiverProtocolHTTP represents the value HTTP.
	OTLPReceiverProtocolHTTP OTLPReceiverProtocolValue = "HTTP"
)

// OTLPReceiver represents the model of a otlpreceiver
type OTLPReceiver struct {
	// Endpoint configures the listening address for the server.
	Endpoint string `json:"endpoint" msgpack:"endpoint" bson:"endpoint" mapstructure:"endpoint,omitempty"`

	// Optional PEM encoded X509v3 certificate to use for the listener for this OTLP
	// receiver. This setting is required if listenTLSKey is set.
	ListenTLSCert string `json:"listenTLSCert,omitempty" msgpack:"listenTLSCert,omitempty" bson:"listentlscert,omitempty" mapstructure:"listenTLSCert,omitempty"`

	// Optional PEM encoded key pair to use for the listener for this OTLP receiver.
	// This setting is required if listenTLSCert is set.
	ListenTLSKey string `json:"listenTLSKey,omitempty" msgpack:"listenTLSKey,omitempty" bson:"listentlskey,omitempty" mapstructure:"listenTLSKey,omitempty"`

	// Specifies the OTLP transport protocol to be used for trace data. Note that this
	// depends on the OTLP receiver being used.
	Protocol OTLPReceiverProtocolValue `json:"protocol" msgpack:"protocol" bson:"protocol" mapstructure:"protocol,omitempty"`

	ModelVersion int `json:"-" msgpack:"-" bson:"_modelversion"`
}

// NewOTLPReceiver returns a new *OTLPReceiver
func NewOTLPReceiver() *OTLPReceiver {

	return &OTLPReceiver{
		ModelVersion: 1,
	}
}

// GetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *OTLPReceiver) GetBSON() (any, error) {

	if o == nil {
		return nil, nil
	}

	s := &mongoAttributesOTLPReceiver{}

	s.Endpoint = o.Endpoint
	s.ListenTLSCert = o.ListenTLSCert
	s.ListenTLSKey = o.ListenTLSKey
	s.Protocol = o.Protocol

	return s, nil
}

// SetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *OTLPReceiver) SetBSON(raw bson.Raw) error {

	if o == nil || raw.Kind == bson.ElementNil {
		return bson.ErrSetZero
	}

	s := &mongoAttributesOTLPReceiver{}
	if err := raw.Unmarshal(s); err != nil {
		return err
	}

	o.Endpoint = s.Endpoint
	o.ListenTLSCert = s.ListenTLSCert
	o.ListenTLSKey = s.ListenTLSKey
	o.Protocol = s.Protocol

	return nil
}

// BleveType implements the bleve.Classifier Interface.
func (o *OTLPReceiver) BleveType() string {

	return "otlpreceiver"
}

// DeepCopy returns a deep copy if the OTLPReceiver.
func (o *OTLPReceiver) DeepCopy() *OTLPReceiver {

	if o == nil {
		return nil
	}

	out := &OTLPReceiver{}
	o.DeepCopyInto(out)

	return out
}

// DeepCopyInto copies the receiver into the given *OTLPReceiver.
func (o *OTLPReceiver) DeepCopyInto(out *OTLPReceiver) {

	target, err := copystructure.Copy(o)
	if err != nil {
		panic(fmt.Sprintf("Unable to deepcopy OTLPReceiver: %s", err))
	}

	*out = *target.(*OTLPReceiver)
}

// Validate valides the current information stored into the structure.
func (o *OTLPReceiver) Validate() error {

	errors := elemental.Errors{}
	requiredErrors := elemental.Errors{}

	if err := elemental.ValidateRequiredString("endpoint", o.Endpoint); err != nil {
		requiredErrors = requiredErrors.Append(err)
	}

	if err := ValidateIPPort("endpoint", o.Endpoint); err != nil {
		errors = errors.Append(err)
	}

	if err := ValidatePEM("listenTLSCert", o.ListenTLSCert); err != nil {
		errors = errors.Append(err)
	}

	if err := ValidatePEM("listenTLSKey", o.ListenTLSKey); err != nil {
		errors = errors.Append(err)
	}

	if err := elemental.ValidateRequiredString("protocol", string(o.Protocol)); err != nil {
		requiredErrors = requiredErrors.Append(err)
	}

	if err := elemental.ValidateStringInList("protocol", string(o.Protocol), []string{"GRPC", "HTTP"}, false); err != nil {
		errors = errors.Append(err)
	}

	if len(requiredErrors) > 0 {
		return requiredErrors
	}

	if len(errors) > 0 {
		return errors
	}

	return nil
}

// SpecificationForAttribute returns the AttributeSpecification for the given attribute name key.
func (*OTLPReceiver) SpecificationForAttribute(name string) elemental.AttributeSpecification {

	if v, ok := OTLPReceiverAttributesMap[name]; ok {
		return v
	}

	// We could not find it, so let's check on the lower case indexed spec map
	return OTLPReceiverLowerCaseAttributesMap[name]
}

// AttributeSpecifications returns the full attribute specifications map.
func (*OTLPReceiver) AttributeSpecifications() map[string]elemental.AttributeSpecification {

	return OTLPReceiverAttributesMap
}

// ValueForAttribute returns the value for the given attribute.
// This is a very advanced function that you should not need but in some
// very specific use cases.
func (o *OTLPReceiver) ValueForAttribute(name string) any {

	switch name {
	case "endpoint":
		return o.Endpoint
	case "listenTLSCert":
		return o.ListenTLSCert
	case "listenTLSKey":
		return o.ListenTLSKey
	case "protocol":
		return o.Protocol
	}

	return nil
}

// OTLPReceiverAttributesMap represents the map of attribute for OTLPReceiver.
var OTLPReceiverAttributesMap = map[string]elemental.AttributeSpecification{
	"Endpoint": {
		AllowedChoices: []string{},
		BSONFieldName:  "endpoint",
		ConvertedName:  "Endpoint",
		Description:    `Endpoint configures the listening address for the server.`,
		Exposed:        true,
		Name:           "endpoint",
		Required:       true,
		Stored:         true,
		Type:           "string",
	},
	"ListenTLSCert": {
		AllowedChoices: []string{},
		BSONFieldName:  "listentlscert",
		ConvertedName:  "ListenTLSCert",
		Description: `Optional PEM encoded X509v3 certificate to use for the listener for this OTLP
receiver. This setting is required if listenTLSKey is set.`,
		Exposed: true,
		Name:    "listenTLSCert",
		Stored:  true,
		Type:    "string",
	},
	"ListenTLSKey": {
		AllowedChoices: []string{},
		BSONFieldName:  "listentlskey",
		ConvertedName:  "ListenTLSKey",
		Description: `Optional PEM encoded key pair to use for the listener for this OTLP receiver.
This setting is required if listenTLSCert is set.`,
		Exposed: true,
		Name:    "listenTLSKey",
		Stored:  true,
		Type:    "string",
	},
	"Protocol": {
		AllowedChoices: []string{"GRPC", "HTTP"},
		BSONFieldName:  "protocol",
		ConvertedName:  "Protocol",
		Description: `Specifies the OTLP transport protocol to be used for trace data. Note that this
depends on the OTLP receiver being used.`,
		Exposed:  true,
		Name:     "protocol",
		Required: true,
		Stored:   true,
		Type:     "enum",
	},
}

// OTLPReceiverLowerCaseAttributesMap represents the map of attribute for OTLPReceiver.
var OTLPReceiverLowerCaseAttributesMap = map[string]elemental.AttributeSpecification{
	"endpoint": {
		AllowedChoices: []string{},
		BSONFieldName:  "endpoint",
		ConvertedName:  "Endpoint",
		Description:    `Endpoint configures the listening address for the server.`,
		Exposed:        true,
		Name:           "endpoint",
		Required:       true,
		Stored:         true,
		Type:           "string",
	},
	"listentlscert": {
		AllowedChoices: []string{},
		BSONFieldName:  "listentlscert",
		ConvertedName:  "ListenTLSCert",
		Description: `Optional PEM encoded X509v3 certificate to use for the listener for this OTLP
receiver. This setting is required if listenTLSKey is set.`,
		Exposed: true,
		Name:    "listenTLSCert",
		Stored:  true,
		Type:    "string",
	},
	"listentlskey": {
		AllowedChoices: []string{},
		BSONFieldName:  "listentlskey",
		ConvertedName:  "ListenTLSKey",
		Description: `Optional PEM encoded key pair to use for the listener for this OTLP receiver.
This setting is required if listenTLSCert is set.`,
		Exposed: true,
		Name:    "listenTLSKey",
		Stored:  true,
		Type:    "string",
	},
	"protocol": {
		AllowedChoices: []string{"GRPC", "HTTP"},
		BSONFieldName:  "protocol",
		ConvertedName:  "Protocol",
		Description: `Specifies the OTLP transport protocol to be used for trace data. Note that this
depends on the OTLP receiver being used.`,
		Exposed:  true,
		Name:     "protocol",
		Required: true,
		Stored:   true,
		Type:     "enum",
	},
}

type mongoAttributesOTLPReceiver struct {
	Endpoint      string                    `bson:"endpoint"`
	ListenTLSCert string                    `bson:"listentlscert,omitempty"`
	ListenTLSKey  string                    `bson:"listentlskey,omitempty"`
	Protocol      OTLPReceiverProtocolValue `bson:"protocol"`
}
