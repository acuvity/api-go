// Code generated by elegen. DO NOT EDIT.
// Source: go.acuvity.ai/elemental (templates/model.gotpl)

package api

import (
	"fmt"

	"github.com/globalsign/mgo/bson"
	"github.com/mitchellh/copystructure"
	"go.acuvity.ai/elemental"
)

// ScanResultTLSStatusValue represents the possible values for attribute "status".
type ScanResultTLSStatusValue string

const (
	// ScanResultTLSStatusFailed represents the value Failed.
	ScanResultTLSStatusFailed ScanResultTLSStatusValue = "Failed"

	// ScanResultTLSStatusPass represents the value Pass.
	ScanResultTLSStatusPass ScanResultTLSStatusValue = "Pass"

	// ScanResultTLSStatusSkipped represents the value Skipped.
	ScanResultTLSStatusSkipped ScanResultTLSStatusValue = "Skipped"
)

// ScanResultTLS represents the model of a scanresulttls
type ScanResultTLS struct {
	// Information about the TLS certificate served by the domain.
	CertificateInfo *TLSCertInfo `json:"certificateInfo" msgpack:"certificateInfo" bson:"certificateinfo" mapstructure:"certificateInfo,omitempty"`

	// The description of the scan.
	Description string `json:"description" msgpack:"description" bson:"description" mapstructure:"description,omitempty"`

	// If the status is 'Failed', holds the user facing error.
	Error string `json:"error" msgpack:"error" bson:"error" mapstructure:"error,omitempty"`

	// The name of the scan.
	Name string `json:"name" msgpack:"name" bson:"name" mapstructure:"name,omitempty"`

	// Status of the scan.
	Status ScanResultTLSStatusValue `json:"status" msgpack:"status" bson:"status" mapstructure:"status,omitempty"`

	ModelVersion int `json:"-" msgpack:"-" bson:"_modelversion"`
}

// NewScanResultTLS returns a new *ScanResultTLS
func NewScanResultTLS() *ScanResultTLS {

	return &ScanResultTLS{
		ModelVersion:    1,
		CertificateInfo: NewTLSCertInfo(),
	}
}

// GetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *ScanResultTLS) GetBSON() (any, error) {

	if o == nil {
		return nil, nil
	}

	s := &mongoAttributesScanResultTLS{}

	s.CertificateInfo = o.CertificateInfo
	s.Description = o.Description
	s.Error = o.Error
	s.Name = o.Name
	s.Status = o.Status

	return s, nil
}

// SetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *ScanResultTLS) SetBSON(raw bson.Raw) error {

	if o == nil || raw.Kind == bson.ElementNil {
		return bson.ErrSetZero
	}

	s := &mongoAttributesScanResultTLS{}
	if err := raw.Unmarshal(s); err != nil {
		return err
	}

	o.CertificateInfo = s.CertificateInfo
	o.Description = s.Description
	o.Error = s.Error
	o.Name = s.Name
	o.Status = s.Status

	return nil
}

// BleveType implements the bleve.Classifier Interface.
func (o *ScanResultTLS) BleveType() string {

	return "scanresulttls"
}

// DeepCopy returns a deep copy if the ScanResultTLS.
func (o *ScanResultTLS) DeepCopy() *ScanResultTLS {

	if o == nil {
		return nil
	}

	out := &ScanResultTLS{}
	o.DeepCopyInto(out)

	return out
}

// DeepCopyInto copies the receiver into the given *ScanResultTLS.
func (o *ScanResultTLS) DeepCopyInto(out *ScanResultTLS) {

	target, err := copystructure.Copy(o)
	if err != nil {
		panic(fmt.Sprintf("Unable to deepcopy ScanResultTLS: %s", err))
	}

	*out = *target.(*ScanResultTLS)
}

// Validate valides the current information stored into the structure.
func (o *ScanResultTLS) Validate() error {

	errors := elemental.Errors{}
	requiredErrors := elemental.Errors{}

	if o.CertificateInfo != nil {
		elemental.ResetDefaultForZeroValues(o.CertificateInfo)
		if err := o.CertificateInfo.Validate(); err != nil {
			errors = errors.Append(err)
		}
	}

	if err := elemental.ValidateRequiredString("description", o.Description); err != nil {
		requiredErrors = requiredErrors.Append(err)
	}

	if err := elemental.ValidateRequiredString("name", o.Name); err != nil {
		requiredErrors = requiredErrors.Append(err)
	}

	if err := elemental.ValidateRequiredString("status", string(o.Status)); err != nil {
		requiredErrors = requiredErrors.Append(err)
	}

	if err := elemental.ValidateStringInList("status", string(o.Status), []string{"Pass", "Failed", "Skipped"}, false); err != nil {
		errors = errors.Append(err)
	}

	if len(requiredErrors) > 0 {
		return requiredErrors
	}

	if len(errors) > 0 {
		return errors
	}

	return nil
}

// SpecificationForAttribute returns the AttributeSpecification for the given attribute name key.
func (*ScanResultTLS) SpecificationForAttribute(name string) elemental.AttributeSpecification {

	if v, ok := ScanResultTLSAttributesMap[name]; ok {
		return v
	}

	// We could not find it, so let's check on the lower case indexed spec map
	return ScanResultTLSLowerCaseAttributesMap[name]
}

// AttributeSpecifications returns the full attribute specifications map.
func (*ScanResultTLS) AttributeSpecifications() map[string]elemental.AttributeSpecification {

	return ScanResultTLSAttributesMap
}

// ValueForAttribute returns the value for the given attribute.
// This is a very advanced function that you should not need but in some
// very specific use cases.
func (o *ScanResultTLS) ValueForAttribute(name string) any {

	switch name {
	case "certificateInfo":
		return o.CertificateInfo
	case "description":
		return o.Description
	case "error":
		return o.Error
	case "name":
		return o.Name
	case "status":
		return o.Status
	}

	return nil
}

// ScanResultTLSAttributesMap represents the map of attribute for ScanResultTLS.
var ScanResultTLSAttributesMap = map[string]elemental.AttributeSpecification{
	"CertificateInfo": {
		AllowedChoices: []string{},
		BSONFieldName:  "certificateinfo",
		ConvertedName:  "CertificateInfo",
		Description:    `Information about the TLS certificate served by the domain.`,
		Exposed:        true,
		Name:           "certificateInfo",
		Stored:         true,
		SubType:        "tlscertinfo",
		Type:           "ref",
	},
	"Description": {
		AllowedChoices: []string{},
		BSONFieldName:  "description",
		ConvertedName:  "Description",
		Description:    `The description of the scan.`,
		Exposed:        true,
		Name:           "description",
		Required:       true,
		Stored:         true,
		Type:           "string",
	},
	"Error": {
		AllowedChoices: []string{},
		BSONFieldName:  "error",
		ConvertedName:  "Error",
		Description:    `If the status is 'Failed', holds the user facing error.`,
		Exposed:        true,
		Name:           "error",
		Stored:         true,
		Type:           "string",
	},
	"Name": {
		AllowedChoices: []string{},
		BSONFieldName:  "name",
		ConvertedName:  "Name",
		Description:    `The name of the scan.`,
		Exposed:        true,
		Name:           "name",
		Required:       true,
		Stored:         true,
		Type:           "string",
	},
	"Status": {
		AllowedChoices: []string{"Pass", "Failed", "Skipped"},
		BSONFieldName:  "status",
		ConvertedName:  "Status",
		Description:    `Status of the scan.`,
		Exposed:        true,
		Name:           "status",
		Required:       true,
		Stored:         true,
		Type:           "enum",
	},
}

// ScanResultTLSLowerCaseAttributesMap represents the map of attribute for ScanResultTLS.
var ScanResultTLSLowerCaseAttributesMap = map[string]elemental.AttributeSpecification{
	"certificateinfo": {
		AllowedChoices: []string{},
		BSONFieldName:  "certificateinfo",
		ConvertedName:  "CertificateInfo",
		Description:    `Information about the TLS certificate served by the domain.`,
		Exposed:        true,
		Name:           "certificateInfo",
		Stored:         true,
		SubType:        "tlscertinfo",
		Type:           "ref",
	},
	"description": {
		AllowedChoices: []string{},
		BSONFieldName:  "description",
		ConvertedName:  "Description",
		Description:    `The description of the scan.`,
		Exposed:        true,
		Name:           "description",
		Required:       true,
		Stored:         true,
		Type:           "string",
	},
	"error": {
		AllowedChoices: []string{},
		BSONFieldName:  "error",
		ConvertedName:  "Error",
		Description:    `If the status is 'Failed', holds the user facing error.`,
		Exposed:        true,
		Name:           "error",
		Stored:         true,
		Type:           "string",
	},
	"name": {
		AllowedChoices: []string{},
		BSONFieldName:  "name",
		ConvertedName:  "Name",
		Description:    `The name of the scan.`,
		Exposed:        true,
		Name:           "name",
		Required:       true,
		Stored:         true,
		Type:           "string",
	},
	"status": {
		AllowedChoices: []string{"Pass", "Failed", "Skipped"},
		BSONFieldName:  "status",
		ConvertedName:  "Status",
		Description:    `Status of the scan.`,
		Exposed:        true,
		Name:           "status",
		Required:       true,
		Stored:         true,
		Type:           "enum",
	},
}

type mongoAttributesScanResultTLS struct {
	CertificateInfo *TLSCertInfo             `bson:"certificateinfo"`
	Description     string                   `bson:"description"`
	Error           string                   `bson:"error"`
	Name            string                   `bson:"name"`
	Status          ScanResultTLSStatusValue `bson:"status"`
}
