// Code generated by elegen. DO NOT EDIT.
// Source: go.acuvity.ai/elemental (templates/model.gotpl)

package api

import (
	"fmt"

	"github.com/globalsign/mgo/bson"
	"github.com/mitchellh/copystructure"
	"go.acuvity.ai/elemental"
)

// AdminOrgModeValue represents the possible values for attribute "mode".
type AdminOrgModeValue string

const (
	// AdminOrgModeBlocked represents the value Blocked.
	AdminOrgModeBlocked AdminOrgModeValue = "Blocked"

	// AdminOrgModeDead represents the value Dead.
	AdminOrgModeDead AdminOrgModeValue = "Dead"

	// AdminOrgModeNormal represents the value Normal.
	AdminOrgModeNormal AdminOrgModeValue = "Normal"

	// AdminOrgModeNormalApps represents the value NormalApps.
	AdminOrgModeNormalApps AdminOrgModeValue = "NormalApps"

	// AdminOrgModeNormalEmployees represents the value NormalEmployees.
	AdminOrgModeNormalEmployees AdminOrgModeValue = "NormalEmployees"

	// AdminOrgModePilot represents the value Pilot.
	AdminOrgModePilot AdminOrgModeValue = "Pilot"

	// AdminOrgModeTrial represents the value Trial.
	AdminOrgModeTrial AdminOrgModeValue = "Trial"

	// AdminOrgModeTrialApps represents the value TrialApps.
	AdminOrgModeTrialApps AdminOrgModeValue = "TrialApps"

	// AdminOrgModeTrialEmployees represents the value TrialEmployees.
	AdminOrgModeTrialEmployees AdminOrgModeValue = "TrialEmployees"
)

// AdminOrgTypeValue represents the possible values for attribute "type".
type AdminOrgTypeValue string

const (
	// AdminOrgTypeFull represents the value Full.
	AdminOrgTypeFull AdminOrgTypeValue = "Full"

	// AdminOrgTypeSingle represents the value Single.
	AdminOrgTypeSingle AdminOrgTypeValue = "Single"
)

// AdminOrgIdentity represents the Identity of the object.
var AdminOrgIdentity = elemental.Identity{
	Name:     "adminorg",
	Category: "adminorgs",
	Package:  "ultradmin",
	Private:  false,
}

// AdminOrgsList represents a list of AdminOrgs
type AdminOrgsList []*AdminOrg

// Identity returns the identity of the objects in the list.
func (o AdminOrgsList) Identity() elemental.Identity {

	return AdminOrgIdentity
}

// Copy returns a pointer to a copy the AdminOrgsList.
func (o AdminOrgsList) Copy() elemental.Identifiables {

	out := append(AdminOrgsList{}, o...)
	return &out
}

// Append appends the objects to the a new copy of the AdminOrgsList.
func (o AdminOrgsList) Append(objects ...elemental.Identifiable) elemental.Identifiables {

	out := append(AdminOrgsList{}, o...)
	for _, obj := range objects {
		out = append(out, obj.(*AdminOrg))
	}

	return out
}

// List converts the object to an elemental.IdentifiablesList.
func (o AdminOrgsList) List() elemental.IdentifiablesList {

	out := make(elemental.IdentifiablesList, len(o))
	for i := 0; i < len(o); i++ {
		out[i] = o[i]
	}

	return out
}

// DefaultOrder returns the default ordering fields of the content.
func (o AdminOrgsList) DefaultOrder() []string {

	return []string{}
}

// ToSparse returns the AdminOrgsList converted to SparseAdminOrgsList.
// Objects in the list will only contain the given fields. No field means entire field set.
func (o AdminOrgsList) ToSparse(fields ...string) elemental.Identifiables {

	out := make(SparseAdminOrgsList, len(o))
	for i := 0; i < len(o); i++ {
		out[i] = o[i].ToSparse(fields...).(*SparseAdminOrg)
	}

	return out
}

// Version returns the version of the content.
func (o AdminOrgsList) Version() int {

	return 1
}

// AdminOrg represents the model of a adminorg
type AdminOrg struct {
	// ID is the identifier of the object.
	ID string `json:"ID,omitempty" msgpack:"ID,omitempty" bson:"-" mapstructure:"ID,omitempty"`

	// This property if true will force reimport the template data. Setting it false is
	// a noop.
	ForceReimportTemplate bool `json:"forceReimportTemplate" msgpack:"forceReimportTemplate" bson:"-" mapstructure:"forceReimportTemplate,omitempty"`

	// Enables the global Sign In With Github for the organization.
	GithubSigninEnabled bool `json:"githubSigninEnabled" msgpack:"githubSigninEnabled" bson:"githubsigninenabled" mapstructure:"githubSigninEnabled,omitempty"`

	// Enables the global Sign In With Gitlab for the organization.
	GitlabSigninEnabled bool `json:"gitlabSigninEnabled" msgpack:"gitlabSigninEnabled" bson:"gitlabsigninenabled" mapstructure:"gitlabSigninEnabled,omitempty"`

	// Enables the global Sign In With Google for the organization.
	GoogleSigninEnabled bool `json:"googleSigninEnabled" msgpack:"googleSigninEnabled" bson:"googlesigninenabled" mapstructure:"googleSigninEnabled,omitempty"`

	// Enables the global Sign In With Huggingface for the organization.
	HuggingfaceSigninEnabled bool `json:"huggingfaceSigninEnabled" msgpack:"huggingfaceSigninEnabled" bson:"huggingfacesigninenabled" mapstructure:"huggingfaceSigninEnabled,omitempty"`

	// The mode of the organization.
	Mode AdminOrgModeValue `json:"mode" msgpack:"mode" bson:"mode" mapstructure:"mode,omitempty"`

	// The name of the organization.
	Name string `json:"name" msgpack:"name" bson:"name" mapstructure:"name,omitempty"`

	// The namespace of the object.
	Namespace string `json:"namespace,omitempty" msgpack:"namespace,omitempty" bson:"namespace,omitempty" mapstructure:"namespace,omitempty"`

	// This is an internal property used to decide if the org template needs to be
	// reimported.
	ReimportTemplate bool `json:"reimportTemplate" msgpack:"reimportTemplate" bson:"-" mapstructure:"reimportTemplate,omitempty"`

	// A tag expression that identifies the authorized user(s). If set it will
	// configure the complete subject of the admin api authorization, ignoring anything
	// passed in claims.
	Subject [][]string `json:"subject" msgpack:"subject" bson:"subject" mapstructure:"subject,omitempty"`

	// The type of organization. Either Full or Single. Full represents an organization
	// that will need to onboard additional users, while Single represents a single
	// user account.
	Type AdminOrgTypeValue `json:"type" msgpack:"type" bson:"type" mapstructure:"type,omitempty"`

	ModelVersion int `json:"-" msgpack:"-" bson:"_modelversion"`
}

// NewAdminOrg returns a new *AdminOrg
func NewAdminOrg() *AdminOrg {

	return &AdminOrg{
		ModelVersion: 1,
		Mode:         AdminOrgModeNormal,
		Subject:      [][]string{},
		Type:         AdminOrgTypeFull,
	}
}

// Identity returns the Identity of the object.
func (o *AdminOrg) Identity() elemental.Identity {

	return AdminOrgIdentity
}

// Identifier returns the value of the object's unique identifier.
func (o *AdminOrg) Identifier() string {

	return o.ID
}

// SetIdentifier sets the value of the object's unique identifier.
func (o *AdminOrg) SetIdentifier(id string) {

	o.ID = id
}

// GetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *AdminOrg) GetBSON() (any, error) {

	if o == nil {
		return nil, nil
	}

	s := &mongoAttributesAdminOrg{}

	if o.ID != "" {
		s.ID = bson.ObjectIdHex(o.ID)
	}
	s.GithubSigninEnabled = o.GithubSigninEnabled
	s.GitlabSigninEnabled = o.GitlabSigninEnabled
	s.GoogleSigninEnabled = o.GoogleSigninEnabled
	s.HuggingfaceSigninEnabled = o.HuggingfaceSigninEnabled
	s.Mode = o.Mode
	s.Name = o.Name
	s.Namespace = o.Namespace
	s.Subject = o.Subject
	s.Type = o.Type

	return s, nil
}

// SetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *AdminOrg) SetBSON(raw bson.Raw) error {

	if o == nil {
		return nil
	}

	s := &mongoAttributesAdminOrg{}
	if err := raw.Unmarshal(s); err != nil {
		return err
	}

	o.ID = s.ID.Hex()
	o.GithubSigninEnabled = s.GithubSigninEnabled
	o.GitlabSigninEnabled = s.GitlabSigninEnabled
	o.GoogleSigninEnabled = s.GoogleSigninEnabled
	o.HuggingfaceSigninEnabled = s.HuggingfaceSigninEnabled
	o.Mode = s.Mode
	o.Name = s.Name
	o.Namespace = s.Namespace
	o.Subject = s.Subject
	o.Type = s.Type

	return nil
}

// Version returns the hardcoded version of the model.
func (o *AdminOrg) Version() int {

	return 1
}

// BleveType implements the bleve.Classifier Interface.
func (o *AdminOrg) BleveType() string {

	return "adminorg"
}

// DefaultOrder returns the list of default ordering fields.
func (o *AdminOrg) DefaultOrder() []string {

	return []string{}
}

// Doc returns the documentation for the object
func (o *AdminOrg) Doc() string {

	return `Administrative API to create new organizations.`
}

func (o *AdminOrg) String() string {

	return fmt.Sprintf("<%s:%s>", o.Identity().Name, o.Identifier())
}

// GetNamespace returns the Namespace of the receiver.
func (o *AdminOrg) GetNamespace() string {

	return o.Namespace
}

// SetNamespace sets the property Namespace of the receiver using the given value.
func (o *AdminOrg) SetNamespace(namespace string) {

	o.Namespace = namespace
}

// ToSparse returns the sparse version of the model.
// The returned object will only contain the given fields. No field means entire field set.
func (o *AdminOrg) ToSparse(fields ...string) elemental.SparseIdentifiable {

	if len(fields) == 0 {
		// nolint: goimports
		return &SparseAdminOrg{
			ID:                       &o.ID,
			ForceReimportTemplate:    &o.ForceReimportTemplate,
			GithubSigninEnabled:      &o.GithubSigninEnabled,
			GitlabSigninEnabled:      &o.GitlabSigninEnabled,
			GoogleSigninEnabled:      &o.GoogleSigninEnabled,
			HuggingfaceSigninEnabled: &o.HuggingfaceSigninEnabled,
			Mode:                     &o.Mode,
			Name:                     &o.Name,
			Namespace:                &o.Namespace,
			ReimportTemplate:         &o.ReimportTemplate,
			Subject:                  &o.Subject,
			Type:                     &o.Type,
		}
	}

	sp := &SparseAdminOrg{}
	for _, f := range fields {
		switch f {
		case "ID":
			sp.ID = &(o.ID)
		case "forceReimportTemplate":
			sp.ForceReimportTemplate = &(o.ForceReimportTemplate)
		case "githubSigninEnabled":
			sp.GithubSigninEnabled = &(o.GithubSigninEnabled)
		case "gitlabSigninEnabled":
			sp.GitlabSigninEnabled = &(o.GitlabSigninEnabled)
		case "googleSigninEnabled":
			sp.GoogleSigninEnabled = &(o.GoogleSigninEnabled)
		case "huggingfaceSigninEnabled":
			sp.HuggingfaceSigninEnabled = &(o.HuggingfaceSigninEnabled)
		case "mode":
			sp.Mode = &(o.Mode)
		case "name":
			sp.Name = &(o.Name)
		case "namespace":
			sp.Namespace = &(o.Namespace)
		case "reimportTemplate":
			sp.ReimportTemplate = &(o.ReimportTemplate)
		case "subject":
			sp.Subject = &(o.Subject)
		case "type":
			sp.Type = &(o.Type)
		}
	}

	return sp
}

// Patch apply the non nil value of a *SparseAdminOrg to the object.
func (o *AdminOrg) Patch(sparse elemental.SparseIdentifiable) {
	if !sparse.Identity().IsEqual(o.Identity()) {
		panic("cannot patch from a parse with different identity")
	}

	so := sparse.(*SparseAdminOrg)
	if so.ID != nil {
		o.ID = *so.ID
	}
	if so.ForceReimportTemplate != nil {
		o.ForceReimportTemplate = *so.ForceReimportTemplate
	}
	if so.GithubSigninEnabled != nil {
		o.GithubSigninEnabled = *so.GithubSigninEnabled
	}
	if so.GitlabSigninEnabled != nil {
		o.GitlabSigninEnabled = *so.GitlabSigninEnabled
	}
	if so.GoogleSigninEnabled != nil {
		o.GoogleSigninEnabled = *so.GoogleSigninEnabled
	}
	if so.HuggingfaceSigninEnabled != nil {
		o.HuggingfaceSigninEnabled = *so.HuggingfaceSigninEnabled
	}
	if so.Mode != nil {
		o.Mode = *so.Mode
	}
	if so.Name != nil {
		o.Name = *so.Name
	}
	if so.Namespace != nil {
		o.Namespace = *so.Namespace
	}
	if so.ReimportTemplate != nil {
		o.ReimportTemplate = *so.ReimportTemplate
	}
	if so.Subject != nil {
		o.Subject = *so.Subject
	}
	if so.Type != nil {
		o.Type = *so.Type
	}
}

// DeepCopy returns a deep copy if the AdminOrg.
func (o *AdminOrg) DeepCopy() *AdminOrg {

	if o == nil {
		return nil
	}

	out := &AdminOrg{}
	o.DeepCopyInto(out)

	return out
}

// DeepCopyInto copies the receiver into the given *AdminOrg.
func (o *AdminOrg) DeepCopyInto(out *AdminOrg) {

	target, err := copystructure.Copy(o)
	if err != nil {
		panic(fmt.Sprintf("Unable to deepcopy AdminOrg: %s", err))
	}

	*out = *target.(*AdminOrg)
}

// Validate valides the current information stored into the structure.
func (o *AdminOrg) Validate() error {

	errors := elemental.Errors{}
	requiredErrors := elemental.Errors{}

	if err := elemental.ValidateStringInList("mode", string(o.Mode), []string{"Trial", "TrialEmployees", "TrialApps", "Pilot", "Normal", "NormalEmployees", "NormalApps", "Blocked", "Dead"}, false); err != nil {
		errors = errors.Append(err)
	}

	if err := elemental.ValidateRequiredString("name", o.Name); err != nil {
		requiredErrors = requiredErrors.Append(err)
	}

	if err := elemental.ValidatePattern("name", o.Name, `^[a-zA-Z0-9-_/@.]+$`, `must only contain alpha numerical characters, '-' or '_' or '@' or '.'.`, true); err != nil {
		errors = errors.Append(err)
	}

	if err := ValidateAuthorizationSubject("subject", o.Subject); err != nil {
		errors = errors.Append(err)
	}
	if err := ValidateTagsExpression("subject", o.Subject); err != nil {
		errors = errors.Append(err)
	}

	if err := elemental.ValidateStringInList("type", string(o.Type), []string{"Full", "Single"}, false); err != nil {
		errors = errors.Append(err)
	}

	if len(requiredErrors) > 0 {
		return requiredErrors
	}

	if len(errors) > 0 {
		return errors
	}

	return nil
}

// SpecificationForAttribute returns the AttributeSpecification for the given attribute name key.
func (*AdminOrg) SpecificationForAttribute(name string) elemental.AttributeSpecification {

	if v, ok := AdminOrgAttributesMap[name]; ok {
		return v
	}

	// We could not find it, so let's check on the lower case indexed spec map
	return AdminOrgLowerCaseAttributesMap[name]
}

// AttributeSpecifications returns the full attribute specifications map.
func (*AdminOrg) AttributeSpecifications() map[string]elemental.AttributeSpecification {

	return AdminOrgAttributesMap
}

// ValueForAttribute returns the value for the given attribute.
// This is a very advanced function that you should not need but in some
// very specific use cases.
func (o *AdminOrg) ValueForAttribute(name string) any {

	switch name {
	case "ID":
		return o.ID
	case "forceReimportTemplate":
		return o.ForceReimportTemplate
	case "githubSigninEnabled":
		return o.GithubSigninEnabled
	case "gitlabSigninEnabled":
		return o.GitlabSigninEnabled
	case "googleSigninEnabled":
		return o.GoogleSigninEnabled
	case "huggingfaceSigninEnabled":
		return o.HuggingfaceSigninEnabled
	case "mode":
		return o.Mode
	case "name":
		return o.Name
	case "namespace":
		return o.Namespace
	case "reimportTemplate":
		return o.ReimportTemplate
	case "subject":
		return o.Subject
	case "type":
		return o.Type
	}

	return nil
}

// AdminOrgAttributesMap represents the map of attribute for AdminOrg.
var AdminOrgAttributesMap = map[string]elemental.AttributeSpecification{
	"ID": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "_id",
		ConvertedName:  "ID",
		Description:    `ID is the identifier of the object.`,
		Exposed:        true,
		Filterable:     true,
		Identifier:     true,
		Name:           "ID",
		Orderable:      true,
		ReadOnly:       true,
		Stored:         true,
		Type:           "string",
	},
	"ForceReimportTemplate": {
		AllowedChoices: []string{},
		ConvertedName:  "ForceReimportTemplate",
		Description: `This property if true will force reimport the template data. Setting it false is
a noop.`,
		Exposed: true,
		Name:    "forceReimportTemplate",
		Type:    "boolean",
	},
	"GithubSigninEnabled": {
		AllowedChoices: []string{},
		BSONFieldName:  "githubsigninenabled",
		ConvertedName:  "GithubSigninEnabled",
		Description:    `Enables the global Sign In With Github for the organization.`,
		Exposed:        true,
		Name:           "githubSigninEnabled",
		Stored:         true,
		Type:           "boolean",
	},
	"GitlabSigninEnabled": {
		AllowedChoices: []string{},
		BSONFieldName:  "gitlabsigninenabled",
		ConvertedName:  "GitlabSigninEnabled",
		Description:    `Enables the global Sign In With Gitlab for the organization.`,
		Exposed:        true,
		Name:           "gitlabSigninEnabled",
		Stored:         true,
		Type:           "boolean",
	},
	"GoogleSigninEnabled": {
		AllowedChoices: []string{},
		BSONFieldName:  "googlesigninenabled",
		ConvertedName:  "GoogleSigninEnabled",
		Description:    `Enables the global Sign In With Google for the organization.`,
		Exposed:        true,
		Name:           "googleSigninEnabled",
		Stored:         true,
		Type:           "boolean",
	},
	"HuggingfaceSigninEnabled": {
		AllowedChoices: []string{},
		BSONFieldName:  "huggingfacesigninenabled",
		ConvertedName:  "HuggingfaceSigninEnabled",
		Description:    `Enables the global Sign In With Huggingface for the organization.`,
		Exposed:        true,
		Name:           "huggingfaceSigninEnabled",
		Stored:         true,
		Type:           "boolean",
	},
	"Mode": {
		AllowedChoices: []string{"Trial", "TrialEmployees", "TrialApps", "Pilot", "Normal", "NormalEmployees", "NormalApps", "Blocked", "Dead"},
		BSONFieldName:  "mode",
		ConvertedName:  "Mode",
		DefaultValue:   AdminOrgModeNormal,
		Description:    `The mode of the organization.`,
		Exposed:        true,
		Name:           "mode",
		Stored:         true,
		Type:           "enum",
	},
	"Name": {
		AllowedChars:   `^[a-zA-Z0-9-_/@.]+$`,
		AllowedChoices: []string{},
		BSONFieldName:  "name",
		ConvertedName:  "Name",
		CreationOnly:   true,
		Description:    `The name of the organization.`,
		Exposed:        true,
		Name:           "name",
		Required:       true,
		Stored:         true,
		Type:           "string",
	},
	"Namespace": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "namespace",
		ConvertedName:  "Namespace",
		Description:    `The namespace of the object.`,
		Exposed:        true,
		Getter:         true,
		Name:           "namespace",
		Orderable:      true,
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Type:           "string",
	},
	"ReimportTemplate": {
		AllowedChoices: []string{},
		ConvertedName:  "ReimportTemplate",
		Description: `This is an internal property used to decide if the org template needs to be
reimported.`,
		Exposed:  true,
		Name:     "reimportTemplate",
		ReadOnly: true,
		Type:     "boolean",
	},
	"Subject": {
		AllowedChoices: []string{},
		BSONFieldName:  "subject",
		ConvertedName:  "Subject",
		Description: `A tag expression that identifies the authorized user(s). If set it will
configure the complete subject of the admin api authorization, ignoring anything
passed in claims.`,
		Exposed:   true,
		Name:      "subject",
		Orderable: true,
		Stored:    true,
		SubType:   "[][]string",
		Type:      "external",
	},
	"Type": {
		AllowedChoices: []string{"Full", "Single"},
		BSONFieldName:  "type",
		ConvertedName:  "Type",
		DefaultValue:   AdminOrgTypeFull,
		Description: `The type of organization. Either Full or Single. Full represents an organization
that will need to onboard additional users, while Single represents a single
user account.`,
		Exposed: true,
		Name:    "type",
		Stored:  true,
		Type:    "enum",
	},
}

// AdminOrgLowerCaseAttributesMap represents the map of attribute for AdminOrg.
var AdminOrgLowerCaseAttributesMap = map[string]elemental.AttributeSpecification{
	"id": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "_id",
		ConvertedName:  "ID",
		Description:    `ID is the identifier of the object.`,
		Exposed:        true,
		Filterable:     true,
		Identifier:     true,
		Name:           "ID",
		Orderable:      true,
		ReadOnly:       true,
		Stored:         true,
		Type:           "string",
	},
	"forcereimporttemplate": {
		AllowedChoices: []string{},
		ConvertedName:  "ForceReimportTemplate",
		Description: `This property if true will force reimport the template data. Setting it false is
a noop.`,
		Exposed: true,
		Name:    "forceReimportTemplate",
		Type:    "boolean",
	},
	"githubsigninenabled": {
		AllowedChoices: []string{},
		BSONFieldName:  "githubsigninenabled",
		ConvertedName:  "GithubSigninEnabled",
		Description:    `Enables the global Sign In With Github for the organization.`,
		Exposed:        true,
		Name:           "githubSigninEnabled",
		Stored:         true,
		Type:           "boolean",
	},
	"gitlabsigninenabled": {
		AllowedChoices: []string{},
		BSONFieldName:  "gitlabsigninenabled",
		ConvertedName:  "GitlabSigninEnabled",
		Description:    `Enables the global Sign In With Gitlab for the organization.`,
		Exposed:        true,
		Name:           "gitlabSigninEnabled",
		Stored:         true,
		Type:           "boolean",
	},
	"googlesigninenabled": {
		AllowedChoices: []string{},
		BSONFieldName:  "googlesigninenabled",
		ConvertedName:  "GoogleSigninEnabled",
		Description:    `Enables the global Sign In With Google for the organization.`,
		Exposed:        true,
		Name:           "googleSigninEnabled",
		Stored:         true,
		Type:           "boolean",
	},
	"huggingfacesigninenabled": {
		AllowedChoices: []string{},
		BSONFieldName:  "huggingfacesigninenabled",
		ConvertedName:  "HuggingfaceSigninEnabled",
		Description:    `Enables the global Sign In With Huggingface for the organization.`,
		Exposed:        true,
		Name:           "huggingfaceSigninEnabled",
		Stored:         true,
		Type:           "boolean",
	},
	"mode": {
		AllowedChoices: []string{"Trial", "TrialEmployees", "TrialApps", "Pilot", "Normal", "NormalEmployees", "NormalApps", "Blocked", "Dead"},
		BSONFieldName:  "mode",
		ConvertedName:  "Mode",
		DefaultValue:   AdminOrgModeNormal,
		Description:    `The mode of the organization.`,
		Exposed:        true,
		Name:           "mode",
		Stored:         true,
		Type:           "enum",
	},
	"name": {
		AllowedChars:   `^[a-zA-Z0-9-_/@.]+$`,
		AllowedChoices: []string{},
		BSONFieldName:  "name",
		ConvertedName:  "Name",
		CreationOnly:   true,
		Description:    `The name of the organization.`,
		Exposed:        true,
		Name:           "name",
		Required:       true,
		Stored:         true,
		Type:           "string",
	},
	"namespace": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "namespace",
		ConvertedName:  "Namespace",
		Description:    `The namespace of the object.`,
		Exposed:        true,
		Getter:         true,
		Name:           "namespace",
		Orderable:      true,
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Type:           "string",
	},
	"reimporttemplate": {
		AllowedChoices: []string{},
		ConvertedName:  "ReimportTemplate",
		Description: `This is an internal property used to decide if the org template needs to be
reimported.`,
		Exposed:  true,
		Name:     "reimportTemplate",
		ReadOnly: true,
		Type:     "boolean",
	},
	"subject": {
		AllowedChoices: []string{},
		BSONFieldName:  "subject",
		ConvertedName:  "Subject",
		Description: `A tag expression that identifies the authorized user(s). If set it will
configure the complete subject of the admin api authorization, ignoring anything
passed in claims.`,
		Exposed:   true,
		Name:      "subject",
		Orderable: true,
		Stored:    true,
		SubType:   "[][]string",
		Type:      "external",
	},
	"type": {
		AllowedChoices: []string{"Full", "Single"},
		BSONFieldName:  "type",
		ConvertedName:  "Type",
		DefaultValue:   AdminOrgTypeFull,
		Description: `The type of organization. Either Full or Single. Full represents an organization
that will need to onboard additional users, while Single represents a single
user account.`,
		Exposed: true,
		Name:    "type",
		Stored:  true,
		Type:    "enum",
	},
}

// SparseAdminOrgsList represents a list of SparseAdminOrgs
type SparseAdminOrgsList []*SparseAdminOrg

// Identity returns the identity of the objects in the list.
func (o SparseAdminOrgsList) Identity() elemental.Identity {

	return AdminOrgIdentity
}

// Copy returns a pointer to a copy the SparseAdminOrgsList.
func (o SparseAdminOrgsList) Copy() elemental.Identifiables {

	copy := append(SparseAdminOrgsList{}, o...)
	return &copy
}

// Append appends the objects to the a new copy of the SparseAdminOrgsList.
func (o SparseAdminOrgsList) Append(objects ...elemental.Identifiable) elemental.Identifiables {

	out := append(SparseAdminOrgsList{}, o...)
	for _, obj := range objects {
		out = append(out, obj.(*SparseAdminOrg))
	}

	return out
}

// List converts the object to an elemental.IdentifiablesList.
func (o SparseAdminOrgsList) List() elemental.IdentifiablesList {

	out := make(elemental.IdentifiablesList, len(o))
	for i := 0; i < len(o); i++ {
		out[i] = o[i]
	}

	return out
}

// DefaultOrder returns the default ordering fields of the content.
func (o SparseAdminOrgsList) DefaultOrder() []string {

	return []string{}
}

// ToPlain returns the SparseAdminOrgsList converted to AdminOrgsList.
func (o SparseAdminOrgsList) ToPlain() elemental.IdentifiablesList {

	out := make(elemental.IdentifiablesList, len(o))
	for i := 0; i < len(o); i++ {
		out[i] = o[i].ToPlain()
	}

	return out
}

// Version returns the version of the content.
func (o SparseAdminOrgsList) Version() int {

	return 1
}

// SparseAdminOrg represents the sparse version of a adminorg.
type SparseAdminOrg struct {
	// ID is the identifier of the object.
	ID *string `json:"ID,omitempty" msgpack:"ID,omitempty" bson:"-" mapstructure:"ID,omitempty"`

	// This property if true will force reimport the template data. Setting it false is
	// a noop.
	ForceReimportTemplate *bool `json:"forceReimportTemplate,omitempty" msgpack:"forceReimportTemplate,omitempty" bson:"-" mapstructure:"forceReimportTemplate,omitempty"`

	// Enables the global Sign In With Github for the organization.
	GithubSigninEnabled *bool `json:"githubSigninEnabled,omitempty" msgpack:"githubSigninEnabled,omitempty" bson:"githubsigninenabled,omitempty" mapstructure:"githubSigninEnabled,omitempty"`

	// Enables the global Sign In With Gitlab for the organization.
	GitlabSigninEnabled *bool `json:"gitlabSigninEnabled,omitempty" msgpack:"gitlabSigninEnabled,omitempty" bson:"gitlabsigninenabled,omitempty" mapstructure:"gitlabSigninEnabled,omitempty"`

	// Enables the global Sign In With Google for the organization.
	GoogleSigninEnabled *bool `json:"googleSigninEnabled,omitempty" msgpack:"googleSigninEnabled,omitempty" bson:"googlesigninenabled,omitempty" mapstructure:"googleSigninEnabled,omitempty"`

	// Enables the global Sign In With Huggingface for the organization.
	HuggingfaceSigninEnabled *bool `json:"huggingfaceSigninEnabled,omitempty" msgpack:"huggingfaceSigninEnabled,omitempty" bson:"huggingfacesigninenabled,omitempty" mapstructure:"huggingfaceSigninEnabled,omitempty"`

	// The mode of the organization.
	Mode *AdminOrgModeValue `json:"mode,omitempty" msgpack:"mode,omitempty" bson:"mode,omitempty" mapstructure:"mode,omitempty"`

	// The name of the organization.
	Name *string `json:"name,omitempty" msgpack:"name,omitempty" bson:"name,omitempty" mapstructure:"name,omitempty"`

	// The namespace of the object.
	Namespace *string `json:"namespace,omitempty" msgpack:"namespace,omitempty" bson:"namespace,omitempty" mapstructure:"namespace,omitempty"`

	// This is an internal property used to decide if the org template needs to be
	// reimported.
	ReimportTemplate *bool `json:"reimportTemplate,omitempty" msgpack:"reimportTemplate,omitempty" bson:"-" mapstructure:"reimportTemplate,omitempty"`

	// A tag expression that identifies the authorized user(s). If set it will
	// configure the complete subject of the admin api authorization, ignoring anything
	// passed in claims.
	Subject *[][]string `json:"subject,omitempty" msgpack:"subject,omitempty" bson:"subject,omitempty" mapstructure:"subject,omitempty"`

	// The type of organization. Either Full or Single. Full represents an organization
	// that will need to onboard additional users, while Single represents a single
	// user account.
	Type *AdminOrgTypeValue `json:"type,omitempty" msgpack:"type,omitempty" bson:"type,omitempty" mapstructure:"type,omitempty"`

	ModelVersion int `json:"-" msgpack:"-" bson:"_modelversion"`
}

// NewSparseAdminOrg returns a new  SparseAdminOrg.
func NewSparseAdminOrg() *SparseAdminOrg {
	return &SparseAdminOrg{}
}

// Identity returns the Identity of the sparse object.
func (o *SparseAdminOrg) Identity() elemental.Identity {

	return AdminOrgIdentity
}

// Identifier returns the value of the sparse object's unique identifier.
func (o *SparseAdminOrg) Identifier() string {

	if o.ID == nil {
		return ""
	}
	return *o.ID
}

// SetIdentifier sets the value of the sparse object's unique identifier.
func (o *SparseAdminOrg) SetIdentifier(id string) {

	if id != "" {
		o.ID = &id
	} else {
		o.ID = nil
	}
}

// GetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *SparseAdminOrg) GetBSON() (any, error) {

	if o == nil {
		return nil, nil
	}

	s := &mongoAttributesSparseAdminOrg{}

	if o.ID != nil {
		s.ID = bson.ObjectIdHex(*o.ID)
	}
	if o.GithubSigninEnabled != nil {
		s.GithubSigninEnabled = o.GithubSigninEnabled
	}
	if o.GitlabSigninEnabled != nil {
		s.GitlabSigninEnabled = o.GitlabSigninEnabled
	}
	if o.GoogleSigninEnabled != nil {
		s.GoogleSigninEnabled = o.GoogleSigninEnabled
	}
	if o.HuggingfaceSigninEnabled != nil {
		s.HuggingfaceSigninEnabled = o.HuggingfaceSigninEnabled
	}
	if o.Mode != nil {
		s.Mode = o.Mode
	}
	if o.Name != nil {
		s.Name = o.Name
	}
	if o.Namespace != nil {
		s.Namespace = o.Namespace
	}
	if o.Subject != nil {
		s.Subject = o.Subject
	}
	if o.Type != nil {
		s.Type = o.Type
	}

	return s, nil
}

// SetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *SparseAdminOrg) SetBSON(raw bson.Raw) error {

	if o == nil {
		return nil
	}

	s := &mongoAttributesSparseAdminOrg{}
	if err := raw.Unmarshal(s); err != nil {
		return err
	}

	id := s.ID.Hex()
	o.ID = &id
	if s.GithubSigninEnabled != nil {
		o.GithubSigninEnabled = s.GithubSigninEnabled
	}
	if s.GitlabSigninEnabled != nil {
		o.GitlabSigninEnabled = s.GitlabSigninEnabled
	}
	if s.GoogleSigninEnabled != nil {
		o.GoogleSigninEnabled = s.GoogleSigninEnabled
	}
	if s.HuggingfaceSigninEnabled != nil {
		o.HuggingfaceSigninEnabled = s.HuggingfaceSigninEnabled
	}
	if s.Mode != nil {
		o.Mode = s.Mode
	}
	if s.Name != nil {
		o.Name = s.Name
	}
	if s.Namespace != nil {
		o.Namespace = s.Namespace
	}
	if s.Subject != nil {
		o.Subject = s.Subject
	}
	if s.Type != nil {
		o.Type = s.Type
	}

	return nil
}

// Version returns the hardcoded version of the model.
func (o *SparseAdminOrg) Version() int {

	return 1
}

// ToPlain returns the plain version of the sparse model.
func (o *SparseAdminOrg) ToPlain() elemental.PlainIdentifiable {

	out := NewAdminOrg()
	if o.ID != nil {
		out.ID = *o.ID
	}
	if o.ForceReimportTemplate != nil {
		out.ForceReimportTemplate = *o.ForceReimportTemplate
	}
	if o.GithubSigninEnabled != nil {
		out.GithubSigninEnabled = *o.GithubSigninEnabled
	}
	if o.GitlabSigninEnabled != nil {
		out.GitlabSigninEnabled = *o.GitlabSigninEnabled
	}
	if o.GoogleSigninEnabled != nil {
		out.GoogleSigninEnabled = *o.GoogleSigninEnabled
	}
	if o.HuggingfaceSigninEnabled != nil {
		out.HuggingfaceSigninEnabled = *o.HuggingfaceSigninEnabled
	}
	if o.Mode != nil {
		out.Mode = *o.Mode
	}
	if o.Name != nil {
		out.Name = *o.Name
	}
	if o.Namespace != nil {
		out.Namespace = *o.Namespace
	}
	if o.ReimportTemplate != nil {
		out.ReimportTemplate = *o.ReimportTemplate
	}
	if o.Subject != nil {
		out.Subject = *o.Subject
	}
	if o.Type != nil {
		out.Type = *o.Type
	}

	return out
}

// GetNamespace returns the Namespace of the receiver.
func (o *SparseAdminOrg) GetNamespace() (out string) {

	if o.Namespace == nil {
		return
	}

	return *o.Namespace
}

// SetNamespace sets the property Namespace of the receiver using the address of the given value.
func (o *SparseAdminOrg) SetNamespace(namespace string) {

	o.Namespace = &namespace
}

// DeepCopy returns a deep copy if the SparseAdminOrg.
func (o *SparseAdminOrg) DeepCopy() *SparseAdminOrg {

	if o == nil {
		return nil
	}

	out := &SparseAdminOrg{}
	o.DeepCopyInto(out)

	return out
}

// DeepCopyInto copies the receiver into the given *SparseAdminOrg.
func (o *SparseAdminOrg) DeepCopyInto(out *SparseAdminOrg) {

	target, err := copystructure.Copy(o)
	if err != nil {
		panic(fmt.Sprintf("Unable to deepcopy SparseAdminOrg: %s", err))
	}

	*out = *target.(*SparseAdminOrg)
}

type mongoAttributesAdminOrg struct {
	ID                       bson.ObjectId     `bson:"_id,omitempty"`
	GithubSigninEnabled      bool              `bson:"githubsigninenabled"`
	GitlabSigninEnabled      bool              `bson:"gitlabsigninenabled"`
	GoogleSigninEnabled      bool              `bson:"googlesigninenabled"`
	HuggingfaceSigninEnabled bool              `bson:"huggingfacesigninenabled"`
	Mode                     AdminOrgModeValue `bson:"mode"`
	Name                     string            `bson:"name"`
	Namespace                string            `bson:"namespace,omitempty"`
	Subject                  [][]string        `bson:"subject"`
	Type                     AdminOrgTypeValue `bson:"type"`
}
type mongoAttributesSparseAdminOrg struct {
	ID                       bson.ObjectId      `bson:"_id,omitempty"`
	GithubSigninEnabled      *bool              `bson:"githubsigninenabled,omitempty"`
	GitlabSigninEnabled      *bool              `bson:"gitlabsigninenabled,omitempty"`
	GoogleSigninEnabled      *bool              `bson:"googlesigninenabled,omitempty"`
	HuggingfaceSigninEnabled *bool              `bson:"huggingfacesigninenabled,omitempty"`
	Mode                     *AdminOrgModeValue `bson:"mode,omitempty"`
	Name                     *string            `bson:"name,omitempty"`
	Namespace                *string            `bson:"namespace,omitempty"`
	Subject                  *[][]string        `bson:"subject,omitempty"`
	Type                     *AdminOrgTypeValue `bson:"type,omitempty"`
}
