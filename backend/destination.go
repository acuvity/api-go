// Code generated by elegen. DO NOT EDIT.
// Source: go.acuvity.ai/elemental (templates/model.gotpl)

package api

import (
	"fmt"

	"github.com/globalsign/mgo/bson"
	"github.com/mitchellh/copystructure"
	"go.acuvity.ai/elemental"
)

// Destination represents the model of a destination
type Destination struct {
	// The name of the application that the domain belongs to.
	App string `json:"app,omitempty" msgpack:"app,omitempty" bson:"app,omitempty" mapstructure:"app,omitempty"`

	// The component of the application that the domain belongs to.
	Component string `json:"component,omitempty" msgpack:"component,omitempty" bson:"component,omitempty" mapstructure:"component,omitempty"`

	// The host name of the request.
	Host string `json:"host" msgpack:"host" bson:"host" mapstructure:"host,omitempty"`

	// The destination IP address of the request.
	Ip string `json:"ip,omitempty" msgpack:"ip,omitempty" bson:"ip,omitempty" mapstructure:"ip,omitempty"`

	// The list of labels attached to the application request destination.
	Labels []string `json:"labels,omitempty" msgpack:"labels,omitempty" bson:"labels,omitempty" mapstructure:"labels,omitempty"`

	ModelVersion int `json:"-" msgpack:"-" bson:"_modelversion"`
}

// NewDestination returns a new *Destination
func NewDestination() *Destination {

	return &Destination{
		ModelVersion: 1,
		Labels:       []string{},
	}
}

// GetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *Destination) GetBSON() (any, error) {

	if o == nil {
		return nil, nil
	}

	s := &mongoAttributesDestination{}

	s.App = o.App
	s.Component = o.Component
	s.Host = o.Host
	s.Ip = o.Ip
	s.Labels = o.Labels

	return s, nil
}

// SetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *Destination) SetBSON(raw bson.Raw) error {

	if o == nil || raw.Kind == bson.ElementNil {
		return bson.ErrSetZero
	}

	s := &mongoAttributesDestination{}
	if err := raw.Unmarshal(s); err != nil {
		return err
	}

	o.App = s.App
	o.Component = s.Component
	o.Host = s.Host
	o.Ip = s.Ip
	o.Labels = s.Labels

	return nil
}

// BleveType implements the bleve.Classifier Interface.
func (o *Destination) BleveType() string {

	return "destination"
}

// DeepCopy returns a deep copy if the Destination.
func (o *Destination) DeepCopy() *Destination {

	if o == nil {
		return nil
	}

	out := &Destination{}
	o.DeepCopyInto(out)

	return out
}

// DeepCopyInto copies the receiver into the given *Destination.
func (o *Destination) DeepCopyInto(out *Destination) {

	target, err := copystructure.Copy(o)
	if err != nil {
		panic(fmt.Sprintf("Unable to deepcopy Destination: %s", err))
	}

	*out = *target.(*Destination)
}

// Validate valides the current information stored into the structure.
func (o *Destination) Validate() error {

	errors := elemental.Errors{}
	requiredErrors := elemental.Errors{}

	if err := elemental.ValidateRequiredString("host", o.Host); err != nil {
		requiredErrors = requiredErrors.Append(err)
	}

	if len(requiredErrors) > 0 {
		return requiredErrors
	}

	if len(errors) > 0 {
		return errors
	}

	return nil
}

// SpecificationForAttribute returns the AttributeSpecification for the given attribute name key.
func (*Destination) SpecificationForAttribute(name string) elemental.AttributeSpecification {

	if v, ok := DestinationAttributesMap[name]; ok {
		return v
	}

	// We could not find it, so let's check on the lower case indexed spec map
	return DestinationLowerCaseAttributesMap[name]
}

// AttributeSpecifications returns the full attribute specifications map.
func (*Destination) AttributeSpecifications() map[string]elemental.AttributeSpecification {

	return DestinationAttributesMap
}

// ValueForAttribute returns the value for the given attribute.
// This is a very advanced function that you should not need but in some
// very specific use cases.
func (o *Destination) ValueForAttribute(name string) any {

	switch name {
	case "app":
		return o.App
	case "component":
		return o.Component
	case "host":
		return o.Host
	case "ip":
		return o.Ip
	case "labels":
		return o.Labels
	}

	return nil
}

// DestinationAttributesMap represents the map of attribute for Destination.
var DestinationAttributesMap = map[string]elemental.AttributeSpecification{
	"App": {
		AllowedChoices: []string{},
		BSONFieldName:  "app",
		ConvertedName:  "App",
		Description:    `The name of the application that the domain belongs to.`,
		Exposed:        true,
		Name:           "app",
		Stored:         true,
		Type:           "string",
	},
	"Component": {
		AllowedChoices: []string{},
		BSONFieldName:  "component",
		ConvertedName:  "Component",
		Description:    `The component of the application that the domain belongs to.`,
		Exposed:        true,
		Name:           "component",
		Stored:         true,
		Type:           "string",
	},
	"Host": {
		AllowedChoices: []string{},
		BSONFieldName:  "host",
		ConvertedName:  "Host",
		Description:    `The host name of the request.`,
		Exposed:        true,
		Name:           "host",
		Required:       true,
		Stored:         true,
		Type:           "string",
	},
	"Ip": {
		AllowedChoices: []string{},
		BSONFieldName:  "ip",
		ConvertedName:  "Ip",
		Description:    `The destination IP address of the request.`,
		Exposed:        true,
		Name:           "ip",
		Stored:         true,
		Type:           "string",
	},
	"Labels": {
		AllowedChoices: []string{},
		BSONFieldName:  "labels",
		ConvertedName:  "Labels",
		Description:    `The list of labels attached to the application request destination.`,
		Exposed:        true,
		Name:           "labels",
		Stored:         true,
		SubType:        "string",
		Type:           "list",
	},
}

// DestinationLowerCaseAttributesMap represents the map of attribute for Destination.
var DestinationLowerCaseAttributesMap = map[string]elemental.AttributeSpecification{
	"app": {
		AllowedChoices: []string{},
		BSONFieldName:  "app",
		ConvertedName:  "App",
		Description:    `The name of the application that the domain belongs to.`,
		Exposed:        true,
		Name:           "app",
		Stored:         true,
		Type:           "string",
	},
	"component": {
		AllowedChoices: []string{},
		BSONFieldName:  "component",
		ConvertedName:  "Component",
		Description:    `The component of the application that the domain belongs to.`,
		Exposed:        true,
		Name:           "component",
		Stored:         true,
		Type:           "string",
	},
	"host": {
		AllowedChoices: []string{},
		BSONFieldName:  "host",
		ConvertedName:  "Host",
		Description:    `The host name of the request.`,
		Exposed:        true,
		Name:           "host",
		Required:       true,
		Stored:         true,
		Type:           "string",
	},
	"ip": {
		AllowedChoices: []string{},
		BSONFieldName:  "ip",
		ConvertedName:  "Ip",
		Description:    `The destination IP address of the request.`,
		Exposed:        true,
		Name:           "ip",
		Stored:         true,
		Type:           "string",
	},
	"labels": {
		AllowedChoices: []string{},
		BSONFieldName:  "labels",
		ConvertedName:  "Labels",
		Description:    `The list of labels attached to the application request destination.`,
		Exposed:        true,
		Name:           "labels",
		Stored:         true,
		SubType:        "string",
		Type:           "list",
	},
}

type mongoAttributesDestination struct {
	App       string   `bson:"app,omitempty"`
	Component string   `bson:"component,omitempty"`
	Host      string   `bson:"host"`
	Ip        string   `bson:"ip,omitempty"`
	Labels    []string `bson:"labels,omitempty"`
}
