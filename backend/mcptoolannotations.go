// Code generated by elegen. DO NOT EDIT.
// Source: go.acuvity.ai/elemental (templates/model.gotpl)

package api

import (
	"fmt"

	"github.com/globalsign/mgo/bson"
	"github.com/mitchellh/copystructure"
	"go.acuvity.ai/elemental"
)

// MCPToolAnnotations represents the model of a mcptoolannotations
type MCPToolAnnotations struct {
	// If true, the tool may perform destructive updates.
	DestructiveHint bool `json:"destructiveHint,omitempty" msgpack:"destructiveHint,omitempty" bson:"destructivehint,omitempty" mapstructure:"destructiveHint,omitempty"`

	// If true, repeated calls with same args have no additional effect.
	IdempotentHint bool `json:"idempotentHint,omitempty" msgpack:"idempotentHint,omitempty" bson:"idempotenthint,omitempty" mapstructure:"idempotentHint,omitempty"`

	// If true, tool interacts with external entities.
	OpenWorldHint bool `json:"openWorldHint,omitempty" msgpack:"openWorldHint,omitempty" bson:"openworldhint,omitempty" mapstructure:"openWorldHint,omitempty"`

	// If true, the tool does not modify its environment.
	ReadOnlyHint bool `json:"readOnlyHint,omitempty" msgpack:"readOnlyHint,omitempty" bson:"readonlyhint,omitempty" mapstructure:"readOnlyHint,omitempty"`

	// Human-readable title for the tool.
	Title string `json:"title,omitempty" msgpack:"title,omitempty" bson:"title,omitempty" mapstructure:"title,omitempty"`

	ModelVersion int `json:"-" msgpack:"-" bson:"_modelversion"`
}

// NewMCPToolAnnotations returns a new *MCPToolAnnotations
func NewMCPToolAnnotations() *MCPToolAnnotations {

	return &MCPToolAnnotations{
		ModelVersion: 1,
	}
}

// GetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *MCPToolAnnotations) GetBSON() (any, error) {

	if o == nil {
		return nil, nil
	}

	s := &mongoAttributesMCPToolAnnotations{}

	s.DestructiveHint = o.DestructiveHint
	s.IdempotentHint = o.IdempotentHint
	s.OpenWorldHint = o.OpenWorldHint
	s.ReadOnlyHint = o.ReadOnlyHint
	s.Title = o.Title

	return s, nil
}

// SetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *MCPToolAnnotations) SetBSON(raw bson.Raw) error {

	if o == nil {
		return nil
	}

	s := &mongoAttributesMCPToolAnnotations{}
	if err := raw.Unmarshal(s); err != nil {
		return err
	}

	o.DestructiveHint = s.DestructiveHint
	o.IdempotentHint = s.IdempotentHint
	o.OpenWorldHint = s.OpenWorldHint
	o.ReadOnlyHint = s.ReadOnlyHint
	o.Title = s.Title

	return nil
}

// BleveType implements the bleve.Classifier Interface.
func (o *MCPToolAnnotations) BleveType() string {

	return "mcptoolannotations"
}

// DeepCopy returns a deep copy if the MCPToolAnnotations.
func (o *MCPToolAnnotations) DeepCopy() *MCPToolAnnotations {

	if o == nil {
		return nil
	}

	out := &MCPToolAnnotations{}
	o.DeepCopyInto(out)

	return out
}

// DeepCopyInto copies the receiver into the given *MCPToolAnnotations.
func (o *MCPToolAnnotations) DeepCopyInto(out *MCPToolAnnotations) {

	target, err := copystructure.Copy(o)
	if err != nil {
		panic(fmt.Sprintf("Unable to deepcopy MCPToolAnnotations: %s", err))
	}

	*out = *target.(*MCPToolAnnotations)
}

// Validate valides the current information stored into the structure.
func (o *MCPToolAnnotations) Validate() error {

	errors := elemental.Errors{}
	requiredErrors := elemental.Errors{}

	if len(requiredErrors) > 0 {
		return requiredErrors
	}

	if len(errors) > 0 {
		return errors
	}

	return nil
}

// SpecificationForAttribute returns the AttributeSpecification for the given attribute name key.
func (*MCPToolAnnotations) SpecificationForAttribute(name string) elemental.AttributeSpecification {

	if v, ok := MCPToolAnnotationsAttributesMap[name]; ok {
		return v
	}

	// We could not find it, so let's check on the lower case indexed spec map
	return MCPToolAnnotationsLowerCaseAttributesMap[name]
}

// AttributeSpecifications returns the full attribute specifications map.
func (*MCPToolAnnotations) AttributeSpecifications() map[string]elemental.AttributeSpecification {

	return MCPToolAnnotationsAttributesMap
}

// ValueForAttribute returns the value for the given attribute.
// This is a very advanced function that you should not need but in some
// very specific use cases.
func (o *MCPToolAnnotations) ValueForAttribute(name string) any {

	switch name {
	case "destructiveHint":
		return o.DestructiveHint
	case "idempotentHint":
		return o.IdempotentHint
	case "openWorldHint":
		return o.OpenWorldHint
	case "readOnlyHint":
		return o.ReadOnlyHint
	case "title":
		return o.Title
	}

	return nil
}

// MCPToolAnnotationsAttributesMap represents the map of attribute for MCPToolAnnotations.
var MCPToolAnnotationsAttributesMap = map[string]elemental.AttributeSpecification{
	"DestructiveHint": {
		AllowedChoices: []string{},
		BSONFieldName:  "destructivehint",
		ConvertedName:  "DestructiveHint",
		Description:    `If true, the tool may perform destructive updates.`,
		Exposed:        true,
		Name:           "destructiveHint",
		Stored:         true,
		Type:           "boolean",
	},
	"IdempotentHint": {
		AllowedChoices: []string{},
		BSONFieldName:  "idempotenthint",
		ConvertedName:  "IdempotentHint",
		Description:    `If true, repeated calls with same args have no additional effect.`,
		Exposed:        true,
		Name:           "idempotentHint",
		Stored:         true,
		Type:           "boolean",
	},
	"OpenWorldHint": {
		AllowedChoices: []string{},
		BSONFieldName:  "openworldhint",
		ConvertedName:  "OpenWorldHint",
		Description:    `If true, tool interacts with external entities.`,
		Exposed:        true,
		Name:           "openWorldHint",
		Stored:         true,
		Type:           "boolean",
	},
	"ReadOnlyHint": {
		AllowedChoices: []string{},
		BSONFieldName:  "readonlyhint",
		ConvertedName:  "ReadOnlyHint",
		Description:    `If true, the tool does not modify its environment.`,
		Exposed:        true,
		Name:           "readOnlyHint",
		Stored:         true,
		Type:           "boolean",
	},
	"Title": {
		AllowedChoices: []string{},
		BSONFieldName:  "title",
		ConvertedName:  "Title",
		Description:    `Human-readable title for the tool.`,
		Exposed:        true,
		Name:           "title",
		Stored:         true,
		Type:           "string",
	},
}

// MCPToolAnnotationsLowerCaseAttributesMap represents the map of attribute for MCPToolAnnotations.
var MCPToolAnnotationsLowerCaseAttributesMap = map[string]elemental.AttributeSpecification{
	"destructivehint": {
		AllowedChoices: []string{},
		BSONFieldName:  "destructivehint",
		ConvertedName:  "DestructiveHint",
		Description:    `If true, the tool may perform destructive updates.`,
		Exposed:        true,
		Name:           "destructiveHint",
		Stored:         true,
		Type:           "boolean",
	},
	"idempotenthint": {
		AllowedChoices: []string{},
		BSONFieldName:  "idempotenthint",
		ConvertedName:  "IdempotentHint",
		Description:    `If true, repeated calls with same args have no additional effect.`,
		Exposed:        true,
		Name:           "idempotentHint",
		Stored:         true,
		Type:           "boolean",
	},
	"openworldhint": {
		AllowedChoices: []string{},
		BSONFieldName:  "openworldhint",
		ConvertedName:  "OpenWorldHint",
		Description:    `If true, tool interacts with external entities.`,
		Exposed:        true,
		Name:           "openWorldHint",
		Stored:         true,
		Type:           "boolean",
	},
	"readonlyhint": {
		AllowedChoices: []string{},
		BSONFieldName:  "readonlyhint",
		ConvertedName:  "ReadOnlyHint",
		Description:    `If true, the tool does not modify its environment.`,
		Exposed:        true,
		Name:           "readOnlyHint",
		Stored:         true,
		Type:           "boolean",
	},
	"title": {
		AllowedChoices: []string{},
		BSONFieldName:  "title",
		ConvertedName:  "Title",
		Description:    `Human-readable title for the tool.`,
		Exposed:        true,
		Name:           "title",
		Stored:         true,
		Type:           "string",
	},
}

type mongoAttributesMCPToolAnnotations struct {
	DestructiveHint bool   `bson:"destructivehint,omitempty"`
	IdempotentHint  bool   `bson:"idempotenthint,omitempty"`
	OpenWorldHint   bool   `bson:"openworldhint,omitempty"`
	ReadOnlyHint    bool   `bson:"readonlyhint,omitempty"`
	Title           string `bson:"title,omitempty"`
}
