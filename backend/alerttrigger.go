// Code generated by elegen. DO NOT EDIT.
// Source: go.acuvity.ai/elemental (templates/model.gotpl)

package api

import (
	"fmt"

	"github.com/globalsign/mgo/bson"
	"github.com/mitchellh/copystructure"
	"go.acuvity.ai/elemental"
)

// AlertTriggerIdentity represents the Identity of the object.
var AlertTriggerIdentity = elemental.Identity{
	Name:     "alerttrigger",
	Category: "alerttriggers",
	Package:  "avi",
	Private:  false,
}

// AlertTriggersList represents a list of AlertTriggers
type AlertTriggersList []*AlertTrigger

// Identity returns the identity of the objects in the list.
func (o AlertTriggersList) Identity() elemental.Identity {

	return AlertTriggerIdentity
}

// Copy returns a pointer to a copy the AlertTriggersList.
func (o AlertTriggersList) Copy() elemental.Identifiables {

	out := append(AlertTriggersList{}, o...)
	return &out
}

// Append appends the objects to the a new copy of the AlertTriggersList.
func (o AlertTriggersList) Append(objects ...elemental.Identifiable) elemental.Identifiables {

	out := append(AlertTriggersList{}, o...)
	for _, obj := range objects {
		out = append(out, obj.(*AlertTrigger))
	}

	return out
}

// List converts the object to an elemental.IdentifiablesList.
func (o AlertTriggersList) List() elemental.IdentifiablesList {

	out := make(elemental.IdentifiablesList, len(o))
	for i := 0; i < len(o); i++ {
		out[i] = o[i]
	}

	return out
}

// DefaultOrder returns the default ordering fields of the content.
func (o AlertTriggersList) DefaultOrder() []string {

	return []string{}
}

// ToSparse returns the AlertTriggersList converted to SparseAlertTriggersList.
// Objects in the list will only contain the given fields. No field means entire field set.
func (o AlertTriggersList) ToSparse(fields ...string) elemental.Identifiables {

	out := make(SparseAlertTriggersList, len(o))
	for i := 0; i < len(o); i++ {
		out[i] = o[i].ToSparse(fields...).(*SparseAlertTrigger)
	}

	return out
}

// Version returns the version of the content.
func (o AlertTriggersList) Version() int {

	return 1
}

// AlertTrigger represents the model of a alerttrigger
type AlertTrigger struct {
	// What time window to look for an alert event.
	Interval string `json:"interval" msgpack:"interval" bson:"interval" mapstructure:"interval,omitempty"`

	// The number of times an alert event is seen to cause a trigger.
	Occurrences int `json:"occurrences" msgpack:"occurrences" bson:"occurrences" mapstructure:"occurrences,omitempty"`

	ModelVersion int `json:"-" msgpack:"-" bson:"_modelversion"`
}

// NewAlertTrigger returns a new *AlertTrigger
func NewAlertTrigger() *AlertTrigger {

	return &AlertTrigger{
		ModelVersion: 1,
		Interval:     "24h",
		Occurrences:  1,
	}
}

// Identity returns the Identity of the object.
func (o *AlertTrigger) Identity() elemental.Identity {

	return AlertTriggerIdentity
}

// Identifier returns the value of the object's unique identifier.
func (o *AlertTrigger) Identifier() string {

	return ""
}

// SetIdentifier sets the value of the object's unique identifier.
func (o *AlertTrigger) SetIdentifier(id string) {

}

// GetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *AlertTrigger) GetBSON() (any, error) {

	if o == nil {
		return nil, nil
	}

	s := &mongoAttributesAlertTrigger{}

	s.Interval = o.Interval
	s.Occurrences = o.Occurrences

	return s, nil
}

// SetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *AlertTrigger) SetBSON(raw bson.Raw) error {

	if o == nil {
		return nil
	}

	s := &mongoAttributesAlertTrigger{}
	if err := raw.Unmarshal(s); err != nil {
		return err
	}

	o.Interval = s.Interval
	o.Occurrences = s.Occurrences

	return nil
}

// Version returns the hardcoded version of the model.
func (o *AlertTrigger) Version() int {

	return 1
}

// BleveType implements the bleve.Classifier Interface.
func (o *AlertTrigger) BleveType() string {

	return "alerttrigger"
}

// DefaultOrder returns the list of default ordering fields.
func (o *AlertTrigger) DefaultOrder() []string {

	return []string{}
}

// Doc returns the documentation for the object
func (o *AlertTrigger) Doc() string {

	return `Represents the criteria to trigger an alert notification.`
}

func (o *AlertTrigger) String() string {

	return fmt.Sprintf("<%s:%s>", o.Identity().Name, o.Identifier())
}

// ToSparse returns the sparse version of the model.
// The returned object will only contain the given fields. No field means entire field set.
func (o *AlertTrigger) ToSparse(fields ...string) elemental.SparseIdentifiable {

	if len(fields) == 0 {
		// nolint: goimports
		return &SparseAlertTrigger{
			Interval:    &o.Interval,
			Occurrences: &o.Occurrences,
		}
	}

	sp := &SparseAlertTrigger{}
	for _, f := range fields {
		switch f {
		case "interval":
			sp.Interval = &(o.Interval)
		case "occurrences":
			sp.Occurrences = &(o.Occurrences)
		}
	}

	return sp
}

// Patch apply the non nil value of a *SparseAlertTrigger to the object.
func (o *AlertTrigger) Patch(sparse elemental.SparseIdentifiable) {
	if !sparse.Identity().IsEqual(o.Identity()) {
		panic("cannot patch from a parse with different identity")
	}

	so := sparse.(*SparseAlertTrigger)
	if so.Interval != nil {
		o.Interval = *so.Interval
	}
	if so.Occurrences != nil {
		o.Occurrences = *so.Occurrences
	}
}

// DeepCopy returns a deep copy if the AlertTrigger.
func (o *AlertTrigger) DeepCopy() *AlertTrigger {

	if o == nil {
		return nil
	}

	out := &AlertTrigger{}
	o.DeepCopyInto(out)

	return out
}

// DeepCopyInto copies the receiver into the given *AlertTrigger.
func (o *AlertTrigger) DeepCopyInto(out *AlertTrigger) {

	target, err := copystructure.Copy(o)
	if err != nil {
		panic(fmt.Sprintf("Unable to deepcopy AlertTrigger: %s", err))
	}

	*out = *target.(*AlertTrigger)
}

// Validate valides the current information stored into the structure.
func (o *AlertTrigger) Validate() error {

	errors := elemental.Errors{}
	requiredErrors := elemental.Errors{}

	if err := elemental.ValidateRequiredString("interval", o.Interval); err != nil {
		requiredErrors = requiredErrors.Append(err)
	}

	if err := ValidateDuration("interval", o.Interval); err != nil {
		errors = errors.Append(err)
	}

	if err := elemental.ValidateRequiredInt("occurrences", o.Occurrences); err != nil {
		requiredErrors = requiredErrors.Append(err)
	}

	if err := elemental.ValidateMinimumInt("occurrences", o.Occurrences, int(1), false); err != nil {
		errors = errors.Append(err)
	}

	if len(requiredErrors) > 0 {
		return requiredErrors
	}

	if len(errors) > 0 {
		return errors
	}

	return nil
}

// SpecificationForAttribute returns the AttributeSpecification for the given attribute name key.
func (*AlertTrigger) SpecificationForAttribute(name string) elemental.AttributeSpecification {

	if v, ok := AlertTriggerAttributesMap[name]; ok {
		return v
	}

	// We could not find it, so let's check on the lower case indexed spec map
	return AlertTriggerLowerCaseAttributesMap[name]
}

// AttributeSpecifications returns the full attribute specifications map.
func (*AlertTrigger) AttributeSpecifications() map[string]elemental.AttributeSpecification {

	return AlertTriggerAttributesMap
}

// ValueForAttribute returns the value for the given attribute.
// This is a very advanced function that you should not need but in some
// very specific use cases.
func (o *AlertTrigger) ValueForAttribute(name string) any {

	switch name {
	case "interval":
		return o.Interval
	case "occurrences":
		return o.Occurrences
	}

	return nil
}

// AlertTriggerAttributesMap represents the map of attribute for AlertTrigger.
var AlertTriggerAttributesMap = map[string]elemental.AttributeSpecification{
	"Interval": {
		AllowedChoices: []string{},
		BSONFieldName:  "interval",
		ConvertedName:  "Interval",
		DefaultValue:   "24h",
		Description:    `What time window to look for an alert event.`,
		Exposed:        true,
		Name:           "interval",
		Required:       true,
		Stored:         true,
		Type:           "string",
	},
	"Occurrences": {
		AllowedChoices: []string{},
		BSONFieldName:  "occurrences",
		ConvertedName:  "Occurrences",
		DefaultValue:   1,
		Description:    `The number of times an alert event is seen to cause a trigger.`,
		Exposed:        true,
		MinValue:       1,
		Name:           "occurrences",
		Required:       true,
		Stored:         true,
		Type:           "integer",
	},
}

// AlertTriggerLowerCaseAttributesMap represents the map of attribute for AlertTrigger.
var AlertTriggerLowerCaseAttributesMap = map[string]elemental.AttributeSpecification{
	"interval": {
		AllowedChoices: []string{},
		BSONFieldName:  "interval",
		ConvertedName:  "Interval",
		DefaultValue:   "24h",
		Description:    `What time window to look for an alert event.`,
		Exposed:        true,
		Name:           "interval",
		Required:       true,
		Stored:         true,
		Type:           "string",
	},
	"occurrences": {
		AllowedChoices: []string{},
		BSONFieldName:  "occurrences",
		ConvertedName:  "Occurrences",
		DefaultValue:   1,
		Description:    `The number of times an alert event is seen to cause a trigger.`,
		Exposed:        true,
		MinValue:       1,
		Name:           "occurrences",
		Required:       true,
		Stored:         true,
		Type:           "integer",
	},
}

// SparseAlertTriggersList represents a list of SparseAlertTriggers
type SparseAlertTriggersList []*SparseAlertTrigger

// Identity returns the identity of the objects in the list.
func (o SparseAlertTriggersList) Identity() elemental.Identity {

	return AlertTriggerIdentity
}

// Copy returns a pointer to a copy the SparseAlertTriggersList.
func (o SparseAlertTriggersList) Copy() elemental.Identifiables {

	copy := append(SparseAlertTriggersList{}, o...)
	return &copy
}

// Append appends the objects to the a new copy of the SparseAlertTriggersList.
func (o SparseAlertTriggersList) Append(objects ...elemental.Identifiable) elemental.Identifiables {

	out := append(SparseAlertTriggersList{}, o...)
	for _, obj := range objects {
		out = append(out, obj.(*SparseAlertTrigger))
	}

	return out
}

// List converts the object to an elemental.IdentifiablesList.
func (o SparseAlertTriggersList) List() elemental.IdentifiablesList {

	out := make(elemental.IdentifiablesList, len(o))
	for i := 0; i < len(o); i++ {
		out[i] = o[i]
	}

	return out
}

// DefaultOrder returns the default ordering fields of the content.
func (o SparseAlertTriggersList) DefaultOrder() []string {

	return []string{}
}

// ToPlain returns the SparseAlertTriggersList converted to AlertTriggersList.
func (o SparseAlertTriggersList) ToPlain() elemental.IdentifiablesList {

	out := make(elemental.IdentifiablesList, len(o))
	for i := 0; i < len(o); i++ {
		out[i] = o[i].ToPlain()
	}

	return out
}

// Version returns the version of the content.
func (o SparseAlertTriggersList) Version() int {

	return 1
}

// SparseAlertTrigger represents the sparse version of a alerttrigger.
type SparseAlertTrigger struct {
	// What time window to look for an alert event.
	Interval *string `json:"interval,omitempty" msgpack:"interval,omitempty" bson:"interval,omitempty" mapstructure:"interval,omitempty"`

	// The number of times an alert event is seen to cause a trigger.
	Occurrences *int `json:"occurrences,omitempty" msgpack:"occurrences,omitempty" bson:"occurrences,omitempty" mapstructure:"occurrences,omitempty"`

	ModelVersion int `json:"-" msgpack:"-" bson:"_modelversion"`
}

// NewSparseAlertTrigger returns a new  SparseAlertTrigger.
func NewSparseAlertTrigger() *SparseAlertTrigger {
	return &SparseAlertTrigger{}
}

// Identity returns the Identity of the sparse object.
func (o *SparseAlertTrigger) Identity() elemental.Identity {

	return AlertTriggerIdentity
}

// Identifier returns the value of the sparse object's unique identifier.
func (o *SparseAlertTrigger) Identifier() string {

	return ""
}

// SetIdentifier sets the value of the sparse object's unique identifier.
func (o *SparseAlertTrigger) SetIdentifier(id string) {

}

// GetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *SparseAlertTrigger) GetBSON() (any, error) {

	if o == nil {
		return nil, nil
	}

	s := &mongoAttributesSparseAlertTrigger{}

	if o.Interval != nil {
		s.Interval = o.Interval
	}
	if o.Occurrences != nil {
		s.Occurrences = o.Occurrences
	}

	return s, nil
}

// SetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *SparseAlertTrigger) SetBSON(raw bson.Raw) error {

	if o == nil {
		return nil
	}

	s := &mongoAttributesSparseAlertTrigger{}
	if err := raw.Unmarshal(s); err != nil {
		return err
	}

	if s.Interval != nil {
		o.Interval = s.Interval
	}
	if s.Occurrences != nil {
		o.Occurrences = s.Occurrences
	}

	return nil
}

// Version returns the hardcoded version of the model.
func (o *SparseAlertTrigger) Version() int {

	return 1
}

// ToPlain returns the plain version of the sparse model.
func (o *SparseAlertTrigger) ToPlain() elemental.PlainIdentifiable {

	out := NewAlertTrigger()
	if o.Interval != nil {
		out.Interval = *o.Interval
	}
	if o.Occurrences != nil {
		out.Occurrences = *o.Occurrences
	}

	return out
}

// DeepCopy returns a deep copy if the SparseAlertTrigger.
func (o *SparseAlertTrigger) DeepCopy() *SparseAlertTrigger {

	if o == nil {
		return nil
	}

	out := &SparseAlertTrigger{}
	o.DeepCopyInto(out)

	return out
}

// DeepCopyInto copies the receiver into the given *SparseAlertTrigger.
func (o *SparseAlertTrigger) DeepCopyInto(out *SparseAlertTrigger) {

	target, err := copystructure.Copy(o)
	if err != nil {
		panic(fmt.Sprintf("Unable to deepcopy SparseAlertTrigger: %s", err))
	}

	*out = *target.(*SparseAlertTrigger)
}

type mongoAttributesAlertTrigger struct {
	Interval    string `bson:"interval"`
	Occurrences int    `bson:"occurrences"`
}
type mongoAttributesSparseAlertTrigger struct {
	Interval    *string `bson:"interval,omitempty"`
	Occurrences *int    `bson:"occurrences,omitempty"`
}
