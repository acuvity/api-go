// Code generated by elegen. DO NOT EDIT.
// Source: go.acuvity.ai/elemental (templates/model.gotpl)

package api

import (
	"fmt"

	"github.com/globalsign/mgo/bson"
	"github.com/mitchellh/copystructure"
	"go.acuvity.ai/elemental"
)

// AIDSection represents the model of a aidsection
type AIDSection struct {
	// The citations used to compute the section.
	Citations []*AIDCitation `json:"citations,omitempty" msgpack:"citations,omitempty" bson:"citations,omitempty" mapstructure:"citations,omitempty"`

	// The description of the section.
	Description string `json:"description,omitempty" msgpack:"description,omitempty" bson:"description,omitempty" mapstructure:"description,omitempty"`

	// The name of the section.
	Name string `json:"name,omitempty" msgpack:"name,omitempty" bson:"name,omitempty" mapstructure:"name,omitempty"`

	// The risk associated to the section.
	Risk *AIDRisk `json:"risk,omitempty" msgpack:"risk,omitempty" bson:"risk,omitempty" mapstructure:"risk,omitempty"`

	ModelVersion int `json:"-" msgpack:"-" bson:"_modelversion"`
}

// NewAIDSection returns a new *AIDSection
func NewAIDSection() *AIDSection {

	return &AIDSection{
		ModelVersion: 1,
	}
}

// GetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *AIDSection) GetBSON() (any, error) {

	if o == nil {
		return nil, nil
	}

	s := &mongoAttributesAIDSection{}

	s.Citations = o.Citations
	s.Description = o.Description
	s.Name = o.Name
	s.Risk = o.Risk

	return s, nil
}

// SetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *AIDSection) SetBSON(raw bson.Raw) error {

	if o == nil || raw.Kind == bson.ElementNil {
		return bson.ErrSetZero
	}

	s := &mongoAttributesAIDSection{}
	if err := raw.Unmarshal(s); err != nil {
		return err
	}

	o.Citations = s.Citations
	o.Description = s.Description
	o.Name = s.Name
	o.Risk = s.Risk

	return nil
}

// BleveType implements the bleve.Classifier Interface.
func (o *AIDSection) BleveType() string {

	return "aidsection"
}

// DeepCopy returns a deep copy if the AIDSection.
func (o *AIDSection) DeepCopy() *AIDSection {

	if o == nil {
		return nil
	}

	out := &AIDSection{}
	o.DeepCopyInto(out)

	return out
}

// DeepCopyInto copies the receiver into the given *AIDSection.
func (o *AIDSection) DeepCopyInto(out *AIDSection) {

	target, err := copystructure.Copy(o)
	if err != nil {
		panic(fmt.Sprintf("Unable to deepcopy AIDSection: %s", err))
	}

	*out = *target.(*AIDSection)
}

// Validate valides the current information stored into the structure.
func (o *AIDSection) Validate() error {

	errors := elemental.Errors{}
	requiredErrors := elemental.Errors{}

	for _, sub := range o.Citations {
		if sub == nil {
			continue
		}
		elemental.ResetDefaultForZeroValues(sub)
		if err := sub.Validate(); err != nil {
			errors = errors.Append(err)
		}
	}

	if err := elemental.ValidateRequiredString("name", o.Name); err != nil {
		requiredErrors = requiredErrors.Append(err)
	}

	if o.Risk != nil {
		elemental.ResetDefaultForZeroValues(o.Risk)
		if err := o.Risk.Validate(); err != nil {
			errors = errors.Append(err)
		}
	}

	if len(requiredErrors) > 0 {
		return requiredErrors
	}

	if len(errors) > 0 {
		return errors
	}

	return nil
}

// SpecificationForAttribute returns the AttributeSpecification for the given attribute name key.
func (*AIDSection) SpecificationForAttribute(name string) elemental.AttributeSpecification {

	if v, ok := AIDSectionAttributesMap[name]; ok {
		return v
	}

	// We could not find it, so let's check on the lower case indexed spec map
	return AIDSectionLowerCaseAttributesMap[name]
}

// AttributeSpecifications returns the full attribute specifications map.
func (*AIDSection) AttributeSpecifications() map[string]elemental.AttributeSpecification {

	return AIDSectionAttributesMap
}

// ValueForAttribute returns the value for the given attribute.
// This is a very advanced function that you should not need but in some
// very specific use cases.
func (o *AIDSection) ValueForAttribute(name string) any {

	switch name {
	case "citations":
		return o.Citations
	case "description":
		return o.Description
	case "name":
		return o.Name
	case "risk":
		return o.Risk
	}

	return nil
}

// AIDSectionAttributesMap represents the map of attribute for AIDSection.
var AIDSectionAttributesMap = map[string]elemental.AttributeSpecification{
	"Citations": {
		AllowedChoices: []string{},
		BSONFieldName:  "citations",
		ConvertedName:  "Citations",
		Description:    `The citations used to compute the section.`,
		Exposed:        true,
		Name:           "citations",
		Stored:         true,
		SubType:        "aidcitation",
		Type:           "refList",
	},
	"Description": {
		AllowedChoices: []string{},
		BSONFieldName:  "description",
		ConvertedName:  "Description",
		Description:    `The description of the section.`,
		Exposed:        true,
		Name:           "description",
		Stored:         true,
		Type:           "string",
	},
	"Name": {
		AllowedChoices: []string{},
		BSONFieldName:  "name",
		ConvertedName:  "Name",
		Description:    `The name of the section.`,
		Exposed:        true,
		Name:           "name",
		Required:       true,
		Stored:         true,
		Type:           "string",
	},
	"Risk": {
		AllowedChoices: []string{},
		BSONFieldName:  "risk",
		ConvertedName:  "Risk",
		Description:    `The risk associated to the section.`,
		Exposed:        true,
		Name:           "risk",
		Stored:         true,
		SubType:        "aidrisk",
		Type:           "ref",
	},
}

// AIDSectionLowerCaseAttributesMap represents the map of attribute for AIDSection.
var AIDSectionLowerCaseAttributesMap = map[string]elemental.AttributeSpecification{
	"citations": {
		AllowedChoices: []string{},
		BSONFieldName:  "citations",
		ConvertedName:  "Citations",
		Description:    `The citations used to compute the section.`,
		Exposed:        true,
		Name:           "citations",
		Stored:         true,
		SubType:        "aidcitation",
		Type:           "refList",
	},
	"description": {
		AllowedChoices: []string{},
		BSONFieldName:  "description",
		ConvertedName:  "Description",
		Description:    `The description of the section.`,
		Exposed:        true,
		Name:           "description",
		Stored:         true,
		Type:           "string",
	},
	"name": {
		AllowedChoices: []string{},
		BSONFieldName:  "name",
		ConvertedName:  "Name",
		Description:    `The name of the section.`,
		Exposed:        true,
		Name:           "name",
		Required:       true,
		Stored:         true,
		Type:           "string",
	},
	"risk": {
		AllowedChoices: []string{},
		BSONFieldName:  "risk",
		ConvertedName:  "Risk",
		Description:    `The risk associated to the section.`,
		Exposed:        true,
		Name:           "risk",
		Stored:         true,
		SubType:        "aidrisk",
		Type:           "ref",
	},
}

type mongoAttributesAIDSection struct {
	Citations   []*AIDCitation `bson:"citations,omitempty"`
	Description string         `bson:"description,omitempty"`
	Name        string         `bson:"name,omitempty"`
	Risk        *AIDRisk       `bson:"risk,omitempty"`
}
