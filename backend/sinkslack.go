// Code generated by elegen. DO NOT EDIT.
// Source: go.acuvity.ai/elemental (templates/model.gotpl)

package api

import (
	"fmt"

	"github.com/globalsign/mgo/bson"
	"github.com/mitchellh/copystructure"
	"go.acuvity.ai/elemental"
)

// SinkSlackIdentity represents the Identity of the object.
var SinkSlackIdentity = elemental.Identity{
	Name:     "sinkslack",
	Category: "sinkslack",
	Package:  "avi",
	Private:  false,
}

// SinkSlacksList represents a list of SinkSlacks
type SinkSlacksList []*SinkSlack

// Identity returns the identity of the objects in the list.
func (o SinkSlacksList) Identity() elemental.Identity {

	return SinkSlackIdentity
}

// Copy returns a pointer to a copy the SinkSlacksList.
func (o SinkSlacksList) Copy() elemental.Identifiables {

	out := append(SinkSlacksList{}, o...)
	return &out
}

// Append appends the objects to the a new copy of the SinkSlacksList.
func (o SinkSlacksList) Append(objects ...elemental.Identifiable) elemental.Identifiables {

	out := append(SinkSlacksList{}, o...)
	for _, obj := range objects {
		out = append(out, obj.(*SinkSlack))
	}

	return out
}

// List converts the object to an elemental.IdentifiablesList.
func (o SinkSlacksList) List() elemental.IdentifiablesList {

	out := make(elemental.IdentifiablesList, len(o))
	for i := 0; i < len(o); i++ {
		out[i] = o[i]
	}

	return out
}

// DefaultOrder returns the default ordering fields of the content.
func (o SinkSlacksList) DefaultOrder() []string {

	return []string{}
}

// ToSparse returns the SinkSlacksList converted to SparseSinkSlacksList.
// Objects in the list will only contain the given fields. No field means entire field set.
func (o SinkSlacksList) ToSparse(fields ...string) elemental.Identifiables {

	out := make(SparseSinkSlacksList, len(o))
	for i := 0; i < len(o); i++ {
		out[i] = o[i].ToSparse(fields...).(*SparseSinkSlack)
	}

	return out
}

// Version returns the version of the content.
func (o SinkSlacksList) Version() int {

	return 1
}

// SinkSlack represents the model of a sinkslack
type SinkSlack struct {
	// The webhook URL to send the Slack messages to.
	WebhookURL string `json:"webhookURL" msgpack:"webhookURL" bson:"webhookurl" mapstructure:"webhookURL,omitempty"`

	ModelVersion int `json:"-" msgpack:"-" bson:"_modelversion"`
}

// NewSinkSlack returns a new *SinkSlack
func NewSinkSlack() *SinkSlack {

	return &SinkSlack{
		ModelVersion: 1,
	}
}

// Identity returns the Identity of the object.
func (o *SinkSlack) Identity() elemental.Identity {

	return SinkSlackIdentity
}

// Identifier returns the value of the object's unique identifier.
func (o *SinkSlack) Identifier() string {

	return ""
}

// SetIdentifier sets the value of the object's unique identifier.
func (o *SinkSlack) SetIdentifier(id string) {

}

// GetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *SinkSlack) GetBSON() (any, error) {

	if o == nil {
		return nil, nil
	}

	s := &mongoAttributesSinkSlack{}

	s.WebhookURL = o.WebhookURL

	return s, nil
}

// SetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *SinkSlack) SetBSON(raw bson.Raw) error {

	if o == nil {
		return nil
	}

	s := &mongoAttributesSinkSlack{}
	if err := raw.Unmarshal(s); err != nil {
		return err
	}

	o.WebhookURL = s.WebhookURL

	return nil
}

// Version returns the hardcoded version of the model.
func (o *SinkSlack) Version() int {

	return 1
}

// BleveType implements the bleve.Classifier Interface.
func (o *SinkSlack) BleveType() string {

	return "sinkslack"
}

// DefaultOrder returns the list of default ordering fields.
func (o *SinkSlack) DefaultOrder() []string {

	return []string{}
}

// Doc returns the documentation for the object
func (o *SinkSlack) Doc() string {

	return `Additional configuration for sending a Slack message.`
}

func (o *SinkSlack) String() string {

	return fmt.Sprintf("<%s:%s>", o.Identity().Name, o.Identifier())
}

// ToSparse returns the sparse version of the model.
// The returned object will only contain the given fields. No field means entire field set.
func (o *SinkSlack) ToSparse(fields ...string) elemental.SparseIdentifiable {

	if len(fields) == 0 {
		// nolint: goimports
		return &SparseSinkSlack{
			WebhookURL: &o.WebhookURL,
		}
	}

	sp := &SparseSinkSlack{}
	for _, f := range fields {
		switch f {
		case "webhookURL":
			sp.WebhookURL = &(o.WebhookURL)
		}
	}

	return sp
}

// EncryptAttributes encrypts the attributes marked as `encrypted` using the given encrypter.
func (o *SinkSlack) EncryptAttributes(encrypter elemental.AttributeEncrypter) (err error) {

	if o.WebhookURL, err = encrypter.EncryptString(o.WebhookURL); err != nil {
		return fmt.Errorf("unable to encrypt attribute 'WebhookURL' for 'SinkSlack' (%s): %s", o.Identifier(), err)
	}

	return nil
}

// DecryptAttributes decrypts the attributes marked as `encrypted` using the given decrypter.
func (o *SinkSlack) DecryptAttributes(encrypter elemental.AttributeEncrypter) (err error) {

	if o.WebhookURL, err = encrypter.DecryptString(o.WebhookURL); err != nil {
		return fmt.Errorf("unable to decrypt attribute 'WebhookURL' for 'SinkSlack' (%s): %s", o.Identifier(), err)
	}

	return nil
}

// Patch apply the non nil value of a *SparseSinkSlack to the object.
func (o *SinkSlack) Patch(sparse elemental.SparseIdentifiable) {
	if !sparse.Identity().IsEqual(o.Identity()) {
		panic("cannot patch from a parse with different identity")
	}

	so := sparse.(*SparseSinkSlack)
	if so.WebhookURL != nil {
		o.WebhookURL = *so.WebhookURL
	}
}

// DeepCopy returns a deep copy if the SinkSlack.
func (o *SinkSlack) DeepCopy() *SinkSlack {

	if o == nil {
		return nil
	}

	out := &SinkSlack{}
	o.DeepCopyInto(out)

	return out
}

// DeepCopyInto copies the receiver into the given *SinkSlack.
func (o *SinkSlack) DeepCopyInto(out *SinkSlack) {

	target, err := copystructure.Copy(o)
	if err != nil {
		panic(fmt.Sprintf("Unable to deepcopy SinkSlack: %s", err))
	}

	*out = *target.(*SinkSlack)
}

// Validate valides the current information stored into the structure.
func (o *SinkSlack) Validate() error {

	errors := elemental.Errors{}
	requiredErrors := elemental.Errors{}

	if len(requiredErrors) > 0 {
		return requiredErrors
	}

	if len(errors) > 0 {
		return errors
	}

	return nil
}

// SpecificationForAttribute returns the AttributeSpecification for the given attribute name key.
func (*SinkSlack) SpecificationForAttribute(name string) elemental.AttributeSpecification {

	if v, ok := SinkSlackAttributesMap[name]; ok {
		return v
	}

	// We could not find it, so let's check on the lower case indexed spec map
	return SinkSlackLowerCaseAttributesMap[name]
}

// AttributeSpecifications returns the full attribute specifications map.
func (*SinkSlack) AttributeSpecifications() map[string]elemental.AttributeSpecification {

	return SinkSlackAttributesMap
}

// ValueForAttribute returns the value for the given attribute.
// This is a very advanced function that you should not need but in some
// very specific use cases.
func (o *SinkSlack) ValueForAttribute(name string) any {

	switch name {
	case "webhookURL":
		return o.WebhookURL
	}

	return nil
}

// SinkSlackAttributesMap represents the map of attribute for SinkSlack.
var SinkSlackAttributesMap = map[string]elemental.AttributeSpecification{
	"WebhookURL": {
		AllowedChoices: []string{},
		BSONFieldName:  "webhookurl",
		ConvertedName:  "WebhookURL",
		Description:    `The webhook URL to send the Slack messages to.`,
		Encrypted:      true,
		Exposed:        true,
		Name:           "webhookURL",
		Required:       true,
		Secret:         true,
		Stored:         true,
		Transient:      true,
		Type:           "string",
	},
}

// SinkSlackLowerCaseAttributesMap represents the map of attribute for SinkSlack.
var SinkSlackLowerCaseAttributesMap = map[string]elemental.AttributeSpecification{
	"webhookurl": {
		AllowedChoices: []string{},
		BSONFieldName:  "webhookurl",
		ConvertedName:  "WebhookURL",
		Description:    `The webhook URL to send the Slack messages to.`,
		Encrypted:      true,
		Exposed:        true,
		Name:           "webhookURL",
		Required:       true,
		Secret:         true,
		Stored:         true,
		Transient:      true,
		Type:           "string",
	},
}

// SparseSinkSlacksList represents a list of SparseSinkSlacks
type SparseSinkSlacksList []*SparseSinkSlack

// Identity returns the identity of the objects in the list.
func (o SparseSinkSlacksList) Identity() elemental.Identity {

	return SinkSlackIdentity
}

// Copy returns a pointer to a copy the SparseSinkSlacksList.
func (o SparseSinkSlacksList) Copy() elemental.Identifiables {

	copy := append(SparseSinkSlacksList{}, o...)
	return &copy
}

// Append appends the objects to the a new copy of the SparseSinkSlacksList.
func (o SparseSinkSlacksList) Append(objects ...elemental.Identifiable) elemental.Identifiables {

	out := append(SparseSinkSlacksList{}, o...)
	for _, obj := range objects {
		out = append(out, obj.(*SparseSinkSlack))
	}

	return out
}

// List converts the object to an elemental.IdentifiablesList.
func (o SparseSinkSlacksList) List() elemental.IdentifiablesList {

	out := make(elemental.IdentifiablesList, len(o))
	for i := 0; i < len(o); i++ {
		out[i] = o[i]
	}

	return out
}

// DefaultOrder returns the default ordering fields of the content.
func (o SparseSinkSlacksList) DefaultOrder() []string {

	return []string{}
}

// ToPlain returns the SparseSinkSlacksList converted to SinkSlacksList.
func (o SparseSinkSlacksList) ToPlain() elemental.IdentifiablesList {

	out := make(elemental.IdentifiablesList, len(o))
	for i := 0; i < len(o); i++ {
		out[i] = o[i].ToPlain()
	}

	return out
}

// Version returns the version of the content.
func (o SparseSinkSlacksList) Version() int {

	return 1
}

// SparseSinkSlack represents the sparse version of a sinkslack.
type SparseSinkSlack struct {
	// The webhook URL to send the Slack messages to.
	WebhookURL *string `json:"webhookURL,omitempty" msgpack:"webhookURL,omitempty" bson:"webhookurl,omitempty" mapstructure:"webhookURL,omitempty"`

	ModelVersion int `json:"-" msgpack:"-" bson:"_modelversion"`
}

// NewSparseSinkSlack returns a new  SparseSinkSlack.
func NewSparseSinkSlack() *SparseSinkSlack {
	return &SparseSinkSlack{}
}

// Identity returns the Identity of the sparse object.
func (o *SparseSinkSlack) Identity() elemental.Identity {

	return SinkSlackIdentity
}

// Identifier returns the value of the sparse object's unique identifier.
func (o *SparseSinkSlack) Identifier() string {

	return ""
}

// SetIdentifier sets the value of the sparse object's unique identifier.
func (o *SparseSinkSlack) SetIdentifier(id string) {

}

// GetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *SparseSinkSlack) GetBSON() (any, error) {

	if o == nil {
		return nil, nil
	}

	s := &mongoAttributesSparseSinkSlack{}

	if o.WebhookURL != nil {
		s.WebhookURL = o.WebhookURL
	}

	return s, nil
}

// SetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *SparseSinkSlack) SetBSON(raw bson.Raw) error {

	if o == nil {
		return nil
	}

	s := &mongoAttributesSparseSinkSlack{}
	if err := raw.Unmarshal(s); err != nil {
		return err
	}

	if s.WebhookURL != nil {
		o.WebhookURL = s.WebhookURL
	}

	return nil
}

// Version returns the hardcoded version of the model.
func (o *SparseSinkSlack) Version() int {

	return 1
}

// ToPlain returns the plain version of the sparse model.
func (o *SparseSinkSlack) ToPlain() elemental.PlainIdentifiable {

	out := NewSinkSlack()
	if o.WebhookURL != nil {
		out.WebhookURL = *o.WebhookURL
	}

	return out
}

// EncryptAttributes encrypts the attributes marked as `encrypted` using the given encrypter.
func (o *SparseSinkSlack) EncryptAttributes(encrypter elemental.AttributeEncrypter) (err error) {

	if *o.WebhookURL, err = encrypter.EncryptString(*o.WebhookURL); err != nil {
		return fmt.Errorf("unable to encrypt attribute 'WebhookURL' for 'SparseSinkSlack' (%s): %s", o.Identifier(), err)
	}

	return nil
}

// DecryptAttributes decrypts the attributes marked as `encrypted` using the given decrypter.
func (o *SparseSinkSlack) DecryptAttributes(encrypter elemental.AttributeEncrypter) (err error) {

	if *o.WebhookURL, err = encrypter.DecryptString(*o.WebhookURL); err != nil {
		return fmt.Errorf("unable to decrypt attribute 'WebhookURL' for 'SparseSinkSlack' (%s): %s", o.Identifier(), err)
	}

	return nil
}

// DeepCopy returns a deep copy if the SparseSinkSlack.
func (o *SparseSinkSlack) DeepCopy() *SparseSinkSlack {

	if o == nil {
		return nil
	}

	out := &SparseSinkSlack{}
	o.DeepCopyInto(out)

	return out
}

// DeepCopyInto copies the receiver into the given *SparseSinkSlack.
func (o *SparseSinkSlack) DeepCopyInto(out *SparseSinkSlack) {

	target, err := copystructure.Copy(o)
	if err != nil {
		panic(fmt.Sprintf("Unable to deepcopy SparseSinkSlack: %s", err))
	}

	*out = *target.(*SparseSinkSlack)
}

type mongoAttributesSinkSlack struct {
	WebhookURL string `bson:"webhookurl"`
}
type mongoAttributesSparseSinkSlack struct {
	WebhookURL *string `bson:"webhookurl,omitempty"`
}
