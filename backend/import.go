// Code generated by elegen. DO NOT EDIT.
// Source: go.acuvity.ai/elemental (templates/model.gotpl)

package api

import (
	"fmt"
	"slices"

	"github.com/globalsign/mgo/bson"
	"github.com/mitchellh/copystructure"
	"go.acuvity.ai/a3s/pkgs/api"
	"go.acuvity.ai/elemental"
)

// ImportIdentity represents the Identity of the object.
var ImportIdentity = elemental.Identity{
	Name:     "import",
	Category: "import",
	Package:  "lain",
	Private:  false,
}

// ImportsList represents a list of Imports
type ImportsList []*Import

// Identity returns the identity of the objects in the list.
func (o ImportsList) Identity() elemental.Identity {

	return ImportIdentity
}

// Copy returns a pointer to a copy the ImportsList.
func (o ImportsList) Copy() elemental.Identifiables {

	out := slices.Clone(o)
	return &out
}

// Append appends the objects to the a new copy of the ImportsList.
func (o ImportsList) Append(objects ...elemental.Identifiable) elemental.Identifiables {

	out := slices.Clone(o)
	for _, obj := range objects {
		out = append(out, obj.(*Import))
	}

	return out
}

// List converts the object to an elemental.IdentifiablesList.
func (o ImportsList) List() elemental.IdentifiablesList {

	out := make(elemental.IdentifiablesList, len(o))
	for i := range len(o) {
		out[i] = o[i]
	}

	return out
}

// DefaultOrder returns the default ordering fields of the content.
func (o ImportsList) DefaultOrder() []string {

	return []string{}
}

// ToSparse returns the ImportsList converted to SparseImportsList.
// Objects in the list will only contain the given fields. No field means entire field set.
func (o ImportsList) ToSparse(fields ...string) elemental.Identifiables {

	out := make(SparseImportsList, len(o))
	for i := range len(o) {
		out[i] = o[i].ToSparse(fields...).(*SparseImport)
	}

	return out
}

// Version returns the version of the content.
func (o ImportsList) Version() int {

	return 1
}

// Import represents the model of a import
type Import struct {
	// AI domains to import.
	AIDomains AIDomainsList `json:"AIDomains,omitempty" msgpack:"AIDomains,omitempty" bson:"-" mapstructure:"AIDomains,omitempty"`

	// AI plugins to import.
	AIPlugins AIPluginsList `json:"AIPlugins,omitempty" msgpack:"AIPlugins,omitempty" bson:"-" mapstructure:"AIPlugins,omitempty"`

	// APIAuthorizations to import.
	APIAuthorizations APIAuthorizationsList `json:"APIAuthorizations,omitempty" msgpack:"APIAuthorizations,omitempty" bson:"-" mapstructure:"APIAuthorizations,omitempty"`

	// LDAP Sources to import.
	LDAPSources api.LDAPSourcesList `json:"LDAPSources,omitempty" msgpack:"LDAPSources,omitempty" bson:"-" mapstructure:"LDAPSources,omitempty"`

	// MTLS Sources to import.
	MTLSSources api.MTLSSourcesList `json:"MTLSSources,omitempty" msgpack:"MTLSSources,omitempty" bson:"-" mapstructure:"MTLSSources,omitempty"`

	// OIDC Sources to import.
	OIDCSources api.OIDCSourcesList `json:"OIDCSources,omitempty" msgpack:"OIDCSources,omitempty" bson:"-" mapstructure:"OIDCSources,omitempty"`

	// PACConfigs to import.
	PACConfigs PACConfigsList `json:"PACConfigs,omitempty" msgpack:"PACConfigs,omitempty" bson:"-" mapstructure:"PACConfigs,omitempty"`

	// SAML Sources to import.
	SAMLSources api.SAMLSourcesList `json:"SAMLSources,omitempty" msgpack:"SAMLSources,omitempty" bson:"-" mapstructure:"SAMLSources,omitempty"`

	// Access policies to import.
	AccessPolicies AccessPoliciesList `json:"accessPolicies,omitempty" msgpack:"accessPolicies,omitempty" bson:"-" mapstructure:"accessPolicies,omitempty"`

	// Agent configurations to import.
	AgentConfigs AgentConfigsList `json:"agentConfigs,omitempty" msgpack:"agentConfigs,omitempty" bson:"-" mapstructure:"agentConfigs,omitempty"`

	// Alert definitions to import.
	AlertDefinitions AlertDefinitionsList `json:"alertDefinitions,omitempty" msgpack:"alertDefinitions,omitempty" bson:"-" mapstructure:"alertDefinitions,omitempty"`

	// Apps to import.
	Apps AppsList `json:"apps,omitempty" msgpack:"apps,omitempty" bson:"-" mapstructure:"apps,omitempty"`

	// Content policies to import.
	ContentPolicies ContentPoliciesList `json:"contentPolicies,omitempty" msgpack:"contentPolicies,omitempty" bson:"-" mapstructure:"contentPolicies,omitempty"`

	// Custom Data Types to import.
	CustomDataTypes CustomDataTypesList `json:"customDataTypes,omitempty" msgpack:"customDataTypes,omitempty" bson:"-" mapstructure:"customDataTypes,omitempty"`

	// DataSets to import.
	DataSets DataSetsList `json:"dataSets,omitempty" msgpack:"dataSets,omitempty" bson:"-" mapstructure:"dataSets,omitempty"`

	// Extractor Libs to import.
	ExtractorLibs ExtractorLibsList `json:"extractorLibs,omitempty" msgpack:"extractorLibs,omitempty" bson:"-" mapstructure:"extractorLibs,omitempty"`

	// Extractors to import.
	Extractors ExtractorsList `json:"extractors,omitempty" msgpack:"extractors,omitempty" bson:"-" mapstructure:"extractors,omitempty"`

	// Ignored domains to import.
	IgnoredDomains IgnoredDomainsList `json:"ignoredDomains,omitempty" msgpack:"ignoredDomains,omitempty" bson:"-" mapstructure:"ignoredDomains,omitempty"`

	// Import label that will be used to identify all the resources imported by this
	// resource.
	Label string `json:"label" msgpack:"label" bson:"-" mapstructure:"label,omitempty"`

	// OrgSettings to import.
	OrgSettings OrgSettingsList `json:"orgSettings,omitempty" msgpack:"orgSettings,omitempty" bson:"-" mapstructure:"orgSettings,omitempty"`

	// Provider teams to import.
	ProviderTeams ProviderTeamsList `json:"providerTeams,omitempty" msgpack:"providerTeams,omitempty" bson:"-" mapstructure:"providerTeams,omitempty"`

	// ProviderTokens to import.
	ProviderTokens ProviderTokensList `json:"providerTokens,omitempty" msgpack:"providerTokens,omitempty" bson:"-" mapstructure:"providerTokens,omitempty"`

	// Providers to import.
	Providers ProvidersList `json:"providers,omitempty" msgpack:"providers,omitempty" bson:"-" mapstructure:"providers,omitempty"`

	// Proxy roundtrip to import. This will populate dummy data.
	Proxyroundtrips ProxyRoundtripsList `json:"proxyroundtrips,omitempty" msgpack:"proxyroundtrips,omitempty" bson:"-" mapstructure:"proxyroundtrips,omitempty"`

	// Sinks to import.
	Sinks SinksList `json:"sinks,omitempty" msgpack:"sinks,omitempty" bson:"-" mapstructure:"sinks,omitempty"`

	// Teams to import.
	Teams TeamsList `json:"teams,omitempty" msgpack:"teams,omitempty" bson:"-" mapstructure:"teams,omitempty"`

	// Visited URLs to import.
	Visitedurls VisitedURLsList `json:"visitedurls,omitempty" msgpack:"visitedurls,omitempty" bson:"-" mapstructure:"visitedurls,omitempty"`

	// WebExtension configurations to import.
	WebExtensionConfigs WebExtensionConfigsList `json:"webExtensionConfigs,omitempty" msgpack:"webExtensionConfigs,omitempty" bson:"-" mapstructure:"webExtensionConfigs,omitempty"`

	ModelVersion int `json:"-" msgpack:"-" bson:"_modelversion"`
}

// NewImport returns a new *Import
func NewImport() *Import {

	return &Import{
		ModelVersion:        1,
		AIDomains:           AIDomainsList{},
		AIPlugins:           AIPluginsList{},
		APIAuthorizations:   APIAuthorizationsList{},
		LDAPSources:         api.LDAPSourcesList{},
		MTLSSources:         api.MTLSSourcesList{},
		OIDCSources:         api.OIDCSourcesList{},
		PACConfigs:          PACConfigsList{},
		SAMLSources:         api.SAMLSourcesList{},
		AccessPolicies:      AccessPoliciesList{},
		AgentConfigs:        AgentConfigsList{},
		AlertDefinitions:    AlertDefinitionsList{},
		Apps:                AppsList{},
		ContentPolicies:     ContentPoliciesList{},
		CustomDataTypes:     CustomDataTypesList{},
		DataSets:            DataSetsList{},
		ExtractorLibs:       ExtractorLibsList{},
		Extractors:          ExtractorsList{},
		IgnoredDomains:      IgnoredDomainsList{},
		OrgSettings:         OrgSettingsList{},
		ProviderTeams:       ProviderTeamsList{},
		ProviderTokens:      ProviderTokensList{},
		Providers:           ProvidersList{},
		Proxyroundtrips:     ProxyRoundtripsList{},
		Sinks:               SinksList{},
		Teams:               TeamsList{},
		Visitedurls:         VisitedURLsList{},
		WebExtensionConfigs: WebExtensionConfigsList{},
	}
}

// Identity returns the Identity of the object.
func (o *Import) Identity() elemental.Identity {

	return ImportIdentity
}

// Identifier returns the value of the object's unique identifier.
func (o *Import) Identifier() string {

	return ""
}

// SetIdentifier sets the value of the object's unique identifier.
func (o *Import) SetIdentifier(id string) {

}

// GetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *Import) GetBSON() (any, error) {

	if o == nil {
		return nil, nil
	}

	s := &mongoAttributesImport{}

	return s, nil
}

// SetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *Import) SetBSON(raw bson.Raw) error {

	if o == nil {
		return nil
	}

	s := &mongoAttributesImport{}
	if err := raw.Unmarshal(s); err != nil {
		return err
	}

	return nil
}

// Version returns the hardcoded version of the model.
func (o *Import) Version() int {

	return 1
}

// BleveType implements the bleve.Classifier Interface.
func (o *Import) BleveType() string {

	return "import"
}

// DefaultOrder returns the list of default ordering fields.
func (o *Import) DefaultOrder() []string {

	return []string{}
}

// Doc returns the documentation for the object
func (o *Import) Doc() string {

	return `Import multiple resource at once.`
}

func (o *Import) String() string {

	return fmt.Sprintf("<%s:%s>", o.Identity().Name, o.Identifier())
}

// ToSparse returns the sparse version of the model.
// The returned object will only contain the given fields. No field means entire field set.
func (o *Import) ToSparse(fields ...string) elemental.SparseIdentifiable {

	if len(fields) == 0 {
		// nolint: goimports
		return &SparseImport{
			AIDomains:           &o.AIDomains,
			AIPlugins:           &o.AIPlugins,
			APIAuthorizations:   &o.APIAuthorizations,
			LDAPSources:         &o.LDAPSources,
			MTLSSources:         &o.MTLSSources,
			OIDCSources:         &o.OIDCSources,
			PACConfigs:          &o.PACConfigs,
			SAMLSources:         &o.SAMLSources,
			AccessPolicies:      &o.AccessPolicies,
			AgentConfigs:        &o.AgentConfigs,
			AlertDefinitions:    &o.AlertDefinitions,
			Apps:                &o.Apps,
			ContentPolicies:     &o.ContentPolicies,
			CustomDataTypes:     &o.CustomDataTypes,
			DataSets:            &o.DataSets,
			ExtractorLibs:       &o.ExtractorLibs,
			Extractors:          &o.Extractors,
			IgnoredDomains:      &o.IgnoredDomains,
			Label:               &o.Label,
			OrgSettings:         &o.OrgSettings,
			ProviderTeams:       &o.ProviderTeams,
			ProviderTokens:      &o.ProviderTokens,
			Providers:           &o.Providers,
			Proxyroundtrips:     &o.Proxyroundtrips,
			Sinks:               &o.Sinks,
			Teams:               &o.Teams,
			Visitedurls:         &o.Visitedurls,
			WebExtensionConfigs: &o.WebExtensionConfigs,
		}
	}

	sp := &SparseImport{}
	for _, f := range fields {
		switch f {
		case "AIDomains":
			sp.AIDomains = &(o.AIDomains)
		case "AIPlugins":
			sp.AIPlugins = &(o.AIPlugins)
		case "APIAuthorizations":
			sp.APIAuthorizations = &(o.APIAuthorizations)
		case "LDAPSources":
			sp.LDAPSources = &(o.LDAPSources)
		case "MTLSSources":
			sp.MTLSSources = &(o.MTLSSources)
		case "OIDCSources":
			sp.OIDCSources = &(o.OIDCSources)
		case "PACConfigs":
			sp.PACConfigs = &(o.PACConfigs)
		case "SAMLSources":
			sp.SAMLSources = &(o.SAMLSources)
		case "accessPolicies":
			sp.AccessPolicies = &(o.AccessPolicies)
		case "agentConfigs":
			sp.AgentConfigs = &(o.AgentConfigs)
		case "alertDefinitions":
			sp.AlertDefinitions = &(o.AlertDefinitions)
		case "apps":
			sp.Apps = &(o.Apps)
		case "contentPolicies":
			sp.ContentPolicies = &(o.ContentPolicies)
		case "customDataTypes":
			sp.CustomDataTypes = &(o.CustomDataTypes)
		case "dataSets":
			sp.DataSets = &(o.DataSets)
		case "extractorLibs":
			sp.ExtractorLibs = &(o.ExtractorLibs)
		case "extractors":
			sp.Extractors = &(o.Extractors)
		case "ignoredDomains":
			sp.IgnoredDomains = &(o.IgnoredDomains)
		case "label":
			sp.Label = &(o.Label)
		case "orgSettings":
			sp.OrgSettings = &(o.OrgSettings)
		case "providerTeams":
			sp.ProviderTeams = &(o.ProviderTeams)
		case "providerTokens":
			sp.ProviderTokens = &(o.ProviderTokens)
		case "providers":
			sp.Providers = &(o.Providers)
		case "proxyroundtrips":
			sp.Proxyroundtrips = &(o.Proxyroundtrips)
		case "sinks":
			sp.Sinks = &(o.Sinks)
		case "teams":
			sp.Teams = &(o.Teams)
		case "visitedurls":
			sp.Visitedurls = &(o.Visitedurls)
		case "webExtensionConfigs":
			sp.WebExtensionConfigs = &(o.WebExtensionConfigs)
		}
	}

	return sp
}

// Patch apply the non nil value of a *SparseImport to the object.
func (o *Import) Patch(sparse elemental.SparseIdentifiable) {
	if !sparse.Identity().IsEqual(o.Identity()) {
		panic("cannot patch from a parse with different identity")
	}

	so := sparse.(*SparseImport)
	if so.AIDomains != nil {
		o.AIDomains = *so.AIDomains
	}
	if so.AIPlugins != nil {
		o.AIPlugins = *so.AIPlugins
	}
	if so.APIAuthorizations != nil {
		o.APIAuthorizations = *so.APIAuthorizations
	}
	if so.LDAPSources != nil {
		o.LDAPSources = *so.LDAPSources
	}
	if so.MTLSSources != nil {
		o.MTLSSources = *so.MTLSSources
	}
	if so.OIDCSources != nil {
		o.OIDCSources = *so.OIDCSources
	}
	if so.PACConfigs != nil {
		o.PACConfigs = *so.PACConfigs
	}
	if so.SAMLSources != nil {
		o.SAMLSources = *so.SAMLSources
	}
	if so.AccessPolicies != nil {
		o.AccessPolicies = *so.AccessPolicies
	}
	if so.AgentConfigs != nil {
		o.AgentConfigs = *so.AgentConfigs
	}
	if so.AlertDefinitions != nil {
		o.AlertDefinitions = *so.AlertDefinitions
	}
	if so.Apps != nil {
		o.Apps = *so.Apps
	}
	if so.ContentPolicies != nil {
		o.ContentPolicies = *so.ContentPolicies
	}
	if so.CustomDataTypes != nil {
		o.CustomDataTypes = *so.CustomDataTypes
	}
	if so.DataSets != nil {
		o.DataSets = *so.DataSets
	}
	if so.ExtractorLibs != nil {
		o.ExtractorLibs = *so.ExtractorLibs
	}
	if so.Extractors != nil {
		o.Extractors = *so.Extractors
	}
	if so.IgnoredDomains != nil {
		o.IgnoredDomains = *so.IgnoredDomains
	}
	if so.Label != nil {
		o.Label = *so.Label
	}
	if so.OrgSettings != nil {
		o.OrgSettings = *so.OrgSettings
	}
	if so.ProviderTeams != nil {
		o.ProviderTeams = *so.ProviderTeams
	}
	if so.ProviderTokens != nil {
		o.ProviderTokens = *so.ProviderTokens
	}
	if so.Providers != nil {
		o.Providers = *so.Providers
	}
	if so.Proxyroundtrips != nil {
		o.Proxyroundtrips = *so.Proxyroundtrips
	}
	if so.Sinks != nil {
		o.Sinks = *so.Sinks
	}
	if so.Teams != nil {
		o.Teams = *so.Teams
	}
	if so.Visitedurls != nil {
		o.Visitedurls = *so.Visitedurls
	}
	if so.WebExtensionConfigs != nil {
		o.WebExtensionConfigs = *so.WebExtensionConfigs
	}
}

// DeepCopy returns a deep copy if the Import.
func (o *Import) DeepCopy() *Import {

	if o == nil {
		return nil
	}

	out := &Import{}
	o.DeepCopyInto(out)

	return out
}

// DeepCopyInto copies the receiver into the given *Import.
func (o *Import) DeepCopyInto(out *Import) {

	target, err := copystructure.Copy(o)
	if err != nil {
		panic(fmt.Sprintf("Unable to deepcopy Import: %s", err))
	}

	*out = *target.(*Import)
}

// Validate valides the current information stored into the structure.
func (o *Import) Validate() error {

	errors := elemental.Errors{}
	requiredErrors := elemental.Errors{}

	for _, sub := range o.AIDomains {
		if sub == nil {
			continue
		}
		elemental.ResetDefaultForZeroValues(sub)
		if err := sub.Validate(); err != nil {
			errors = errors.Append(err)
		}
	}

	for _, sub := range o.AIPlugins {
		if sub == nil {
			continue
		}
		elemental.ResetDefaultForZeroValues(sub)
		if err := sub.Validate(); err != nil {
			errors = errors.Append(err)
		}
	}

	for _, sub := range o.APIAuthorizations {
		if sub == nil {
			continue
		}
		elemental.ResetDefaultForZeroValues(sub)
		if err := sub.Validate(); err != nil {
			errors = errors.Append(err)
		}
	}

	for _, sub := range o.PACConfigs {
		if sub == nil {
			continue
		}
		elemental.ResetDefaultForZeroValues(sub)
		if err := sub.Validate(); err != nil {
			errors = errors.Append(err)
		}
	}

	for _, sub := range o.AccessPolicies {
		if sub == nil {
			continue
		}
		elemental.ResetDefaultForZeroValues(sub)
		if err := sub.Validate(); err != nil {
			errors = errors.Append(err)
		}
	}

	for _, sub := range o.AgentConfigs {
		if sub == nil {
			continue
		}
		elemental.ResetDefaultForZeroValues(sub)
		if err := sub.Validate(); err != nil {
			errors = errors.Append(err)
		}
	}

	for _, sub := range o.AlertDefinitions {
		if sub == nil {
			continue
		}
		elemental.ResetDefaultForZeroValues(sub)
		if err := sub.Validate(); err != nil {
			errors = errors.Append(err)
		}
	}

	for _, sub := range o.Apps {
		if sub == nil {
			continue
		}
		elemental.ResetDefaultForZeroValues(sub)
		if err := sub.Validate(); err != nil {
			errors = errors.Append(err)
		}
	}

	for _, sub := range o.ContentPolicies {
		if sub == nil {
			continue
		}
		elemental.ResetDefaultForZeroValues(sub)
		if err := sub.Validate(); err != nil {
			errors = errors.Append(err)
		}
	}

	for _, sub := range o.CustomDataTypes {
		if sub == nil {
			continue
		}
		elemental.ResetDefaultForZeroValues(sub)
		if err := sub.Validate(); err != nil {
			errors = errors.Append(err)
		}
	}

	for _, sub := range o.DataSets {
		if sub == nil {
			continue
		}
		elemental.ResetDefaultForZeroValues(sub)
		if err := sub.Validate(); err != nil {
			errors = errors.Append(err)
		}
	}

	for _, sub := range o.ExtractorLibs {
		if sub == nil {
			continue
		}
		elemental.ResetDefaultForZeroValues(sub)
		if err := sub.Validate(); err != nil {
			errors = errors.Append(err)
		}
	}

	for _, sub := range o.Extractors {
		if sub == nil {
			continue
		}
		elemental.ResetDefaultForZeroValues(sub)
		if err := sub.Validate(); err != nil {
			errors = errors.Append(err)
		}
	}

	for _, sub := range o.IgnoredDomains {
		if sub == nil {
			continue
		}
		elemental.ResetDefaultForZeroValues(sub)
		if err := sub.Validate(); err != nil {
			errors = errors.Append(err)
		}
	}

	if err := elemental.ValidateRequiredString("label", o.Label); err != nil {
		requiredErrors = requiredErrors.Append(err)
	}

	for _, sub := range o.OrgSettings {
		if sub == nil {
			continue
		}
		elemental.ResetDefaultForZeroValues(sub)
		if err := sub.Validate(); err != nil {
			errors = errors.Append(err)
		}
	}

	for _, sub := range o.ProviderTeams {
		if sub == nil {
			continue
		}
		elemental.ResetDefaultForZeroValues(sub)
		if err := sub.Validate(); err != nil {
			errors = errors.Append(err)
		}
	}

	for _, sub := range o.ProviderTokens {
		if sub == nil {
			continue
		}
		elemental.ResetDefaultForZeroValues(sub)
		if err := sub.Validate(); err != nil {
			errors = errors.Append(err)
		}
	}

	for _, sub := range o.Providers {
		if sub == nil {
			continue
		}
		elemental.ResetDefaultForZeroValues(sub)
		if err := sub.Validate(); err != nil {
			errors = errors.Append(err)
		}
	}

	for _, sub := range o.Proxyroundtrips {
		if sub == nil {
			continue
		}
		elemental.ResetDefaultForZeroValues(sub)
		if err := sub.Validate(); err != nil {
			errors = errors.Append(err)
		}
	}

	for _, sub := range o.Sinks {
		if sub == nil {
			continue
		}
		elemental.ResetDefaultForZeroValues(sub)
		if err := sub.Validate(); err != nil {
			errors = errors.Append(err)
		}
	}

	for _, sub := range o.Teams {
		if sub == nil {
			continue
		}
		elemental.ResetDefaultForZeroValues(sub)
		if err := sub.Validate(); err != nil {
			errors = errors.Append(err)
		}
	}

	for _, sub := range o.Visitedurls {
		if sub == nil {
			continue
		}
		elemental.ResetDefaultForZeroValues(sub)
		if err := sub.Validate(); err != nil {
			errors = errors.Append(err)
		}
	}

	for _, sub := range o.WebExtensionConfigs {
		if sub == nil {
			continue
		}
		elemental.ResetDefaultForZeroValues(sub)
		if err := sub.Validate(); err != nil {
			errors = errors.Append(err)
		}
	}

	if len(requiredErrors) > 0 {
		return requiredErrors
	}

	if len(errors) > 0 {
		return errors
	}

	return nil
}

// SpecificationForAttribute returns the AttributeSpecification for the given attribute name key.
func (*Import) SpecificationForAttribute(name string) elemental.AttributeSpecification {

	if v, ok := ImportAttributesMap[name]; ok {
		return v
	}

	// We could not find it, so let's check on the lower case indexed spec map
	return ImportLowerCaseAttributesMap[name]
}

// AttributeSpecifications returns the full attribute specifications map.
func (*Import) AttributeSpecifications() map[string]elemental.AttributeSpecification {

	return ImportAttributesMap
}

// ValueForAttribute returns the value for the given attribute.
// This is a very advanced function that you should not need but in some
// very specific use cases.
func (o *Import) ValueForAttribute(name string) any {

	switch name {
	case "AIDomains":
		return o.AIDomains
	case "AIPlugins":
		return o.AIPlugins
	case "APIAuthorizations":
		return o.APIAuthorizations
	case "LDAPSources":
		return o.LDAPSources
	case "MTLSSources":
		return o.MTLSSources
	case "OIDCSources":
		return o.OIDCSources
	case "PACConfigs":
		return o.PACConfigs
	case "SAMLSources":
		return o.SAMLSources
	case "accessPolicies":
		return o.AccessPolicies
	case "agentConfigs":
		return o.AgentConfigs
	case "alertDefinitions":
		return o.AlertDefinitions
	case "apps":
		return o.Apps
	case "contentPolicies":
		return o.ContentPolicies
	case "customDataTypes":
		return o.CustomDataTypes
	case "dataSets":
		return o.DataSets
	case "extractorLibs":
		return o.ExtractorLibs
	case "extractors":
		return o.Extractors
	case "ignoredDomains":
		return o.IgnoredDomains
	case "label":
		return o.Label
	case "orgSettings":
		return o.OrgSettings
	case "providerTeams":
		return o.ProviderTeams
	case "providerTokens":
		return o.ProviderTokens
	case "providers":
		return o.Providers
	case "proxyroundtrips":
		return o.Proxyroundtrips
	case "sinks":
		return o.Sinks
	case "teams":
		return o.Teams
	case "visitedurls":
		return o.Visitedurls
	case "webExtensionConfigs":
		return o.WebExtensionConfigs
	}

	return nil
}

// ImportAttributesMap represents the map of attribute for Import.
var ImportAttributesMap = map[string]elemental.AttributeSpecification{
	"AIDomains": {
		AllowedChoices: []string{},
		ConvertedName:  "AIDomains",
		Description:    `AI domains to import.`,
		Exposed:        true,
		Name:           "AIDomains",
		SubType:        "aidomain",
		Type:           "refList",
	},
	"AIPlugins": {
		AllowedChoices: []string{},
		ConvertedName:  "AIPlugins",
		Description:    `AI plugins to import.`,
		Exposed:        true,
		Name:           "AIPlugins",
		SubType:        "aiplugin",
		Type:           "refList",
	},
	"APIAuthorizations": {
		AllowedChoices: []string{},
		ConvertedName:  "APIAuthorizations",
		Description:    `APIAuthorizations to import.`,
		Exposed:        true,
		Name:           "APIAuthorizations",
		SubType:        "apiauthorization",
		Type:           "refList",
	},
	"LDAPSources": {
		AllowedChoices: []string{},
		ConvertedName:  "LDAPSources",
		Description:    `LDAP Sources to import.`,
		Exposed:        true,
		Name:           "LDAPSources",
		SubType:        "a3s.LDAPSources",
		Type:           "external",
	},
	"MTLSSources": {
		AllowedChoices: []string{},
		ConvertedName:  "MTLSSources",
		Description:    `MTLS Sources to import.`,
		Exposed:        true,
		Name:           "MTLSSources",
		SubType:        "a3s.MTLSSources",
		Type:           "external",
	},
	"OIDCSources": {
		AllowedChoices: []string{},
		ConvertedName:  "OIDCSources",
		Description:    `OIDC Sources to import.`,
		Exposed:        true,
		Name:           "OIDCSources",
		SubType:        "a3s.OIDCSources",
		Type:           "external",
	},
	"PACConfigs": {
		AllowedChoices: []string{},
		ConvertedName:  "PACConfigs",
		Description:    `PACConfigs to import.`,
		Exposed:        true,
		Name:           "PACConfigs",
		SubType:        "pacconfig",
		Type:           "refList",
	},
	"SAMLSources": {
		AllowedChoices: []string{},
		ConvertedName:  "SAMLSources",
		Description:    `SAML Sources to import.`,
		Exposed:        true,
		Name:           "SAMLSources",
		SubType:        "a3s.SAMLSources",
		Type:           "external",
	},
	"AccessPolicies": {
		AllowedChoices: []string{},
		ConvertedName:  "AccessPolicies",
		Description:    `Access policies to import.`,
		Exposed:        true,
		Name:           "accessPolicies",
		SubType:        "accesspolicy",
		Type:           "refList",
	},
	"AgentConfigs": {
		AllowedChoices: []string{},
		ConvertedName:  "AgentConfigs",
		Description:    `Agent configurations to import.`,
		Exposed:        true,
		Name:           "agentConfigs",
		SubType:        "agentconfig",
		Type:           "refList",
	},
	"AlertDefinitions": {
		AllowedChoices: []string{},
		ConvertedName:  "AlertDefinitions",
		Description:    `Alert definitions to import.`,
		Exposed:        true,
		Name:           "alertDefinitions",
		SubType:        "alertdefinition",
		Type:           "refList",
	},
	"Apps": {
		AllowedChoices: []string{},
		ConvertedName:  "Apps",
		Description:    `Apps to import.`,
		Exposed:        true,
		Name:           "apps",
		SubType:        "app",
		Type:           "refList",
	},
	"ContentPolicies": {
		AllowedChoices: []string{},
		ConvertedName:  "ContentPolicies",
		Description:    `Content policies to import.`,
		Exposed:        true,
		Name:           "contentPolicies",
		SubType:        "contentpolicy",
		Type:           "refList",
	},
	"CustomDataTypes": {
		AllowedChoices: []string{},
		ConvertedName:  "CustomDataTypes",
		Description:    `Custom Data Types to import.`,
		Exposed:        true,
		Name:           "customDataTypes",
		SubType:        "customdatatype",
		Type:           "refList",
	},
	"DataSets": {
		AllowedChoices: []string{},
		ConvertedName:  "DataSets",
		Description:    `DataSets to import.`,
		Exposed:        true,
		Name:           "dataSets",
		SubType:        "dataset",
		Type:           "refList",
	},
	"ExtractorLibs": {
		AllowedChoices: []string{},
		ConvertedName:  "ExtractorLibs",
		Description:    `Extractor Libs to import.`,
		Exposed:        true,
		Name:           "extractorLibs",
		SubType:        "extractorlib",
		Type:           "refList",
	},
	"Extractors": {
		AllowedChoices: []string{},
		ConvertedName:  "Extractors",
		Description:    `Extractors to import.`,
		Exposed:        true,
		Name:           "extractors",
		SubType:        "extractor",
		Type:           "refList",
	},
	"IgnoredDomains": {
		AllowedChoices: []string{},
		ConvertedName:  "IgnoredDomains",
		Description:    `Ignored domains to import.`,
		Exposed:        true,
		Name:           "ignoredDomains",
		SubType:        "ignoreddomain",
		Type:           "refList",
	},
	"Label": {
		AllowedChoices: []string{},
		ConvertedName:  "Label",
		Description: `Import label that will be used to identify all the resources imported by this
resource.`,
		Exposed:  true,
		Name:     "label",
		Required: true,
		Type:     "string",
	},
	"OrgSettings": {
		AllowedChoices: []string{},
		ConvertedName:  "OrgSettings",
		Description:    `OrgSettings to import.`,
		Exposed:        true,
		Name:           "orgSettings",
		SubType:        "orgsettings",
		Type:           "refList",
	},
	"ProviderTeams": {
		AllowedChoices: []string{},
		ConvertedName:  "ProviderTeams",
		Description:    `Provider teams to import.`,
		Exposed:        true,
		Name:           "providerTeams",
		SubType:        "providerteam",
		Type:           "refList",
	},
	"ProviderTokens": {
		AllowedChoices: []string{},
		ConvertedName:  "ProviderTokens",
		Description:    `ProviderTokens to import.`,
		Exposed:        true,
		Name:           "providerTokens",
		SubType:        "providertoken",
		Type:           "refList",
	},
	"Providers": {
		AllowedChoices: []string{},
		ConvertedName:  "Providers",
		Description:    `Providers to import.`,
		Exposed:        true,
		Name:           "providers",
		SubType:        "provider",
		Type:           "refList",
	},
	"Proxyroundtrips": {
		AllowedChoices: []string{},
		ConvertedName:  "Proxyroundtrips",
		Description:    `Proxy roundtrip to import. This will populate dummy data.`,
		Exposed:        true,
		Name:           "proxyroundtrips",
		SubType:        "proxyroundtrip",
		Type:           "refList",
	},
	"Sinks": {
		AllowedChoices: []string{},
		ConvertedName:  "Sinks",
		Description:    `Sinks to import.`,
		Exposed:        true,
		Name:           "sinks",
		SubType:        "sink",
		Type:           "refList",
	},
	"Teams": {
		AllowedChoices: []string{},
		ConvertedName:  "Teams",
		Description:    `Teams to import.`,
		Exposed:        true,
		Name:           "teams",
		SubType:        "team",
		Type:           "refList",
	},
	"Visitedurls": {
		AllowedChoices: []string{},
		ConvertedName:  "Visitedurls",
		Description:    `Visited URLs to import.`,
		Exposed:        true,
		Name:           "visitedurls",
		SubType:        "visitedurl",
		Type:           "refList",
	},
	"WebExtensionConfigs": {
		AllowedChoices: []string{},
		ConvertedName:  "WebExtensionConfigs",
		Description:    `WebExtension configurations to import.`,
		Exposed:        true,
		Name:           "webExtensionConfigs",
		SubType:        "webextensionconfig",
		Type:           "refList",
	},
}

// ImportLowerCaseAttributesMap represents the map of attribute for Import.
var ImportLowerCaseAttributesMap = map[string]elemental.AttributeSpecification{
	"aidomains": {
		AllowedChoices: []string{},
		ConvertedName:  "AIDomains",
		Description:    `AI domains to import.`,
		Exposed:        true,
		Name:           "AIDomains",
		SubType:        "aidomain",
		Type:           "refList",
	},
	"aiplugins": {
		AllowedChoices: []string{},
		ConvertedName:  "AIPlugins",
		Description:    `AI plugins to import.`,
		Exposed:        true,
		Name:           "AIPlugins",
		SubType:        "aiplugin",
		Type:           "refList",
	},
	"apiauthorizations": {
		AllowedChoices: []string{},
		ConvertedName:  "APIAuthorizations",
		Description:    `APIAuthorizations to import.`,
		Exposed:        true,
		Name:           "APIAuthorizations",
		SubType:        "apiauthorization",
		Type:           "refList",
	},
	"ldapsources": {
		AllowedChoices: []string{},
		ConvertedName:  "LDAPSources",
		Description:    `LDAP Sources to import.`,
		Exposed:        true,
		Name:           "LDAPSources",
		SubType:        "a3s.LDAPSources",
		Type:           "external",
	},
	"mtlssources": {
		AllowedChoices: []string{},
		ConvertedName:  "MTLSSources",
		Description:    `MTLS Sources to import.`,
		Exposed:        true,
		Name:           "MTLSSources",
		SubType:        "a3s.MTLSSources",
		Type:           "external",
	},
	"oidcsources": {
		AllowedChoices: []string{},
		ConvertedName:  "OIDCSources",
		Description:    `OIDC Sources to import.`,
		Exposed:        true,
		Name:           "OIDCSources",
		SubType:        "a3s.OIDCSources",
		Type:           "external",
	},
	"pacconfigs": {
		AllowedChoices: []string{},
		ConvertedName:  "PACConfigs",
		Description:    `PACConfigs to import.`,
		Exposed:        true,
		Name:           "PACConfigs",
		SubType:        "pacconfig",
		Type:           "refList",
	},
	"samlsources": {
		AllowedChoices: []string{},
		ConvertedName:  "SAMLSources",
		Description:    `SAML Sources to import.`,
		Exposed:        true,
		Name:           "SAMLSources",
		SubType:        "a3s.SAMLSources",
		Type:           "external",
	},
	"accesspolicies": {
		AllowedChoices: []string{},
		ConvertedName:  "AccessPolicies",
		Description:    `Access policies to import.`,
		Exposed:        true,
		Name:           "accessPolicies",
		SubType:        "accesspolicy",
		Type:           "refList",
	},
	"agentconfigs": {
		AllowedChoices: []string{},
		ConvertedName:  "AgentConfigs",
		Description:    `Agent configurations to import.`,
		Exposed:        true,
		Name:           "agentConfigs",
		SubType:        "agentconfig",
		Type:           "refList",
	},
	"alertdefinitions": {
		AllowedChoices: []string{},
		ConvertedName:  "AlertDefinitions",
		Description:    `Alert definitions to import.`,
		Exposed:        true,
		Name:           "alertDefinitions",
		SubType:        "alertdefinition",
		Type:           "refList",
	},
	"apps": {
		AllowedChoices: []string{},
		ConvertedName:  "Apps",
		Description:    `Apps to import.`,
		Exposed:        true,
		Name:           "apps",
		SubType:        "app",
		Type:           "refList",
	},
	"contentpolicies": {
		AllowedChoices: []string{},
		ConvertedName:  "ContentPolicies",
		Description:    `Content policies to import.`,
		Exposed:        true,
		Name:           "contentPolicies",
		SubType:        "contentpolicy",
		Type:           "refList",
	},
	"customdatatypes": {
		AllowedChoices: []string{},
		ConvertedName:  "CustomDataTypes",
		Description:    `Custom Data Types to import.`,
		Exposed:        true,
		Name:           "customDataTypes",
		SubType:        "customdatatype",
		Type:           "refList",
	},
	"datasets": {
		AllowedChoices: []string{},
		ConvertedName:  "DataSets",
		Description:    `DataSets to import.`,
		Exposed:        true,
		Name:           "dataSets",
		SubType:        "dataset",
		Type:           "refList",
	},
	"extractorlibs": {
		AllowedChoices: []string{},
		ConvertedName:  "ExtractorLibs",
		Description:    `Extractor Libs to import.`,
		Exposed:        true,
		Name:           "extractorLibs",
		SubType:        "extractorlib",
		Type:           "refList",
	},
	"extractors": {
		AllowedChoices: []string{},
		ConvertedName:  "Extractors",
		Description:    `Extractors to import.`,
		Exposed:        true,
		Name:           "extractors",
		SubType:        "extractor",
		Type:           "refList",
	},
	"ignoreddomains": {
		AllowedChoices: []string{},
		ConvertedName:  "IgnoredDomains",
		Description:    `Ignored domains to import.`,
		Exposed:        true,
		Name:           "ignoredDomains",
		SubType:        "ignoreddomain",
		Type:           "refList",
	},
	"label": {
		AllowedChoices: []string{},
		ConvertedName:  "Label",
		Description: `Import label that will be used to identify all the resources imported by this
resource.`,
		Exposed:  true,
		Name:     "label",
		Required: true,
		Type:     "string",
	},
	"orgsettings": {
		AllowedChoices: []string{},
		ConvertedName:  "OrgSettings",
		Description:    `OrgSettings to import.`,
		Exposed:        true,
		Name:           "orgSettings",
		SubType:        "orgsettings",
		Type:           "refList",
	},
	"providerteams": {
		AllowedChoices: []string{},
		ConvertedName:  "ProviderTeams",
		Description:    `Provider teams to import.`,
		Exposed:        true,
		Name:           "providerTeams",
		SubType:        "providerteam",
		Type:           "refList",
	},
	"providertokens": {
		AllowedChoices: []string{},
		ConvertedName:  "ProviderTokens",
		Description:    `ProviderTokens to import.`,
		Exposed:        true,
		Name:           "providerTokens",
		SubType:        "providertoken",
		Type:           "refList",
	},
	"providers": {
		AllowedChoices: []string{},
		ConvertedName:  "Providers",
		Description:    `Providers to import.`,
		Exposed:        true,
		Name:           "providers",
		SubType:        "provider",
		Type:           "refList",
	},
	"proxyroundtrips": {
		AllowedChoices: []string{},
		ConvertedName:  "Proxyroundtrips",
		Description:    `Proxy roundtrip to import. This will populate dummy data.`,
		Exposed:        true,
		Name:           "proxyroundtrips",
		SubType:        "proxyroundtrip",
		Type:           "refList",
	},
	"sinks": {
		AllowedChoices: []string{},
		ConvertedName:  "Sinks",
		Description:    `Sinks to import.`,
		Exposed:        true,
		Name:           "sinks",
		SubType:        "sink",
		Type:           "refList",
	},
	"teams": {
		AllowedChoices: []string{},
		ConvertedName:  "Teams",
		Description:    `Teams to import.`,
		Exposed:        true,
		Name:           "teams",
		SubType:        "team",
		Type:           "refList",
	},
	"visitedurls": {
		AllowedChoices: []string{},
		ConvertedName:  "Visitedurls",
		Description:    `Visited URLs to import.`,
		Exposed:        true,
		Name:           "visitedurls",
		SubType:        "visitedurl",
		Type:           "refList",
	},
	"webextensionconfigs": {
		AllowedChoices: []string{},
		ConvertedName:  "WebExtensionConfigs",
		Description:    `WebExtension configurations to import.`,
		Exposed:        true,
		Name:           "webExtensionConfigs",
		SubType:        "webextensionconfig",
		Type:           "refList",
	},
}

// SparseImportsList represents a list of SparseImports
type SparseImportsList []*SparseImport

// Identity returns the identity of the objects in the list.
func (o SparseImportsList) Identity() elemental.Identity {

	return ImportIdentity
}

// Copy returns a pointer to a copy the SparseImportsList.
func (o SparseImportsList) Copy() elemental.Identifiables {

	copy := slices.Clone(o)
	return &copy
}

// Append appends the objects to the a new copy of the SparseImportsList.
func (o SparseImportsList) Append(objects ...elemental.Identifiable) elemental.Identifiables {

	out := slices.Clone(o)
	for _, obj := range objects {
		out = append(out, obj.(*SparseImport))
	}

	return out
}

// List converts the object to an elemental.IdentifiablesList.
func (o SparseImportsList) List() elemental.IdentifiablesList {

	out := make(elemental.IdentifiablesList, len(o))
	for i := range len(o) {
		out[i] = o[i]
	}

	return out
}

// DefaultOrder returns the default ordering fields of the content.
func (o SparseImportsList) DefaultOrder() []string {

	return []string{}
}

// ToPlain returns the SparseImportsList converted to ImportsList.
func (o SparseImportsList) ToPlain() elemental.IdentifiablesList {

	out := make(elemental.IdentifiablesList, len(o))
	for i := range len(o) {
		out[i] = o[i].ToPlain()
	}

	return out
}

// Version returns the version of the content.
func (o SparseImportsList) Version() int {

	return 1
}

// SparseImport represents the sparse version of a import.
type SparseImport struct {
	// AI domains to import.
	AIDomains *AIDomainsList `json:"AIDomains,omitempty" msgpack:"AIDomains,omitempty" bson:"-" mapstructure:"AIDomains,omitempty"`

	// AI plugins to import.
	AIPlugins *AIPluginsList `json:"AIPlugins,omitempty" msgpack:"AIPlugins,omitempty" bson:"-" mapstructure:"AIPlugins,omitempty"`

	// APIAuthorizations to import.
	APIAuthorizations *APIAuthorizationsList `json:"APIAuthorizations,omitempty" msgpack:"APIAuthorizations,omitempty" bson:"-" mapstructure:"APIAuthorizations,omitempty"`

	// LDAP Sources to import.
	LDAPSources *api.LDAPSourcesList `json:"LDAPSources,omitempty" msgpack:"LDAPSources,omitempty" bson:"-" mapstructure:"LDAPSources,omitempty"`

	// MTLS Sources to import.
	MTLSSources *api.MTLSSourcesList `json:"MTLSSources,omitempty" msgpack:"MTLSSources,omitempty" bson:"-" mapstructure:"MTLSSources,omitempty"`

	// OIDC Sources to import.
	OIDCSources *api.OIDCSourcesList `json:"OIDCSources,omitempty" msgpack:"OIDCSources,omitempty" bson:"-" mapstructure:"OIDCSources,omitempty"`

	// PACConfigs to import.
	PACConfigs *PACConfigsList `json:"PACConfigs,omitempty" msgpack:"PACConfigs,omitempty" bson:"-" mapstructure:"PACConfigs,omitempty"`

	// SAML Sources to import.
	SAMLSources *api.SAMLSourcesList `json:"SAMLSources,omitempty" msgpack:"SAMLSources,omitempty" bson:"-" mapstructure:"SAMLSources,omitempty"`

	// Access policies to import.
	AccessPolicies *AccessPoliciesList `json:"accessPolicies,omitempty" msgpack:"accessPolicies,omitempty" bson:"-" mapstructure:"accessPolicies,omitempty"`

	// Agent configurations to import.
	AgentConfigs *AgentConfigsList `json:"agentConfigs,omitempty" msgpack:"agentConfigs,omitempty" bson:"-" mapstructure:"agentConfigs,omitempty"`

	// Alert definitions to import.
	AlertDefinitions *AlertDefinitionsList `json:"alertDefinitions,omitempty" msgpack:"alertDefinitions,omitempty" bson:"-" mapstructure:"alertDefinitions,omitempty"`

	// Apps to import.
	Apps *AppsList `json:"apps,omitempty" msgpack:"apps,omitempty" bson:"-" mapstructure:"apps,omitempty"`

	// Content policies to import.
	ContentPolicies *ContentPoliciesList `json:"contentPolicies,omitempty" msgpack:"contentPolicies,omitempty" bson:"-" mapstructure:"contentPolicies,omitempty"`

	// Custom Data Types to import.
	CustomDataTypes *CustomDataTypesList `json:"customDataTypes,omitempty" msgpack:"customDataTypes,omitempty" bson:"-" mapstructure:"customDataTypes,omitempty"`

	// DataSets to import.
	DataSets *DataSetsList `json:"dataSets,omitempty" msgpack:"dataSets,omitempty" bson:"-" mapstructure:"dataSets,omitempty"`

	// Extractor Libs to import.
	ExtractorLibs *ExtractorLibsList `json:"extractorLibs,omitempty" msgpack:"extractorLibs,omitempty" bson:"-" mapstructure:"extractorLibs,omitempty"`

	// Extractors to import.
	Extractors *ExtractorsList `json:"extractors,omitempty" msgpack:"extractors,omitempty" bson:"-" mapstructure:"extractors,omitempty"`

	// Ignored domains to import.
	IgnoredDomains *IgnoredDomainsList `json:"ignoredDomains,omitempty" msgpack:"ignoredDomains,omitempty" bson:"-" mapstructure:"ignoredDomains,omitempty"`

	// Import label that will be used to identify all the resources imported by this
	// resource.
	Label *string `json:"label,omitempty" msgpack:"label,omitempty" bson:"-" mapstructure:"label,omitempty"`

	// OrgSettings to import.
	OrgSettings *OrgSettingsList `json:"orgSettings,omitempty" msgpack:"orgSettings,omitempty" bson:"-" mapstructure:"orgSettings,omitempty"`

	// Provider teams to import.
	ProviderTeams *ProviderTeamsList `json:"providerTeams,omitempty" msgpack:"providerTeams,omitempty" bson:"-" mapstructure:"providerTeams,omitempty"`

	// ProviderTokens to import.
	ProviderTokens *ProviderTokensList `json:"providerTokens,omitempty" msgpack:"providerTokens,omitempty" bson:"-" mapstructure:"providerTokens,omitempty"`

	// Providers to import.
	Providers *ProvidersList `json:"providers,omitempty" msgpack:"providers,omitempty" bson:"-" mapstructure:"providers,omitempty"`

	// Proxy roundtrip to import. This will populate dummy data.
	Proxyroundtrips *ProxyRoundtripsList `json:"proxyroundtrips,omitempty" msgpack:"proxyroundtrips,omitempty" bson:"-" mapstructure:"proxyroundtrips,omitempty"`

	// Sinks to import.
	Sinks *SinksList `json:"sinks,omitempty" msgpack:"sinks,omitempty" bson:"-" mapstructure:"sinks,omitempty"`

	// Teams to import.
	Teams *TeamsList `json:"teams,omitempty" msgpack:"teams,omitempty" bson:"-" mapstructure:"teams,omitempty"`

	// Visited URLs to import.
	Visitedurls *VisitedURLsList `json:"visitedurls,omitempty" msgpack:"visitedurls,omitempty" bson:"-" mapstructure:"visitedurls,omitempty"`

	// WebExtension configurations to import.
	WebExtensionConfigs *WebExtensionConfigsList `json:"webExtensionConfigs,omitempty" msgpack:"webExtensionConfigs,omitempty" bson:"-" mapstructure:"webExtensionConfigs,omitempty"`

	ModelVersion int `json:"-" msgpack:"-" bson:"_modelversion"`
}

// NewSparseImport returns a new  SparseImport.
func NewSparseImport() *SparseImport {
	return &SparseImport{}
}

// Identity returns the Identity of the sparse object.
func (o *SparseImport) Identity() elemental.Identity {

	return ImportIdentity
}

// Identifier returns the value of the sparse object's unique identifier.
func (o *SparseImport) Identifier() string {

	return ""
}

// SetIdentifier sets the value of the sparse object's unique identifier.
func (o *SparseImport) SetIdentifier(id string) {

}

// GetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *SparseImport) GetBSON() (any, error) {

	if o == nil {
		return nil, nil
	}

	s := &mongoAttributesSparseImport{}

	return s, nil
}

// SetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *SparseImport) SetBSON(raw bson.Raw) error {

	if o == nil {
		return nil
	}

	s := &mongoAttributesSparseImport{}
	if err := raw.Unmarshal(s); err != nil {
		return err
	}

	return nil
}

// Version returns the hardcoded version of the model.
func (o *SparseImport) Version() int {

	return 1
}

// ToPlain returns the plain version of the sparse model.
func (o *SparseImport) ToPlain() elemental.PlainIdentifiable {

	out := NewImport()
	if o.AIDomains != nil {
		out.AIDomains = *o.AIDomains
	}
	if o.AIPlugins != nil {
		out.AIPlugins = *o.AIPlugins
	}
	if o.APIAuthorizations != nil {
		out.APIAuthorizations = *o.APIAuthorizations
	}
	if o.LDAPSources != nil {
		out.LDAPSources = *o.LDAPSources
	}
	if o.MTLSSources != nil {
		out.MTLSSources = *o.MTLSSources
	}
	if o.OIDCSources != nil {
		out.OIDCSources = *o.OIDCSources
	}
	if o.PACConfigs != nil {
		out.PACConfigs = *o.PACConfigs
	}
	if o.SAMLSources != nil {
		out.SAMLSources = *o.SAMLSources
	}
	if o.AccessPolicies != nil {
		out.AccessPolicies = *o.AccessPolicies
	}
	if o.AgentConfigs != nil {
		out.AgentConfigs = *o.AgentConfigs
	}
	if o.AlertDefinitions != nil {
		out.AlertDefinitions = *o.AlertDefinitions
	}
	if o.Apps != nil {
		out.Apps = *o.Apps
	}
	if o.ContentPolicies != nil {
		out.ContentPolicies = *o.ContentPolicies
	}
	if o.CustomDataTypes != nil {
		out.CustomDataTypes = *o.CustomDataTypes
	}
	if o.DataSets != nil {
		out.DataSets = *o.DataSets
	}
	if o.ExtractorLibs != nil {
		out.ExtractorLibs = *o.ExtractorLibs
	}
	if o.Extractors != nil {
		out.Extractors = *o.Extractors
	}
	if o.IgnoredDomains != nil {
		out.IgnoredDomains = *o.IgnoredDomains
	}
	if o.Label != nil {
		out.Label = *o.Label
	}
	if o.OrgSettings != nil {
		out.OrgSettings = *o.OrgSettings
	}
	if o.ProviderTeams != nil {
		out.ProviderTeams = *o.ProviderTeams
	}
	if o.ProviderTokens != nil {
		out.ProviderTokens = *o.ProviderTokens
	}
	if o.Providers != nil {
		out.Providers = *o.Providers
	}
	if o.Proxyroundtrips != nil {
		out.Proxyroundtrips = *o.Proxyroundtrips
	}
	if o.Sinks != nil {
		out.Sinks = *o.Sinks
	}
	if o.Teams != nil {
		out.Teams = *o.Teams
	}
	if o.Visitedurls != nil {
		out.Visitedurls = *o.Visitedurls
	}
	if o.WebExtensionConfigs != nil {
		out.WebExtensionConfigs = *o.WebExtensionConfigs
	}

	return out
}

// DeepCopy returns a deep copy if the SparseImport.
func (o *SparseImport) DeepCopy() *SparseImport {

	if o == nil {
		return nil
	}

	out := &SparseImport{}
	o.DeepCopyInto(out)

	return out
}

// DeepCopyInto copies the receiver into the given *SparseImport.
func (o *SparseImport) DeepCopyInto(out *SparseImport) {

	target, err := copystructure.Copy(o)
	if err != nil {
		panic(fmt.Sprintf("Unable to deepcopy SparseImport: %s", err))
	}

	*out = *target.(*SparseImport)
}

type mongoAttributesImport struct {
}
type mongoAttributesSparseImport struct {
}
