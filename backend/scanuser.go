// Code generated by elegen. DO NOT EDIT.
// Source: go.acuvity.ai/elemental (templates/model.gotpl)

package api

import (
	"fmt"
	"time"

	"github.com/globalsign/mgo/bson"
	"github.com/mitchellh/copystructure"
	"go.acuvity.ai/elemental"
)

// ScanUser represents the model of a scanuser
type ScanUser struct {
	// When the user accessed the url.
	Timestamp time.Time `json:"timestamp" msgpack:"timestamp" bson:"timestamp" mapstructure:"timestamp,omitempty"`

	// The accessed URL.
	Url string `json:"url" msgpack:"url" bson:"url" mapstructure:"url,omitempty"`

	// The user information.
	User string `json:"user" msgpack:"user" bson:"user" mapstructure:"user,omitempty"`

	ModelVersion int `json:"-" msgpack:"-" bson:"_modelversion"`
}

// NewScanUser returns a new *ScanUser
func NewScanUser() *ScanUser {

	return &ScanUser{
		ModelVersion: 1,
	}
}

// GetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *ScanUser) GetBSON() (any, error) {

	if o == nil {
		return nil, nil
	}

	s := &mongoAttributesScanUser{}

	s.Timestamp = o.Timestamp
	s.Url = o.Url
	s.User = o.User

	return s, nil
}

// SetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *ScanUser) SetBSON(raw bson.Raw) error {

	if o == nil || raw.Kind == bson.ElementNil {
		return bson.ErrSetZero
	}

	s := &mongoAttributesScanUser{}
	if err := raw.Unmarshal(s); err != nil {
		return err
	}

	o.Timestamp = s.Timestamp
	o.Url = s.Url
	o.User = s.User

	return nil
}

// BleveType implements the bleve.Classifier Interface.
func (o *ScanUser) BleveType() string {

	return "scanuser"
}

// DeepCopy returns a deep copy if the ScanUser.
func (o *ScanUser) DeepCopy() *ScanUser {

	if o == nil {
		return nil
	}

	out := &ScanUser{}
	o.DeepCopyInto(out)

	return out
}

// DeepCopyInto copies the receiver into the given *ScanUser.
func (o *ScanUser) DeepCopyInto(out *ScanUser) {

	target, err := copystructure.Copy(o)
	if err != nil {
		panic(fmt.Sprintf("Unable to deepcopy ScanUser: %s", err))
	}

	*out = *target.(*ScanUser)
}

// Validate valides the current information stored into the structure.
func (o *ScanUser) Validate() error {

	errors := elemental.Errors{}
	requiredErrors := elemental.Errors{}

	if len(requiredErrors) > 0 {
		return requiredErrors
	}

	if len(errors) > 0 {
		return errors
	}

	return nil
}

// SpecificationForAttribute returns the AttributeSpecification for the given attribute name key.
func (*ScanUser) SpecificationForAttribute(name string) elemental.AttributeSpecification {

	if v, ok := ScanUserAttributesMap[name]; ok {
		return v
	}

	// We could not find it, so let's check on the lower case indexed spec map
	return ScanUserLowerCaseAttributesMap[name]
}

// AttributeSpecifications returns the full attribute specifications map.
func (*ScanUser) AttributeSpecifications() map[string]elemental.AttributeSpecification {

	return ScanUserAttributesMap
}

// ValueForAttribute returns the value for the given attribute.
// This is a very advanced function that you should not need but in some
// very specific use cases.
func (o *ScanUser) ValueForAttribute(name string) any {

	switch name {
	case "timestamp":
		return o.Timestamp
	case "url":
		return o.Url
	case "user":
		return o.User
	}

	return nil
}

// ScanUserAttributesMap represents the map of attribute for ScanUser.
var ScanUserAttributesMap = map[string]elemental.AttributeSpecification{
	"Timestamp": {
		AllowedChoices: []string{},
		BSONFieldName:  "timestamp",
		ConvertedName:  "Timestamp",
		Description:    `When the user accessed the url.`,
		Exposed:        true,
		Name:           "timestamp",
		Stored:         true,
		Type:           "time",
	},
	"Url": {
		AllowedChoices: []string{},
		BSONFieldName:  "url",
		ConvertedName:  "Url",
		Description:    `The accessed URL.`,
		Exposed:        true,
		Name:           "url",
		Stored:         true,
		Type:           "string",
	},
	"User": {
		AllowedChoices: []string{},
		BSONFieldName:  "user",
		ConvertedName:  "User",
		Description:    `The user information.`,
		Exposed:        true,
		Name:           "user",
		Stored:         true,
		Type:           "string",
	},
}

// ScanUserLowerCaseAttributesMap represents the map of attribute for ScanUser.
var ScanUserLowerCaseAttributesMap = map[string]elemental.AttributeSpecification{
	"timestamp": {
		AllowedChoices: []string{},
		BSONFieldName:  "timestamp",
		ConvertedName:  "Timestamp",
		Description:    `When the user accessed the url.`,
		Exposed:        true,
		Name:           "timestamp",
		Stored:         true,
		Type:           "time",
	},
	"url": {
		AllowedChoices: []string{},
		BSONFieldName:  "url",
		ConvertedName:  "Url",
		Description:    `The accessed URL.`,
		Exposed:        true,
		Name:           "url",
		Stored:         true,
		Type:           "string",
	},
	"user": {
		AllowedChoices: []string{},
		BSONFieldName:  "user",
		ConvertedName:  "User",
		Description:    `The user information.`,
		Exposed:        true,
		Name:           "user",
		Stored:         true,
		Type:           "string",
	},
}

type mongoAttributesScanUser struct {
	Timestamp time.Time `bson:"timestamp"`
	Url       string    `bson:"url"`
	User      string    `bson:"user"`
}
