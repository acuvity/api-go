// Code generated by elegen. DO NOT EDIT.
// Source: go.acuvity.ai/elemental (templates/model.gotpl)

package api

import (
	"fmt"

	"github.com/globalsign/mgo/bson"
	"github.com/mitchellh/copystructure"
	"go.acuvity.ai/elemental"
)

// ToolUse represents the model of a tooluse
type ToolUse struct {
	// The ID of the tool use which the user or application must pass when posting back
	// the tool call results.
	CallID string `json:"callID" msgpack:"callID" bson:"callid" mapstructure:"callID,omitempty"`

	// The input to the tool call. This should be a JSON object which must conform to
	// the JSON schema as was previously defined for the tool.
	Input string `json:"input,omitempty" msgpack:"input,omitempty" bson:"input,omitempty" mapstructure:"input,omitempty"`

	// The name of the tool to call.
	Name string `json:"name" msgpack:"name" bson:"name" mapstructure:"name,omitempty"`

	// The name of the remote MCP server that will execute this call.
	ServerName string `json:"serverName,omitempty" msgpack:"serverName,omitempty" bson:"servername,omitempty" mapstructure:"serverName,omitempty"`

	ModelVersion int `json:"-" msgpack:"-" bson:"_modelversion"`
}

// NewToolUse returns a new *ToolUse
func NewToolUse() *ToolUse {

	return &ToolUse{
		ModelVersion: 1,
	}
}

// GetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *ToolUse) GetBSON() (any, error) {

	if o == nil {
		return nil, nil
	}

	s := &mongoAttributesToolUse{}

	s.CallID = o.CallID
	s.Input = o.Input
	s.Name = o.Name
	s.ServerName = o.ServerName

	return s, nil
}

// SetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *ToolUse) SetBSON(raw bson.Raw) error {

	if o == nil {
		return nil
	}

	s := &mongoAttributesToolUse{}
	if err := raw.Unmarshal(s); err != nil {
		return err
	}

	o.CallID = s.CallID
	o.Input = s.Input
	o.Name = s.Name
	o.ServerName = s.ServerName

	return nil
}

// BleveType implements the bleve.Classifier Interface.
func (o *ToolUse) BleveType() string {

	return "tooluse"
}

// DeepCopy returns a deep copy if the ToolUse.
func (o *ToolUse) DeepCopy() *ToolUse {

	if o == nil {
		return nil
	}

	out := &ToolUse{}
	o.DeepCopyInto(out)

	return out
}

// DeepCopyInto copies the receiver into the given *ToolUse.
func (o *ToolUse) DeepCopyInto(out *ToolUse) {

	target, err := copystructure.Copy(o)
	if err != nil {
		panic(fmt.Sprintf("Unable to deepcopy ToolUse: %s", err))
	}

	*out = *target.(*ToolUse)
}

// Validate valides the current information stored into the structure.
func (o *ToolUse) Validate() error {

	errors := elemental.Errors{}
	requiredErrors := elemental.Errors{}

	if err := elemental.ValidateRequiredString("callID", o.CallID); err != nil {
		requiredErrors = requiredErrors.Append(err)
	}

	if err := elemental.ValidateRequiredString("name", o.Name); err != nil {
		requiredErrors = requiredErrors.Append(err)
	}

	if len(requiredErrors) > 0 {
		return requiredErrors
	}

	if len(errors) > 0 {
		return errors
	}

	return nil
}

// SpecificationForAttribute returns the AttributeSpecification for the given attribute name key.
func (*ToolUse) SpecificationForAttribute(name string) elemental.AttributeSpecification {

	if v, ok := ToolUseAttributesMap[name]; ok {
		return v
	}

	// We could not find it, so let's check on the lower case indexed spec map
	return ToolUseLowerCaseAttributesMap[name]
}

// AttributeSpecifications returns the full attribute specifications map.
func (*ToolUse) AttributeSpecifications() map[string]elemental.AttributeSpecification {

	return ToolUseAttributesMap
}

// ValueForAttribute returns the value for the given attribute.
// This is a very advanced function that you should not need but in some
// very specific use cases.
func (o *ToolUse) ValueForAttribute(name string) any {

	switch name {
	case "callID":
		return o.CallID
	case "input":
		return o.Input
	case "name":
		return o.Name
	case "serverName":
		return o.ServerName
	}

	return nil
}

// ToolUseAttributesMap represents the map of attribute for ToolUse.
var ToolUseAttributesMap = map[string]elemental.AttributeSpecification{
	"CallID": {
		AllowedChoices: []string{},
		BSONFieldName:  "callid",
		ConvertedName:  "CallID",
		Description: `The ID of the tool use which the user or application must pass when posting back
the tool call results.`,
		Exposed:  true,
		Name:     "callID",
		Required: true,
		Stored:   true,
		Type:     "string",
	},
	"Input": {
		AllowedChoices: []string{},
		BSONFieldName:  "input",
		ConvertedName:  "Input",
		Description: `The input to the tool call. This should be a JSON object which must conform to
the JSON schema as was previously defined for the tool.`,
		Exposed: true,
		Name:    "input",
		Stored:  true,
		Type:    "string",
	},
	"Name": {
		AllowedChoices: []string{},
		BSONFieldName:  "name",
		ConvertedName:  "Name",
		Description:    `The name of the tool to call.`,
		Exposed:        true,
		Name:           "name",
		Required:       true,
		Stored:         true,
		Type:           "string",
	},
	"ServerName": {
		AllowedChoices: []string{},
		BSONFieldName:  "servername",
		ConvertedName:  "ServerName",
		Description:    `The name of the remote MCP server that will execute this call.`,
		Exposed:        true,
		Name:           "serverName",
		Stored:         true,
		Type:           "string",
	},
}

// ToolUseLowerCaseAttributesMap represents the map of attribute for ToolUse.
var ToolUseLowerCaseAttributesMap = map[string]elemental.AttributeSpecification{
	"callid": {
		AllowedChoices: []string{},
		BSONFieldName:  "callid",
		ConvertedName:  "CallID",
		Description: `The ID of the tool use which the user or application must pass when posting back
the tool call results.`,
		Exposed:  true,
		Name:     "callID",
		Required: true,
		Stored:   true,
		Type:     "string",
	},
	"input": {
		AllowedChoices: []string{},
		BSONFieldName:  "input",
		ConvertedName:  "Input",
		Description: `The input to the tool call. This should be a JSON object which must conform to
the JSON schema as was previously defined for the tool.`,
		Exposed: true,
		Name:    "input",
		Stored:  true,
		Type:    "string",
	},
	"name": {
		AllowedChoices: []string{},
		BSONFieldName:  "name",
		ConvertedName:  "Name",
		Description:    `The name of the tool to call.`,
		Exposed:        true,
		Name:           "name",
		Required:       true,
		Stored:         true,
		Type:           "string",
	},
	"servername": {
		AllowedChoices: []string{},
		BSONFieldName:  "servername",
		ConvertedName:  "ServerName",
		Description:    `The name of the remote MCP server that will execute this call.`,
		Exposed:        true,
		Name:           "serverName",
		Stored:         true,
		Type:           "string",
	},
}

type mongoAttributesToolUse struct {
	CallID     string `bson:"callid"`
	Input      string `bson:"input,omitempty"`
	Name       string `bson:"name"`
	ServerName string `bson:"servername,omitempty"`
}
