// Code generated by elegen. DO NOT EDIT.
// Source: go.acuvity.ai/elemental (templates/model.gotpl)

package api

import (
	"fmt"

	"github.com/globalsign/mgo/bson"
	"github.com/mitchellh/copystructure"
	"go.acuvity.ai/elemental"
)

// Tool represents the model of a tool
type Tool struct {
	// The description of the tool.
	Description string `json:"description,omitempty" msgpack:"description,omitempty" bson:"description,omitempty" mapstructure:"description,omitempty"`

	// The name of the tool.
	Name string `json:"name,omitempty" msgpack:"name,omitempty" bson:"name,omitempty" mapstructure:"name,omitempty"`

	ModelVersion int `json:"-" msgpack:"-" bson:"_modelversion"`
}

// NewTool returns a new *Tool
func NewTool() *Tool {

	return &Tool{
		ModelVersion: 1,
	}
}

// GetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *Tool) GetBSON() (any, error) {

	if o == nil {
		return nil, nil
	}

	s := &mongoAttributesTool{}

	s.Description = o.Description
	s.Name = o.Name

	return s, nil
}

// SetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *Tool) SetBSON(raw bson.Raw) error {

	if o == nil {
		return nil
	}

	s := &mongoAttributesTool{}
	if err := raw.Unmarshal(s); err != nil {
		return err
	}

	o.Description = s.Description
	o.Name = s.Name

	return nil
}

// BleveType implements the bleve.Classifier Interface.
func (o *Tool) BleveType() string {

	return "tool"
}

// DeepCopy returns a deep copy if the Tool.
func (o *Tool) DeepCopy() *Tool {

	if o == nil {
		return nil
	}

	out := &Tool{}
	o.DeepCopyInto(out)

	return out
}

// DeepCopyInto copies the receiver into the given *Tool.
func (o *Tool) DeepCopyInto(out *Tool) {

	target, err := copystructure.Copy(o)
	if err != nil {
		panic(fmt.Sprintf("Unable to deepcopy Tool: %s", err))
	}

	*out = *target.(*Tool)
}

// Validate valides the current information stored into the structure.
func (o *Tool) Validate() error {

	errors := elemental.Errors{}
	requiredErrors := elemental.Errors{}

	if len(requiredErrors) > 0 {
		return requiredErrors
	}

	if len(errors) > 0 {
		return errors
	}

	return nil
}

// SpecificationForAttribute returns the AttributeSpecification for the given attribute name key.
func (*Tool) SpecificationForAttribute(name string) elemental.AttributeSpecification {

	if v, ok := ToolAttributesMap[name]; ok {
		return v
	}

	// We could not find it, so let's check on the lower case indexed spec map
	return ToolLowerCaseAttributesMap[name]
}

// AttributeSpecifications returns the full attribute specifications map.
func (*Tool) AttributeSpecifications() map[string]elemental.AttributeSpecification {

	return ToolAttributesMap
}

// ValueForAttribute returns the value for the given attribute.
// This is a very advanced function that you should not need but in some
// very specific use cases.
func (o *Tool) ValueForAttribute(name string) any {

	switch name {
	case "description":
		return o.Description
	case "name":
		return o.Name
	}

	return nil
}

// ToolAttributesMap represents the map of attribute for Tool.
var ToolAttributesMap = map[string]elemental.AttributeSpecification{
	"Description": {
		AllowedChoices: []string{},
		BSONFieldName:  "description",
		ConvertedName:  "Description",
		Description:    `The description of the tool.`,
		Exposed:        true,
		Name:           "description",
		Stored:         true,
		Type:           "string",
	},
	"Name": {
		AllowedChoices: []string{},
		BSONFieldName:  "name",
		ConvertedName:  "Name",
		Description:    `The name of the tool.`,
		Exposed:        true,
		Name:           "name",
		Stored:         true,
		Type:           "string",
	},
}

// ToolLowerCaseAttributesMap represents the map of attribute for Tool.
var ToolLowerCaseAttributesMap = map[string]elemental.AttributeSpecification{
	"description": {
		AllowedChoices: []string{},
		BSONFieldName:  "description",
		ConvertedName:  "Description",
		Description:    `The description of the tool.`,
		Exposed:        true,
		Name:           "description",
		Stored:         true,
		Type:           "string",
	},
	"name": {
		AllowedChoices: []string{},
		BSONFieldName:  "name",
		ConvertedName:  "Name",
		Description:    `The name of the tool.`,
		Exposed:        true,
		Name:           "name",
		Stored:         true,
		Type:           "string",
	},
}

type mongoAttributesTool struct {
	Description string `bson:"description,omitempty"`
	Name        string `bson:"name,omitempty"`
}
