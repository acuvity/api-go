// Code generated by elegen. DO NOT EDIT.
// Source: go.acuvity.ai/elemental (templates/model.gotpl)

package api

import (
	"fmt"

	"github.com/globalsign/mgo/bson"
	"github.com/mitchellh/copystructure"
	"go.acuvity.ai/elemental"
)

// ToolCategoryValue represents the possible values for attribute "category".
type ToolCategoryValue string

const (
	// ToolCategoryClient represents the value Client.
	ToolCategoryClient ToolCategoryValue = "Client"

	// ToolCategoryRemoteMCP represents the value RemoteMCP.
	ToolCategoryRemoteMCP ToolCategoryValue = "RemoteMCP"

	// ToolCategoryServer represents the value Server.
	ToolCategoryServer ToolCategoryValue = "Server"
)

// Tool represents the model of a tool
type Tool struct {
	// For MCP tools these represent optional hints about tool behavior.
	MCPAnnotations *MCPToolAnnotations `json:"MCPAnnotations,omitempty" msgpack:"MCPAnnotations,omitempty" bson:"mcpannotations,omitempty" mapstructure:"MCPAnnotations,omitempty"`

	// If category is RemoteMCP, then this describes the remote MCP server.
	MCPServer *MCPServer `json:"MCPServer,omitempty" msgpack:"MCPServer,omitempty" bson:"mcpserver,omitempty" mapstructure:"MCPServer,omitempty"`

	// The category of the tool. This relays information about where the tool is being
	// used. This can be empty if unknown or if this is a tool listing of MCP servers.
	Category ToolCategoryValue `json:"category,omitempty" msgpack:"category,omitempty" bson:"category,omitempty" mapstructure:"category,omitempty"`

	// The description of the tool.
	Description string `json:"description,omitempty" msgpack:"description,omitempty" bson:"description,omitempty" mapstructure:"description,omitempty"`

	// The name of the tool.
	Name string `json:"name,omitempty" msgpack:"name,omitempty" bson:"name,omitempty" mapstructure:"name,omitempty"`

	// The type of the tool as can be optionally passed by the provider.
	Type string `json:"type,omitempty" msgpack:"type,omitempty" bson:"type,omitempty" mapstructure:"type,omitempty"`

	ModelVersion int `json:"-" msgpack:"-" bson:"_modelversion"`
}

// NewTool returns a new *Tool
func NewTool() *Tool {

	return &Tool{
		ModelVersion: 1,
	}
}

// GetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *Tool) GetBSON() (any, error) {

	if o == nil {
		return nil, nil
	}

	s := &mongoAttributesTool{}

	s.MCPAnnotations = o.MCPAnnotations
	s.MCPServer = o.MCPServer
	s.Category = o.Category
	s.Description = o.Description
	s.Name = o.Name
	s.Type = o.Type

	return s, nil
}

// SetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *Tool) SetBSON(raw bson.Raw) error {

	if o == nil || raw.Kind == bson.ElementNil {
		return bson.ErrSetZero
	}

	s := &mongoAttributesTool{}
	if err := raw.Unmarshal(s); err != nil {
		return err
	}

	o.MCPAnnotations = s.MCPAnnotations
	o.MCPServer = s.MCPServer
	o.Category = s.Category
	o.Description = s.Description
	o.Name = s.Name
	o.Type = s.Type

	return nil
}

// BleveType implements the bleve.Classifier Interface.
func (o *Tool) BleveType() string {

	return "tool"
}

// DeepCopy returns a deep copy if the Tool.
func (o *Tool) DeepCopy() *Tool {

	if o == nil {
		return nil
	}

	out := &Tool{}
	o.DeepCopyInto(out)

	return out
}

// DeepCopyInto copies the receiver into the given *Tool.
func (o *Tool) DeepCopyInto(out *Tool) {

	target, err := copystructure.Copy(o)
	if err != nil {
		panic(fmt.Sprintf("Unable to deepcopy Tool: %s", err))
	}

	*out = *target.(*Tool)
}

// Validate valides the current information stored into the structure.
func (o *Tool) Validate() error {

	errors := elemental.Errors{}
	requiredErrors := elemental.Errors{}

	if o.MCPAnnotations != nil {
		elemental.ResetDefaultForZeroValues(o.MCPAnnotations)
		if err := o.MCPAnnotations.Validate(); err != nil {
			errors = errors.Append(err)
		}
	}

	if o.MCPServer != nil {
		elemental.ResetDefaultForZeroValues(o.MCPServer)
		if err := o.MCPServer.Validate(); err != nil {
			errors = errors.Append(err)
		}
	}

	if err := elemental.ValidateStringInList("category", string(o.Category), []string{"Client", "Server", "RemoteMCP"}, false); err != nil {
		errors = errors.Append(err)
	}

	if len(requiredErrors) > 0 {
		return requiredErrors
	}

	if len(errors) > 0 {
		return errors
	}

	return nil
}

// SpecificationForAttribute returns the AttributeSpecification for the given attribute name key.
func (*Tool) SpecificationForAttribute(name string) elemental.AttributeSpecification {

	if v, ok := ToolAttributesMap[name]; ok {
		return v
	}

	// We could not find it, so let's check on the lower case indexed spec map
	return ToolLowerCaseAttributesMap[name]
}

// AttributeSpecifications returns the full attribute specifications map.
func (*Tool) AttributeSpecifications() map[string]elemental.AttributeSpecification {

	return ToolAttributesMap
}

// ValueForAttribute returns the value for the given attribute.
// This is a very advanced function that you should not need but in some
// very specific use cases.
func (o *Tool) ValueForAttribute(name string) any {

	switch name {
	case "MCPAnnotations":
		return o.MCPAnnotations
	case "MCPServer":
		return o.MCPServer
	case "category":
		return o.Category
	case "description":
		return o.Description
	case "name":
		return o.Name
	case "type":
		return o.Type
	}

	return nil
}

// ToolAttributesMap represents the map of attribute for Tool.
var ToolAttributesMap = map[string]elemental.AttributeSpecification{
	"MCPAnnotations": {
		AllowedChoices: []string{},
		BSONFieldName:  "mcpannotations",
		ConvertedName:  "MCPAnnotations",
		Description:    `For MCP tools these represent optional hints about tool behavior.`,
		Exposed:        true,
		Name:           "MCPAnnotations",
		Stored:         true,
		SubType:        "mcptoolannotations",
		Type:           "ref",
	},
	"MCPServer": {
		AllowedChoices: []string{},
		BSONFieldName:  "mcpserver",
		ConvertedName:  "MCPServer",
		Description:    `If category is RemoteMCP, then this describes the remote MCP server.`,
		Exposed:        true,
		Name:           "MCPServer",
		Stored:         true,
		SubType:        "mcpserver",
		Type:           "ref",
	},
	"Category": {
		AllowedChoices: []string{"Client", "Server", "RemoteMCP"},
		BSONFieldName:  "category",
		ConvertedName:  "Category",
		Description: `The category of the tool. This relays information about where the tool is being
used. This can be empty if unknown or if this is a tool listing of MCP servers.`,
		Exposed: true,
		Name:    "category",
		Stored:  true,
		Type:    "enum",
	},
	"Description": {
		AllowedChoices: []string{},
		BSONFieldName:  "description",
		ConvertedName:  "Description",
		Description:    `The description of the tool.`,
		Exposed:        true,
		Name:           "description",
		Stored:         true,
		Type:           "string",
	},
	"Name": {
		AllowedChoices: []string{},
		BSONFieldName:  "name",
		ConvertedName:  "Name",
		Description:    `The name of the tool.`,
		Exposed:        true,
		Name:           "name",
		Stored:         true,
		Type:           "string",
	},
	"Type": {
		AllowedChoices: []string{},
		BSONFieldName:  "type",
		ConvertedName:  "Type",
		Description:    `The type of the tool as can be optionally passed by the provider.`,
		Exposed:        true,
		Name:           "type",
		Stored:         true,
		Type:           "string",
	},
}

// ToolLowerCaseAttributesMap represents the map of attribute for Tool.
var ToolLowerCaseAttributesMap = map[string]elemental.AttributeSpecification{
	"mcpannotations": {
		AllowedChoices: []string{},
		BSONFieldName:  "mcpannotations",
		ConvertedName:  "MCPAnnotations",
		Description:    `For MCP tools these represent optional hints about tool behavior.`,
		Exposed:        true,
		Name:           "MCPAnnotations",
		Stored:         true,
		SubType:        "mcptoolannotations",
		Type:           "ref",
	},
	"mcpserver": {
		AllowedChoices: []string{},
		BSONFieldName:  "mcpserver",
		ConvertedName:  "MCPServer",
		Description:    `If category is RemoteMCP, then this describes the remote MCP server.`,
		Exposed:        true,
		Name:           "MCPServer",
		Stored:         true,
		SubType:        "mcpserver",
		Type:           "ref",
	},
	"category": {
		AllowedChoices: []string{"Client", "Server", "RemoteMCP"},
		BSONFieldName:  "category",
		ConvertedName:  "Category",
		Description: `The category of the tool. This relays information about where the tool is being
used. This can be empty if unknown or if this is a tool listing of MCP servers.`,
		Exposed: true,
		Name:    "category",
		Stored:  true,
		Type:    "enum",
	},
	"description": {
		AllowedChoices: []string{},
		BSONFieldName:  "description",
		ConvertedName:  "Description",
		Description:    `The description of the tool.`,
		Exposed:        true,
		Name:           "description",
		Stored:         true,
		Type:           "string",
	},
	"name": {
		AllowedChoices: []string{},
		BSONFieldName:  "name",
		ConvertedName:  "Name",
		Description:    `The name of the tool.`,
		Exposed:        true,
		Name:           "name",
		Stored:         true,
		Type:           "string",
	},
	"type": {
		AllowedChoices: []string{},
		BSONFieldName:  "type",
		ConvertedName:  "Type",
		Description:    `The type of the tool as can be optionally passed by the provider.`,
		Exposed:        true,
		Name:           "type",
		Stored:         true,
		Type:           "string",
	},
}

type mongoAttributesTool struct {
	MCPAnnotations *MCPToolAnnotations `bson:"mcpannotations,omitempty"`
	MCPServer      *MCPServer          `bson:"mcpserver,omitempty"`
	Category       ToolCategoryValue   `bson:"category,omitempty"`
	Description    string              `bson:"description,omitempty"`
	Name           string              `bson:"name,omitempty"`
	Type           string              `bson:"type,omitempty"`
}
