// Code generated by elegen. DO NOT EDIT.
// Source: go.acuvity.ai/elemental (templates/model.gotpl)

package api

import (
	"fmt"

	"github.com/globalsign/mgo/bson"
	"github.com/mitchellh/copystructure"
	"go.acuvity.ai/elemental"
)

// ToolResult represents the model of a toolresult
type ToolResult struct {
	// The ID of the tool use as previously returned by a models tool use response.
	CallID string `json:"callID" msgpack:"callID" bson:"callid" mapstructure:"callID,omitempty"`

	// The content of the tool call results.
	Content string `json:"content" msgpack:"content" bson:"content" mapstructure:"content,omitempty"`

	// Indicates if the tool call failed.
	IsError bool `json:"isError" msgpack:"isError" bson:"iserror" mapstructure:"isError,omitempty"`

	ModelVersion int `json:"-" msgpack:"-" bson:"_modelversion"`
}

// NewToolResult returns a new *ToolResult
func NewToolResult() *ToolResult {

	return &ToolResult{
		ModelVersion: 1,
		IsError:      false,
	}
}

// GetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *ToolResult) GetBSON() (any, error) {

	if o == nil {
		return nil, nil
	}

	s := &mongoAttributesToolResult{}

	s.CallID = o.CallID
	s.Content = o.Content
	s.IsError = o.IsError

	return s, nil
}

// SetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *ToolResult) SetBSON(raw bson.Raw) error {

	if o == nil || raw.Kind == bson.ElementNil {
		return bson.ErrSetZero
	}

	s := &mongoAttributesToolResult{}
	if err := raw.Unmarshal(s); err != nil {
		return err
	}

	o.CallID = s.CallID
	o.Content = s.Content
	o.IsError = s.IsError

	return nil
}

// BleveType implements the bleve.Classifier Interface.
func (o *ToolResult) BleveType() string {

	return "toolresult"
}

// DeepCopy returns a deep copy if the ToolResult.
func (o *ToolResult) DeepCopy() *ToolResult {

	if o == nil {
		return nil
	}

	out := &ToolResult{}
	o.DeepCopyInto(out)

	return out
}

// DeepCopyInto copies the receiver into the given *ToolResult.
func (o *ToolResult) DeepCopyInto(out *ToolResult) {

	target, err := copystructure.Copy(o)
	if err != nil {
		panic(fmt.Sprintf("Unable to deepcopy ToolResult: %s", err))
	}

	*out = *target.(*ToolResult)
}

// Validate valides the current information stored into the structure.
func (o *ToolResult) Validate() error {

	errors := elemental.Errors{}
	requiredErrors := elemental.Errors{}

	if err := elemental.ValidateRequiredString("callID", o.CallID); err != nil {
		requiredErrors = requiredErrors.Append(err)
	}

	if len(requiredErrors) > 0 {
		return requiredErrors
	}

	if len(errors) > 0 {
		return errors
	}

	return nil
}

// SpecificationForAttribute returns the AttributeSpecification for the given attribute name key.
func (*ToolResult) SpecificationForAttribute(name string) elemental.AttributeSpecification {

	if v, ok := ToolResultAttributesMap[name]; ok {
		return v
	}

	// We could not find it, so let's check on the lower case indexed spec map
	return ToolResultLowerCaseAttributesMap[name]
}

// AttributeSpecifications returns the full attribute specifications map.
func (*ToolResult) AttributeSpecifications() map[string]elemental.AttributeSpecification {

	return ToolResultAttributesMap
}

// ValueForAttribute returns the value for the given attribute.
// This is a very advanced function that you should not need but in some
// very specific use cases.
func (o *ToolResult) ValueForAttribute(name string) any {

	switch name {
	case "callID":
		return o.CallID
	case "content":
		return o.Content
	case "isError":
		return o.IsError
	}

	return nil
}

// ToolResultAttributesMap represents the map of attribute for ToolResult.
var ToolResultAttributesMap = map[string]elemental.AttributeSpecification{
	"CallID": {
		AllowedChoices: []string{},
		BSONFieldName:  "callid",
		ConvertedName:  "CallID",
		Description:    `The ID of the tool use as previously returned by a models tool use response.`,
		Exposed:        true,
		Name:           "callID",
		Required:       true,
		Stored:         true,
		Type:           "string",
	},
	"Content": {
		AllowedChoices: []string{},
		BSONFieldName:  "content",
		ConvertedName:  "Content",
		Description:    `The content of the tool call results.`,
		Exposed:        true,
		Name:           "content",
		Stored:         true,
		Type:           "string",
	},
	"IsError": {
		AllowedChoices: []string{},
		BSONFieldName:  "iserror",
		ConvertedName:  "IsError",
		Description:    `Indicates if the tool call failed.`,
		Exposed:        true,
		Name:           "isError",
		Stored:         true,
		Type:           "boolean",
	},
}

// ToolResultLowerCaseAttributesMap represents the map of attribute for ToolResult.
var ToolResultLowerCaseAttributesMap = map[string]elemental.AttributeSpecification{
	"callid": {
		AllowedChoices: []string{},
		BSONFieldName:  "callid",
		ConvertedName:  "CallID",
		Description:    `The ID of the tool use as previously returned by a models tool use response.`,
		Exposed:        true,
		Name:           "callID",
		Required:       true,
		Stored:         true,
		Type:           "string",
	},
	"content": {
		AllowedChoices: []string{},
		BSONFieldName:  "content",
		ConvertedName:  "Content",
		Description:    `The content of the tool call results.`,
		Exposed:        true,
		Name:           "content",
		Stored:         true,
		Type:           "string",
	},
	"iserror": {
		AllowedChoices: []string{},
		BSONFieldName:  "iserror",
		ConvertedName:  "IsError",
		Description:    `Indicates if the tool call failed.`,
		Exposed:        true,
		Name:           "isError",
		Stored:         true,
		Type:           "boolean",
	},
}

type mongoAttributesToolResult struct {
	CallID  string `bson:"callid"`
	Content string `bson:"content"`
	IsError bool   `bson:"iserror"`
}
