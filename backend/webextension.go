// Code generated by elegen. DO NOT EDIT.
// Source: go.acuvity.ai/elemental (templates/model.gotpl)

package api

import (
	"fmt"
	"slices"
	"time"

	"github.com/globalsign/mgo/bson"
	"github.com/mitchellh/copystructure"
	"go.acuvity.ai/elemental"
)

// WebExtensionStatusValue represents the possible values for attribute "status".
type WebExtensionStatusValue string

const (
	// WebExtensionStatusAlive represents the value Alive.
	WebExtensionStatusAlive WebExtensionStatusValue = "Alive"

	// WebExtensionStatusPaused represents the value Paused.
	WebExtensionStatusPaused WebExtensionStatusValue = "Paused"

	// WebExtensionStatusStopped represents the value Stopped.
	WebExtensionStatusStopped WebExtensionStatusValue = "Stopped"
)

// WebExtensionIdentity represents the Identity of the object.
var WebExtensionIdentity = elemental.Identity{
	Name:     "webextension",
	Category: "webextensions",
	Package:  "lain",
	Private:  false,
}

// WebExtensionsList represents a list of WebExtensions
type WebExtensionsList []*WebExtension

// Identity returns the identity of the objects in the list.
func (o WebExtensionsList) Identity() elemental.Identity {

	return WebExtensionIdentity
}

// Copy returns a pointer to a copy the WebExtensionsList.
func (o WebExtensionsList) Copy() elemental.Identifiables {

	out := slices.Clone(o)
	return &out
}

// Append appends the objects to the a new copy of the WebExtensionsList.
func (o WebExtensionsList) Append(objects ...elemental.Identifiable) elemental.Identifiables {

	out := slices.Clone(o)
	for _, obj := range objects {
		out = append(out, obj.(*WebExtension))
	}

	return out
}

// List converts the object to an elemental.IdentifiablesList.
func (o WebExtensionsList) List() elemental.IdentifiablesList {

	out := make(elemental.IdentifiablesList, len(o))
	for i := range len(o) {
		out[i] = o[i]
	}

	return out
}

// DefaultOrder returns the default ordering fields of the content.
func (o WebExtensionsList) DefaultOrder() []string {

	return []string{}
}

// ToSparse returns the WebExtensionsList converted to SparseWebExtensionsList.
// Objects in the list will only contain the given fields. No field means entire field set.
func (o WebExtensionsList) ToSparse(fields ...string) elemental.Identifiables {

	out := make(SparseWebExtensionsList, len(o))
	for i := range len(o) {
		out[i] = o[i].ToSparse(fields...).(*SparseWebExtension)
	}

	return out
}

// Version returns the version of the content.
func (o WebExtensionsList) Version() int {

	return 1
}

// WebExtension represents the model of a webextension
type WebExtension struct {
	// ID is the identifier of the object.
	ID string `json:"ID,omitempty" msgpack:"ID,omitempty" bson:"-" mapstructure:"ID,omitempty"`

	// The state of the system proxy management.
	BrowserProxyManagementState bool `json:"browserProxyManagementState" msgpack:"browserProxyManagementState" bson:"browserproxymanagementstate" mapstructure:"browserProxyManagementState,omitempty"`

	// The current version of the WebExtension.
	CurrentVersion string `json:"currentVersion" msgpack:"currentVersion" bson:"currentversion" mapstructure:"currentVersion,omitempty"`

	// The hash of the structure used to compare with new import version.
	ImportHash string `json:"importHash,omitempty" msgpack:"importHash,omitempty" bson:"importhash,omitempty" mapstructure:"importHash,omitempty"`

	// The user-defined import label that allows the system to group resources from the
	// same import operation.
	ImportLabel string `json:"importLabel,omitempty" msgpack:"importLabel,omitempty" bson:"importlabel,omitempty" mapstructure:"importLabel,omitempty"`

	// The ID of the WebExtension installation.
	InstallationID string `json:"installationID" msgpack:"installationID" bson:"installationid" mapstructure:"installationID,omitempty"`

	// The namespace of the object.
	Namespace string `json:"namespace,omitempty" msgpack:"namespace,omitempty" bson:"namespace,omitempty" mapstructure:"namespace,omitempty"`

	// The last ping recorded for the WebExtension.
	Ping time.Time `json:"ping" msgpack:"ping" bson:"ping" mapstructure:"ping,omitempty"`

	// The principal of the object.
	Principal *Principal `json:"principal" msgpack:"principal" bson:"principal" mapstructure:"principal,omitempty"`

	// The start time for the WebExtension.
	Start time.Time `json:"start" msgpack:"start" bson:"start" mapstructure:"start,omitempty"`

	// The status of the WebExtension.
	Status WebExtensionStatusValue `json:"status" msgpack:"status" bson:"status" mapstructure:"status,omitempty"`

	// The browser user agent.
	UserAgent string `json:"userAgent" msgpack:"userAgent" bson:"useragent" mapstructure:"userAgent,omitempty"`

	// Hash of the object used to shard the data.
	ZHash int `json:"-" msgpack:"-" bson:"zhash" mapstructure:"-,omitempty"`

	// Sharding zone.
	Zone int `json:"-" msgpack:"-" bson:"zone" mapstructure:"-,omitempty"`

	ModelVersion int `json:"-" msgpack:"-" bson:"_modelversion"`
}

// NewWebExtension returns a new *WebExtension
func NewWebExtension() *WebExtension {

	return &WebExtension{
		ModelVersion: 1,
		Principal:    NewPrincipal(),
	}
}

// Identity returns the Identity of the object.
func (o *WebExtension) Identity() elemental.Identity {

	return WebExtensionIdentity
}

// Identifier returns the value of the object's unique identifier.
func (o *WebExtension) Identifier() string {

	return o.ID
}

// SetIdentifier sets the value of the object's unique identifier.
func (o *WebExtension) SetIdentifier(id string) {

	o.ID = id
}

// GetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *WebExtension) GetBSON() (any, error) {

	if o == nil {
		return nil, nil
	}

	s := &mongoAttributesWebExtension{}

	if o.ID != "" {
		s.ID = bson.ObjectIdHex(o.ID)
	}
	s.BrowserProxyManagementState = o.BrowserProxyManagementState
	s.CurrentVersion = o.CurrentVersion
	s.ImportHash = o.ImportHash
	s.ImportLabel = o.ImportLabel
	s.InstallationID = o.InstallationID
	s.Namespace = o.Namespace
	s.Ping = o.Ping
	s.Principal = o.Principal
	s.Start = o.Start
	s.Status = o.Status
	s.UserAgent = o.UserAgent
	s.ZHash = o.ZHash
	s.Zone = o.Zone

	return s, nil
}

// SetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *WebExtension) SetBSON(raw bson.Raw) error {

	if o == nil {
		return nil
	}

	s := &mongoAttributesWebExtension{}
	if err := raw.Unmarshal(s); err != nil {
		return err
	}

	o.ID = s.ID.Hex()
	o.BrowserProxyManagementState = s.BrowserProxyManagementState
	o.CurrentVersion = s.CurrentVersion
	o.ImportHash = s.ImportHash
	o.ImportLabel = s.ImportLabel
	o.InstallationID = s.InstallationID
	o.Namespace = s.Namespace
	o.Ping = s.Ping
	o.Principal = s.Principal
	o.Start = s.Start
	o.Status = s.Status
	o.UserAgent = s.UserAgent
	o.ZHash = s.ZHash
	o.Zone = s.Zone

	return nil
}

// Version returns the hardcoded version of the model.
func (o *WebExtension) Version() int {

	return 1
}

// BleveType implements the bleve.Classifier Interface.
func (o *WebExtension) BleveType() string {

	return "webextension"
}

// DefaultOrder returns the list of default ordering fields.
func (o *WebExtension) DefaultOrder() []string {

	return []string{}
}

// Doc returns the documentation for the object
func (o *WebExtension) Doc() string {

	return `Stores information about a known WebExtension.`
}

func (o *WebExtension) String() string {

	return fmt.Sprintf("<%s:%s>", o.Identity().Name, o.Identifier())
}

// GetImportHash returns the ImportHash of the receiver.
func (o *WebExtension) GetImportHash() string {

	return o.ImportHash
}

// SetImportHash sets the property ImportHash of the receiver using the given value.
func (o *WebExtension) SetImportHash(importHash string) {

	o.ImportHash = importHash
}

// GetImportLabel returns the ImportLabel of the receiver.
func (o *WebExtension) GetImportLabel() string {

	return o.ImportLabel
}

// SetImportLabel sets the property ImportLabel of the receiver using the given value.
func (o *WebExtension) SetImportLabel(importLabel string) {

	o.ImportLabel = importLabel
}

// GetNamespace returns the Namespace of the receiver.
func (o *WebExtension) GetNamespace() string {

	return o.Namespace
}

// SetNamespace sets the property Namespace of the receiver using the given value.
func (o *WebExtension) SetNamespace(namespace string) {

	o.Namespace = namespace
}

// ToSparse returns the sparse version of the model.
// The returned object will only contain the given fields. No field means entire field set.
func (o *WebExtension) ToSparse(fields ...string) elemental.SparseIdentifiable {

	if len(fields) == 0 {
		// nolint: goimports
		return &SparseWebExtension{
			ID:                          &o.ID,
			BrowserProxyManagementState: &o.BrowserProxyManagementState,
			CurrentVersion:              &o.CurrentVersion,
			ImportHash:                  &o.ImportHash,
			ImportLabel:                 &o.ImportLabel,
			InstallationID:              &o.InstallationID,
			Namespace:                   &o.Namespace,
			Ping:                        &o.Ping,
			Principal:                   o.Principal,
			Start:                       &o.Start,
			Status:                      &o.Status,
			UserAgent:                   &o.UserAgent,
			ZHash:                       &o.ZHash,
			Zone:                        &o.Zone,
		}
	}

	sp := &SparseWebExtension{}
	for _, f := range fields {
		switch f {
		case "ID":
			sp.ID = &(o.ID)
		case "browserProxyManagementState":
			sp.BrowserProxyManagementState = &(o.BrowserProxyManagementState)
		case "currentVersion":
			sp.CurrentVersion = &(o.CurrentVersion)
		case "importHash":
			sp.ImportHash = &(o.ImportHash)
		case "importLabel":
			sp.ImportLabel = &(o.ImportLabel)
		case "installationID":
			sp.InstallationID = &(o.InstallationID)
		case "namespace":
			sp.Namespace = &(o.Namespace)
		case "ping":
			sp.Ping = &(o.Ping)
		case "principal":
			sp.Principal = o.Principal
		case "start":
			sp.Start = &(o.Start)
		case "status":
			sp.Status = &(o.Status)
		case "userAgent":
			sp.UserAgent = &(o.UserAgent)
		case "zHash":
			sp.ZHash = &(o.ZHash)
		case "zone":
			sp.Zone = &(o.Zone)
		}
	}

	return sp
}

// Patch apply the non nil value of a *SparseWebExtension to the object.
func (o *WebExtension) Patch(sparse elemental.SparseIdentifiable) {
	if !sparse.Identity().IsEqual(o.Identity()) {
		panic("cannot patch from a parse with different identity")
	}

	so := sparse.(*SparseWebExtension)
	if so.ID != nil {
		o.ID = *so.ID
	}
	if so.BrowserProxyManagementState != nil {
		o.BrowserProxyManagementState = *so.BrowserProxyManagementState
	}
	if so.CurrentVersion != nil {
		o.CurrentVersion = *so.CurrentVersion
	}
	if so.ImportHash != nil {
		o.ImportHash = *so.ImportHash
	}
	if so.ImportLabel != nil {
		o.ImportLabel = *so.ImportLabel
	}
	if so.InstallationID != nil {
		o.InstallationID = *so.InstallationID
	}
	if so.Namespace != nil {
		o.Namespace = *so.Namespace
	}
	if so.Ping != nil {
		o.Ping = *so.Ping
	}
	if so.Principal != nil {
		o.Principal = so.Principal
	}
	if so.Start != nil {
		o.Start = *so.Start
	}
	if so.Status != nil {
		o.Status = *so.Status
	}
	if so.UserAgent != nil {
		o.UserAgent = *so.UserAgent
	}
	if so.ZHash != nil {
		o.ZHash = *so.ZHash
	}
	if so.Zone != nil {
		o.Zone = *so.Zone
	}
}

// DeepCopy returns a deep copy if the WebExtension.
func (o *WebExtension) DeepCopy() *WebExtension {

	if o == nil {
		return nil
	}

	out := &WebExtension{}
	o.DeepCopyInto(out)

	return out
}

// DeepCopyInto copies the receiver into the given *WebExtension.
func (o *WebExtension) DeepCopyInto(out *WebExtension) {

	target, err := copystructure.Copy(o)
	if err != nil {
		panic(fmt.Sprintf("Unable to deepcopy WebExtension: %s", err))
	}

	*out = *target.(*WebExtension)
}

// Validate valides the current information stored into the structure.
func (o *WebExtension) Validate() error {

	errors := elemental.Errors{}
	requiredErrors := elemental.Errors{}

	if err := elemental.ValidateRequiredString("currentVersion", o.CurrentVersion); err != nil {
		requiredErrors = requiredErrors.Append(err)
	}

	if err := elemental.ValidateRequiredString("installationID", o.InstallationID); err != nil {
		requiredErrors = requiredErrors.Append(err)
	}

	if err := elemental.ValidateRequiredTime("ping", o.Ping); err != nil {
		requiredErrors = requiredErrors.Append(err)
	}

	if o.Principal != nil {
		elemental.ResetDefaultForZeroValues(o.Principal)
		if err := o.Principal.Validate(); err != nil {
			errors = errors.Append(err)
		}
	}

	if err := elemental.ValidateRequiredTime("start", o.Start); err != nil {
		requiredErrors = requiredErrors.Append(err)
	}

	if err := elemental.ValidateRequiredString("status", string(o.Status)); err != nil {
		requiredErrors = requiredErrors.Append(err)
	}

	if err := elemental.ValidateStringInList("status", string(o.Status), []string{"Alive", "Paused", "Stopped"}, false); err != nil {
		errors = errors.Append(err)
	}

	if len(requiredErrors) > 0 {
		return requiredErrors
	}

	if len(errors) > 0 {
		return errors
	}

	return nil
}

// SpecificationForAttribute returns the AttributeSpecification for the given attribute name key.
func (*WebExtension) SpecificationForAttribute(name string) elemental.AttributeSpecification {

	if v, ok := WebExtensionAttributesMap[name]; ok {
		return v
	}

	// We could not find it, so let's check on the lower case indexed spec map
	return WebExtensionLowerCaseAttributesMap[name]
}

// AttributeSpecifications returns the full attribute specifications map.
func (*WebExtension) AttributeSpecifications() map[string]elemental.AttributeSpecification {

	return WebExtensionAttributesMap
}

// ValueForAttribute returns the value for the given attribute.
// This is a very advanced function that you should not need but in some
// very specific use cases.
func (o *WebExtension) ValueForAttribute(name string) any {

	switch name {
	case "ID":
		return o.ID
	case "browserProxyManagementState":
		return o.BrowserProxyManagementState
	case "currentVersion":
		return o.CurrentVersion
	case "importHash":
		return o.ImportHash
	case "importLabel":
		return o.ImportLabel
	case "installationID":
		return o.InstallationID
	case "namespace":
		return o.Namespace
	case "ping":
		return o.Ping
	case "principal":
		return o.Principal
	case "start":
		return o.Start
	case "status":
		return o.Status
	case "userAgent":
		return o.UserAgent
	case "zHash":
		return o.ZHash
	case "zone":
		return o.Zone
	}

	return nil
}

// WebExtensionAttributesMap represents the map of attribute for WebExtension.
var WebExtensionAttributesMap = map[string]elemental.AttributeSpecification{
	"ID": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "_id",
		ConvertedName:  "ID",
		Description:    `ID is the identifier of the object.`,
		Exposed:        true,
		Filterable:     true,
		Identifier:     true,
		Name:           "ID",
		Orderable:      true,
		ReadOnly:       true,
		Stored:         true,
		Type:           "string",
	},
	"BrowserProxyManagementState": {
		AllowedChoices: []string{},
		BSONFieldName:  "browserproxymanagementstate",
		ConvertedName:  "BrowserProxyManagementState",
		Description:    `The state of the system proxy management.`,
		Exposed:        true,
		Name:           "browserProxyManagementState",
		Stored:         true,
		Type:           "boolean",
	},
	"CurrentVersion": {
		AllowedChoices: []string{},
		BSONFieldName:  "currentversion",
		ConvertedName:  "CurrentVersion",
		Description:    `The current version of the WebExtension.`,
		Exposed:        true,
		Name:           "currentVersion",
		Required:       true,
		Stored:         true,
		Type:           "string",
	},
	"ImportHash": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "importhash",
		ConvertedName:  "ImportHash",
		CreationOnly:   true,
		Description:    `The hash of the structure used to compare with new import version.`,
		Exposed:        true,
		Getter:         true,
		Name:           "importHash",
		Setter:         true,
		Stored:         true,
		Type:           "string",
	},
	"ImportLabel": {
		AllowedChoices: []string{},
		BSONFieldName:  "importlabel",
		ConvertedName:  "ImportLabel",
		CreationOnly:   true,
		Description: `The user-defined import label that allows the system to group resources from the
same import operation.`,
		Exposed: true,
		Getter:  true,
		Name:    "importLabel",
		Setter:  true,
		Stored:  true,
		Type:    "string",
	},
	"InstallationID": {
		AllowedChoices: []string{},
		BSONFieldName:  "installationid",
		ConvertedName:  "InstallationID",
		Description:    `The ID of the WebExtension installation.`,
		Exposed:        true,
		Name:           "installationID",
		Required:       true,
		Stored:         true,
		Type:           "string",
	},
	"Namespace": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "namespace",
		ConvertedName:  "Namespace",
		Description:    `The namespace of the object.`,
		Exposed:        true,
		Getter:         true,
		Name:           "namespace",
		Orderable:      true,
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Type:           "string",
	},
	"Ping": {
		AllowedChoices: []string{},
		BSONFieldName:  "ping",
		ConvertedName:  "Ping",
		Description:    `The last ping recorded for the WebExtension.`,
		Exposed:        true,
		Name:           "ping",
		Required:       true,
		Stored:         true,
		Type:           "time",
	},
	"Principal": {
		AllowedChoices: []string{},
		BSONFieldName:  "principal",
		ConvertedName:  "Principal",
		Description:    `The principal of the object.`,
		Exposed:        true,
		Name:           "principal",
		Required:       true,
		Stored:         true,
		SubType:        "principal",
		Type:           "ref",
	},
	"Start": {
		AllowedChoices: []string{},
		BSONFieldName:  "start",
		ConvertedName:  "Start",
		Description:    `The start time for the WebExtension.`,
		Exposed:        true,
		Name:           "start",
		Required:       true,
		Stored:         true,
		Type:           "time",
	},
	"Status": {
		AllowedChoices: []string{"Alive", "Paused", "Stopped"},
		BSONFieldName:  "status",
		ConvertedName:  "Status",
		Description:    `The status of the WebExtension.`,
		Exposed:        true,
		Name:           "status",
		Required:       true,
		Stored:         true,
		Type:           "enum",
	},
	"UserAgent": {
		AllowedChoices: []string{},
		BSONFieldName:  "useragent",
		ConvertedName:  "UserAgent",
		Description:    `The browser user agent.`,
		Exposed:        true,
		Name:           "userAgent",
		Stored:         true,
		Type:           "string",
	},
}

// WebExtensionLowerCaseAttributesMap represents the map of attribute for WebExtension.
var WebExtensionLowerCaseAttributesMap = map[string]elemental.AttributeSpecification{
	"id": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "_id",
		ConvertedName:  "ID",
		Description:    `ID is the identifier of the object.`,
		Exposed:        true,
		Filterable:     true,
		Identifier:     true,
		Name:           "ID",
		Orderable:      true,
		ReadOnly:       true,
		Stored:         true,
		Type:           "string",
	},
	"browserproxymanagementstate": {
		AllowedChoices: []string{},
		BSONFieldName:  "browserproxymanagementstate",
		ConvertedName:  "BrowserProxyManagementState",
		Description:    `The state of the system proxy management.`,
		Exposed:        true,
		Name:           "browserProxyManagementState",
		Stored:         true,
		Type:           "boolean",
	},
	"currentversion": {
		AllowedChoices: []string{},
		BSONFieldName:  "currentversion",
		ConvertedName:  "CurrentVersion",
		Description:    `The current version of the WebExtension.`,
		Exposed:        true,
		Name:           "currentVersion",
		Required:       true,
		Stored:         true,
		Type:           "string",
	},
	"importhash": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "importhash",
		ConvertedName:  "ImportHash",
		CreationOnly:   true,
		Description:    `The hash of the structure used to compare with new import version.`,
		Exposed:        true,
		Getter:         true,
		Name:           "importHash",
		Setter:         true,
		Stored:         true,
		Type:           "string",
	},
	"importlabel": {
		AllowedChoices: []string{},
		BSONFieldName:  "importlabel",
		ConvertedName:  "ImportLabel",
		CreationOnly:   true,
		Description: `The user-defined import label that allows the system to group resources from the
same import operation.`,
		Exposed: true,
		Getter:  true,
		Name:    "importLabel",
		Setter:  true,
		Stored:  true,
		Type:    "string",
	},
	"installationid": {
		AllowedChoices: []string{},
		BSONFieldName:  "installationid",
		ConvertedName:  "InstallationID",
		Description:    `The ID of the WebExtension installation.`,
		Exposed:        true,
		Name:           "installationID",
		Required:       true,
		Stored:         true,
		Type:           "string",
	},
	"namespace": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "namespace",
		ConvertedName:  "Namespace",
		Description:    `The namespace of the object.`,
		Exposed:        true,
		Getter:         true,
		Name:           "namespace",
		Orderable:      true,
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Type:           "string",
	},
	"ping": {
		AllowedChoices: []string{},
		BSONFieldName:  "ping",
		ConvertedName:  "Ping",
		Description:    `The last ping recorded for the WebExtension.`,
		Exposed:        true,
		Name:           "ping",
		Required:       true,
		Stored:         true,
		Type:           "time",
	},
	"principal": {
		AllowedChoices: []string{},
		BSONFieldName:  "principal",
		ConvertedName:  "Principal",
		Description:    `The principal of the object.`,
		Exposed:        true,
		Name:           "principal",
		Required:       true,
		Stored:         true,
		SubType:        "principal",
		Type:           "ref",
	},
	"start": {
		AllowedChoices: []string{},
		BSONFieldName:  "start",
		ConvertedName:  "Start",
		Description:    `The start time for the WebExtension.`,
		Exposed:        true,
		Name:           "start",
		Required:       true,
		Stored:         true,
		Type:           "time",
	},
	"status": {
		AllowedChoices: []string{"Alive", "Paused", "Stopped"},
		BSONFieldName:  "status",
		ConvertedName:  "Status",
		Description:    `The status of the WebExtension.`,
		Exposed:        true,
		Name:           "status",
		Required:       true,
		Stored:         true,
		Type:           "enum",
	},
	"useragent": {
		AllowedChoices: []string{},
		BSONFieldName:  "useragent",
		ConvertedName:  "UserAgent",
		Description:    `The browser user agent.`,
		Exposed:        true,
		Name:           "userAgent",
		Stored:         true,
		Type:           "string",
	},
}

// SparseWebExtensionsList represents a list of SparseWebExtensions
type SparseWebExtensionsList []*SparseWebExtension

// Identity returns the identity of the objects in the list.
func (o SparseWebExtensionsList) Identity() elemental.Identity {

	return WebExtensionIdentity
}

// Copy returns a pointer to a copy the SparseWebExtensionsList.
func (o SparseWebExtensionsList) Copy() elemental.Identifiables {

	copy := slices.Clone(o)
	return &copy
}

// Append appends the objects to the a new copy of the SparseWebExtensionsList.
func (o SparseWebExtensionsList) Append(objects ...elemental.Identifiable) elemental.Identifiables {

	out := slices.Clone(o)
	for _, obj := range objects {
		out = append(out, obj.(*SparseWebExtension))
	}

	return out
}

// List converts the object to an elemental.IdentifiablesList.
func (o SparseWebExtensionsList) List() elemental.IdentifiablesList {

	out := make(elemental.IdentifiablesList, len(o))
	for i := range len(o) {
		out[i] = o[i]
	}

	return out
}

// DefaultOrder returns the default ordering fields of the content.
func (o SparseWebExtensionsList) DefaultOrder() []string {

	return []string{}
}

// ToPlain returns the SparseWebExtensionsList converted to WebExtensionsList.
func (o SparseWebExtensionsList) ToPlain() elemental.IdentifiablesList {

	out := make(elemental.IdentifiablesList, len(o))
	for i := range len(o) {
		out[i] = o[i].ToPlain()
	}

	return out
}

// Version returns the version of the content.
func (o SparseWebExtensionsList) Version() int {

	return 1
}

// SparseWebExtension represents the sparse version of a webextension.
type SparseWebExtension struct {
	// ID is the identifier of the object.
	ID *string `json:"ID,omitempty" msgpack:"ID,omitempty" bson:"-" mapstructure:"ID,omitempty"`

	// The state of the system proxy management.
	BrowserProxyManagementState *bool `json:"browserProxyManagementState,omitempty" msgpack:"browserProxyManagementState,omitempty" bson:"browserproxymanagementstate,omitempty" mapstructure:"browserProxyManagementState,omitempty"`

	// The current version of the WebExtension.
	CurrentVersion *string `json:"currentVersion,omitempty" msgpack:"currentVersion,omitempty" bson:"currentversion,omitempty" mapstructure:"currentVersion,omitempty"`

	// The hash of the structure used to compare with new import version.
	ImportHash *string `json:"importHash,omitempty" msgpack:"importHash,omitempty" bson:"importhash,omitempty" mapstructure:"importHash,omitempty"`

	// The user-defined import label that allows the system to group resources from the
	// same import operation.
	ImportLabel *string `json:"importLabel,omitempty" msgpack:"importLabel,omitempty" bson:"importlabel,omitempty" mapstructure:"importLabel,omitempty"`

	// The ID of the WebExtension installation.
	InstallationID *string `json:"installationID,omitempty" msgpack:"installationID,omitempty" bson:"installationid,omitempty" mapstructure:"installationID,omitempty"`

	// The namespace of the object.
	Namespace *string `json:"namespace,omitempty" msgpack:"namespace,omitempty" bson:"namespace,omitempty" mapstructure:"namespace,omitempty"`

	// The last ping recorded for the WebExtension.
	Ping *time.Time `json:"ping,omitempty" msgpack:"ping,omitempty" bson:"ping,omitempty" mapstructure:"ping,omitempty"`

	// The principal of the object.
	Principal *Principal `json:"principal,omitempty" msgpack:"principal,omitempty" bson:"principal,omitempty" mapstructure:"principal,omitempty"`

	// The start time for the WebExtension.
	Start *time.Time `json:"start,omitempty" msgpack:"start,omitempty" bson:"start,omitempty" mapstructure:"start,omitempty"`

	// The status of the WebExtension.
	Status *WebExtensionStatusValue `json:"status,omitempty" msgpack:"status,omitempty" bson:"status,omitempty" mapstructure:"status,omitempty"`

	// The browser user agent.
	UserAgent *string `json:"userAgent,omitempty" msgpack:"userAgent,omitempty" bson:"useragent,omitempty" mapstructure:"userAgent,omitempty"`

	// Hash of the object used to shard the data.
	ZHash *int `json:"-" msgpack:"-" bson:"zhash,omitempty" mapstructure:"-,omitempty"`

	// Sharding zone.
	Zone *int `json:"-" msgpack:"-" bson:"zone,omitempty" mapstructure:"-,omitempty"`

	ModelVersion int `json:"-" msgpack:"-" bson:"_modelversion"`
}

// NewSparseWebExtension returns a new  SparseWebExtension.
func NewSparseWebExtension() *SparseWebExtension {
	return &SparseWebExtension{}
}

// Identity returns the Identity of the sparse object.
func (o *SparseWebExtension) Identity() elemental.Identity {

	return WebExtensionIdentity
}

// Identifier returns the value of the sparse object's unique identifier.
func (o *SparseWebExtension) Identifier() string {

	if o.ID == nil {
		return ""
	}
	return *o.ID
}

// SetIdentifier sets the value of the sparse object's unique identifier.
func (o *SparseWebExtension) SetIdentifier(id string) {

	if id != "" {
		o.ID = &id
	} else {
		o.ID = nil
	}
}

// GetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *SparseWebExtension) GetBSON() (any, error) {

	if o == nil {
		return nil, nil
	}

	s := &mongoAttributesSparseWebExtension{}

	if o.ID != nil {
		s.ID = bson.ObjectIdHex(*o.ID)
	}
	if o.BrowserProxyManagementState != nil {
		s.BrowserProxyManagementState = o.BrowserProxyManagementState
	}
	if o.CurrentVersion != nil {
		s.CurrentVersion = o.CurrentVersion
	}
	if o.ImportHash != nil {
		s.ImportHash = o.ImportHash
	}
	if o.ImportLabel != nil {
		s.ImportLabel = o.ImportLabel
	}
	if o.InstallationID != nil {
		s.InstallationID = o.InstallationID
	}
	if o.Namespace != nil {
		s.Namespace = o.Namespace
	}
	if o.Ping != nil {
		s.Ping = o.Ping
	}
	if o.Principal != nil {
		s.Principal = o.Principal
	}
	if o.Start != nil {
		s.Start = o.Start
	}
	if o.Status != nil {
		s.Status = o.Status
	}
	if o.UserAgent != nil {
		s.UserAgent = o.UserAgent
	}
	if o.ZHash != nil {
		s.ZHash = o.ZHash
	}
	if o.Zone != nil {
		s.Zone = o.Zone
	}

	return s, nil
}

// SetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *SparseWebExtension) SetBSON(raw bson.Raw) error {

	if o == nil {
		return nil
	}

	s := &mongoAttributesSparseWebExtension{}
	if err := raw.Unmarshal(s); err != nil {
		return err
	}

	id := s.ID.Hex()
	o.ID = &id
	if s.BrowserProxyManagementState != nil {
		o.BrowserProxyManagementState = s.BrowserProxyManagementState
	}
	if s.CurrentVersion != nil {
		o.CurrentVersion = s.CurrentVersion
	}
	if s.ImportHash != nil {
		o.ImportHash = s.ImportHash
	}
	if s.ImportLabel != nil {
		o.ImportLabel = s.ImportLabel
	}
	if s.InstallationID != nil {
		o.InstallationID = s.InstallationID
	}
	if s.Namespace != nil {
		o.Namespace = s.Namespace
	}
	if s.Ping != nil {
		o.Ping = s.Ping
	}
	if s.Principal != nil {
		o.Principal = s.Principal
	}
	if s.Start != nil {
		o.Start = s.Start
	}
	if s.Status != nil {
		o.Status = s.Status
	}
	if s.UserAgent != nil {
		o.UserAgent = s.UserAgent
	}
	if s.ZHash != nil {
		o.ZHash = s.ZHash
	}
	if s.Zone != nil {
		o.Zone = s.Zone
	}

	return nil
}

// Version returns the hardcoded version of the model.
func (o *SparseWebExtension) Version() int {

	return 1
}

// ToPlain returns the plain version of the sparse model.
func (o *SparseWebExtension) ToPlain() elemental.PlainIdentifiable {

	out := NewWebExtension()
	if o.ID != nil {
		out.ID = *o.ID
	}
	if o.BrowserProxyManagementState != nil {
		out.BrowserProxyManagementState = *o.BrowserProxyManagementState
	}
	if o.CurrentVersion != nil {
		out.CurrentVersion = *o.CurrentVersion
	}
	if o.ImportHash != nil {
		out.ImportHash = *o.ImportHash
	}
	if o.ImportLabel != nil {
		out.ImportLabel = *o.ImportLabel
	}
	if o.InstallationID != nil {
		out.InstallationID = *o.InstallationID
	}
	if o.Namespace != nil {
		out.Namespace = *o.Namespace
	}
	if o.Ping != nil {
		out.Ping = *o.Ping
	}
	if o.Principal != nil {
		out.Principal = o.Principal
	}
	if o.Start != nil {
		out.Start = *o.Start
	}
	if o.Status != nil {
		out.Status = *o.Status
	}
	if o.UserAgent != nil {
		out.UserAgent = *o.UserAgent
	}
	if o.ZHash != nil {
		out.ZHash = *o.ZHash
	}
	if o.Zone != nil {
		out.Zone = *o.Zone
	}

	return out
}

// GetImportHash returns the ImportHash of the receiver.
func (o *SparseWebExtension) GetImportHash() (out string) {

	if o.ImportHash == nil {
		return
	}

	return *o.ImportHash
}

// SetImportHash sets the property ImportHash of the receiver using the address of the given value.
func (o *SparseWebExtension) SetImportHash(importHash string) {

	o.ImportHash = &importHash
}

// GetImportLabel returns the ImportLabel of the receiver.
func (o *SparseWebExtension) GetImportLabel() (out string) {

	if o.ImportLabel == nil {
		return
	}

	return *o.ImportLabel
}

// SetImportLabel sets the property ImportLabel of the receiver using the address of the given value.
func (o *SparseWebExtension) SetImportLabel(importLabel string) {

	o.ImportLabel = &importLabel
}

// GetNamespace returns the Namespace of the receiver.
func (o *SparseWebExtension) GetNamespace() (out string) {

	if o.Namespace == nil {
		return
	}

	return *o.Namespace
}

// SetNamespace sets the property Namespace of the receiver using the address of the given value.
func (o *SparseWebExtension) SetNamespace(namespace string) {

	o.Namespace = &namespace
}

// DeepCopy returns a deep copy if the SparseWebExtension.
func (o *SparseWebExtension) DeepCopy() *SparseWebExtension {

	if o == nil {
		return nil
	}

	out := &SparseWebExtension{}
	o.DeepCopyInto(out)

	return out
}

// DeepCopyInto copies the receiver into the given *SparseWebExtension.
func (o *SparseWebExtension) DeepCopyInto(out *SparseWebExtension) {

	target, err := copystructure.Copy(o)
	if err != nil {
		panic(fmt.Sprintf("Unable to deepcopy SparseWebExtension: %s", err))
	}

	*out = *target.(*SparseWebExtension)
}

type mongoAttributesWebExtension struct {
	ID                          bson.ObjectId           `bson:"_id,omitempty"`
	BrowserProxyManagementState bool                    `bson:"browserproxymanagementstate"`
	CurrentVersion              string                  `bson:"currentversion"`
	ImportHash                  string                  `bson:"importhash,omitempty"`
	ImportLabel                 string                  `bson:"importlabel,omitempty"`
	InstallationID              string                  `bson:"installationid"`
	Namespace                   string                  `bson:"namespace,omitempty"`
	Ping                        time.Time               `bson:"ping"`
	Principal                   *Principal              `bson:"principal"`
	Start                       time.Time               `bson:"start"`
	Status                      WebExtensionStatusValue `bson:"status"`
	UserAgent                   string                  `bson:"useragent"`
	ZHash                       int                     `bson:"zhash"`
	Zone                        int                     `bson:"zone"`
}
type mongoAttributesSparseWebExtension struct {
	ID                          bson.ObjectId            `bson:"_id,omitempty"`
	BrowserProxyManagementState *bool                    `bson:"browserproxymanagementstate,omitempty"`
	CurrentVersion              *string                  `bson:"currentversion,omitempty"`
	ImportHash                  *string                  `bson:"importhash,omitempty"`
	ImportLabel                 *string                  `bson:"importlabel,omitempty"`
	InstallationID              *string                  `bson:"installationid,omitempty"`
	Namespace                   *string                  `bson:"namespace,omitempty"`
	Ping                        *time.Time               `bson:"ping,omitempty"`
	Principal                   *Principal               `bson:"principal,omitempty"`
	Start                       *time.Time               `bson:"start,omitempty"`
	Status                      *WebExtensionStatusValue `bson:"status,omitempty"`
	UserAgent                   *string                  `bson:"useragent,omitempty"`
	ZHash                       *int                     `bson:"zhash,omitempty"`
	Zone                        *int                     `bson:"zone,omitempty"`
}
