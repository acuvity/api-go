// Code generated by elegen. DO NOT EDIT.
// Source: go.acuvity.ai/elemental (templates/model.gotpl)

package api

import (
	"fmt"
	"slices"
	"time"

	"github.com/globalsign/mgo/bson"
	"github.com/mitchellh/copystructure"
	"go.acuvity.ai/elemental"
)

// SignupTypeValue represents the possible values for attribute "type".
type SignupTypeValue string

const (
	// SignupTypeApps represents the value Apps.
	SignupTypeApps SignupTypeValue = "Apps"

	// SignupTypeEmployees represents the value Employees.
	SignupTypeEmployees SignupTypeValue = "Employees"
)

// SignupIdentity represents the Identity of the object.
var SignupIdentity = elemental.Identity{
	Name:     "signup",
	Category: "signups",
	Package:  "amaterasu",
	Private:  false,
}

// SignupsList represents a list of Signups
type SignupsList []*Signup

// Identity returns the identity of the objects in the list.
func (o SignupsList) Identity() elemental.Identity {

	return SignupIdentity
}

// Copy returns a pointer to a copy the SignupsList.
func (o SignupsList) Copy() elemental.Identifiables {

	out := slices.Clone(o)
	return &out
}

// Append appends the objects to the a new copy of the SignupsList.
func (o SignupsList) Append(objects ...elemental.Identifiable) elemental.Identifiables {

	out := slices.Clone(o)
	for _, obj := range objects {
		out = append(out, obj.(*Signup))
	}

	return out
}

// List converts the object to an elemental.IdentifiablesList.
func (o SignupsList) List() elemental.IdentifiablesList {

	out := make(elemental.IdentifiablesList, len(o))
	for i := range len(o) {
		out[i] = o[i]
	}

	return out
}

// DefaultOrder returns the default ordering fields of the content.
func (o SignupsList) DefaultOrder() []string {

	return []string{}
}

// ToSparse returns the SignupsList converted to SparseSignupsList.
// Objects in the list will only contain the given fields. No field means entire field set.
func (o SignupsList) ToSparse(fields ...string) elemental.Identifiables {

	out := make(SparseSignupsList, len(o))
	for i := range len(o) {
		out[i] = o[i].ToSparse(fields...).(*SparseSignup)
	}

	return out
}

// Version returns the version of the content.
func (o SignupsList) Version() int {

	return 1
}

// Signup represents the model of a signup
type Signup struct {
	// ID is the identifier of the object.
	ID string `json:"ID,omitempty" msgpack:"ID,omitempty" bson:"-" mapstructure:"ID,omitempty"`

	// Creation date of the object.
	CreateTime time.Time `json:"createTime" msgpack:"createTime" bson:"createtime" mapstructure:"createTime,omitempty"`

	// The email requesting the signup. This email can be considered valid and
	// verified, as for the signup request to succeed, it must have been verified by
	// signing up with one of the oauth2 source we support.
	Email string `json:"email,omitempty" msgpack:"email,omitempty" bson:"email,omitempty" mapstructure:"email,omitempty"`

	// The namespace of the object.
	Namespace string `json:"namespace,omitempty" msgpack:"namespace,omitempty" bson:"namespace,omitempty" mapstructure:"namespace,omitempty"`

	// The type of signup requested.
	Type SignupTypeValue `json:"type" msgpack:"type" bson:"type" mapstructure:"type,omitempty"`

	// Last update date of the object.
	UpdateTime time.Time `json:"updateTime" msgpack:"updateTime" bson:"updatetime" mapstructure:"updateTime,omitempty"`

	// The source of verification.
	VerifiedBy string `json:"verifiedBy,omitempty" msgpack:"verifiedBy,omitempty" bson:"verifiedby,omitempty" mapstructure:"verifiedBy,omitempty"`

	// Hash of the object used to shard the data.
	ZHash int `json:"-" msgpack:"-" bson:"zhash" mapstructure:"-,omitempty"`

	// Sharding zone.
	Zone int `json:"-" msgpack:"-" bson:"zone" mapstructure:"-,omitempty"`

	ModelVersion int `json:"-" msgpack:"-" bson:"_modelversion"`
}

// NewSignup returns a new *Signup
func NewSignup() *Signup {

	return &Signup{
		ModelVersion: 1,
	}
}

// Identity returns the Identity of the object.
func (o *Signup) Identity() elemental.Identity {

	return SignupIdentity
}

// Identifier returns the value of the object's unique identifier.
func (o *Signup) Identifier() string {

	return o.ID
}

// SetIdentifier sets the value of the object's unique identifier.
func (o *Signup) SetIdentifier(id string) {

	o.ID = id
}

// GetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *Signup) GetBSON() (any, error) {

	if o == nil {
		return nil, nil
	}

	s := &mongoAttributesSignup{}

	if o.ID != "" {
		s.ID = bson.ObjectIdHex(o.ID)
	}
	s.CreateTime = o.CreateTime
	s.Email = o.Email
	s.Namespace = o.Namespace
	s.Type = o.Type
	s.UpdateTime = o.UpdateTime
	s.VerifiedBy = o.VerifiedBy
	s.ZHash = o.ZHash
	s.Zone = o.Zone

	return s, nil
}

// SetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *Signup) SetBSON(raw bson.Raw) error {

	if o == nil || raw.Kind == bson.ElementNil {
		return bson.ErrSetZero
	}

	s := &mongoAttributesSignup{}
	if err := raw.Unmarshal(s); err != nil {
		return err
	}

	o.ID = s.ID.Hex()
	o.CreateTime = s.CreateTime
	o.Email = s.Email
	o.Namespace = s.Namespace
	o.Type = s.Type
	o.UpdateTime = s.UpdateTime
	o.VerifiedBy = s.VerifiedBy
	o.ZHash = s.ZHash
	o.Zone = s.Zone

	return nil
}

// Version returns the hardcoded version of the model.
func (o *Signup) Version() int {

	return 1
}

// BleveType implements the bleve.Classifier Interface.
func (o *Signup) BleveType() string {

	return "signup"
}

// DefaultOrder returns the list of default ordering fields.
func (o *Signup) DefaultOrder() []string {

	return []string{}
}

// Doc returns the documentation for the object
func (o *Signup) Doc() string {

	return `Represents a sign up request.`
}

func (o *Signup) String() string {

	return fmt.Sprintf("<%s:%s>", o.Identity().Name, o.Identifier())
}

// GetCreateTime returns the CreateTime of the receiver.
func (o *Signup) GetCreateTime() time.Time {

	return o.CreateTime
}

// SetCreateTime sets the property CreateTime of the receiver using the given value.
func (o *Signup) SetCreateTime(createTime time.Time) {

	o.CreateTime = createTime
}

// GetNamespace returns the Namespace of the receiver.
func (o *Signup) GetNamespace() string {

	return o.Namespace
}

// SetNamespace sets the property Namespace of the receiver using the given value.
func (o *Signup) SetNamespace(namespace string) {

	o.Namespace = namespace
}

// GetUpdateTime returns the UpdateTime of the receiver.
func (o *Signup) GetUpdateTime() time.Time {

	return o.UpdateTime
}

// SetUpdateTime sets the property UpdateTime of the receiver using the given value.
func (o *Signup) SetUpdateTime(updateTime time.Time) {

	o.UpdateTime = updateTime
}

// ToSparse returns the sparse version of the model.
// The returned object will only contain the given fields. No field means entire field set.
func (o *Signup) ToSparse(fields ...string) elemental.SparseIdentifiable {

	if len(fields) == 0 {
		// nolint: goimports
		return &SparseSignup{
			ID:         &o.ID,
			CreateTime: &o.CreateTime,
			Email:      &o.Email,
			Namespace:  &o.Namespace,
			Type:       &o.Type,
			UpdateTime: &o.UpdateTime,
			VerifiedBy: &o.VerifiedBy,
			ZHash:      &o.ZHash,
			Zone:       &o.Zone,
		}
	}

	sp := &SparseSignup{}
	for _, f := range fields {
		switch f {
		case "ID":
			sp.ID = &(o.ID)
		case "createTime":
			sp.CreateTime = &(o.CreateTime)
		case "email":
			sp.Email = &(o.Email)
		case "namespace":
			sp.Namespace = &(o.Namespace)
		case "type":
			sp.Type = &(o.Type)
		case "updateTime":
			sp.UpdateTime = &(o.UpdateTime)
		case "verifiedBy":
			sp.VerifiedBy = &(o.VerifiedBy)
		case "zHash":
			sp.ZHash = &(o.ZHash)
		case "zone":
			sp.Zone = &(o.Zone)
		}
	}

	return sp
}

// Patch apply the non nil value of a *SparseSignup to the object.
func (o *Signup) Patch(sparse elemental.SparseIdentifiable) {
	if !sparse.Identity().IsEqual(o.Identity()) {
		panic("cannot patch from a parse with different identity")
	}

	so := sparse.(*SparseSignup)
	if so.ID != nil {
		o.ID = *so.ID
	}
	if so.CreateTime != nil {
		o.CreateTime = *so.CreateTime
	}
	if so.Email != nil {
		o.Email = *so.Email
	}
	if so.Namespace != nil {
		o.Namespace = *so.Namespace
	}
	if so.Type != nil {
		o.Type = *so.Type
	}
	if so.UpdateTime != nil {
		o.UpdateTime = *so.UpdateTime
	}
	if so.VerifiedBy != nil {
		o.VerifiedBy = *so.VerifiedBy
	}
	if so.ZHash != nil {
		o.ZHash = *so.ZHash
	}
	if so.Zone != nil {
		o.Zone = *so.Zone
	}
}

// DeepCopy returns a deep copy if the Signup.
func (o *Signup) DeepCopy() *Signup {

	if o == nil {
		return nil
	}

	out := &Signup{}
	o.DeepCopyInto(out)

	return out
}

// DeepCopyInto copies the receiver into the given *Signup.
func (o *Signup) DeepCopyInto(out *Signup) {

	target, err := copystructure.Copy(o)
	if err != nil {
		panic(fmt.Sprintf("Unable to deepcopy Signup: %s", err))
	}

	*out = *target.(*Signup)
}

// Validate valides the current information stored into the structure.
func (o *Signup) Validate() error {

	errors := elemental.Errors{}
	requiredErrors := elemental.Errors{}

	if err := elemental.ValidateRequiredString("type", string(o.Type)); err != nil {
		requiredErrors = requiredErrors.Append(err)
	}

	if err := elemental.ValidateStringInList("type", string(o.Type), []string{"Employees", "Apps"}, false); err != nil {
		errors = errors.Append(err)
	}

	if len(requiredErrors) > 0 {
		return requiredErrors
	}

	if len(errors) > 0 {
		return errors
	}

	return nil
}

// SpecificationForAttribute returns the AttributeSpecification for the given attribute name key.
func (*Signup) SpecificationForAttribute(name string) elemental.AttributeSpecification {

	if v, ok := SignupAttributesMap[name]; ok {
		return v
	}

	// We could not find it, so let's check on the lower case indexed spec map
	return SignupLowerCaseAttributesMap[name]
}

// AttributeSpecifications returns the full attribute specifications map.
func (*Signup) AttributeSpecifications() map[string]elemental.AttributeSpecification {

	return SignupAttributesMap
}

// ValueForAttribute returns the value for the given attribute.
// This is a very advanced function that you should not need but in some
// very specific use cases.
func (o *Signup) ValueForAttribute(name string) any {

	switch name {
	case "ID":
		return o.ID
	case "createTime":
		return o.CreateTime
	case "email":
		return o.Email
	case "namespace":
		return o.Namespace
	case "type":
		return o.Type
	case "updateTime":
		return o.UpdateTime
	case "verifiedBy":
		return o.VerifiedBy
	case "zHash":
		return o.ZHash
	case "zone":
		return o.Zone
	}

	return nil
}

// SignupAttributesMap represents the map of attribute for Signup.
var SignupAttributesMap = map[string]elemental.AttributeSpecification{
	"ID": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "_id",
		ConvertedName:  "ID",
		Description:    `ID is the identifier of the object.`,
		Exposed:        true,
		Filterable:     true,
		Identifier:     true,
		Name:           "ID",
		Orderable:      true,
		ReadOnly:       true,
		Stored:         true,
		Type:           "string",
	},
	"CreateTime": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "createtime",
		ConvertedName:  "CreateTime",
		Description:    `Creation date of the object.`,
		Exposed:        true,
		Getter:         true,
		Name:           "createTime",
		Orderable:      true,
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Type:           "time",
	},
	"Email": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "email",
		ConvertedName:  "Email",
		Description: `The email requesting the signup. This email can be considered valid and
verified, as for the signup request to succeed, it must have been verified by
signing up with one of the oauth2 source we support.`,
		Exposed:   true,
		Name:      "email",
		ReadOnly:  true,
		Stored:    true,
		Transient: true,
		Type:      "string",
	},
	"Namespace": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "namespace",
		ConvertedName:  "Namespace",
		Description:    `The namespace of the object.`,
		Exposed:        true,
		Getter:         true,
		Name:           "namespace",
		Orderable:      true,
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Type:           "string",
	},
	"Type": {
		AllowedChoices: []string{"Employees", "Apps"},
		BSONFieldName:  "type",
		ConvertedName:  "Type",
		CreationOnly:   true,
		Description:    `The type of signup requested.`,
		Exposed:        true,
		Name:           "type",
		Required:       true,
		Stored:         true,
		Type:           "enum",
	},
	"UpdateTime": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "updatetime",
		ConvertedName:  "UpdateTime",
		Description:    `Last update date of the object.`,
		Exposed:        true,
		Getter:         true,
		Name:           "updateTime",
		Orderable:      true,
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Type:           "time",
	},
	"VerifiedBy": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "verifiedby",
		ConvertedName:  "VerifiedBy",
		Description:    `The source of verification.`,
		Exposed:        true,
		Name:           "verifiedBy",
		ReadOnly:       true,
		Stored:         true,
		Transient:      true,
		Type:           "string",
	},
}

// SignupLowerCaseAttributesMap represents the map of attribute for Signup.
var SignupLowerCaseAttributesMap = map[string]elemental.AttributeSpecification{
	"id": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "_id",
		ConvertedName:  "ID",
		Description:    `ID is the identifier of the object.`,
		Exposed:        true,
		Filterable:     true,
		Identifier:     true,
		Name:           "ID",
		Orderable:      true,
		ReadOnly:       true,
		Stored:         true,
		Type:           "string",
	},
	"createtime": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "createtime",
		ConvertedName:  "CreateTime",
		Description:    `Creation date of the object.`,
		Exposed:        true,
		Getter:         true,
		Name:           "createTime",
		Orderable:      true,
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Type:           "time",
	},
	"email": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "email",
		ConvertedName:  "Email",
		Description: `The email requesting the signup. This email can be considered valid and
verified, as for the signup request to succeed, it must have been verified by
signing up with one of the oauth2 source we support.`,
		Exposed:   true,
		Name:      "email",
		ReadOnly:  true,
		Stored:    true,
		Transient: true,
		Type:      "string",
	},
	"namespace": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "namespace",
		ConvertedName:  "Namespace",
		Description:    `The namespace of the object.`,
		Exposed:        true,
		Getter:         true,
		Name:           "namespace",
		Orderable:      true,
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Type:           "string",
	},
	"type": {
		AllowedChoices: []string{"Employees", "Apps"},
		BSONFieldName:  "type",
		ConvertedName:  "Type",
		CreationOnly:   true,
		Description:    `The type of signup requested.`,
		Exposed:        true,
		Name:           "type",
		Required:       true,
		Stored:         true,
		Type:           "enum",
	},
	"updatetime": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "updatetime",
		ConvertedName:  "UpdateTime",
		Description:    `Last update date of the object.`,
		Exposed:        true,
		Getter:         true,
		Name:           "updateTime",
		Orderable:      true,
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Type:           "time",
	},
	"verifiedby": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "verifiedby",
		ConvertedName:  "VerifiedBy",
		Description:    `The source of verification.`,
		Exposed:        true,
		Name:           "verifiedBy",
		ReadOnly:       true,
		Stored:         true,
		Transient:      true,
		Type:           "string",
	},
}

// SparseSignupsList represents a list of SparseSignups
type SparseSignupsList []*SparseSignup

// Identity returns the identity of the objects in the list.
func (o SparseSignupsList) Identity() elemental.Identity {

	return SignupIdentity
}

// Copy returns a pointer to a copy the SparseSignupsList.
func (o SparseSignupsList) Copy() elemental.Identifiables {

	copy := slices.Clone(o)
	return &copy
}

// Append appends the objects to the a new copy of the SparseSignupsList.
func (o SparseSignupsList) Append(objects ...elemental.Identifiable) elemental.Identifiables {

	out := slices.Clone(o)
	for _, obj := range objects {
		out = append(out, obj.(*SparseSignup))
	}

	return out
}

// List converts the object to an elemental.IdentifiablesList.
func (o SparseSignupsList) List() elemental.IdentifiablesList {

	out := make(elemental.IdentifiablesList, len(o))
	for i := range len(o) {
		out[i] = o[i]
	}

	return out
}

// DefaultOrder returns the default ordering fields of the content.
func (o SparseSignupsList) DefaultOrder() []string {

	return []string{}
}

// ToPlain returns the SparseSignupsList converted to SignupsList.
func (o SparseSignupsList) ToPlain() elemental.IdentifiablesList {

	out := make(elemental.IdentifiablesList, len(o))
	for i := range len(o) {
		out[i] = o[i].ToPlain()
	}

	return out
}

// Version returns the version of the content.
func (o SparseSignupsList) Version() int {

	return 1
}

// SparseSignup represents the sparse version of a signup.
type SparseSignup struct {
	// ID is the identifier of the object.
	ID *string `json:"ID,omitempty" msgpack:"ID,omitempty" bson:"-" mapstructure:"ID,omitempty"`

	// Creation date of the object.
	CreateTime *time.Time `json:"createTime,omitempty" msgpack:"createTime,omitempty" bson:"createtime,omitempty" mapstructure:"createTime,omitempty"`

	// The email requesting the signup. This email can be considered valid and
	// verified, as for the signup request to succeed, it must have been verified by
	// signing up with one of the oauth2 source we support.
	Email *string `json:"email,omitempty" msgpack:"email,omitempty" bson:"email,omitempty" mapstructure:"email,omitempty"`

	// The namespace of the object.
	Namespace *string `json:"namespace,omitempty" msgpack:"namespace,omitempty" bson:"namespace,omitempty" mapstructure:"namespace,omitempty"`

	// The type of signup requested.
	Type *SignupTypeValue `json:"type,omitempty" msgpack:"type,omitempty" bson:"type,omitempty" mapstructure:"type,omitempty"`

	// Last update date of the object.
	UpdateTime *time.Time `json:"updateTime,omitempty" msgpack:"updateTime,omitempty" bson:"updatetime,omitempty" mapstructure:"updateTime,omitempty"`

	// The source of verification.
	VerifiedBy *string `json:"verifiedBy,omitempty" msgpack:"verifiedBy,omitempty" bson:"verifiedby,omitempty" mapstructure:"verifiedBy,omitempty"`

	// Hash of the object used to shard the data.
	ZHash *int `json:"-" msgpack:"-" bson:"zhash,omitempty" mapstructure:"-,omitempty"`

	// Sharding zone.
	Zone *int `json:"-" msgpack:"-" bson:"zone,omitempty" mapstructure:"-,omitempty"`

	ModelVersion int `json:"-" msgpack:"-" bson:"_modelversion"`
}

// NewSparseSignup returns a new  SparseSignup.
func NewSparseSignup() *SparseSignup {
	return &SparseSignup{}
}

// Identity returns the Identity of the sparse object.
func (o *SparseSignup) Identity() elemental.Identity {

	return SignupIdentity
}

// Identifier returns the value of the sparse object's unique identifier.
func (o *SparseSignup) Identifier() string {

	if o.ID == nil {
		return ""
	}
	return *o.ID
}

// SetIdentifier sets the value of the sparse object's unique identifier.
func (o *SparseSignup) SetIdentifier(id string) {

	if id != "" {
		o.ID = &id
	} else {
		o.ID = nil
	}
}

// GetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *SparseSignup) GetBSON() (any, error) {

	if o == nil {
		return nil, nil
	}

	s := &mongoAttributesSparseSignup{}

	if o.ID != nil {
		s.ID = bson.ObjectIdHex(*o.ID)
	}
	if o.CreateTime != nil {
		s.CreateTime = o.CreateTime
	}
	if o.Email != nil {
		s.Email = o.Email
	}
	if o.Namespace != nil {
		s.Namespace = o.Namespace
	}
	if o.Type != nil {
		s.Type = o.Type
	}
	if o.UpdateTime != nil {
		s.UpdateTime = o.UpdateTime
	}
	if o.VerifiedBy != nil {
		s.VerifiedBy = o.VerifiedBy
	}
	if o.ZHash != nil {
		s.ZHash = o.ZHash
	}
	if o.Zone != nil {
		s.Zone = o.Zone
	}

	return s, nil
}

// SetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *SparseSignup) SetBSON(raw bson.Raw) error {

	if o == nil {
		return nil
	}

	s := &mongoAttributesSparseSignup{}
	if err := raw.Unmarshal(s); err != nil {
		return err
	}

	id := s.ID.Hex()
	o.ID = &id
	if s.CreateTime != nil {
		o.CreateTime = s.CreateTime
	}
	if s.Email != nil {
		o.Email = s.Email
	}
	if s.Namespace != nil {
		o.Namespace = s.Namespace
	}
	if s.Type != nil {
		o.Type = s.Type
	}
	if s.UpdateTime != nil {
		o.UpdateTime = s.UpdateTime
	}
	if s.VerifiedBy != nil {
		o.VerifiedBy = s.VerifiedBy
	}
	if s.ZHash != nil {
		o.ZHash = s.ZHash
	}
	if s.Zone != nil {
		o.Zone = s.Zone
	}

	return nil
}

// Version returns the hardcoded version of the model.
func (o *SparseSignup) Version() int {

	return 1
}

// ToPlain returns the plain version of the sparse model.
func (o *SparseSignup) ToPlain() elemental.PlainIdentifiable {

	out := NewSignup()
	if o.ID != nil {
		out.ID = *o.ID
	}
	if o.CreateTime != nil {
		out.CreateTime = *o.CreateTime
	}
	if o.Email != nil {
		out.Email = *o.Email
	}
	if o.Namespace != nil {
		out.Namespace = *o.Namespace
	}
	if o.Type != nil {
		out.Type = *o.Type
	}
	if o.UpdateTime != nil {
		out.UpdateTime = *o.UpdateTime
	}
	if o.VerifiedBy != nil {
		out.VerifiedBy = *o.VerifiedBy
	}
	if o.ZHash != nil {
		out.ZHash = *o.ZHash
	}
	if o.Zone != nil {
		out.Zone = *o.Zone
	}

	return out
}

// GetCreateTime returns the CreateTime of the receiver.
func (o *SparseSignup) GetCreateTime() (out time.Time) {

	if o.CreateTime == nil {
		return
	}

	return *o.CreateTime
}

// SetCreateTime sets the property CreateTime of the receiver using the address of the given value.
func (o *SparseSignup) SetCreateTime(createTime time.Time) {

	o.CreateTime = &createTime
}

// GetNamespace returns the Namespace of the receiver.
func (o *SparseSignup) GetNamespace() (out string) {

	if o.Namespace == nil {
		return
	}

	return *o.Namespace
}

// SetNamespace sets the property Namespace of the receiver using the address of the given value.
func (o *SparseSignup) SetNamespace(namespace string) {

	o.Namespace = &namespace
}

// GetUpdateTime returns the UpdateTime of the receiver.
func (o *SparseSignup) GetUpdateTime() (out time.Time) {

	if o.UpdateTime == nil {
		return
	}

	return *o.UpdateTime
}

// SetUpdateTime sets the property UpdateTime of the receiver using the address of the given value.
func (o *SparseSignup) SetUpdateTime(updateTime time.Time) {

	o.UpdateTime = &updateTime
}

// DeepCopy returns a deep copy if the SparseSignup.
func (o *SparseSignup) DeepCopy() *SparseSignup {

	if o == nil {
		return nil
	}

	out := &SparseSignup{}
	o.DeepCopyInto(out)

	return out
}

// DeepCopyInto copies the receiver into the given *SparseSignup.
func (o *SparseSignup) DeepCopyInto(out *SparseSignup) {

	target, err := copystructure.Copy(o)
	if err != nil {
		panic(fmt.Sprintf("Unable to deepcopy SparseSignup: %s", err))
	}

	*out = *target.(*SparseSignup)
}

type mongoAttributesSignup struct {
	ID         bson.ObjectId   `bson:"_id,omitempty"`
	CreateTime time.Time       `bson:"createtime"`
	Email      string          `bson:"email,omitempty"`
	Namespace  string          `bson:"namespace,omitempty"`
	Type       SignupTypeValue `bson:"type"`
	UpdateTime time.Time       `bson:"updatetime"`
	VerifiedBy string          `bson:"verifiedby,omitempty"`
	ZHash      int             `bson:"zhash"`
	Zone       int             `bson:"zone"`
}
type mongoAttributesSparseSignup struct {
	ID         bson.ObjectId    `bson:"_id,omitempty"`
	CreateTime *time.Time       `bson:"createtime,omitempty"`
	Email      *string          `bson:"email,omitempty"`
	Namespace  *string          `bson:"namespace,omitempty"`
	Type       *SignupTypeValue `bson:"type,omitempty"`
	UpdateTime *time.Time       `bson:"updatetime,omitempty"`
	VerifiedBy *string          `bson:"verifiedby,omitempty"`
	ZHash      *int             `bson:"zhash,omitempty"`
	Zone       *int             `bson:"zone,omitempty"`
}
