// Code generated by elegen. DO NOT EDIT.
// Source: go.acuvity.ai/elemental (templates/model.gotpl)

package api

import (
	"fmt"
	"slices"
	"time"

	"github.com/globalsign/mgo/bson"
	"github.com/mitchellh/copystructure"
	"go.acuvity.ai/elemental"
)

// AIPluginIdentity represents the Identity of the object.
var AIPluginIdentity = elemental.Identity{
	Name:     "aiplugin",
	Category: "aiplugins",
	Package:  "lain",
	Private:  false,
}

// AIPluginsList represents a list of AIPlugins
type AIPluginsList []*AIPlugin

// Identity returns the identity of the objects in the list.
func (o AIPluginsList) Identity() elemental.Identity {

	return AIPluginIdentity
}

// Copy returns a pointer to a copy the AIPluginsList.
func (o AIPluginsList) Copy() elemental.Identifiables {

	out := slices.Clone(o)
	return &out
}

// Append appends the objects to the a new copy of the AIPluginsList.
func (o AIPluginsList) Append(objects ...elemental.Identifiable) elemental.Identifiables {

	out := slices.Clone(o)
	for _, obj := range objects {
		out = append(out, obj.(*AIPlugin))
	}

	return out
}

// List converts the object to an elemental.IdentifiablesList.
func (o AIPluginsList) List() elemental.IdentifiablesList {

	out := make(elemental.IdentifiablesList, len(o))
	for i := range len(o) {
		out[i] = o[i]
	}

	return out
}

// DefaultOrder returns the default ordering fields of the content.
func (o AIPluginsList) DefaultOrder() []string {

	return []string{}
}

// ToSparse returns the AIPluginsList converted to SparseAIPluginsList.
// Objects in the list will only contain the given fields. No field means entire field set.
func (o AIPluginsList) ToSparse(fields ...string) elemental.Identifiables {

	out := make(SparseAIPluginsList, len(o))
	for i := range len(o) {
		out[i] = o[i].ToSparse(fields...).(*SparseAIPlugin)
	}

	return out
}

// Version returns the version of the content.
func (o AIPluginsList) Version() int {

	return 1
}

// AIPlugin represents the model of a aiplugin
type AIPlugin struct {
	// ID is the identifier of the object.
	ID string `json:"ID,omitempty" msgpack:"ID,omitempty" bson:"-" mapstructure:"ID,omitempty"`

	// The categories associated with the plugin.
	Categories []string `json:"categories,omitempty" msgpack:"categories,omitempty" bson:"categories,omitempty" mapstructure:"categories,omitempty"`

	// Creation date of the object.
	CreateTime time.Time `json:"createTime" msgpack:"createTime" bson:"createtime" mapstructure:"createTime,omitempty"`

	// A brief description about the AI plugin and its purpose.
	Description string `json:"description,omitempty" msgpack:"description,omitempty" bson:"description,omitempty" mapstructure:"description,omitempty"`

	// The human-friendly name of the plugin.
	DisplayName string `json:"displayName" msgpack:"displayName" bson:"displayname" mapstructure:"displayName,omitempty"`

	// The hash of the structure used to compare with new import version.
	ImportHash string `json:"importHash,omitempty" msgpack:"importHash,omitempty" bson:"importhash,omitempty" mapstructure:"importHash,omitempty"`

	// The user-defined import label that allows the system to group resources from the
	// same import operation.
	ImportLabel string `json:"importLabel,omitempty" msgpack:"importLabel,omitempty" bson:"importlabel,omitempty" mapstructure:"importLabel,omitempty"`

	// The name of the plugin.
	Name string `json:"name" msgpack:"name" bson:"name" mapstructure:"name,omitempty"`

	// The namespace of the object.
	Namespace string `json:"namespace,omitempty" msgpack:"namespace,omitempty" bson:"namespace,omitempty" mapstructure:"namespace,omitempty"`

	// The identifier of the plugin.
	PluginID string `json:"pluginID" msgpack:"pluginID" bson:"pluginid" mapstructure:"pluginID,omitempty"`

	// The universally unique identifier of the plugin.
	PluginUUID string `json:"pluginUUID" msgpack:"pluginUUID" bson:"pluginuuid" mapstructure:"pluginUUID,omitempty"`

	// Propagates the object to all child namespaces. This is always true.
	Propagate bool `json:"propagate" msgpack:"propagate" bson:"propagate" mapstructure:"propagate,omitempty"`

	// When the plugin was published.
	PublishedDate time.Time `json:"publishedDate" msgpack:"publishedDate" bson:"publisheddate" mapstructure:"publishedDate,omitempty"`

	// The publisher identifier of the plugin.
	PublisherID string `json:"publisherID" msgpack:"publisherID" bson:"publisherid" mapstructure:"publisherID,omitempty"`

	// The publisher name of the plugin.
	PublisherName string `json:"publisherName" msgpack:"publisherName" bson:"publishername" mapstructure:"publisherName,omitempty"`

	// The tags associated with the plugin.
	Tags []string `json:"tags,omitempty" msgpack:"tags,omitempty" bson:"tags,omitempty" mapstructure:"tags,omitempty"`

	// Last update date of the object.
	UpdateTime time.Time `json:"updateTime" msgpack:"updateTime" bson:"updatetime" mapstructure:"updateTime,omitempty"`

	// Flag to say if the plugin has been vetted by Acuvity or not.
	Vetted bool `json:"vetted" msgpack:"vetted" bson:"vetted" mapstructure:"vetted,omitempty"`

	// Hash of the object used to shard the data.
	ZHash int `json:"-" msgpack:"-" bson:"zhash" mapstructure:"-,omitempty"`

	// Sharding zone.
	Zone int `json:"-" msgpack:"-" bson:"zone" mapstructure:"-,omitempty"`

	ModelVersion int `json:"-" msgpack:"-" bson:"_modelversion"`
}

// NewAIPlugin returns a new *AIPlugin
func NewAIPlugin() *AIPlugin {

	return &AIPlugin{
		ModelVersion: 1,
		Categories:   []string{},
		Propagate:    true,
		Tags:         []string{},
	}
}

// Identity returns the Identity of the object.
func (o *AIPlugin) Identity() elemental.Identity {

	return AIPluginIdentity
}

// Identifier returns the value of the object's unique identifier.
func (o *AIPlugin) Identifier() string {

	return o.ID
}

// SetIdentifier sets the value of the object's unique identifier.
func (o *AIPlugin) SetIdentifier(id string) {

	o.ID = id
}

// GetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *AIPlugin) GetBSON() (any, error) {

	if o == nil {
		return nil, nil
	}

	s := &mongoAttributesAIPlugin{}

	if o.ID != "" {
		s.ID = bson.ObjectIdHex(o.ID)
	}
	s.Categories = o.Categories
	s.CreateTime = o.CreateTime
	s.Description = o.Description
	s.DisplayName = o.DisplayName
	s.ImportHash = o.ImportHash
	s.ImportLabel = o.ImportLabel
	s.Name = o.Name
	s.Namespace = o.Namespace
	s.PluginID = o.PluginID
	s.PluginUUID = o.PluginUUID
	s.Propagate = o.Propagate
	s.PublishedDate = o.PublishedDate
	s.PublisherID = o.PublisherID
	s.PublisherName = o.PublisherName
	s.Tags = o.Tags
	s.UpdateTime = o.UpdateTime
	s.Vetted = o.Vetted
	s.ZHash = o.ZHash
	s.Zone = o.Zone

	return s, nil
}

// SetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *AIPlugin) SetBSON(raw bson.Raw) error {

	if o == nil || raw.Kind == bson.ElementNil {
		return bson.ErrSetZero
	}

	s := &mongoAttributesAIPlugin{}
	if err := raw.Unmarshal(s); err != nil {
		return err
	}

	o.ID = s.ID.Hex()
	o.Categories = s.Categories
	o.CreateTime = s.CreateTime
	o.Description = s.Description
	o.DisplayName = s.DisplayName
	o.ImportHash = s.ImportHash
	o.ImportLabel = s.ImportLabel
	o.Name = s.Name
	o.Namespace = s.Namespace
	o.PluginID = s.PluginID
	o.PluginUUID = s.PluginUUID
	o.Propagate = s.Propagate
	o.PublishedDate = s.PublishedDate
	o.PublisherID = s.PublisherID
	o.PublisherName = s.PublisherName
	o.Tags = s.Tags
	o.UpdateTime = s.UpdateTime
	o.Vetted = s.Vetted
	o.ZHash = s.ZHash
	o.Zone = s.Zone

	return nil
}

// Version returns the hardcoded version of the model.
func (o *AIPlugin) Version() int {

	return 1
}

// BleveType implements the bleve.Classifier Interface.
func (o *AIPlugin) BleveType() string {

	return "aiplugin"
}

// DefaultOrder returns the list of default ordering fields.
func (o *AIPlugin) DefaultOrder() []string {

	return []string{}
}

// Doc returns the documentation for the object
func (o *AIPlugin) Doc() string {

	return `AI plugin provides an overview of a plugin.`
}

func (o *AIPlugin) String() string {

	return fmt.Sprintf("<%s:%s>", o.Identity().Name, o.Identifier())
}

// GetCreateTime returns the CreateTime of the receiver.
func (o *AIPlugin) GetCreateTime() time.Time {

	return o.CreateTime
}

// SetCreateTime sets the property CreateTime of the receiver using the given value.
func (o *AIPlugin) SetCreateTime(createTime time.Time) {

	o.CreateTime = createTime
}

// GetImportHash returns the ImportHash of the receiver.
func (o *AIPlugin) GetImportHash() string {

	return o.ImportHash
}

// SetImportHash sets the property ImportHash of the receiver using the given value.
func (o *AIPlugin) SetImportHash(importHash string) {

	o.ImportHash = importHash
}

// GetImportLabel returns the ImportLabel of the receiver.
func (o *AIPlugin) GetImportLabel() string {

	return o.ImportLabel
}

// SetImportLabel sets the property ImportLabel of the receiver using the given value.
func (o *AIPlugin) SetImportLabel(importLabel string) {

	o.ImportLabel = importLabel
}

// GetNamespace returns the Namespace of the receiver.
func (o *AIPlugin) GetNamespace() string {

	return o.Namespace
}

// SetNamespace sets the property Namespace of the receiver using the given value.
func (o *AIPlugin) SetNamespace(namespace string) {

	o.Namespace = namespace
}

// GetPropagate returns the Propagate of the receiver.
func (o *AIPlugin) GetPropagate() bool {

	return o.Propagate
}

// SetPropagate sets the property Propagate of the receiver using the given value.
func (o *AIPlugin) SetPropagate(propagate bool) {

	o.Propagate = propagate
}

// GetUpdateTime returns the UpdateTime of the receiver.
func (o *AIPlugin) GetUpdateTime() time.Time {

	return o.UpdateTime
}

// SetUpdateTime sets the property UpdateTime of the receiver using the given value.
func (o *AIPlugin) SetUpdateTime(updateTime time.Time) {

	o.UpdateTime = updateTime
}

// ToSparse returns the sparse version of the model.
// The returned object will only contain the given fields. No field means entire field set.
func (o *AIPlugin) ToSparse(fields ...string) elemental.SparseIdentifiable {

	if len(fields) == 0 {
		// nolint: goimports
		return &SparseAIPlugin{
			ID:            &o.ID,
			Categories:    &o.Categories,
			CreateTime:    &o.CreateTime,
			Description:   &o.Description,
			DisplayName:   &o.DisplayName,
			ImportHash:    &o.ImportHash,
			ImportLabel:   &o.ImportLabel,
			Name:          &o.Name,
			Namespace:     &o.Namespace,
			PluginID:      &o.PluginID,
			PluginUUID:    &o.PluginUUID,
			Propagate:     &o.Propagate,
			PublishedDate: &o.PublishedDate,
			PublisherID:   &o.PublisherID,
			PublisherName: &o.PublisherName,
			Tags:          &o.Tags,
			UpdateTime:    &o.UpdateTime,
			Vetted:        &o.Vetted,
			ZHash:         &o.ZHash,
			Zone:          &o.Zone,
		}
	}

	sp := &SparseAIPlugin{}
	for _, f := range fields {
		switch f {
		case "ID":
			sp.ID = &(o.ID)
		case "categories":
			sp.Categories = &(o.Categories)
		case "createTime":
			sp.CreateTime = &(o.CreateTime)
		case "description":
			sp.Description = &(o.Description)
		case "displayName":
			sp.DisplayName = &(o.DisplayName)
		case "importHash":
			sp.ImportHash = &(o.ImportHash)
		case "importLabel":
			sp.ImportLabel = &(o.ImportLabel)
		case "name":
			sp.Name = &(o.Name)
		case "namespace":
			sp.Namespace = &(o.Namespace)
		case "pluginID":
			sp.PluginID = &(o.PluginID)
		case "pluginUUID":
			sp.PluginUUID = &(o.PluginUUID)
		case "propagate":
			sp.Propagate = &(o.Propagate)
		case "publishedDate":
			sp.PublishedDate = &(o.PublishedDate)
		case "publisherID":
			sp.PublisherID = &(o.PublisherID)
		case "publisherName":
			sp.PublisherName = &(o.PublisherName)
		case "tags":
			sp.Tags = &(o.Tags)
		case "updateTime":
			sp.UpdateTime = &(o.UpdateTime)
		case "vetted":
			sp.Vetted = &(o.Vetted)
		case "zHash":
			sp.ZHash = &(o.ZHash)
		case "zone":
			sp.Zone = &(o.Zone)
		}
	}

	return sp
}

// Patch apply the non nil value of a *SparseAIPlugin to the object.
func (o *AIPlugin) Patch(sparse elemental.SparseIdentifiable) {
	if !sparse.Identity().IsEqual(o.Identity()) {
		panic("cannot patch from a parse with different identity")
	}

	so := sparse.(*SparseAIPlugin)
	if so.ID != nil {
		o.ID = *so.ID
	}
	if so.Categories != nil {
		o.Categories = *so.Categories
	}
	if so.CreateTime != nil {
		o.CreateTime = *so.CreateTime
	}
	if so.Description != nil {
		o.Description = *so.Description
	}
	if so.DisplayName != nil {
		o.DisplayName = *so.DisplayName
	}
	if so.ImportHash != nil {
		o.ImportHash = *so.ImportHash
	}
	if so.ImportLabel != nil {
		o.ImportLabel = *so.ImportLabel
	}
	if so.Name != nil {
		o.Name = *so.Name
	}
	if so.Namespace != nil {
		o.Namespace = *so.Namespace
	}
	if so.PluginID != nil {
		o.PluginID = *so.PluginID
	}
	if so.PluginUUID != nil {
		o.PluginUUID = *so.PluginUUID
	}
	if so.Propagate != nil {
		o.Propagate = *so.Propagate
	}
	if so.PublishedDate != nil {
		o.PublishedDate = *so.PublishedDate
	}
	if so.PublisherID != nil {
		o.PublisherID = *so.PublisherID
	}
	if so.PublisherName != nil {
		o.PublisherName = *so.PublisherName
	}
	if so.Tags != nil {
		o.Tags = *so.Tags
	}
	if so.UpdateTime != nil {
		o.UpdateTime = *so.UpdateTime
	}
	if so.Vetted != nil {
		o.Vetted = *so.Vetted
	}
	if so.ZHash != nil {
		o.ZHash = *so.ZHash
	}
	if so.Zone != nil {
		o.Zone = *so.Zone
	}
}

// DeepCopy returns a deep copy if the AIPlugin.
func (o *AIPlugin) DeepCopy() *AIPlugin {

	if o == nil {
		return nil
	}

	out := &AIPlugin{}
	o.DeepCopyInto(out)

	return out
}

// DeepCopyInto copies the receiver into the given *AIPlugin.
func (o *AIPlugin) DeepCopyInto(out *AIPlugin) {

	target, err := copystructure.Copy(o)
	if err != nil {
		panic(fmt.Sprintf("Unable to deepcopy AIPlugin: %s", err))
	}

	*out = *target.(*AIPlugin)
}

// Validate valides the current information stored into the structure.
func (o *AIPlugin) Validate() error {

	errors := elemental.Errors{}
	requiredErrors := elemental.Errors{}

	if err := elemental.ValidateRequiredString("displayName", o.DisplayName); err != nil {
		requiredErrors = requiredErrors.Append(err)
	}

	if err := elemental.ValidateRequiredString("name", o.Name); err != nil {
		requiredErrors = requiredErrors.Append(err)
	}

	if err := elemental.ValidateRequiredString("pluginID", o.PluginID); err != nil {
		requiredErrors = requiredErrors.Append(err)
	}

	if err := elemental.ValidateRequiredString("pluginUUID", o.PluginUUID); err != nil {
		requiredErrors = requiredErrors.Append(err)
	}

	if err := elemental.ValidateRequiredTime("publishedDate", o.PublishedDate); err != nil {
		requiredErrors = requiredErrors.Append(err)
	}

	if err := elemental.ValidateRequiredString("publisherID", o.PublisherID); err != nil {
		requiredErrors = requiredErrors.Append(err)
	}

	if err := elemental.ValidateRequiredString("publisherName", o.PublisherName); err != nil {
		requiredErrors = requiredErrors.Append(err)
	}

	if len(requiredErrors) > 0 {
		return requiredErrors
	}

	if len(errors) > 0 {
		return errors
	}

	return nil
}

// SpecificationForAttribute returns the AttributeSpecification for the given attribute name key.
func (*AIPlugin) SpecificationForAttribute(name string) elemental.AttributeSpecification {

	if v, ok := AIPluginAttributesMap[name]; ok {
		return v
	}

	// We could not find it, so let's check on the lower case indexed spec map
	return AIPluginLowerCaseAttributesMap[name]
}

// AttributeSpecifications returns the full attribute specifications map.
func (*AIPlugin) AttributeSpecifications() map[string]elemental.AttributeSpecification {

	return AIPluginAttributesMap
}

// ValueForAttribute returns the value for the given attribute.
// This is a very advanced function that you should not need but in some
// very specific use cases.
func (o *AIPlugin) ValueForAttribute(name string) any {

	switch name {
	case "ID":
		return o.ID
	case "categories":
		return o.Categories
	case "createTime":
		return o.CreateTime
	case "description":
		return o.Description
	case "displayName":
		return o.DisplayName
	case "importHash":
		return o.ImportHash
	case "importLabel":
		return o.ImportLabel
	case "name":
		return o.Name
	case "namespace":
		return o.Namespace
	case "pluginID":
		return o.PluginID
	case "pluginUUID":
		return o.PluginUUID
	case "propagate":
		return o.Propagate
	case "publishedDate":
		return o.PublishedDate
	case "publisherID":
		return o.PublisherID
	case "publisherName":
		return o.PublisherName
	case "tags":
		return o.Tags
	case "updateTime":
		return o.UpdateTime
	case "vetted":
		return o.Vetted
	case "zHash":
		return o.ZHash
	case "zone":
		return o.Zone
	}

	return nil
}

// AIPluginAttributesMap represents the map of attribute for AIPlugin.
var AIPluginAttributesMap = map[string]elemental.AttributeSpecification{
	"ID": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "_id",
		ConvertedName:  "ID",
		Description:    `ID is the identifier of the object.`,
		Exposed:        true,
		Filterable:     true,
		Identifier:     true,
		Name:           "ID",
		Orderable:      true,
		ReadOnly:       true,
		Stored:         true,
		Type:           "string",
	},
	"Categories": {
		AllowedChoices: []string{},
		BSONFieldName:  "categories",
		ConvertedName:  "Categories",
		Description:    `The categories associated with the plugin.`,
		Exposed:        true,
		Name:           "categories",
		Stored:         true,
		SubType:        "string",
		Type:           "list",
	},
	"CreateTime": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "createtime",
		ConvertedName:  "CreateTime",
		Description:    `Creation date of the object.`,
		Exposed:        true,
		Getter:         true,
		Name:           "createTime",
		Orderable:      true,
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Type:           "time",
	},
	"Description": {
		AllowedChoices: []string{},
		BSONFieldName:  "description",
		ConvertedName:  "Description",
		Description:    `A brief description about the AI plugin and its purpose.`,
		Exposed:        true,
		Name:           "description",
		Stored:         true,
		Type:           "string",
	},
	"DisplayName": {
		AllowedChoices: []string{},
		BSONFieldName:  "displayname",
		ConvertedName:  "DisplayName",
		Description:    `The human-friendly name of the plugin.`,
		Exposed:        true,
		Name:           "displayName",
		Required:       true,
		Stored:         true,
		Type:           "string",
	},
	"ImportHash": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "importhash",
		ConvertedName:  "ImportHash",
		CreationOnly:   true,
		Description:    `The hash of the structure used to compare with new import version.`,
		Exposed:        true,
		Getter:         true,
		Name:           "importHash",
		Setter:         true,
		Stored:         true,
		Type:           "string",
	},
	"ImportLabel": {
		AllowedChoices: []string{},
		BSONFieldName:  "importlabel",
		ConvertedName:  "ImportLabel",
		CreationOnly:   true,
		Description: `The user-defined import label that allows the system to group resources from the
same import operation.`,
		Exposed: true,
		Getter:  true,
		Name:    "importLabel",
		Setter:  true,
		Stored:  true,
		Type:    "string",
	},
	"Name": {
		AllowedChoices: []string{},
		BSONFieldName:  "name",
		ConvertedName:  "Name",
		Description:    `The name of the plugin.`,
		Exposed:        true,
		Name:           "name",
		Required:       true,
		Stored:         true,
		Type:           "string",
	},
	"Namespace": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "namespace",
		ConvertedName:  "Namespace",
		Description:    `The namespace of the object.`,
		Exposed:        true,
		Getter:         true,
		Name:           "namespace",
		Orderable:      true,
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Type:           "string",
	},
	"PluginID": {
		AllowedChoices: []string{},
		BSONFieldName:  "pluginid",
		ConvertedName:  "PluginID",
		Description:    `The identifier of the plugin.`,
		Exposed:        true,
		Name:           "pluginID",
		Required:       true,
		Stored:         true,
		Type:           "string",
	},
	"PluginUUID": {
		AllowedChoices: []string{},
		BSONFieldName:  "pluginuuid",
		ConvertedName:  "PluginUUID",
		Description:    `The universally unique identifier of the plugin.`,
		Exposed:        true,
		Name:           "pluginUUID",
		Required:       true,
		Stored:         true,
		Type:           "string",
	},
	"Propagate": {
		AllowedChoices: []string{},
		BSONFieldName:  "propagate",
		ConvertedName:  "Propagate",
		DefaultValue:   true,
		Description:    `Propagates the object to all child namespaces. This is always true.`,
		Exposed:        true,
		Getter:         true,
		Name:           "propagate",
		Setter:         true,
		Stored:         true,
		Type:           "boolean",
	},
	"PublishedDate": {
		AllowedChoices: []string{},
		BSONFieldName:  "publisheddate",
		ConvertedName:  "PublishedDate",
		Description:    `When the plugin was published.`,
		Exposed:        true,
		Name:           "publishedDate",
		Required:       true,
		Stored:         true,
		Type:           "time",
	},
	"PublisherID": {
		AllowedChoices: []string{},
		BSONFieldName:  "publisherid",
		ConvertedName:  "PublisherID",
		Description:    `The publisher identifier of the plugin.`,
		Exposed:        true,
		Name:           "publisherID",
		Required:       true,
		Stored:         true,
		Type:           "string",
	},
	"PublisherName": {
		AllowedChoices: []string{},
		BSONFieldName:  "publishername",
		ConvertedName:  "PublisherName",
		Description:    `The publisher name of the plugin.`,
		Exposed:        true,
		Name:           "publisherName",
		Required:       true,
		Stored:         true,
		Type:           "string",
	},
	"Tags": {
		AllowedChoices: []string{},
		BSONFieldName:  "tags",
		ConvertedName:  "Tags",
		Description:    `The tags associated with the plugin.`,
		Exposed:        true,
		Name:           "tags",
		Stored:         true,
		SubType:        "string",
		Type:           "list",
	},
	"UpdateTime": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "updatetime",
		ConvertedName:  "UpdateTime",
		Description:    `Last update date of the object.`,
		Exposed:        true,
		Getter:         true,
		Name:           "updateTime",
		Orderable:      true,
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Type:           "time",
	},
	"Vetted": {
		AllowedChoices: []string{},
		BSONFieldName:  "vetted",
		ConvertedName:  "Vetted",
		Description:    `Flag to say if the plugin has been vetted by Acuvity or not.`,
		Exposed:        true,
		Name:           "vetted",
		Stored:         true,
		Type:           "boolean",
	},
}

// AIPluginLowerCaseAttributesMap represents the map of attribute for AIPlugin.
var AIPluginLowerCaseAttributesMap = map[string]elemental.AttributeSpecification{
	"id": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "_id",
		ConvertedName:  "ID",
		Description:    `ID is the identifier of the object.`,
		Exposed:        true,
		Filterable:     true,
		Identifier:     true,
		Name:           "ID",
		Orderable:      true,
		ReadOnly:       true,
		Stored:         true,
		Type:           "string",
	},
	"categories": {
		AllowedChoices: []string{},
		BSONFieldName:  "categories",
		ConvertedName:  "Categories",
		Description:    `The categories associated with the plugin.`,
		Exposed:        true,
		Name:           "categories",
		Stored:         true,
		SubType:        "string",
		Type:           "list",
	},
	"createtime": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "createtime",
		ConvertedName:  "CreateTime",
		Description:    `Creation date of the object.`,
		Exposed:        true,
		Getter:         true,
		Name:           "createTime",
		Orderable:      true,
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Type:           "time",
	},
	"description": {
		AllowedChoices: []string{},
		BSONFieldName:  "description",
		ConvertedName:  "Description",
		Description:    `A brief description about the AI plugin and its purpose.`,
		Exposed:        true,
		Name:           "description",
		Stored:         true,
		Type:           "string",
	},
	"displayname": {
		AllowedChoices: []string{},
		BSONFieldName:  "displayname",
		ConvertedName:  "DisplayName",
		Description:    `The human-friendly name of the plugin.`,
		Exposed:        true,
		Name:           "displayName",
		Required:       true,
		Stored:         true,
		Type:           "string",
	},
	"importhash": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "importhash",
		ConvertedName:  "ImportHash",
		CreationOnly:   true,
		Description:    `The hash of the structure used to compare with new import version.`,
		Exposed:        true,
		Getter:         true,
		Name:           "importHash",
		Setter:         true,
		Stored:         true,
		Type:           "string",
	},
	"importlabel": {
		AllowedChoices: []string{},
		BSONFieldName:  "importlabel",
		ConvertedName:  "ImportLabel",
		CreationOnly:   true,
		Description: `The user-defined import label that allows the system to group resources from the
same import operation.`,
		Exposed: true,
		Getter:  true,
		Name:    "importLabel",
		Setter:  true,
		Stored:  true,
		Type:    "string",
	},
	"name": {
		AllowedChoices: []string{},
		BSONFieldName:  "name",
		ConvertedName:  "Name",
		Description:    `The name of the plugin.`,
		Exposed:        true,
		Name:           "name",
		Required:       true,
		Stored:         true,
		Type:           "string",
	},
	"namespace": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "namespace",
		ConvertedName:  "Namespace",
		Description:    `The namespace of the object.`,
		Exposed:        true,
		Getter:         true,
		Name:           "namespace",
		Orderable:      true,
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Type:           "string",
	},
	"pluginid": {
		AllowedChoices: []string{},
		BSONFieldName:  "pluginid",
		ConvertedName:  "PluginID",
		Description:    `The identifier of the plugin.`,
		Exposed:        true,
		Name:           "pluginID",
		Required:       true,
		Stored:         true,
		Type:           "string",
	},
	"pluginuuid": {
		AllowedChoices: []string{},
		BSONFieldName:  "pluginuuid",
		ConvertedName:  "PluginUUID",
		Description:    `The universally unique identifier of the plugin.`,
		Exposed:        true,
		Name:           "pluginUUID",
		Required:       true,
		Stored:         true,
		Type:           "string",
	},
	"propagate": {
		AllowedChoices: []string{},
		BSONFieldName:  "propagate",
		ConvertedName:  "Propagate",
		DefaultValue:   true,
		Description:    `Propagates the object to all child namespaces. This is always true.`,
		Exposed:        true,
		Getter:         true,
		Name:           "propagate",
		Setter:         true,
		Stored:         true,
		Type:           "boolean",
	},
	"publisheddate": {
		AllowedChoices: []string{},
		BSONFieldName:  "publisheddate",
		ConvertedName:  "PublishedDate",
		Description:    `When the plugin was published.`,
		Exposed:        true,
		Name:           "publishedDate",
		Required:       true,
		Stored:         true,
		Type:           "time",
	},
	"publisherid": {
		AllowedChoices: []string{},
		BSONFieldName:  "publisherid",
		ConvertedName:  "PublisherID",
		Description:    `The publisher identifier of the plugin.`,
		Exposed:        true,
		Name:           "publisherID",
		Required:       true,
		Stored:         true,
		Type:           "string",
	},
	"publishername": {
		AllowedChoices: []string{},
		BSONFieldName:  "publishername",
		ConvertedName:  "PublisherName",
		Description:    `The publisher name of the plugin.`,
		Exposed:        true,
		Name:           "publisherName",
		Required:       true,
		Stored:         true,
		Type:           "string",
	},
	"tags": {
		AllowedChoices: []string{},
		BSONFieldName:  "tags",
		ConvertedName:  "Tags",
		Description:    `The tags associated with the plugin.`,
		Exposed:        true,
		Name:           "tags",
		Stored:         true,
		SubType:        "string",
		Type:           "list",
	},
	"updatetime": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "updatetime",
		ConvertedName:  "UpdateTime",
		Description:    `Last update date of the object.`,
		Exposed:        true,
		Getter:         true,
		Name:           "updateTime",
		Orderable:      true,
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Type:           "time",
	},
	"vetted": {
		AllowedChoices: []string{},
		BSONFieldName:  "vetted",
		ConvertedName:  "Vetted",
		Description:    `Flag to say if the plugin has been vetted by Acuvity or not.`,
		Exposed:        true,
		Name:           "vetted",
		Stored:         true,
		Type:           "boolean",
	},
}

// SparseAIPluginsList represents a list of SparseAIPlugins
type SparseAIPluginsList []*SparseAIPlugin

// Identity returns the identity of the objects in the list.
func (o SparseAIPluginsList) Identity() elemental.Identity {

	return AIPluginIdentity
}

// Copy returns a pointer to a copy the SparseAIPluginsList.
func (o SparseAIPluginsList) Copy() elemental.Identifiables {

	copy := slices.Clone(o)
	return &copy
}

// Append appends the objects to the a new copy of the SparseAIPluginsList.
func (o SparseAIPluginsList) Append(objects ...elemental.Identifiable) elemental.Identifiables {

	out := slices.Clone(o)
	for _, obj := range objects {
		out = append(out, obj.(*SparseAIPlugin))
	}

	return out
}

// List converts the object to an elemental.IdentifiablesList.
func (o SparseAIPluginsList) List() elemental.IdentifiablesList {

	out := make(elemental.IdentifiablesList, len(o))
	for i := range len(o) {
		out[i] = o[i]
	}

	return out
}

// DefaultOrder returns the default ordering fields of the content.
func (o SparseAIPluginsList) DefaultOrder() []string {

	return []string{}
}

// ToPlain returns the SparseAIPluginsList converted to AIPluginsList.
func (o SparseAIPluginsList) ToPlain() elemental.IdentifiablesList {

	out := make(elemental.IdentifiablesList, len(o))
	for i := range len(o) {
		out[i] = o[i].ToPlain()
	}

	return out
}

// Version returns the version of the content.
func (o SparseAIPluginsList) Version() int {

	return 1
}

// SparseAIPlugin represents the sparse version of a aiplugin.
type SparseAIPlugin struct {
	// ID is the identifier of the object.
	ID *string `json:"ID,omitempty" msgpack:"ID,omitempty" bson:"-" mapstructure:"ID,omitempty"`

	// The categories associated with the plugin.
	Categories *[]string `json:"categories,omitempty" msgpack:"categories,omitempty" bson:"categories,omitempty" mapstructure:"categories,omitempty"`

	// Creation date of the object.
	CreateTime *time.Time `json:"createTime,omitempty" msgpack:"createTime,omitempty" bson:"createtime,omitempty" mapstructure:"createTime,omitempty"`

	// A brief description about the AI plugin and its purpose.
	Description *string `json:"description,omitempty" msgpack:"description,omitempty" bson:"description,omitempty" mapstructure:"description,omitempty"`

	// The human-friendly name of the plugin.
	DisplayName *string `json:"displayName,omitempty" msgpack:"displayName,omitempty" bson:"displayname,omitempty" mapstructure:"displayName,omitempty"`

	// The hash of the structure used to compare with new import version.
	ImportHash *string `json:"importHash,omitempty" msgpack:"importHash,omitempty" bson:"importhash,omitempty" mapstructure:"importHash,omitempty"`

	// The user-defined import label that allows the system to group resources from the
	// same import operation.
	ImportLabel *string `json:"importLabel,omitempty" msgpack:"importLabel,omitempty" bson:"importlabel,omitempty" mapstructure:"importLabel,omitempty"`

	// The name of the plugin.
	Name *string `json:"name,omitempty" msgpack:"name,omitempty" bson:"name,omitempty" mapstructure:"name,omitempty"`

	// The namespace of the object.
	Namespace *string `json:"namespace,omitempty" msgpack:"namespace,omitempty" bson:"namespace,omitempty" mapstructure:"namespace,omitempty"`

	// The identifier of the plugin.
	PluginID *string `json:"pluginID,omitempty" msgpack:"pluginID,omitempty" bson:"pluginid,omitempty" mapstructure:"pluginID,omitempty"`

	// The universally unique identifier of the plugin.
	PluginUUID *string `json:"pluginUUID,omitempty" msgpack:"pluginUUID,omitempty" bson:"pluginuuid,omitempty" mapstructure:"pluginUUID,omitempty"`

	// Propagates the object to all child namespaces. This is always true.
	Propagate *bool `json:"propagate,omitempty" msgpack:"propagate,omitempty" bson:"propagate,omitempty" mapstructure:"propagate,omitempty"`

	// When the plugin was published.
	PublishedDate *time.Time `json:"publishedDate,omitempty" msgpack:"publishedDate,omitempty" bson:"publisheddate,omitempty" mapstructure:"publishedDate,omitempty"`

	// The publisher identifier of the plugin.
	PublisherID *string `json:"publisherID,omitempty" msgpack:"publisherID,omitempty" bson:"publisherid,omitempty" mapstructure:"publisherID,omitempty"`

	// The publisher name of the plugin.
	PublisherName *string `json:"publisherName,omitempty" msgpack:"publisherName,omitempty" bson:"publishername,omitempty" mapstructure:"publisherName,omitempty"`

	// The tags associated with the plugin.
	Tags *[]string `json:"tags,omitempty" msgpack:"tags,omitempty" bson:"tags,omitempty" mapstructure:"tags,omitempty"`

	// Last update date of the object.
	UpdateTime *time.Time `json:"updateTime,omitempty" msgpack:"updateTime,omitempty" bson:"updatetime,omitempty" mapstructure:"updateTime,omitempty"`

	// Flag to say if the plugin has been vetted by Acuvity or not.
	Vetted *bool `json:"vetted,omitempty" msgpack:"vetted,omitempty" bson:"vetted,omitempty" mapstructure:"vetted,omitempty"`

	// Hash of the object used to shard the data.
	ZHash *int `json:"-" msgpack:"-" bson:"zhash,omitempty" mapstructure:"-,omitempty"`

	// Sharding zone.
	Zone *int `json:"-" msgpack:"-" bson:"zone,omitempty" mapstructure:"-,omitempty"`

	ModelVersion int `json:"-" msgpack:"-" bson:"_modelversion"`
}

// NewSparseAIPlugin returns a new  SparseAIPlugin.
func NewSparseAIPlugin() *SparseAIPlugin {
	return &SparseAIPlugin{}
}

// Identity returns the Identity of the sparse object.
func (o *SparseAIPlugin) Identity() elemental.Identity {

	return AIPluginIdentity
}

// Identifier returns the value of the sparse object's unique identifier.
func (o *SparseAIPlugin) Identifier() string {

	if o.ID == nil {
		return ""
	}
	return *o.ID
}

// SetIdentifier sets the value of the sparse object's unique identifier.
func (o *SparseAIPlugin) SetIdentifier(id string) {

	if id != "" {
		o.ID = &id
	} else {
		o.ID = nil
	}
}

// GetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *SparseAIPlugin) GetBSON() (any, error) {

	if o == nil {
		return nil, nil
	}

	s := &mongoAttributesSparseAIPlugin{}

	if o.ID != nil {
		s.ID = bson.ObjectIdHex(*o.ID)
	}
	if o.Categories != nil {
		s.Categories = o.Categories
	}
	if o.CreateTime != nil {
		s.CreateTime = o.CreateTime
	}
	if o.Description != nil {
		s.Description = o.Description
	}
	if o.DisplayName != nil {
		s.DisplayName = o.DisplayName
	}
	if o.ImportHash != nil {
		s.ImportHash = o.ImportHash
	}
	if o.ImportLabel != nil {
		s.ImportLabel = o.ImportLabel
	}
	if o.Name != nil {
		s.Name = o.Name
	}
	if o.Namespace != nil {
		s.Namespace = o.Namespace
	}
	if o.PluginID != nil {
		s.PluginID = o.PluginID
	}
	if o.PluginUUID != nil {
		s.PluginUUID = o.PluginUUID
	}
	if o.Propagate != nil {
		s.Propagate = o.Propagate
	}
	if o.PublishedDate != nil {
		s.PublishedDate = o.PublishedDate
	}
	if o.PublisherID != nil {
		s.PublisherID = o.PublisherID
	}
	if o.PublisherName != nil {
		s.PublisherName = o.PublisherName
	}
	if o.Tags != nil {
		s.Tags = o.Tags
	}
	if o.UpdateTime != nil {
		s.UpdateTime = o.UpdateTime
	}
	if o.Vetted != nil {
		s.Vetted = o.Vetted
	}
	if o.ZHash != nil {
		s.ZHash = o.ZHash
	}
	if o.Zone != nil {
		s.Zone = o.Zone
	}

	return s, nil
}

// SetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *SparseAIPlugin) SetBSON(raw bson.Raw) error {

	if o == nil {
		return nil
	}

	s := &mongoAttributesSparseAIPlugin{}
	if err := raw.Unmarshal(s); err != nil {
		return err
	}

	id := s.ID.Hex()
	o.ID = &id
	if s.Categories != nil {
		o.Categories = s.Categories
	}
	if s.CreateTime != nil {
		o.CreateTime = s.CreateTime
	}
	if s.Description != nil {
		o.Description = s.Description
	}
	if s.DisplayName != nil {
		o.DisplayName = s.DisplayName
	}
	if s.ImportHash != nil {
		o.ImportHash = s.ImportHash
	}
	if s.ImportLabel != nil {
		o.ImportLabel = s.ImportLabel
	}
	if s.Name != nil {
		o.Name = s.Name
	}
	if s.Namespace != nil {
		o.Namespace = s.Namespace
	}
	if s.PluginID != nil {
		o.PluginID = s.PluginID
	}
	if s.PluginUUID != nil {
		o.PluginUUID = s.PluginUUID
	}
	if s.Propagate != nil {
		o.Propagate = s.Propagate
	}
	if s.PublishedDate != nil {
		o.PublishedDate = s.PublishedDate
	}
	if s.PublisherID != nil {
		o.PublisherID = s.PublisherID
	}
	if s.PublisherName != nil {
		o.PublisherName = s.PublisherName
	}
	if s.Tags != nil {
		o.Tags = s.Tags
	}
	if s.UpdateTime != nil {
		o.UpdateTime = s.UpdateTime
	}
	if s.Vetted != nil {
		o.Vetted = s.Vetted
	}
	if s.ZHash != nil {
		o.ZHash = s.ZHash
	}
	if s.Zone != nil {
		o.Zone = s.Zone
	}

	return nil
}

// Version returns the hardcoded version of the model.
func (o *SparseAIPlugin) Version() int {

	return 1
}

// ToPlain returns the plain version of the sparse model.
func (o *SparseAIPlugin) ToPlain() elemental.PlainIdentifiable {

	out := NewAIPlugin()
	if o.ID != nil {
		out.ID = *o.ID
	}
	if o.Categories != nil {
		out.Categories = *o.Categories
	}
	if o.CreateTime != nil {
		out.CreateTime = *o.CreateTime
	}
	if o.Description != nil {
		out.Description = *o.Description
	}
	if o.DisplayName != nil {
		out.DisplayName = *o.DisplayName
	}
	if o.ImportHash != nil {
		out.ImportHash = *o.ImportHash
	}
	if o.ImportLabel != nil {
		out.ImportLabel = *o.ImportLabel
	}
	if o.Name != nil {
		out.Name = *o.Name
	}
	if o.Namespace != nil {
		out.Namespace = *o.Namespace
	}
	if o.PluginID != nil {
		out.PluginID = *o.PluginID
	}
	if o.PluginUUID != nil {
		out.PluginUUID = *o.PluginUUID
	}
	if o.Propagate != nil {
		out.Propagate = *o.Propagate
	}
	if o.PublishedDate != nil {
		out.PublishedDate = *o.PublishedDate
	}
	if o.PublisherID != nil {
		out.PublisherID = *o.PublisherID
	}
	if o.PublisherName != nil {
		out.PublisherName = *o.PublisherName
	}
	if o.Tags != nil {
		out.Tags = *o.Tags
	}
	if o.UpdateTime != nil {
		out.UpdateTime = *o.UpdateTime
	}
	if o.Vetted != nil {
		out.Vetted = *o.Vetted
	}
	if o.ZHash != nil {
		out.ZHash = *o.ZHash
	}
	if o.Zone != nil {
		out.Zone = *o.Zone
	}

	return out
}

// GetCreateTime returns the CreateTime of the receiver.
func (o *SparseAIPlugin) GetCreateTime() (out time.Time) {

	if o.CreateTime == nil {
		return
	}

	return *o.CreateTime
}

// SetCreateTime sets the property CreateTime of the receiver using the address of the given value.
func (o *SparseAIPlugin) SetCreateTime(createTime time.Time) {

	o.CreateTime = &createTime
}

// GetImportHash returns the ImportHash of the receiver.
func (o *SparseAIPlugin) GetImportHash() (out string) {

	if o.ImportHash == nil {
		return
	}

	return *o.ImportHash
}

// SetImportHash sets the property ImportHash of the receiver using the address of the given value.
func (o *SparseAIPlugin) SetImportHash(importHash string) {

	o.ImportHash = &importHash
}

// GetImportLabel returns the ImportLabel of the receiver.
func (o *SparseAIPlugin) GetImportLabel() (out string) {

	if o.ImportLabel == nil {
		return
	}

	return *o.ImportLabel
}

// SetImportLabel sets the property ImportLabel of the receiver using the address of the given value.
func (o *SparseAIPlugin) SetImportLabel(importLabel string) {

	o.ImportLabel = &importLabel
}

// GetNamespace returns the Namespace of the receiver.
func (o *SparseAIPlugin) GetNamespace() (out string) {

	if o.Namespace == nil {
		return
	}

	return *o.Namespace
}

// SetNamespace sets the property Namespace of the receiver using the address of the given value.
func (o *SparseAIPlugin) SetNamespace(namespace string) {

	o.Namespace = &namespace
}

// GetPropagate returns the Propagate of the receiver.
func (o *SparseAIPlugin) GetPropagate() (out bool) {

	if o.Propagate == nil {
		return
	}

	return *o.Propagate
}

// SetPropagate sets the property Propagate of the receiver using the address of the given value.
func (o *SparseAIPlugin) SetPropagate(propagate bool) {

	o.Propagate = &propagate
}

// GetUpdateTime returns the UpdateTime of the receiver.
func (o *SparseAIPlugin) GetUpdateTime() (out time.Time) {

	if o.UpdateTime == nil {
		return
	}

	return *o.UpdateTime
}

// SetUpdateTime sets the property UpdateTime of the receiver using the address of the given value.
func (o *SparseAIPlugin) SetUpdateTime(updateTime time.Time) {

	o.UpdateTime = &updateTime
}

// DeepCopy returns a deep copy if the SparseAIPlugin.
func (o *SparseAIPlugin) DeepCopy() *SparseAIPlugin {

	if o == nil {
		return nil
	}

	out := &SparseAIPlugin{}
	o.DeepCopyInto(out)

	return out
}

// DeepCopyInto copies the receiver into the given *SparseAIPlugin.
func (o *SparseAIPlugin) DeepCopyInto(out *SparseAIPlugin) {

	target, err := copystructure.Copy(o)
	if err != nil {
		panic(fmt.Sprintf("Unable to deepcopy SparseAIPlugin: %s", err))
	}

	*out = *target.(*SparseAIPlugin)
}

type mongoAttributesAIPlugin struct {
	ID            bson.ObjectId `bson:"_id,omitempty"`
	Categories    []string      `bson:"categories,omitempty"`
	CreateTime    time.Time     `bson:"createtime"`
	Description   string        `bson:"description,omitempty"`
	DisplayName   string        `bson:"displayname"`
	ImportHash    string        `bson:"importhash,omitempty"`
	ImportLabel   string        `bson:"importlabel,omitempty"`
	Name          string        `bson:"name"`
	Namespace     string        `bson:"namespace,omitempty"`
	PluginID      string        `bson:"pluginid"`
	PluginUUID    string        `bson:"pluginuuid"`
	Propagate     bool          `bson:"propagate"`
	PublishedDate time.Time     `bson:"publisheddate"`
	PublisherID   string        `bson:"publisherid"`
	PublisherName string        `bson:"publishername"`
	Tags          []string      `bson:"tags,omitempty"`
	UpdateTime    time.Time     `bson:"updatetime"`
	Vetted        bool          `bson:"vetted"`
	ZHash         int           `bson:"zhash"`
	Zone          int           `bson:"zone"`
}
type mongoAttributesSparseAIPlugin struct {
	ID            bson.ObjectId `bson:"_id,omitempty"`
	Categories    *[]string     `bson:"categories,omitempty"`
	CreateTime    *time.Time    `bson:"createtime,omitempty"`
	Description   *string       `bson:"description,omitempty"`
	DisplayName   *string       `bson:"displayname,omitempty"`
	ImportHash    *string       `bson:"importhash,omitempty"`
	ImportLabel   *string       `bson:"importlabel,omitempty"`
	Name          *string       `bson:"name,omitempty"`
	Namespace     *string       `bson:"namespace,omitempty"`
	PluginID      *string       `bson:"pluginid,omitempty"`
	PluginUUID    *string       `bson:"pluginuuid,omitempty"`
	Propagate     *bool         `bson:"propagate,omitempty"`
	PublishedDate *time.Time    `bson:"publisheddate,omitempty"`
	PublisherID   *string       `bson:"publisherid,omitempty"`
	PublisherName *string       `bson:"publishername,omitempty"`
	Tags          *[]string     `bson:"tags,omitempty"`
	UpdateTime    *time.Time    `bson:"updatetime,omitempty"`
	Vetted        *bool         `bson:"vetted,omitempty"`
	ZHash         *int          `bson:"zhash,omitempty"`
	Zone          *int          `bson:"zone,omitempty"`
}
