// Code generated by elegen. DO NOT EDIT.
// Source: go.acuvity.ai/elemental (templates/model.gotpl)

package api

import (
	"fmt"
	"time"

	"github.com/globalsign/mgo/bson"
	"github.com/mitchellh/copystructure"
	"go.acuvity.ai/elemental"
)

// FeedbackIdentity represents the Identity of the object.
var FeedbackIdentity = elemental.Identity{
	Name:     "feedback",
	Category: "feedbacks",
	Package:  "lain",
	Private:  false,
}

// FeedbacksList represents a list of Feedbacks
type FeedbacksList []*Feedback

// Identity returns the identity of the objects in the list.
func (o FeedbacksList) Identity() elemental.Identity {

	return FeedbackIdentity
}

// Copy returns a pointer to a copy the FeedbacksList.
func (o FeedbacksList) Copy() elemental.Identifiables {

	out := append(FeedbacksList{}, o...)
	return &out
}

// Append appends the objects to the a new copy of the FeedbacksList.
func (o FeedbacksList) Append(objects ...elemental.Identifiable) elemental.Identifiables {

	out := append(FeedbacksList{}, o...)
	for _, obj := range objects {
		out = append(out, obj.(*Feedback))
	}

	return out
}

// List converts the object to an elemental.IdentifiablesList.
func (o FeedbacksList) List() elemental.IdentifiablesList {

	out := make(elemental.IdentifiablesList, len(o))
	for i := 0; i < len(o); i++ {
		out[i] = o[i]
	}

	return out
}

// DefaultOrder returns the default ordering fields of the content.
func (o FeedbacksList) DefaultOrder() []string {

	return []string{}
}

// ToSparse returns the FeedbacksList converted to SparseFeedbacksList.
// Objects in the list will only contain the given fields. No field means entire field set.
func (o FeedbacksList) ToSparse(fields ...string) elemental.Identifiables {

	out := make(SparseFeedbacksList, len(o))
	for i := 0; i < len(o); i++ {
		out[i] = o[i].ToSparse(fields...).(*SparseFeedback)
	}

	return out
}

// Version returns the version of the content.
func (o FeedbacksList) Version() int {

	return 1
}

// Feedback represents the model of a feedback
type Feedback struct {
	// ID is the identifier of the object.
	ID string `json:"ID,omitempty" msgpack:"ID,omitempty" bson:"-" mapstructure:"ID,omitempty"`

	// General comments on the feedback.
	Comment string `json:"comment" msgpack:"comment" bson:"comment" mapstructure:"comment,omitempty"`

	// Creation date of the object.
	CreateTime time.Time `json:"createTime" msgpack:"createTime" bson:"createtime" mapstructure:"createTime,omitempty"`

	// The key of the feedback.
	Key string `json:"key" msgpack:"key" bson:"key" mapstructure:"key,omitempty"`

	// The hash of the log.
	LogHash string `json:"logHash" msgpack:"logHash" bson:"loghash" mapstructure:"logHash,omitempty"`

	// The namespace of the object.
	Namespace string `json:"namespace,omitempty" msgpack:"namespace,omitempty" bson:"namespace,omitempty" mapstructure:"namespace,omitempty"`

	// The principal of the object.
	Principal *Principal `json:"principal" msgpack:"principal" bson:"principal" mapstructure:"principal,omitempty"`

	// The provider of the feedback.
	Provider string `json:"provider" msgpack:"provider" bson:"provider" mapstructure:"provider,omitempty"`

	// The feedback score (+1 for upvote, -1 for downvote).
	Score int `json:"score" msgpack:"score" bson:"score" mapstructure:"score,omitempty"`

	// Last update date of the object.
	UpdateTime time.Time `json:"updateTime" msgpack:"updateTime" bson:"updatetime" mapstructure:"updateTime,omitempty"`

	// The value of the feedback.
	Value string `json:"value" msgpack:"value" bson:"value" mapstructure:"value,omitempty"`

	// Hash of the object used to shard the data.
	ZHash int `json:"-" msgpack:"-" bson:"zhash" mapstructure:"-,omitempty"`

	// Sharding zone.
	Zone int `json:"-" msgpack:"-" bson:"zone" mapstructure:"-,omitempty"`

	ModelVersion int `json:"-" msgpack:"-" bson:"_modelversion"`
}

// NewFeedback returns a new *Feedback
func NewFeedback() *Feedback {

	return &Feedback{
		ModelVersion: 1,
		Principal:    NewPrincipal(),
	}
}

// Identity returns the Identity of the object.
func (o *Feedback) Identity() elemental.Identity {

	return FeedbackIdentity
}

// Identifier returns the value of the object's unique identifier.
func (o *Feedback) Identifier() string {

	return o.ID
}

// SetIdentifier sets the value of the object's unique identifier.
func (o *Feedback) SetIdentifier(id string) {

	o.ID = id
}

// GetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *Feedback) GetBSON() (any, error) {

	if o == nil {
		return nil, nil
	}

	s := &mongoAttributesFeedback{}

	if o.ID != "" {
		s.ID = bson.ObjectIdHex(o.ID)
	}
	s.Comment = o.Comment
	s.CreateTime = o.CreateTime
	s.Key = o.Key
	s.LogHash = o.LogHash
	s.Namespace = o.Namespace
	s.Principal = o.Principal
	s.Provider = o.Provider
	s.Score = o.Score
	s.UpdateTime = o.UpdateTime
	s.Value = o.Value
	s.ZHash = o.ZHash
	s.Zone = o.Zone

	return s, nil
}

// SetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *Feedback) SetBSON(raw bson.Raw) error {

	if o == nil {
		return nil
	}

	s := &mongoAttributesFeedback{}
	if err := raw.Unmarshal(s); err != nil {
		return err
	}

	o.ID = s.ID.Hex()
	o.Comment = s.Comment
	o.CreateTime = s.CreateTime
	o.Key = s.Key
	o.LogHash = s.LogHash
	o.Namespace = s.Namespace
	o.Principal = s.Principal
	o.Provider = s.Provider
	o.Score = s.Score
	o.UpdateTime = s.UpdateTime
	o.Value = s.Value
	o.ZHash = s.ZHash
	o.Zone = s.Zone

	return nil
}

// Version returns the hardcoded version of the model.
func (o *Feedback) Version() int {

	return 1
}

// BleveType implements the bleve.Classifier Interface.
func (o *Feedback) BleveType() string {

	return "feedback"
}

// DefaultOrder returns the list of default ordering fields.
func (o *Feedback) DefaultOrder() []string {

	return []string{}
}

// Doc returns the documentation for the object
func (o *Feedback) Doc() string {

	return `Feedbacks from user regarding analysis decisions.`
}

func (o *Feedback) String() string {

	return fmt.Sprintf("<%s:%s>", o.Identity().Name, o.Identifier())
}

// GetCreateTime returns the CreateTime of the receiver.
func (o *Feedback) GetCreateTime() time.Time {

	return o.CreateTime
}

// SetCreateTime sets the property CreateTime of the receiver using the given value.
func (o *Feedback) SetCreateTime(createTime time.Time) {

	o.CreateTime = createTime
}

// GetNamespace returns the Namespace of the receiver.
func (o *Feedback) GetNamespace() string {

	return o.Namespace
}

// SetNamespace sets the property Namespace of the receiver using the given value.
func (o *Feedback) SetNamespace(namespace string) {

	o.Namespace = namespace
}

// GetUpdateTime returns the UpdateTime of the receiver.
func (o *Feedback) GetUpdateTime() time.Time {

	return o.UpdateTime
}

// SetUpdateTime sets the property UpdateTime of the receiver using the given value.
func (o *Feedback) SetUpdateTime(updateTime time.Time) {

	o.UpdateTime = updateTime
}

// GetZHash returns the ZHash of the receiver.
func (o *Feedback) GetZHash() int {

	return o.ZHash
}

// SetZHash sets the property ZHash of the receiver using the given value.
func (o *Feedback) SetZHash(zHash int) {

	o.ZHash = zHash
}

// GetZone returns the Zone of the receiver.
func (o *Feedback) GetZone() int {

	return o.Zone
}

// SetZone sets the property Zone of the receiver using the given value.
func (o *Feedback) SetZone(zone int) {

	o.Zone = zone
}

// ToSparse returns the sparse version of the model.
// The returned object will only contain the given fields. No field means entire field set.
func (o *Feedback) ToSparse(fields ...string) elemental.SparseIdentifiable {

	if len(fields) == 0 {
		// nolint: goimports
		return &SparseFeedback{
			ID:         &o.ID,
			Comment:    &o.Comment,
			CreateTime: &o.CreateTime,
			Key:        &o.Key,
			LogHash:    &o.LogHash,
			Namespace:  &o.Namespace,
			Principal:  o.Principal,
			Provider:   &o.Provider,
			Score:      &o.Score,
			UpdateTime: &o.UpdateTime,
			Value:      &o.Value,
			ZHash:      &o.ZHash,
			Zone:       &o.Zone,
		}
	}

	sp := &SparseFeedback{}
	for _, f := range fields {
		switch f {
		case "ID":
			sp.ID = &(o.ID)
		case "comment":
			sp.Comment = &(o.Comment)
		case "createTime":
			sp.CreateTime = &(o.CreateTime)
		case "key":
			sp.Key = &(o.Key)
		case "logHash":
			sp.LogHash = &(o.LogHash)
		case "namespace":
			sp.Namespace = &(o.Namespace)
		case "principal":
			sp.Principal = o.Principal
		case "provider":
			sp.Provider = &(o.Provider)
		case "score":
			sp.Score = &(o.Score)
		case "updateTime":
			sp.UpdateTime = &(o.UpdateTime)
		case "value":
			sp.Value = &(o.Value)
		case "zHash":
			sp.ZHash = &(o.ZHash)
		case "zone":
			sp.Zone = &(o.Zone)
		}
	}

	return sp
}

// Patch apply the non nil value of a *SparseFeedback to the object.
func (o *Feedback) Patch(sparse elemental.SparseIdentifiable) {
	if !sparse.Identity().IsEqual(o.Identity()) {
		panic("cannot patch from a parse with different identity")
	}

	so := sparse.(*SparseFeedback)
	if so.ID != nil {
		o.ID = *so.ID
	}
	if so.Comment != nil {
		o.Comment = *so.Comment
	}
	if so.CreateTime != nil {
		o.CreateTime = *so.CreateTime
	}
	if so.Key != nil {
		o.Key = *so.Key
	}
	if so.LogHash != nil {
		o.LogHash = *so.LogHash
	}
	if so.Namespace != nil {
		o.Namespace = *so.Namespace
	}
	if so.Principal != nil {
		o.Principal = so.Principal
	}
	if so.Provider != nil {
		o.Provider = *so.Provider
	}
	if so.Score != nil {
		o.Score = *so.Score
	}
	if so.UpdateTime != nil {
		o.UpdateTime = *so.UpdateTime
	}
	if so.Value != nil {
		o.Value = *so.Value
	}
	if so.ZHash != nil {
		o.ZHash = *so.ZHash
	}
	if so.Zone != nil {
		o.Zone = *so.Zone
	}
}

// DeepCopy returns a deep copy if the Feedback.
func (o *Feedback) DeepCopy() *Feedback {

	if o == nil {
		return nil
	}

	out := &Feedback{}
	o.DeepCopyInto(out)

	return out
}

// DeepCopyInto copies the receiver into the given *Feedback.
func (o *Feedback) DeepCopyInto(out *Feedback) {

	target, err := copystructure.Copy(o)
	if err != nil {
		panic(fmt.Sprintf("Unable to deepcopy Feedback: %s", err))
	}

	*out = *target.(*Feedback)
}

// Validate valides the current information stored into the structure.
func (o *Feedback) Validate() error {

	errors := elemental.Errors{}
	requiredErrors := elemental.Errors{}

	if err := elemental.ValidateRequiredString("key", o.Key); err != nil {
		requiredErrors = requiredErrors.Append(err)
	}

	if err := elemental.ValidateRequiredString("logHash", o.LogHash); err != nil {
		requiredErrors = requiredErrors.Append(err)
	}

	if o.Principal != nil {
		elemental.ResetDefaultForZeroValues(o.Principal)
		if err := o.Principal.Validate(); err != nil {
			errors = errors.Append(err)
		}
	}

	if err := elemental.ValidateRequiredString("provider", o.Provider); err != nil {
		requiredErrors = requiredErrors.Append(err)
	}

	if err := elemental.ValidateRequiredString("value", o.Value); err != nil {
		requiredErrors = requiredErrors.Append(err)
	}

	if len(requiredErrors) > 0 {
		return requiredErrors
	}

	if len(errors) > 0 {
		return errors
	}

	return nil
}

// SpecificationForAttribute returns the AttributeSpecification for the given attribute name key.
func (*Feedback) SpecificationForAttribute(name string) elemental.AttributeSpecification {

	if v, ok := FeedbackAttributesMap[name]; ok {
		return v
	}

	// We could not find it, so let's check on the lower case indexed spec map
	return FeedbackLowerCaseAttributesMap[name]
}

// AttributeSpecifications returns the full attribute specifications map.
func (*Feedback) AttributeSpecifications() map[string]elemental.AttributeSpecification {

	return FeedbackAttributesMap
}

// ValueForAttribute returns the value for the given attribute.
// This is a very advanced function that you should not need but in some
// very specific use cases.
func (o *Feedback) ValueForAttribute(name string) any {

	switch name {
	case "ID":
		return o.ID
	case "comment":
		return o.Comment
	case "createTime":
		return o.CreateTime
	case "key":
		return o.Key
	case "logHash":
		return o.LogHash
	case "namespace":
		return o.Namespace
	case "principal":
		return o.Principal
	case "provider":
		return o.Provider
	case "score":
		return o.Score
	case "updateTime":
		return o.UpdateTime
	case "value":
		return o.Value
	case "zHash":
		return o.ZHash
	case "zone":
		return o.Zone
	}

	return nil
}

// FeedbackAttributesMap represents the map of attribute for Feedback.
var FeedbackAttributesMap = map[string]elemental.AttributeSpecification{
	"ID": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "_id",
		ConvertedName:  "ID",
		Description:    `ID is the identifier of the object.`,
		Exposed:        true,
		Filterable:     true,
		Identifier:     true,
		Name:           "ID",
		Orderable:      true,
		ReadOnly:       true,
		Stored:         true,
		Type:           "string",
	},
	"Comment": {
		AllowedChoices: []string{},
		BSONFieldName:  "comment",
		ConvertedName:  "Comment",
		Description:    `General comments on the feedback.`,
		Exposed:        true,
		Name:           "comment",
		Stored:         true,
		Type:           "string",
	},
	"CreateTime": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "createtime",
		ConvertedName:  "CreateTime",
		Description:    `Creation date of the object.`,
		Exposed:        true,
		Getter:         true,
		Name:           "createTime",
		Orderable:      true,
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Type:           "time",
	},
	"Key": {
		AllowedChoices: []string{},
		BSONFieldName:  "key",
		ConvertedName:  "Key",
		CreationOnly:   true,
		Description:    `The key of the feedback.`,
		Exposed:        true,
		Name:           "key",
		Required:       true,
		Stored:         true,
		Type:           "string",
	},
	"LogHash": {
		AllowedChoices: []string{},
		BSONFieldName:  "loghash",
		ConvertedName:  "LogHash",
		CreationOnly:   true,
		Description:    `The hash of the log.`,
		Exposed:        true,
		Name:           "logHash",
		Required:       true,
		Stored:         true,
		Type:           "string",
	},
	"Namespace": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "namespace",
		ConvertedName:  "Namespace",
		Description:    `The namespace of the object.`,
		Exposed:        true,
		Getter:         true,
		Name:           "namespace",
		Orderable:      true,
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Type:           "string",
	},
	"Principal": {
		AllowedChoices: []string{},
		BSONFieldName:  "principal",
		ConvertedName:  "Principal",
		Description:    `The principal of the object.`,
		Exposed:        true,
		Name:           "principal",
		Required:       true,
		Stored:         true,
		SubType:        "principal",
		Type:           "ref",
	},
	"Provider": {
		AllowedChoices: []string{},
		BSONFieldName:  "provider",
		ConvertedName:  "Provider",
		CreationOnly:   true,
		Description:    `The provider of the feedback.`,
		Exposed:        true,
		Name:           "provider",
		Required:       true,
		Stored:         true,
		Type:           "string",
	},
	"Score": {
		AllowedChoices: []string{},
		BSONFieldName:  "score",
		ConvertedName:  "Score",
		Description:    `The feedback score (+1 for upvote, -1 for downvote).`,
		Exposed:        true,
		Name:           "score",
		Stored:         true,
		Type:           "integer",
	},
	"UpdateTime": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "updatetime",
		ConvertedName:  "UpdateTime",
		Description:    `Last update date of the object.`,
		Exposed:        true,
		Getter:         true,
		Name:           "updateTime",
		Orderable:      true,
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Type:           "time",
	},
	"Value": {
		AllowedChoices: []string{},
		BSONFieldName:  "value",
		ConvertedName:  "Value",
		CreationOnly:   true,
		Description:    `The value of the feedback.`,
		Exposed:        true,
		Name:           "value",
		Required:       true,
		Stored:         true,
		Type:           "string",
	},
	"ZHash": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "zhash",
		ConvertedName:  "ZHash",
		Description:    `Hash of the object used to shard the data.`,
		Getter:         true,
		Name:           "zHash",
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Type:           "integer",
	},
	"Zone": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "zone",
		ConvertedName:  "Zone",
		Description:    `Sharding zone.`,
		Getter:         true,
		Name:           "zone",
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Transient:      true,
		Type:           "integer",
	},
}

// FeedbackLowerCaseAttributesMap represents the map of attribute for Feedback.
var FeedbackLowerCaseAttributesMap = map[string]elemental.AttributeSpecification{
	"id": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "_id",
		ConvertedName:  "ID",
		Description:    `ID is the identifier of the object.`,
		Exposed:        true,
		Filterable:     true,
		Identifier:     true,
		Name:           "ID",
		Orderable:      true,
		ReadOnly:       true,
		Stored:         true,
		Type:           "string",
	},
	"comment": {
		AllowedChoices: []string{},
		BSONFieldName:  "comment",
		ConvertedName:  "Comment",
		Description:    `General comments on the feedback.`,
		Exposed:        true,
		Name:           "comment",
		Stored:         true,
		Type:           "string",
	},
	"createtime": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "createtime",
		ConvertedName:  "CreateTime",
		Description:    `Creation date of the object.`,
		Exposed:        true,
		Getter:         true,
		Name:           "createTime",
		Orderable:      true,
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Type:           "time",
	},
	"key": {
		AllowedChoices: []string{},
		BSONFieldName:  "key",
		ConvertedName:  "Key",
		CreationOnly:   true,
		Description:    `The key of the feedback.`,
		Exposed:        true,
		Name:           "key",
		Required:       true,
		Stored:         true,
		Type:           "string",
	},
	"loghash": {
		AllowedChoices: []string{},
		BSONFieldName:  "loghash",
		ConvertedName:  "LogHash",
		CreationOnly:   true,
		Description:    `The hash of the log.`,
		Exposed:        true,
		Name:           "logHash",
		Required:       true,
		Stored:         true,
		Type:           "string",
	},
	"namespace": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "namespace",
		ConvertedName:  "Namespace",
		Description:    `The namespace of the object.`,
		Exposed:        true,
		Getter:         true,
		Name:           "namespace",
		Orderable:      true,
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Type:           "string",
	},
	"principal": {
		AllowedChoices: []string{},
		BSONFieldName:  "principal",
		ConvertedName:  "Principal",
		Description:    `The principal of the object.`,
		Exposed:        true,
		Name:           "principal",
		Required:       true,
		Stored:         true,
		SubType:        "principal",
		Type:           "ref",
	},
	"provider": {
		AllowedChoices: []string{},
		BSONFieldName:  "provider",
		ConvertedName:  "Provider",
		CreationOnly:   true,
		Description:    `The provider of the feedback.`,
		Exposed:        true,
		Name:           "provider",
		Required:       true,
		Stored:         true,
		Type:           "string",
	},
	"score": {
		AllowedChoices: []string{},
		BSONFieldName:  "score",
		ConvertedName:  "Score",
		Description:    `The feedback score (+1 for upvote, -1 for downvote).`,
		Exposed:        true,
		Name:           "score",
		Stored:         true,
		Type:           "integer",
	},
	"updatetime": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "updatetime",
		ConvertedName:  "UpdateTime",
		Description:    `Last update date of the object.`,
		Exposed:        true,
		Getter:         true,
		Name:           "updateTime",
		Orderable:      true,
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Type:           "time",
	},
	"value": {
		AllowedChoices: []string{},
		BSONFieldName:  "value",
		ConvertedName:  "Value",
		CreationOnly:   true,
		Description:    `The value of the feedback.`,
		Exposed:        true,
		Name:           "value",
		Required:       true,
		Stored:         true,
		Type:           "string",
	},
	"zhash": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "zhash",
		ConvertedName:  "ZHash",
		Description:    `Hash of the object used to shard the data.`,
		Getter:         true,
		Name:           "zHash",
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Type:           "integer",
	},
	"zone": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "zone",
		ConvertedName:  "Zone",
		Description:    `Sharding zone.`,
		Getter:         true,
		Name:           "zone",
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Transient:      true,
		Type:           "integer",
	},
}

// SparseFeedbacksList represents a list of SparseFeedbacks
type SparseFeedbacksList []*SparseFeedback

// Identity returns the identity of the objects in the list.
func (o SparseFeedbacksList) Identity() elemental.Identity {

	return FeedbackIdentity
}

// Copy returns a pointer to a copy the SparseFeedbacksList.
func (o SparseFeedbacksList) Copy() elemental.Identifiables {

	copy := append(SparseFeedbacksList{}, o...)
	return &copy
}

// Append appends the objects to the a new copy of the SparseFeedbacksList.
func (o SparseFeedbacksList) Append(objects ...elemental.Identifiable) elemental.Identifiables {

	out := append(SparseFeedbacksList{}, o...)
	for _, obj := range objects {
		out = append(out, obj.(*SparseFeedback))
	}

	return out
}

// List converts the object to an elemental.IdentifiablesList.
func (o SparseFeedbacksList) List() elemental.IdentifiablesList {

	out := make(elemental.IdentifiablesList, len(o))
	for i := 0; i < len(o); i++ {
		out[i] = o[i]
	}

	return out
}

// DefaultOrder returns the default ordering fields of the content.
func (o SparseFeedbacksList) DefaultOrder() []string {

	return []string{}
}

// ToPlain returns the SparseFeedbacksList converted to FeedbacksList.
func (o SparseFeedbacksList) ToPlain() elemental.IdentifiablesList {

	out := make(elemental.IdentifiablesList, len(o))
	for i := 0; i < len(o); i++ {
		out[i] = o[i].ToPlain()
	}

	return out
}

// Version returns the version of the content.
func (o SparseFeedbacksList) Version() int {

	return 1
}

// SparseFeedback represents the sparse version of a feedback.
type SparseFeedback struct {
	// ID is the identifier of the object.
	ID *string `json:"ID,omitempty" msgpack:"ID,omitempty" bson:"-" mapstructure:"ID,omitempty"`

	// General comments on the feedback.
	Comment *string `json:"comment,omitempty" msgpack:"comment,omitempty" bson:"comment,omitempty" mapstructure:"comment,omitempty"`

	// Creation date of the object.
	CreateTime *time.Time `json:"createTime,omitempty" msgpack:"createTime,omitempty" bson:"createtime,omitempty" mapstructure:"createTime,omitempty"`

	// The key of the feedback.
	Key *string `json:"key,omitempty" msgpack:"key,omitempty" bson:"key,omitempty" mapstructure:"key,omitempty"`

	// The hash of the log.
	LogHash *string `json:"logHash,omitempty" msgpack:"logHash,omitempty" bson:"loghash,omitempty" mapstructure:"logHash,omitempty"`

	// The namespace of the object.
	Namespace *string `json:"namespace,omitempty" msgpack:"namespace,omitempty" bson:"namespace,omitempty" mapstructure:"namespace,omitempty"`

	// The principal of the object.
	Principal *Principal `json:"principal,omitempty" msgpack:"principal,omitempty" bson:"principal,omitempty" mapstructure:"principal,omitempty"`

	// The provider of the feedback.
	Provider *string `json:"provider,omitempty" msgpack:"provider,omitempty" bson:"provider,omitempty" mapstructure:"provider,omitempty"`

	// The feedback score (+1 for upvote, -1 for downvote).
	Score *int `json:"score,omitempty" msgpack:"score,omitempty" bson:"score,omitempty" mapstructure:"score,omitempty"`

	// Last update date of the object.
	UpdateTime *time.Time `json:"updateTime,omitempty" msgpack:"updateTime,omitempty" bson:"updatetime,omitempty" mapstructure:"updateTime,omitempty"`

	// The value of the feedback.
	Value *string `json:"value,omitempty" msgpack:"value,omitempty" bson:"value,omitempty" mapstructure:"value,omitempty"`

	// Hash of the object used to shard the data.
	ZHash *int `json:"-" msgpack:"-" bson:"zhash,omitempty" mapstructure:"-,omitempty"`

	// Sharding zone.
	Zone *int `json:"-" msgpack:"-" bson:"zone,omitempty" mapstructure:"-,omitempty"`

	ModelVersion int `json:"-" msgpack:"-" bson:"_modelversion"`
}

// NewSparseFeedback returns a new  SparseFeedback.
func NewSparseFeedback() *SparseFeedback {
	return &SparseFeedback{}
}

// Identity returns the Identity of the sparse object.
func (o *SparseFeedback) Identity() elemental.Identity {

	return FeedbackIdentity
}

// Identifier returns the value of the sparse object's unique identifier.
func (o *SparseFeedback) Identifier() string {

	if o.ID == nil {
		return ""
	}
	return *o.ID
}

// SetIdentifier sets the value of the sparse object's unique identifier.
func (o *SparseFeedback) SetIdentifier(id string) {

	if id != "" {
		o.ID = &id
	} else {
		o.ID = nil
	}
}

// GetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *SparseFeedback) GetBSON() (any, error) {

	if o == nil {
		return nil, nil
	}

	s := &mongoAttributesSparseFeedback{}

	if o.ID != nil {
		s.ID = bson.ObjectIdHex(*o.ID)
	}
	if o.Comment != nil {
		s.Comment = o.Comment
	}
	if o.CreateTime != nil {
		s.CreateTime = o.CreateTime
	}
	if o.Key != nil {
		s.Key = o.Key
	}
	if o.LogHash != nil {
		s.LogHash = o.LogHash
	}
	if o.Namespace != nil {
		s.Namespace = o.Namespace
	}
	if o.Principal != nil {
		s.Principal = o.Principal
	}
	if o.Provider != nil {
		s.Provider = o.Provider
	}
	if o.Score != nil {
		s.Score = o.Score
	}
	if o.UpdateTime != nil {
		s.UpdateTime = o.UpdateTime
	}
	if o.Value != nil {
		s.Value = o.Value
	}
	if o.ZHash != nil {
		s.ZHash = o.ZHash
	}
	if o.Zone != nil {
		s.Zone = o.Zone
	}

	return s, nil
}

// SetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *SparseFeedback) SetBSON(raw bson.Raw) error {

	if o == nil {
		return nil
	}

	s := &mongoAttributesSparseFeedback{}
	if err := raw.Unmarshal(s); err != nil {
		return err
	}

	id := s.ID.Hex()
	o.ID = &id
	if s.Comment != nil {
		o.Comment = s.Comment
	}
	if s.CreateTime != nil {
		o.CreateTime = s.CreateTime
	}
	if s.Key != nil {
		o.Key = s.Key
	}
	if s.LogHash != nil {
		o.LogHash = s.LogHash
	}
	if s.Namespace != nil {
		o.Namespace = s.Namespace
	}
	if s.Principal != nil {
		o.Principal = s.Principal
	}
	if s.Provider != nil {
		o.Provider = s.Provider
	}
	if s.Score != nil {
		o.Score = s.Score
	}
	if s.UpdateTime != nil {
		o.UpdateTime = s.UpdateTime
	}
	if s.Value != nil {
		o.Value = s.Value
	}
	if s.ZHash != nil {
		o.ZHash = s.ZHash
	}
	if s.Zone != nil {
		o.Zone = s.Zone
	}

	return nil
}

// Version returns the hardcoded version of the model.
func (o *SparseFeedback) Version() int {

	return 1
}

// ToPlain returns the plain version of the sparse model.
func (o *SparseFeedback) ToPlain() elemental.PlainIdentifiable {

	out := NewFeedback()
	if o.ID != nil {
		out.ID = *o.ID
	}
	if o.Comment != nil {
		out.Comment = *o.Comment
	}
	if o.CreateTime != nil {
		out.CreateTime = *o.CreateTime
	}
	if o.Key != nil {
		out.Key = *o.Key
	}
	if o.LogHash != nil {
		out.LogHash = *o.LogHash
	}
	if o.Namespace != nil {
		out.Namespace = *o.Namespace
	}
	if o.Principal != nil {
		out.Principal = o.Principal
	}
	if o.Provider != nil {
		out.Provider = *o.Provider
	}
	if o.Score != nil {
		out.Score = *o.Score
	}
	if o.UpdateTime != nil {
		out.UpdateTime = *o.UpdateTime
	}
	if o.Value != nil {
		out.Value = *o.Value
	}
	if o.ZHash != nil {
		out.ZHash = *o.ZHash
	}
	if o.Zone != nil {
		out.Zone = *o.Zone
	}

	return out
}

// GetCreateTime returns the CreateTime of the receiver.
func (o *SparseFeedback) GetCreateTime() (out time.Time) {

	if o.CreateTime == nil {
		return
	}

	return *o.CreateTime
}

// SetCreateTime sets the property CreateTime of the receiver using the address of the given value.
func (o *SparseFeedback) SetCreateTime(createTime time.Time) {

	o.CreateTime = &createTime
}

// GetNamespace returns the Namespace of the receiver.
func (o *SparseFeedback) GetNamespace() (out string) {

	if o.Namespace == nil {
		return
	}

	return *o.Namespace
}

// SetNamespace sets the property Namespace of the receiver using the address of the given value.
func (o *SparseFeedback) SetNamespace(namespace string) {

	o.Namespace = &namespace
}

// GetUpdateTime returns the UpdateTime of the receiver.
func (o *SparseFeedback) GetUpdateTime() (out time.Time) {

	if o.UpdateTime == nil {
		return
	}

	return *o.UpdateTime
}

// SetUpdateTime sets the property UpdateTime of the receiver using the address of the given value.
func (o *SparseFeedback) SetUpdateTime(updateTime time.Time) {

	o.UpdateTime = &updateTime
}

// GetZHash returns the ZHash of the receiver.
func (o *SparseFeedback) GetZHash() (out int) {

	if o.ZHash == nil {
		return
	}

	return *o.ZHash
}

// SetZHash sets the property ZHash of the receiver using the address of the given value.
func (o *SparseFeedback) SetZHash(zHash int) {

	o.ZHash = &zHash
}

// GetZone returns the Zone of the receiver.
func (o *SparseFeedback) GetZone() (out int) {

	if o.Zone == nil {
		return
	}

	return *o.Zone
}

// SetZone sets the property Zone of the receiver using the address of the given value.
func (o *SparseFeedback) SetZone(zone int) {

	o.Zone = &zone
}

// DeepCopy returns a deep copy if the SparseFeedback.
func (o *SparseFeedback) DeepCopy() *SparseFeedback {

	if o == nil {
		return nil
	}

	out := &SparseFeedback{}
	o.DeepCopyInto(out)

	return out
}

// DeepCopyInto copies the receiver into the given *SparseFeedback.
func (o *SparseFeedback) DeepCopyInto(out *SparseFeedback) {

	target, err := copystructure.Copy(o)
	if err != nil {
		panic(fmt.Sprintf("Unable to deepcopy SparseFeedback: %s", err))
	}

	*out = *target.(*SparseFeedback)
}

type mongoAttributesFeedback struct {
	ID         bson.ObjectId `bson:"_id,omitempty"`
	Comment    string        `bson:"comment"`
	CreateTime time.Time     `bson:"createtime"`
	Key        string        `bson:"key"`
	LogHash    string        `bson:"loghash"`
	Namespace  string        `bson:"namespace,omitempty"`
	Principal  *Principal    `bson:"principal"`
	Provider   string        `bson:"provider"`
	Score      int           `bson:"score"`
	UpdateTime time.Time     `bson:"updatetime"`
	Value      string        `bson:"value"`
	ZHash      int           `bson:"zhash"`
	Zone       int           `bson:"zone"`
}
type mongoAttributesSparseFeedback struct {
	ID         bson.ObjectId `bson:"_id,omitempty"`
	Comment    *string       `bson:"comment,omitempty"`
	CreateTime *time.Time    `bson:"createtime,omitempty"`
	Key        *string       `bson:"key,omitempty"`
	LogHash    *string       `bson:"loghash,omitempty"`
	Namespace  *string       `bson:"namespace,omitempty"`
	Principal  *Principal    `bson:"principal,omitempty"`
	Provider   *string       `bson:"provider,omitempty"`
	Score      *int          `bson:"score,omitempty"`
	UpdateTime *time.Time    `bson:"updatetime,omitempty"`
	Value      *string       `bson:"value,omitempty"`
	ZHash      *int          `bson:"zhash,omitempty"`
	Zone       *int          `bson:"zone,omitempty"`
}
