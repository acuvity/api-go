// Code generated by elegen. DO NOT EDIT.
// Source: go.acuvity.ai/elemental (templates/model.gotpl)

package api

import (
	"fmt"

	"github.com/globalsign/mgo/bson"
	"github.com/mitchellh/copystructure"
	"go.acuvity.ai/elemental"
)

// ExtractorRef represents the model of a extractorref
type ExtractorRef struct {
	// Defines an extractor for this reference.
	Def *Extractor `json:"def" msgpack:"def" bson:"def" mapstructure:"def,omitempty"`

	// Optional hosts to match. This is useful in case the provider has multiple hosts
	// to discriminate which logger to use.
	Hosts []string `json:"hosts,omitempty" msgpack:"hosts,omitempty" bson:"hosts,omitempty" mapstructure:"hosts,omitempty"`

	// References a preexisting extractor definition.
	Ref string `json:"ref" msgpack:"ref" bson:"ref" mapstructure:"ref,omitempty"`

	ModelVersion int `json:"-" msgpack:"-" bson:"_modelversion"`
}

// NewExtractorRef returns a new *ExtractorRef
func NewExtractorRef() *ExtractorRef {

	return &ExtractorRef{
		ModelVersion: 1,
		Def:          NewExtractor(),
		Hosts:        []string{},
	}
}

// GetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *ExtractorRef) GetBSON() (any, error) {

	if o == nil {
		return nil, nil
	}

	s := &mongoAttributesExtractorRef{}

	s.Def = o.Def
	s.Hosts = o.Hosts
	s.Ref = o.Ref

	return s, nil
}

// SetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *ExtractorRef) SetBSON(raw bson.Raw) error {

	if o == nil || raw.Kind == bson.ElementNil {
		return bson.ErrSetZero
	}

	s := &mongoAttributesExtractorRef{}
	if err := raw.Unmarshal(s); err != nil {
		return err
	}

	o.Def = s.Def
	o.Hosts = s.Hosts
	o.Ref = s.Ref

	return nil
}

// BleveType implements the bleve.Classifier Interface.
func (o *ExtractorRef) BleveType() string {

	return "extractorref"
}

// DeepCopy returns a deep copy if the ExtractorRef.
func (o *ExtractorRef) DeepCopy() *ExtractorRef {

	if o == nil {
		return nil
	}

	out := &ExtractorRef{}
	o.DeepCopyInto(out)

	return out
}

// DeepCopyInto copies the receiver into the given *ExtractorRef.
func (o *ExtractorRef) DeepCopyInto(out *ExtractorRef) {

	target, err := copystructure.Copy(o)
	if err != nil {
		panic(fmt.Sprintf("Unable to deepcopy ExtractorRef: %s", err))
	}

	*out = *target.(*ExtractorRef)
}

// Validate valides the current information stored into the structure.
func (o *ExtractorRef) Validate() error {

	errors := elemental.Errors{}
	requiredErrors := elemental.Errors{}

	if o.Def != nil {
		elemental.ResetDefaultForZeroValues(o.Def)
		if err := o.Def.Validate(); err != nil {
			errors = errors.Append(err)
		}
	}

	// Custom object validation.
	if err := ValidateExtractorRef(o); err != nil {
		errors = errors.Append(err)
	}

	if len(requiredErrors) > 0 {
		return requiredErrors
	}

	if len(errors) > 0 {
		return errors
	}

	return nil
}

// SpecificationForAttribute returns the AttributeSpecification for the given attribute name key.
func (*ExtractorRef) SpecificationForAttribute(name string) elemental.AttributeSpecification {

	if v, ok := ExtractorRefAttributesMap[name]; ok {
		return v
	}

	// We could not find it, so let's check on the lower case indexed spec map
	return ExtractorRefLowerCaseAttributesMap[name]
}

// AttributeSpecifications returns the full attribute specifications map.
func (*ExtractorRef) AttributeSpecifications() map[string]elemental.AttributeSpecification {

	return ExtractorRefAttributesMap
}

// ValueForAttribute returns the value for the given attribute.
// This is a very advanced function that you should not need but in some
// very specific use cases.
func (o *ExtractorRef) ValueForAttribute(name string) any {

	switch name {
	case "def":
		return o.Def
	case "hosts":
		return o.Hosts
	case "ref":
		return o.Ref
	}

	return nil
}

// ExtractorRefAttributesMap represents the map of attribute for ExtractorRef.
var ExtractorRefAttributesMap = map[string]elemental.AttributeSpecification{
	"Def": {
		AllowedChoices: []string{},
		BSONFieldName:  "def",
		ConvertedName:  "Def",
		Description:    `Defines an extractor for this reference.`,
		Exposed:        true,
		Name:           "def",
		Stored:         true,
		SubType:        "extractor",
		Type:           "ref",
	},
	"Hosts": {
		AllowedChoices: []string{},
		BSONFieldName:  "hosts",
		ConvertedName:  "Hosts",
		Description: `Optional hosts to match. This is useful in case the provider has multiple hosts
to discriminate which logger to use.`,
		Exposed: true,
		Name:    "hosts",
		Stored:  true,
		SubType: "string",
		Type:    "list",
	},
	"Ref": {
		AllowedChoices: []string{},
		BSONFieldName:  "ref",
		ConvertedName:  "Ref",
		Description:    `References a preexisting extractor definition.`,
		Exposed:        true,
		Name:           "ref",
		Stored:         true,
		Type:           "string",
	},
}

// ExtractorRefLowerCaseAttributesMap represents the map of attribute for ExtractorRef.
var ExtractorRefLowerCaseAttributesMap = map[string]elemental.AttributeSpecification{
	"def": {
		AllowedChoices: []string{},
		BSONFieldName:  "def",
		ConvertedName:  "Def",
		Description:    `Defines an extractor for this reference.`,
		Exposed:        true,
		Name:           "def",
		Stored:         true,
		SubType:        "extractor",
		Type:           "ref",
	},
	"hosts": {
		AllowedChoices: []string{},
		BSONFieldName:  "hosts",
		ConvertedName:  "Hosts",
		Description: `Optional hosts to match. This is useful in case the provider has multiple hosts
to discriminate which logger to use.`,
		Exposed: true,
		Name:    "hosts",
		Stored:  true,
		SubType: "string",
		Type:    "list",
	},
	"ref": {
		AllowedChoices: []string{},
		BSONFieldName:  "ref",
		ConvertedName:  "Ref",
		Description:    `References a preexisting extractor definition.`,
		Exposed:        true,
		Name:           "ref",
		Stored:         true,
		Type:           "string",
	},
}

type mongoAttributesExtractorRef struct {
	Def   *Extractor `bson:"def"`
	Hosts []string   `bson:"hosts,omitempty"`
	Ref   string     `bson:"ref"`
}
