// Code generated by elegen. DO NOT EDIT.
// Source: go.acuvity.ai/elemental (templates/model.gotpl)

package api

import (
	"fmt"

	"github.com/globalsign/mgo/bson"
	"github.com/mitchellh/copystructure"
	"go.acuvity.ai/elemental"
)

// WatchedOrgIdentity represents the Identity of the object.
var WatchedOrgIdentity = elemental.Identity{
	Name:     "watchedorg",
	Category: "watchedorgs",
	Package:  "lain",
	Private:  false,
}

// WatchedOrgsList represents a list of WatchedOrgs
type WatchedOrgsList []*WatchedOrg

// Identity returns the identity of the objects in the list.
func (o WatchedOrgsList) Identity() elemental.Identity {

	return WatchedOrgIdentity
}

// Copy returns a pointer to a copy the WatchedOrgsList.
func (o WatchedOrgsList) Copy() elemental.Identifiables {

	out := append(WatchedOrgsList{}, o...)
	return &out
}

// Append appends the objects to the a new copy of the WatchedOrgsList.
func (o WatchedOrgsList) Append(objects ...elemental.Identifiable) elemental.Identifiables {

	out := append(WatchedOrgsList{}, o...)
	for _, obj := range objects {
		out = append(out, obj.(*WatchedOrg))
	}

	return out
}

// List converts the object to an elemental.IdentifiablesList.
func (o WatchedOrgsList) List() elemental.IdentifiablesList {

	out := make(elemental.IdentifiablesList, len(o))
	for i := 0; i < len(o); i++ {
		out[i] = o[i]
	}

	return out
}

// DefaultOrder returns the default ordering fields of the content.
func (o WatchedOrgsList) DefaultOrder() []string {

	return []string{}
}

// ToSparse returns the WatchedOrgsList converted to SparseWatchedOrgsList.
// Objects in the list will only contain the given fields. No field means entire field set.
func (o WatchedOrgsList) ToSparse(fields ...string) elemental.Identifiables {

	out := make(SparseWatchedOrgsList, len(o))
	for i := 0; i < len(o); i++ {
		out[i] = o[i].ToSparse(fields...).(*SparseWatchedOrg)
	}

	return out
}

// Version returns the version of the content.
func (o WatchedOrgsList) Version() int {

	return 1
}

// WatchedOrg represents the model of a watchedorg
type WatchedOrg struct {
	// ID is the identifier of the object.
	ID string `json:"ID,omitempty" msgpack:"ID,omitempty" bson:"-" mapstructure:"ID,omitempty"`

	// The name of the accessible organization.
	Name string `json:"name" msgpack:"name" bson:"-" mapstructure:"name,omitempty"`

	// The namespace of the object.
	Namespace string `json:"namespace,omitempty" msgpack:"namespace,omitempty" bson:"namespace,omitempty" mapstructure:"namespace,omitempty"`

	// The name namespace of the org.
	OrgNamespace string `json:"orgNamespace" msgpack:"orgNamespace" bson:"-" mapstructure:"orgNamespace,omitempty"`

	ModelVersion int `json:"-" msgpack:"-" bson:"_modelversion"`
}

// NewWatchedOrg returns a new *WatchedOrg
func NewWatchedOrg() *WatchedOrg {

	return &WatchedOrg{
		ModelVersion: 1,
	}
}

// Identity returns the Identity of the object.
func (o *WatchedOrg) Identity() elemental.Identity {

	return WatchedOrgIdentity
}

// Identifier returns the value of the object's unique identifier.
func (o *WatchedOrg) Identifier() string {

	return o.ID
}

// SetIdentifier sets the value of the object's unique identifier.
func (o *WatchedOrg) SetIdentifier(id string) {

	o.ID = id
}

// GetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *WatchedOrg) GetBSON() (any, error) {

	if o == nil {
		return nil, nil
	}

	s := &mongoAttributesWatchedOrg{}

	if o.ID != "" {
		s.ID = bson.ObjectIdHex(o.ID)
	}
	s.Namespace = o.Namespace

	return s, nil
}

// SetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *WatchedOrg) SetBSON(raw bson.Raw) error {

	if o == nil {
		return nil
	}

	s := &mongoAttributesWatchedOrg{}
	if err := raw.Unmarshal(s); err != nil {
		return err
	}

	o.ID = s.ID.Hex()
	o.Namespace = s.Namespace

	return nil
}

// Version returns the hardcoded version of the model.
func (o *WatchedOrg) Version() int {

	return 1
}

// BleveType implements the bleve.Classifier Interface.
func (o *WatchedOrg) BleveType() string {

	return "watchedorg"
}

// DefaultOrder returns the list of default ordering fields.
func (o *WatchedOrg) DefaultOrder() []string {

	return []string{}
}

// Doc returns the documentation for the object
func (o *WatchedOrg) Doc() string {

	return `List the organization your organization watches.`
}

func (o *WatchedOrg) String() string {

	return fmt.Sprintf("<%s:%s>", o.Identity().Name, o.Identifier())
}

// GetNamespace returns the Namespace of the receiver.
func (o *WatchedOrg) GetNamespace() string {

	return o.Namespace
}

// SetNamespace sets the property Namespace of the receiver using the given value.
func (o *WatchedOrg) SetNamespace(namespace string) {

	o.Namespace = namespace
}

// ToSparse returns the sparse version of the model.
// The returned object will only contain the given fields. No field means entire field set.
func (o *WatchedOrg) ToSparse(fields ...string) elemental.SparseIdentifiable {

	if len(fields) == 0 {
		// nolint: goimports
		return &SparseWatchedOrg{
			ID:           &o.ID,
			Name:         &o.Name,
			Namespace:    &o.Namespace,
			OrgNamespace: &o.OrgNamespace,
		}
	}

	sp := &SparseWatchedOrg{}
	for _, f := range fields {
		switch f {
		case "ID":
			sp.ID = &(o.ID)
		case "name":
			sp.Name = &(o.Name)
		case "namespace":
			sp.Namespace = &(o.Namespace)
		case "orgNamespace":
			sp.OrgNamespace = &(o.OrgNamespace)
		}
	}

	return sp
}

// Patch apply the non nil value of a *SparseWatchedOrg to the object.
func (o *WatchedOrg) Patch(sparse elemental.SparseIdentifiable) {
	if !sparse.Identity().IsEqual(o.Identity()) {
		panic("cannot patch from a parse with different identity")
	}

	so := sparse.(*SparseWatchedOrg)
	if so.ID != nil {
		o.ID = *so.ID
	}
	if so.Name != nil {
		o.Name = *so.Name
	}
	if so.Namespace != nil {
		o.Namespace = *so.Namespace
	}
	if so.OrgNamespace != nil {
		o.OrgNamespace = *so.OrgNamespace
	}
}

// DeepCopy returns a deep copy if the WatchedOrg.
func (o *WatchedOrg) DeepCopy() *WatchedOrg {

	if o == nil {
		return nil
	}

	out := &WatchedOrg{}
	o.DeepCopyInto(out)

	return out
}

// DeepCopyInto copies the receiver into the given *WatchedOrg.
func (o *WatchedOrg) DeepCopyInto(out *WatchedOrg) {

	target, err := copystructure.Copy(o)
	if err != nil {
		panic(fmt.Sprintf("Unable to deepcopy WatchedOrg: %s", err))
	}

	*out = *target.(*WatchedOrg)
}

// Validate valides the current information stored into the structure.
func (o *WatchedOrg) Validate() error {

	errors := elemental.Errors{}
	requiredErrors := elemental.Errors{}

	if len(requiredErrors) > 0 {
		return requiredErrors
	}

	if len(errors) > 0 {
		return errors
	}

	return nil
}

// SpecificationForAttribute returns the AttributeSpecification for the given attribute name key.
func (*WatchedOrg) SpecificationForAttribute(name string) elemental.AttributeSpecification {

	if v, ok := WatchedOrgAttributesMap[name]; ok {
		return v
	}

	// We could not find it, so let's check on the lower case indexed spec map
	return WatchedOrgLowerCaseAttributesMap[name]
}

// AttributeSpecifications returns the full attribute specifications map.
func (*WatchedOrg) AttributeSpecifications() map[string]elemental.AttributeSpecification {

	return WatchedOrgAttributesMap
}

// ValueForAttribute returns the value for the given attribute.
// This is a very advanced function that you should not need but in some
// very specific use cases.
func (o *WatchedOrg) ValueForAttribute(name string) any {

	switch name {
	case "ID":
		return o.ID
	case "name":
		return o.Name
	case "namespace":
		return o.Namespace
	case "orgNamespace":
		return o.OrgNamespace
	}

	return nil
}

// WatchedOrgAttributesMap represents the map of attribute for WatchedOrg.
var WatchedOrgAttributesMap = map[string]elemental.AttributeSpecification{
	"ID": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "_id",
		ConvertedName:  "ID",
		Description:    `ID is the identifier of the object.`,
		Exposed:        true,
		Filterable:     true,
		Identifier:     true,
		Name:           "ID",
		Orderable:      true,
		ReadOnly:       true,
		Stored:         true,
		Type:           "string",
	},
	"Name": {
		AllowedChoices: []string{},
		ConvertedName:  "Name",
		Description:    `The name of the accessible organization.`,
		Exposed:        true,
		Name:           "name",
		Type:           "string",
	},
	"Namespace": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "namespace",
		ConvertedName:  "Namespace",
		Description:    `The namespace of the object.`,
		Exposed:        true,
		Getter:         true,
		Name:           "namespace",
		Orderable:      true,
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Type:           "string",
	},
	"OrgNamespace": {
		AllowedChoices: []string{},
		ConvertedName:  "OrgNamespace",
		Description:    `The name namespace of the org.`,
		Exposed:        true,
		Name:           "orgNamespace",
		Type:           "string",
	},
}

// WatchedOrgLowerCaseAttributesMap represents the map of attribute for WatchedOrg.
var WatchedOrgLowerCaseAttributesMap = map[string]elemental.AttributeSpecification{
	"id": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "_id",
		ConvertedName:  "ID",
		Description:    `ID is the identifier of the object.`,
		Exposed:        true,
		Filterable:     true,
		Identifier:     true,
		Name:           "ID",
		Orderable:      true,
		ReadOnly:       true,
		Stored:         true,
		Type:           "string",
	},
	"name": {
		AllowedChoices: []string{},
		ConvertedName:  "Name",
		Description:    `The name of the accessible organization.`,
		Exposed:        true,
		Name:           "name",
		Type:           "string",
	},
	"namespace": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "namespace",
		ConvertedName:  "Namespace",
		Description:    `The namespace of the object.`,
		Exposed:        true,
		Getter:         true,
		Name:           "namespace",
		Orderable:      true,
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Type:           "string",
	},
	"orgnamespace": {
		AllowedChoices: []string{},
		ConvertedName:  "OrgNamespace",
		Description:    `The name namespace of the org.`,
		Exposed:        true,
		Name:           "orgNamespace",
		Type:           "string",
	},
}

// SparseWatchedOrgsList represents a list of SparseWatchedOrgs
type SparseWatchedOrgsList []*SparseWatchedOrg

// Identity returns the identity of the objects in the list.
func (o SparseWatchedOrgsList) Identity() elemental.Identity {

	return WatchedOrgIdentity
}

// Copy returns a pointer to a copy the SparseWatchedOrgsList.
func (o SparseWatchedOrgsList) Copy() elemental.Identifiables {

	copy := append(SparseWatchedOrgsList{}, o...)
	return &copy
}

// Append appends the objects to the a new copy of the SparseWatchedOrgsList.
func (o SparseWatchedOrgsList) Append(objects ...elemental.Identifiable) elemental.Identifiables {

	out := append(SparseWatchedOrgsList{}, o...)
	for _, obj := range objects {
		out = append(out, obj.(*SparseWatchedOrg))
	}

	return out
}

// List converts the object to an elemental.IdentifiablesList.
func (o SparseWatchedOrgsList) List() elemental.IdentifiablesList {

	out := make(elemental.IdentifiablesList, len(o))
	for i := 0; i < len(o); i++ {
		out[i] = o[i]
	}

	return out
}

// DefaultOrder returns the default ordering fields of the content.
func (o SparseWatchedOrgsList) DefaultOrder() []string {

	return []string{}
}

// ToPlain returns the SparseWatchedOrgsList converted to WatchedOrgsList.
func (o SparseWatchedOrgsList) ToPlain() elemental.IdentifiablesList {

	out := make(elemental.IdentifiablesList, len(o))
	for i := 0; i < len(o); i++ {
		out[i] = o[i].ToPlain()
	}

	return out
}

// Version returns the version of the content.
func (o SparseWatchedOrgsList) Version() int {

	return 1
}

// SparseWatchedOrg represents the sparse version of a watchedorg.
type SparseWatchedOrg struct {
	// ID is the identifier of the object.
	ID *string `json:"ID,omitempty" msgpack:"ID,omitempty" bson:"-" mapstructure:"ID,omitempty"`

	// The name of the accessible organization.
	Name *string `json:"name,omitempty" msgpack:"name,omitempty" bson:"-" mapstructure:"name,omitempty"`

	// The namespace of the object.
	Namespace *string `json:"namespace,omitempty" msgpack:"namespace,omitempty" bson:"namespace,omitempty" mapstructure:"namespace,omitempty"`

	// The name namespace of the org.
	OrgNamespace *string `json:"orgNamespace,omitempty" msgpack:"orgNamespace,omitempty" bson:"-" mapstructure:"orgNamespace,omitempty"`

	ModelVersion int `json:"-" msgpack:"-" bson:"_modelversion"`
}

// NewSparseWatchedOrg returns a new  SparseWatchedOrg.
func NewSparseWatchedOrg() *SparseWatchedOrg {
	return &SparseWatchedOrg{}
}

// Identity returns the Identity of the sparse object.
func (o *SparseWatchedOrg) Identity() elemental.Identity {

	return WatchedOrgIdentity
}

// Identifier returns the value of the sparse object's unique identifier.
func (o *SparseWatchedOrg) Identifier() string {

	if o.ID == nil {
		return ""
	}
	return *o.ID
}

// SetIdentifier sets the value of the sparse object's unique identifier.
func (o *SparseWatchedOrg) SetIdentifier(id string) {

	if id != "" {
		o.ID = &id
	} else {
		o.ID = nil
	}
}

// GetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *SparseWatchedOrg) GetBSON() (any, error) {

	if o == nil {
		return nil, nil
	}

	s := &mongoAttributesSparseWatchedOrg{}

	if o.ID != nil {
		s.ID = bson.ObjectIdHex(*o.ID)
	}
	if o.Namespace != nil {
		s.Namespace = o.Namespace
	}

	return s, nil
}

// SetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *SparseWatchedOrg) SetBSON(raw bson.Raw) error {

	if o == nil {
		return nil
	}

	s := &mongoAttributesSparseWatchedOrg{}
	if err := raw.Unmarshal(s); err != nil {
		return err
	}

	id := s.ID.Hex()
	o.ID = &id
	if s.Namespace != nil {
		o.Namespace = s.Namespace
	}

	return nil
}

// Version returns the hardcoded version of the model.
func (o *SparseWatchedOrg) Version() int {

	return 1
}

// ToPlain returns the plain version of the sparse model.
func (o *SparseWatchedOrg) ToPlain() elemental.PlainIdentifiable {

	out := NewWatchedOrg()
	if o.ID != nil {
		out.ID = *o.ID
	}
	if o.Name != nil {
		out.Name = *o.Name
	}
	if o.Namespace != nil {
		out.Namespace = *o.Namespace
	}
	if o.OrgNamespace != nil {
		out.OrgNamespace = *o.OrgNamespace
	}

	return out
}

// GetNamespace returns the Namespace of the receiver.
func (o *SparseWatchedOrg) GetNamespace() (out string) {

	if o.Namespace == nil {
		return
	}

	return *o.Namespace
}

// SetNamespace sets the property Namespace of the receiver using the address of the given value.
func (o *SparseWatchedOrg) SetNamespace(namespace string) {

	o.Namespace = &namespace
}

// DeepCopy returns a deep copy if the SparseWatchedOrg.
func (o *SparseWatchedOrg) DeepCopy() *SparseWatchedOrg {

	if o == nil {
		return nil
	}

	out := &SparseWatchedOrg{}
	o.DeepCopyInto(out)

	return out
}

// DeepCopyInto copies the receiver into the given *SparseWatchedOrg.
func (o *SparseWatchedOrg) DeepCopyInto(out *SparseWatchedOrg) {

	target, err := copystructure.Copy(o)
	if err != nil {
		panic(fmt.Sprintf("Unable to deepcopy SparseWatchedOrg: %s", err))
	}

	*out = *target.(*SparseWatchedOrg)
}

type mongoAttributesWatchedOrg struct {
	ID        bson.ObjectId `bson:"_id,omitempty"`
	Namespace string        `bson:"namespace,omitempty"`
}
type mongoAttributesSparseWatchedOrg struct {
	ID        bson.ObjectId `bson:"_id,omitempty"`
	Namespace *string       `bson:"namespace,omitempty"`
}
