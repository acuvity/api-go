// Code generated by elegen. DO NOT EDIT.
// Source: go.acuvity.ai/elemental (templates/model.gotpl)

package api

import (
	"fmt"

	"github.com/globalsign/mgo/bson"
	"github.com/mitchellh/copystructure"
	"go.acuvity.ai/elemental"
)

// TLSStateVersionValue represents the possible values for attribute "version".
type TLSStateVersionValue string

const (
	// TLSStateVersionTLS10 represents the value TLS10.
	TLSStateVersionTLS10 TLSStateVersionValue = "TLS10"

	// TLSStateVersionTLS11 represents the value TLS11.
	TLSStateVersionTLS11 TLSStateVersionValue = "TLS11"

	// TLSStateVersionTLS12 represents the value TLS12.
	TLSStateVersionTLS12 TLSStateVersionValue = "TLS12"

	// TLSStateVersionTLS13 represents the value TLS13.
	TLSStateVersionTLS13 TLSStateVersionValue = "TLS13"
)

// TLSState represents the model of a tlsstate
type TLSState struct {
	// The application protocol being used that was negotiated with ALPN for this
	// connection.
	ALPNNegotiatedProtocol string `json:"ALPNNegotiatedProtocol,omitempty" msgpack:"ALPNNegotiatedProtocol,omitempty" bson:"alpnnegotiatedprotocol,omitempty" mapstructure:"ALPNNegotiatedProtocol,omitempty"`

	// The negotiated cipher suite of the connection.
	CipherSuite string `json:"cipherSuite" msgpack:"cipherSuite" bson:"ciphersuite" mapstructure:"cipherSuite,omitempty"`

	// The TLS protocol version used for the connection.
	Version TLSStateVersionValue `json:"version" msgpack:"version" bson:"version" mapstructure:"version,omitempty"`

	ModelVersion int `json:"-" msgpack:"-" bson:"_modelversion"`
}

// NewTLSState returns a new *TLSState
func NewTLSState() *TLSState {

	return &TLSState{
		ModelVersion: 1,
	}
}

// GetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *TLSState) GetBSON() (any, error) {

	if o == nil {
		return nil, nil
	}

	s := &mongoAttributesTLSState{}

	s.ALPNNegotiatedProtocol = o.ALPNNegotiatedProtocol
	s.CipherSuite = o.CipherSuite
	s.Version = o.Version

	return s, nil
}

// SetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *TLSState) SetBSON(raw bson.Raw) error {

	if o == nil || raw.Kind == bson.ElementNil {
		return bson.ErrSetZero
	}

	s := &mongoAttributesTLSState{}
	if err := raw.Unmarshal(s); err != nil {
		return err
	}

	o.ALPNNegotiatedProtocol = s.ALPNNegotiatedProtocol
	o.CipherSuite = s.CipherSuite
	o.Version = s.Version

	return nil
}

// BleveType implements the bleve.Classifier Interface.
func (o *TLSState) BleveType() string {

	return "tlsstate"
}

// DeepCopy returns a deep copy if the TLSState.
func (o *TLSState) DeepCopy() *TLSState {

	if o == nil {
		return nil
	}

	out := &TLSState{}
	o.DeepCopyInto(out)

	return out
}

// DeepCopyInto copies the receiver into the given *TLSState.
func (o *TLSState) DeepCopyInto(out *TLSState) {

	target, err := copystructure.Copy(o)
	if err != nil {
		panic(fmt.Sprintf("Unable to deepcopy TLSState: %s", err))
	}

	*out = *target.(*TLSState)
}

// Validate valides the current information stored into the structure.
func (o *TLSState) Validate() error {

	errors := elemental.Errors{}
	requiredErrors := elemental.Errors{}

	if err := elemental.ValidateRequiredString("cipherSuite", o.CipherSuite); err != nil {
		requiredErrors = requiredErrors.Append(err)
	}

	if err := elemental.ValidateRequiredString("version", string(o.Version)); err != nil {
		requiredErrors = requiredErrors.Append(err)
	}

	if err := elemental.ValidateStringInList("version", string(o.Version), []string{"TLS10", "TLS11", "TLS12", "TLS13"}, false); err != nil {
		errors = errors.Append(err)
	}

	if len(requiredErrors) > 0 {
		return requiredErrors
	}

	if len(errors) > 0 {
		return errors
	}

	return nil
}

// SpecificationForAttribute returns the AttributeSpecification for the given attribute name key.
func (*TLSState) SpecificationForAttribute(name string) elemental.AttributeSpecification {

	if v, ok := TLSStateAttributesMap[name]; ok {
		return v
	}

	// We could not find it, so let's check on the lower case indexed spec map
	return TLSStateLowerCaseAttributesMap[name]
}

// AttributeSpecifications returns the full attribute specifications map.
func (*TLSState) AttributeSpecifications() map[string]elemental.AttributeSpecification {

	return TLSStateAttributesMap
}

// ValueForAttribute returns the value for the given attribute.
// This is a very advanced function that you should not need but in some
// very specific use cases.
func (o *TLSState) ValueForAttribute(name string) any {

	switch name {
	case "ALPNNegotiatedProtocol":
		return o.ALPNNegotiatedProtocol
	case "cipherSuite":
		return o.CipherSuite
	case "version":
		return o.Version
	}

	return nil
}

// TLSStateAttributesMap represents the map of attribute for TLSState.
var TLSStateAttributesMap = map[string]elemental.AttributeSpecification{
	"ALPNNegotiatedProtocol": {
		AllowedChoices: []string{},
		BSONFieldName:  "alpnnegotiatedprotocol",
		ConvertedName:  "ALPNNegotiatedProtocol",
		Description: `The application protocol being used that was negotiated with ALPN for this
connection.`,
		Exposed: true,
		Name:    "ALPNNegotiatedProtocol",
		Stored:  true,
		Type:    "string",
	},
	"CipherSuite": {
		AllowedChoices: []string{},
		BSONFieldName:  "ciphersuite",
		ConvertedName:  "CipherSuite",
		Description:    `The negotiated cipher suite of the connection.`,
		Exposed:        true,
		Name:           "cipherSuite",
		Required:       true,
		Stored:         true,
		Type:           "string",
	},
	"Version": {
		AllowedChoices: []string{"TLS10", "TLS11", "TLS12", "TLS13"},
		BSONFieldName:  "version",
		ConvertedName:  "Version",
		Description:    `The TLS protocol version used for the connection.`,
		Exposed:        true,
		Name:           "version",
		Required:       true,
		Stored:         true,
		Type:           "enum",
	},
}

// TLSStateLowerCaseAttributesMap represents the map of attribute for TLSState.
var TLSStateLowerCaseAttributesMap = map[string]elemental.AttributeSpecification{
	"alpnnegotiatedprotocol": {
		AllowedChoices: []string{},
		BSONFieldName:  "alpnnegotiatedprotocol",
		ConvertedName:  "ALPNNegotiatedProtocol",
		Description: `The application protocol being used that was negotiated with ALPN for this
connection.`,
		Exposed: true,
		Name:    "ALPNNegotiatedProtocol",
		Stored:  true,
		Type:    "string",
	},
	"ciphersuite": {
		AllowedChoices: []string{},
		BSONFieldName:  "ciphersuite",
		ConvertedName:  "CipherSuite",
		Description:    `The negotiated cipher suite of the connection.`,
		Exposed:        true,
		Name:           "cipherSuite",
		Required:       true,
		Stored:         true,
		Type:           "string",
	},
	"version": {
		AllowedChoices: []string{"TLS10", "TLS11", "TLS12", "TLS13"},
		BSONFieldName:  "version",
		ConvertedName:  "Version",
		Description:    `The TLS protocol version used for the connection.`,
		Exposed:        true,
		Name:           "version",
		Required:       true,
		Stored:         true,
		Type:           "enum",
	},
}

type mongoAttributesTLSState struct {
	ALPNNegotiatedProtocol string               `bson:"alpnnegotiatedprotocol,omitempty"`
	CipherSuite            string               `bson:"ciphersuite"`
	Version                TLSStateVersionValue `bson:"version"`
}
