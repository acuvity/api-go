// Code generated by elegen. DO NOT EDIT.
// Source: go.acuvity.ai/elemental (templates/model.gotpl)

package api

import (
	"fmt"

	"github.com/globalsign/mgo/bson"
	"github.com/mitchellh/copystructure"
	"go.acuvity.ai/elemental"
)

// ProviderTrainingPolicySubscriptionTypeValue represents the possible values for attribute "subscriptionType".
type ProviderTrainingPolicySubscriptionTypeValue string

const (
	// ProviderTrainingPolicySubscriptionTypeEnterprise represents the value Enterprise.
	ProviderTrainingPolicySubscriptionTypeEnterprise ProviderTrainingPolicySubscriptionTypeValue = "Enterprise"

	// ProviderTrainingPolicySubscriptionTypeFree represents the value Free.
	ProviderTrainingPolicySubscriptionTypeFree ProviderTrainingPolicySubscriptionTypeValue = "Free"

	// ProviderTrainingPolicySubscriptionTypePaid represents the value Paid.
	ProviderTrainingPolicySubscriptionTypePaid ProviderTrainingPolicySubscriptionTypeValue = "Paid"
)

// ProviderTrainingPolicy represents the model of a providertrainingpolicy
type ProviderTrainingPolicy struct {
	// Description of the data usage policy for a subscription type.
	Description string `json:"description,omitempty" msgpack:"description,omitempty" bson:"description,omitempty" mapstructure:"description,omitempty"`

	// The type of subscription for which the data retention policy needs to be
	// defined.
	SubscriptionType ProviderTrainingPolicySubscriptionTypeValue `json:"subscriptionType,omitempty" msgpack:"subscriptionType,omitempty" bson:"subscriptiontype,omitempty" mapstructure:"subscriptionType,omitempty"`

	// User Data usage to train or improve the models based on the subscription type.
	UseData bool `json:"useData" msgpack:"useData" bson:"usedata" mapstructure:"useData,omitempty"`

	ModelVersion int `json:"-" msgpack:"-" bson:"_modelversion"`
}

// NewProviderTrainingPolicy returns a new *ProviderTrainingPolicy
func NewProviderTrainingPolicy() *ProviderTrainingPolicy {

	return &ProviderTrainingPolicy{
		ModelVersion:     1,
		SubscriptionType: ProviderTrainingPolicySubscriptionTypeFree,
	}
}

// GetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *ProviderTrainingPolicy) GetBSON() (any, error) {

	if o == nil {
		return nil, nil
	}

	s := &mongoAttributesProviderTrainingPolicy{}

	s.Description = o.Description
	s.SubscriptionType = o.SubscriptionType
	s.UseData = o.UseData

	return s, nil
}

// SetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *ProviderTrainingPolicy) SetBSON(raw bson.Raw) error {

	if o == nil || raw.Kind == bson.ElementNil {
		return bson.ErrSetZero
	}

	s := &mongoAttributesProviderTrainingPolicy{}
	if err := raw.Unmarshal(s); err != nil {
		return err
	}

	o.Description = s.Description
	o.SubscriptionType = s.SubscriptionType
	o.UseData = s.UseData

	return nil
}

// BleveType implements the bleve.Classifier Interface.
func (o *ProviderTrainingPolicy) BleveType() string {

	return "providertrainingpolicy"
}

// DeepCopy returns a deep copy if the ProviderTrainingPolicy.
func (o *ProviderTrainingPolicy) DeepCopy() *ProviderTrainingPolicy {

	if o == nil {
		return nil
	}

	out := &ProviderTrainingPolicy{}
	o.DeepCopyInto(out)

	return out
}

// DeepCopyInto copies the receiver into the given *ProviderTrainingPolicy.
func (o *ProviderTrainingPolicy) DeepCopyInto(out *ProviderTrainingPolicy) {

	target, err := copystructure.Copy(o)
	if err != nil {
		panic(fmt.Sprintf("Unable to deepcopy ProviderTrainingPolicy: %s", err))
	}

	*out = *target.(*ProviderTrainingPolicy)
}

// Validate valides the current information stored into the structure.
func (o *ProviderTrainingPolicy) Validate() error {

	errors := elemental.Errors{}
	requiredErrors := elemental.Errors{}

	if err := elemental.ValidateStringInList("subscriptionType", string(o.SubscriptionType), []string{"Enterprise", "Paid", "Free"}, false); err != nil {
		errors = errors.Append(err)
	}

	if len(requiredErrors) > 0 {
		return requiredErrors
	}

	if len(errors) > 0 {
		return errors
	}

	return nil
}

// SpecificationForAttribute returns the AttributeSpecification for the given attribute name key.
func (*ProviderTrainingPolicy) SpecificationForAttribute(name string) elemental.AttributeSpecification {

	if v, ok := ProviderTrainingPolicyAttributesMap[name]; ok {
		return v
	}

	// We could not find it, so let's check on the lower case indexed spec map
	return ProviderTrainingPolicyLowerCaseAttributesMap[name]
}

// AttributeSpecifications returns the full attribute specifications map.
func (*ProviderTrainingPolicy) AttributeSpecifications() map[string]elemental.AttributeSpecification {

	return ProviderTrainingPolicyAttributesMap
}

// ValueForAttribute returns the value for the given attribute.
// This is a very advanced function that you should not need but in some
// very specific use cases.
func (o *ProviderTrainingPolicy) ValueForAttribute(name string) any {

	switch name {
	case "description":
		return o.Description
	case "subscriptionType":
		return o.SubscriptionType
	case "useData":
		return o.UseData
	}

	return nil
}

// ProviderTrainingPolicyAttributesMap represents the map of attribute for ProviderTrainingPolicy.
var ProviderTrainingPolicyAttributesMap = map[string]elemental.AttributeSpecification{
	"Description": {
		AllowedChoices: []string{},
		BSONFieldName:  "description",
		ConvertedName:  "Description",
		Description:    `Description of the data usage policy for a subscription type.`,
		Exposed:        true,
		Name:           "description",
		Stored:         true,
		Type:           "string",
	},
	"SubscriptionType": {
		AllowedChoices: []string{"Enterprise", "Paid", "Free"},
		BSONFieldName:  "subscriptiontype",
		ConvertedName:  "SubscriptionType",
		DefaultValue:   ProviderTrainingPolicySubscriptionTypeFree,
		Description: `The type of subscription for which the data retention policy needs to be
defined.`,
		Exposed: true,
		Name:    "subscriptionType",
		Stored:  true,
		Type:    "enum",
	},
	"UseData": {
		AllowedChoices: []string{},
		BSONFieldName:  "usedata",
		ConvertedName:  "UseData",
		Description:    `User Data usage to train or improve the models based on the subscription type.`,
		Exposed:        true,
		Name:           "useData",
		Stored:         true,
		Type:           "boolean",
	},
}

// ProviderTrainingPolicyLowerCaseAttributesMap represents the map of attribute for ProviderTrainingPolicy.
var ProviderTrainingPolicyLowerCaseAttributesMap = map[string]elemental.AttributeSpecification{
	"description": {
		AllowedChoices: []string{},
		BSONFieldName:  "description",
		ConvertedName:  "Description",
		Description:    `Description of the data usage policy for a subscription type.`,
		Exposed:        true,
		Name:           "description",
		Stored:         true,
		Type:           "string",
	},
	"subscriptiontype": {
		AllowedChoices: []string{"Enterprise", "Paid", "Free"},
		BSONFieldName:  "subscriptiontype",
		ConvertedName:  "SubscriptionType",
		DefaultValue:   ProviderTrainingPolicySubscriptionTypeFree,
		Description: `The type of subscription for which the data retention policy needs to be
defined.`,
		Exposed: true,
		Name:    "subscriptionType",
		Stored:  true,
		Type:    "enum",
	},
	"usedata": {
		AllowedChoices: []string{},
		BSONFieldName:  "usedata",
		ConvertedName:  "UseData",
		Description:    `User Data usage to train or improve the models based on the subscription type.`,
		Exposed:        true,
		Name:           "useData",
		Stored:         true,
		Type:           "boolean",
	},
}

type mongoAttributesProviderTrainingPolicy struct {
	Description      string                                      `bson:"description,omitempty"`
	SubscriptionType ProviderTrainingPolicySubscriptionTypeValue `bson:"subscriptiontype,omitempty"`
	UseData          bool                                        `bson:"usedata"`
}
