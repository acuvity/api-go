// Code generated by elegen. DO NOT EDIT.
// Source: go.acuvity.ai/elemental (templates/model.gotpl)

package api

import (
	"fmt"
	"slices"

	"github.com/globalsign/mgo/bson"
	"github.com/mitchellh/copystructure"
	"go.acuvity.ai/elemental"
)

// QueryDirectionValue represents the possible values for attribute "direction".
type QueryDirectionValue string

const (
	// QueryDirectionBackward represents the value Backward.
	QueryDirectionBackward QueryDirectionValue = "Backward"

	// QueryDirectionForward represents the value Forward.
	QueryDirectionForward QueryDirectionValue = "Forward"
)

// QueryIdentity represents the Identity of the object.
var QueryIdentity = elemental.Identity{
	Name:     "query",
	Category: "queries",
	Package:  "snitch",
	Private:  false,
}

// QueriesList represents a list of Queries
type QueriesList []*Query

// Identity returns the identity of the objects in the list.
func (o QueriesList) Identity() elemental.Identity {

	return QueryIdentity
}

// Copy returns a pointer to a copy the QueriesList.
func (o QueriesList) Copy() elemental.Identifiables {

	out := slices.Clone(o)
	return &out
}

// Append appends the objects to the a new copy of the QueriesList.
func (o QueriesList) Append(objects ...elemental.Identifiable) elemental.Identifiables {

	out := slices.Clone(o)
	for _, obj := range objects {
		out = append(out, obj.(*Query))
	}

	return out
}

// List converts the object to an elemental.IdentifiablesList.
func (o QueriesList) List() elemental.IdentifiablesList {

	out := make(elemental.IdentifiablesList, len(o))
	for i := range len(o) {
		out[i] = o[i]
	}

	return out
}

// DefaultOrder returns the default ordering fields of the content.
func (o QueriesList) DefaultOrder() []string {

	return []string{}
}

// ToSparse returns the QueriesList converted to SparseQueriesList.
// Objects in the list will only contain the given fields. No field means entire field set.
func (o QueriesList) ToSparse(fields ...string) elemental.Identifiables {

	out := make(SparseQueriesList, len(o))
	for i := range len(o) {
		out[i] = o[i].ToSparse(fields...).(*SparseQuery)
	}

	return out
}

// Version returns the version of the content.
func (o QueriesList) Version() int {

	return 1
}

// Query represents the model of a query
type Query struct {
	// ID is the identifier of the object.
	ID string `json:"ID,omitempty" msgpack:"ID,omitempty" bson:"-" mapstructure:"ID,omitempty"`

	// Determines the sort order of logs.
	Direction QueryDirectionValue `json:"direction,omitempty" msgpack:"direction,omitempty" bson:"-" mapstructure:"direction,omitempty"`

	// The namespace of the object.
	Namespace string `json:"namespace,omitempty" msgpack:"namespace,omitempty" bson:"namespace,omitempty" mapstructure:"namespace,omitempty"`

	// The query in LogQL format.
	Query string `json:"query" msgpack:"query" bson:"-" mapstructure:"query,omitempty"`

	// The result of the request.
	Result []map[string]any `json:"result" msgpack:"result" bson:"-" mapstructure:"result,omitempty"`

	// The type of the result.
	ResultType string `json:"resultType,omitempty" msgpack:"resultType,omitempty" bson:"-" mapstructure:"resultType,omitempty"`

	// The time for the query in any format supported by
	// https://github.com/araddon/dateparse.
	Time string `json:"time,omitempty" msgpack:"time,omitempty" bson:"-" mapstructure:"time,omitempty"`

	// The relative time of the time window as time.Duration.
	TimeRelative string `json:"timeRelative,omitempty" msgpack:"timeRelative,omitempty" bson:"-" mapstructure:"timeRelative,omitempty"`

	ModelVersion int `json:"-" msgpack:"-" bson:"_modelversion"`
}

// NewQuery returns a new *Query
func NewQuery() *Query {

	return &Query{
		ModelVersion: 1,
		Direction:    QueryDirectionBackward,
		Result:       []map[string]any{},
	}
}

// Identity returns the Identity of the object.
func (o *Query) Identity() elemental.Identity {

	return QueryIdentity
}

// Identifier returns the value of the object's unique identifier.
func (o *Query) Identifier() string {

	return o.ID
}

// SetIdentifier sets the value of the object's unique identifier.
func (o *Query) SetIdentifier(id string) {

	o.ID = id
}

// GetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *Query) GetBSON() (any, error) {

	if o == nil {
		return nil, nil
	}

	s := &mongoAttributesQuery{}

	if o.ID != "" {
		s.ID = bson.ObjectIdHex(o.ID)
	}
	s.Namespace = o.Namespace

	return s, nil
}

// SetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *Query) SetBSON(raw bson.Raw) error {

	if o == nil || raw.Kind == bson.ElementNil {
		return bson.ErrSetZero
	}

	s := &mongoAttributesQuery{}
	if err := raw.Unmarshal(s); err != nil {
		return err
	}

	o.ID = s.ID.Hex()
	o.Namespace = s.Namespace

	return nil
}

// Version returns the hardcoded version of the model.
func (o *Query) Version() int {

	return 1
}

// BleveType implements the bleve.Classifier Interface.
func (o *Query) BleveType() string {

	return "query"
}

// DefaultOrder returns the list of default ordering fields.
func (o *Query) DefaultOrder() []string {

	return []string{}
}

// Doc returns the documentation for the object
func (o *Query) Doc() string {

	return `This is a Log.`
}

func (o *Query) String() string {

	return fmt.Sprintf("<%s:%s>", o.Identity().Name, o.Identifier())
}

// GetNamespace returns the Namespace of the receiver.
func (o *Query) GetNamespace() string {

	return o.Namespace
}

// SetNamespace sets the property Namespace of the receiver using the given value.
func (o *Query) SetNamespace(namespace string) {

	o.Namespace = namespace
}

// GetTime returns the Time of the receiver.
func (o *Query) GetTime() string {

	return o.Time
}

// SetTime sets the property Time of the receiver using the given value.
func (o *Query) SetTime(time string) {

	o.Time = time
}

// GetTimeRelative returns the TimeRelative of the receiver.
func (o *Query) GetTimeRelative() string {

	return o.TimeRelative
}

// SetTimeRelative sets the property TimeRelative of the receiver using the given value.
func (o *Query) SetTimeRelative(timeRelative string) {

	o.TimeRelative = timeRelative
}

// ToSparse returns the sparse version of the model.
// The returned object will only contain the given fields. No field means entire field set.
func (o *Query) ToSparse(fields ...string) elemental.SparseIdentifiable {

	if len(fields) == 0 {
		// nolint: goimports
		return &SparseQuery{
			ID:           &o.ID,
			Direction:    &o.Direction,
			Namespace:    &o.Namespace,
			Query:        &o.Query,
			Result:       &o.Result,
			ResultType:   &o.ResultType,
			Time:         &o.Time,
			TimeRelative: &o.TimeRelative,
		}
	}

	sp := &SparseQuery{}
	for _, f := range fields {
		switch f {
		case "ID":
			sp.ID = &(o.ID)
		case "direction":
			sp.Direction = &(o.Direction)
		case "namespace":
			sp.Namespace = &(o.Namespace)
		case "query":
			sp.Query = &(o.Query)
		case "result":
			sp.Result = &(o.Result)
		case "resultType":
			sp.ResultType = &(o.ResultType)
		case "time":
			sp.Time = &(o.Time)
		case "timeRelative":
			sp.TimeRelative = &(o.TimeRelative)
		}
	}

	return sp
}

// Patch apply the non nil value of a *SparseQuery to the object.
func (o *Query) Patch(sparse elemental.SparseIdentifiable) {
	if !sparse.Identity().IsEqual(o.Identity()) {
		panic("cannot patch from a parse with different identity")
	}

	so := sparse.(*SparseQuery)
	if so.ID != nil {
		o.ID = *so.ID
	}
	if so.Direction != nil {
		o.Direction = *so.Direction
	}
	if so.Namespace != nil {
		o.Namespace = *so.Namespace
	}
	if so.Query != nil {
		o.Query = *so.Query
	}
	if so.Result != nil {
		o.Result = *so.Result
	}
	if so.ResultType != nil {
		o.ResultType = *so.ResultType
	}
	if so.Time != nil {
		o.Time = *so.Time
	}
	if so.TimeRelative != nil {
		o.TimeRelative = *so.TimeRelative
	}
}

// DeepCopy returns a deep copy if the Query.
func (o *Query) DeepCopy() *Query {

	if o == nil {
		return nil
	}

	out := &Query{}
	o.DeepCopyInto(out)

	return out
}

// DeepCopyInto copies the receiver into the given *Query.
func (o *Query) DeepCopyInto(out *Query) {

	target, err := copystructure.Copy(o)
	if err != nil {
		panic(fmt.Sprintf("Unable to deepcopy Query: %s", err))
	}

	*out = *target.(*Query)
}

// Validate valides the current information stored into the structure.
func (o *Query) Validate() error {

	errors := elemental.Errors{}
	requiredErrors := elemental.Errors{}

	if err := elemental.ValidateStringInList("direction", string(o.Direction), []string{"Forward", "Backward"}, false); err != nil {
		errors = errors.Append(err)
	}

	if err := elemental.ValidateRequiredString("query", o.Query); err != nil {
		requiredErrors = requiredErrors.Append(err)
	}

	if err := ValidateDuration("timeRelative", o.TimeRelative); err != nil {
		errors = errors.Append(err)
	}

	if len(requiredErrors) > 0 {
		return requiredErrors
	}

	if len(errors) > 0 {
		return errors
	}

	return nil
}

// SpecificationForAttribute returns the AttributeSpecification for the given attribute name key.
func (*Query) SpecificationForAttribute(name string) elemental.AttributeSpecification {

	if v, ok := QueryAttributesMap[name]; ok {
		return v
	}

	// We could not find it, so let's check on the lower case indexed spec map
	return QueryLowerCaseAttributesMap[name]
}

// AttributeSpecifications returns the full attribute specifications map.
func (*Query) AttributeSpecifications() map[string]elemental.AttributeSpecification {

	return QueryAttributesMap
}

// ValueForAttribute returns the value for the given attribute.
// This is a very advanced function that you should not need but in some
// very specific use cases.
func (o *Query) ValueForAttribute(name string) any {

	switch name {
	case "ID":
		return o.ID
	case "direction":
		return o.Direction
	case "namespace":
		return o.Namespace
	case "query":
		return o.Query
	case "result":
		return o.Result
	case "resultType":
		return o.ResultType
	case "time":
		return o.Time
	case "timeRelative":
		return o.TimeRelative
	}

	return nil
}

// QueryAttributesMap represents the map of attribute for Query.
var QueryAttributesMap = map[string]elemental.AttributeSpecification{
	"ID": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "_id",
		ConvertedName:  "ID",
		Description:    `ID is the identifier of the object.`,
		Exposed:        true,
		Filterable:     true,
		Identifier:     true,
		Name:           "ID",
		Orderable:      true,
		ReadOnly:       true,
		Stored:         true,
		Type:           "string",
	},
	"Direction": {
		AllowedChoices: []string{"Forward", "Backward"},
		ConvertedName:  "Direction",
		DefaultValue:   QueryDirectionBackward,
		Description:    `Determines the sort order of logs.`,
		Exposed:        true,
		Name:           "direction",
		Type:           "enum",
	},
	"Namespace": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "namespace",
		ConvertedName:  "Namespace",
		Description:    `The namespace of the object.`,
		Exposed:        true,
		Getter:         true,
		Name:           "namespace",
		Orderable:      true,
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Type:           "string",
	},
	"Query": {
		AllowedChoices: []string{},
		ConvertedName:  "Query",
		Description:    `The query in LogQL format.`,
		Exposed:        true,
		Name:           "query",
		Required:       true,
		Type:           "string",
	},
	"Result": {
		AllowedChoices: []string{},
		ConvertedName:  "Result",
		Description:    `The result of the request.`,
		Exposed:        true,
		Name:           "result",
		SubType:        "[]map[string]any",
		Type:           "external",
	},
	"ResultType": {
		AllowedChoices: []string{},
		ConvertedName:  "ResultType",
		Description:    `The type of the result.`,
		Exposed:        true,
		Name:           "resultType",
		Type:           "string",
	},
	"Time": {
		AllowedChoices: []string{},
		ConvertedName:  "Time",
		Description: `The time for the query in any format supported by
https://github.com/araddon/dateparse.`,
		Exposed: true,
		Getter:  true,
		Name:    "time",
		Setter:  true,
		Type:    "string",
	},
	"TimeRelative": {
		AllowedChoices: []string{},
		ConvertedName:  "TimeRelative",
		Description:    `The relative time of the time window as time.Duration.`,
		Exposed:        true,
		Getter:         true,
		Name:           "timeRelative",
		Setter:         true,
		Type:           "string",
	},
}

// QueryLowerCaseAttributesMap represents the map of attribute for Query.
var QueryLowerCaseAttributesMap = map[string]elemental.AttributeSpecification{
	"id": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "_id",
		ConvertedName:  "ID",
		Description:    `ID is the identifier of the object.`,
		Exposed:        true,
		Filterable:     true,
		Identifier:     true,
		Name:           "ID",
		Orderable:      true,
		ReadOnly:       true,
		Stored:         true,
		Type:           "string",
	},
	"direction": {
		AllowedChoices: []string{"Forward", "Backward"},
		ConvertedName:  "Direction",
		DefaultValue:   QueryDirectionBackward,
		Description:    `Determines the sort order of logs.`,
		Exposed:        true,
		Name:           "direction",
		Type:           "enum",
	},
	"namespace": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "namespace",
		ConvertedName:  "Namespace",
		Description:    `The namespace of the object.`,
		Exposed:        true,
		Getter:         true,
		Name:           "namespace",
		Orderable:      true,
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Type:           "string",
	},
	"query": {
		AllowedChoices: []string{},
		ConvertedName:  "Query",
		Description:    `The query in LogQL format.`,
		Exposed:        true,
		Name:           "query",
		Required:       true,
		Type:           "string",
	},
	"result": {
		AllowedChoices: []string{},
		ConvertedName:  "Result",
		Description:    `The result of the request.`,
		Exposed:        true,
		Name:           "result",
		SubType:        "[]map[string]any",
		Type:           "external",
	},
	"resulttype": {
		AllowedChoices: []string{},
		ConvertedName:  "ResultType",
		Description:    `The type of the result.`,
		Exposed:        true,
		Name:           "resultType",
		Type:           "string",
	},
	"time": {
		AllowedChoices: []string{},
		ConvertedName:  "Time",
		Description: `The time for the query in any format supported by
https://github.com/araddon/dateparse.`,
		Exposed: true,
		Getter:  true,
		Name:    "time",
		Setter:  true,
		Type:    "string",
	},
	"timerelative": {
		AllowedChoices: []string{},
		ConvertedName:  "TimeRelative",
		Description:    `The relative time of the time window as time.Duration.`,
		Exposed:        true,
		Getter:         true,
		Name:           "timeRelative",
		Setter:         true,
		Type:           "string",
	},
}

// SparseQueriesList represents a list of SparseQueries
type SparseQueriesList []*SparseQuery

// Identity returns the identity of the objects in the list.
func (o SparseQueriesList) Identity() elemental.Identity {

	return QueryIdentity
}

// Copy returns a pointer to a copy the SparseQueriesList.
func (o SparseQueriesList) Copy() elemental.Identifiables {

	copy := slices.Clone(o)
	return &copy
}

// Append appends the objects to the a new copy of the SparseQueriesList.
func (o SparseQueriesList) Append(objects ...elemental.Identifiable) elemental.Identifiables {

	out := slices.Clone(o)
	for _, obj := range objects {
		out = append(out, obj.(*SparseQuery))
	}

	return out
}

// List converts the object to an elemental.IdentifiablesList.
func (o SparseQueriesList) List() elemental.IdentifiablesList {

	out := make(elemental.IdentifiablesList, len(o))
	for i := range len(o) {
		out[i] = o[i]
	}

	return out
}

// DefaultOrder returns the default ordering fields of the content.
func (o SparseQueriesList) DefaultOrder() []string {

	return []string{}
}

// ToPlain returns the SparseQueriesList converted to QueriesList.
func (o SparseQueriesList) ToPlain() elemental.IdentifiablesList {

	out := make(elemental.IdentifiablesList, len(o))
	for i := range len(o) {
		out[i] = o[i].ToPlain()
	}

	return out
}

// Version returns the version of the content.
func (o SparseQueriesList) Version() int {

	return 1
}

// SparseQuery represents the sparse version of a query.
type SparseQuery struct {
	// ID is the identifier of the object.
	ID *string `json:"ID,omitempty" msgpack:"ID,omitempty" bson:"-" mapstructure:"ID,omitempty"`

	// Determines the sort order of logs.
	Direction *QueryDirectionValue `json:"direction,omitempty" msgpack:"direction,omitempty" bson:"-" mapstructure:"direction,omitempty"`

	// The namespace of the object.
	Namespace *string `json:"namespace,omitempty" msgpack:"namespace,omitempty" bson:"namespace,omitempty" mapstructure:"namespace,omitempty"`

	// The query in LogQL format.
	Query *string `json:"query,omitempty" msgpack:"query,omitempty" bson:"-" mapstructure:"query,omitempty"`

	// The result of the request.
	Result *[]map[string]any `json:"result,omitempty" msgpack:"result,omitempty" bson:"-" mapstructure:"result,omitempty"`

	// The type of the result.
	ResultType *string `json:"resultType,omitempty" msgpack:"resultType,omitempty" bson:"-" mapstructure:"resultType,omitempty"`

	// The time for the query in any format supported by
	// https://github.com/araddon/dateparse.
	Time *string `json:"time,omitempty" msgpack:"time,omitempty" bson:"-" mapstructure:"time,omitempty"`

	// The relative time of the time window as time.Duration.
	TimeRelative *string `json:"timeRelative,omitempty" msgpack:"timeRelative,omitempty" bson:"-" mapstructure:"timeRelative,omitempty"`

	ModelVersion int `json:"-" msgpack:"-" bson:"_modelversion"`
}

// NewSparseQuery returns a new  SparseQuery.
func NewSparseQuery() *SparseQuery {
	return &SparseQuery{}
}

// Identity returns the Identity of the sparse object.
func (o *SparseQuery) Identity() elemental.Identity {

	return QueryIdentity
}

// Identifier returns the value of the sparse object's unique identifier.
func (o *SparseQuery) Identifier() string {

	if o.ID == nil {
		return ""
	}
	return *o.ID
}

// SetIdentifier sets the value of the sparse object's unique identifier.
func (o *SparseQuery) SetIdentifier(id string) {

	if id != "" {
		o.ID = &id
	} else {
		o.ID = nil
	}
}

// GetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *SparseQuery) GetBSON() (any, error) {

	if o == nil {
		return nil, nil
	}

	s := &mongoAttributesSparseQuery{}

	if o.ID != nil {
		s.ID = bson.ObjectIdHex(*o.ID)
	}
	if o.Namespace != nil {
		s.Namespace = o.Namespace
	}

	return s, nil
}

// SetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *SparseQuery) SetBSON(raw bson.Raw) error {

	if o == nil {
		return nil
	}

	s := &mongoAttributesSparseQuery{}
	if err := raw.Unmarshal(s); err != nil {
		return err
	}

	id := s.ID.Hex()
	o.ID = &id
	if s.Namespace != nil {
		o.Namespace = s.Namespace
	}

	return nil
}

// Version returns the hardcoded version of the model.
func (o *SparseQuery) Version() int {

	return 1
}

// ToPlain returns the plain version of the sparse model.
func (o *SparseQuery) ToPlain() elemental.PlainIdentifiable {

	out := NewQuery()
	if o.ID != nil {
		out.ID = *o.ID
	}
	if o.Direction != nil {
		out.Direction = *o.Direction
	}
	if o.Namespace != nil {
		out.Namespace = *o.Namespace
	}
	if o.Query != nil {
		out.Query = *o.Query
	}
	if o.Result != nil {
		out.Result = *o.Result
	}
	if o.ResultType != nil {
		out.ResultType = *o.ResultType
	}
	if o.Time != nil {
		out.Time = *o.Time
	}
	if o.TimeRelative != nil {
		out.TimeRelative = *o.TimeRelative
	}

	return out
}

// GetNamespace returns the Namespace of the receiver.
func (o *SparseQuery) GetNamespace() (out string) {

	if o.Namespace == nil {
		return
	}

	return *o.Namespace
}

// SetNamespace sets the property Namespace of the receiver using the address of the given value.
func (o *SparseQuery) SetNamespace(namespace string) {

	o.Namespace = &namespace
}

// GetTime returns the Time of the receiver.
func (o *SparseQuery) GetTime() (out string) {

	if o.Time == nil {
		return
	}

	return *o.Time
}

// SetTime sets the property Time of the receiver using the address of the given value.
func (o *SparseQuery) SetTime(time string) {

	o.Time = &time
}

// GetTimeRelative returns the TimeRelative of the receiver.
func (o *SparseQuery) GetTimeRelative() (out string) {

	if o.TimeRelative == nil {
		return
	}

	return *o.TimeRelative
}

// SetTimeRelative sets the property TimeRelative of the receiver using the address of the given value.
func (o *SparseQuery) SetTimeRelative(timeRelative string) {

	o.TimeRelative = &timeRelative
}

// DeepCopy returns a deep copy if the SparseQuery.
func (o *SparseQuery) DeepCopy() *SparseQuery {

	if o == nil {
		return nil
	}

	out := &SparseQuery{}
	o.DeepCopyInto(out)

	return out
}

// DeepCopyInto copies the receiver into the given *SparseQuery.
func (o *SparseQuery) DeepCopyInto(out *SparseQuery) {

	target, err := copystructure.Copy(o)
	if err != nil {
		panic(fmt.Sprintf("Unable to deepcopy SparseQuery: %s", err))
	}

	*out = *target.(*SparseQuery)
}

type mongoAttributesQuery struct {
	ID        bson.ObjectId `bson:"_id,omitempty"`
	Namespace string        `bson:"namespace,omitempty"`
}
type mongoAttributesSparseQuery struct {
	ID        bson.ObjectId `bson:"_id,omitempty"`
	Namespace *string       `bson:"namespace,omitempty"`
}
