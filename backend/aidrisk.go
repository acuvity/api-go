// Code generated by elegen. DO NOT EDIT.
// Source: go.acuvity.ai/elemental (templates/model.gotpl)

package api

import (
	"fmt"

	"github.com/globalsign/mgo/bson"
	"github.com/mitchellh/copystructure"
	"go.acuvity.ai/elemental"
)

// AIDRiskLevelValue represents the possible values for attribute "level".
type AIDRiskLevelValue string

const (
	// AIDRiskLevelCritical represents the value Critical.
	AIDRiskLevelCritical AIDRiskLevelValue = "Critical"

	// AIDRiskLevelHigh represents the value High.
	AIDRiskLevelHigh AIDRiskLevelValue = "High"

	// AIDRiskLevelLow represents the value Low.
	AIDRiskLevelLow AIDRiskLevelValue = "Low"

	// AIDRiskLevelMedium represents the value Medium.
	AIDRiskLevelMedium AIDRiskLevelValue = "Medium"
)

// AIDRisk represents the model of a aidrisk
type AIDRisk struct {
	// List of gaps which are creating the risk.
	Gaps []string `json:"gaps,omitempty" msgpack:"gaps,omitempty" bson:"gaps,omitempty" mapstructure:"gaps,omitempty"`

	// The level of the risk.
	Level AIDRiskLevelValue `json:"level" msgpack:"level" bson:"level" mapstructure:"level,omitempty"`

	// The reason explaning the level.
	Reason string `json:"reason,omitempty" msgpack:"reason,omitempty" bson:"reason,omitempty" mapstructure:"reason,omitempty"`

	ModelVersion int `json:"-" msgpack:"-" bson:"_modelversion"`
}

// NewAIDRisk returns a new *AIDRisk
func NewAIDRisk() *AIDRisk {

	return &AIDRisk{
		ModelVersion: 1,
		Gaps:         []string{},
	}
}

// GetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *AIDRisk) GetBSON() (any, error) {

	if o == nil {
		return nil, nil
	}

	s := &mongoAttributesAIDRisk{}

	s.Gaps = o.Gaps
	s.Level = o.Level
	s.Reason = o.Reason

	return s, nil
}

// SetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *AIDRisk) SetBSON(raw bson.Raw) error {

	if o == nil || raw.Kind == bson.ElementNil {
		return bson.ErrSetZero
	}

	s := &mongoAttributesAIDRisk{}
	if err := raw.Unmarshal(s); err != nil {
		return err
	}

	o.Gaps = s.Gaps
	o.Level = s.Level
	o.Reason = s.Reason

	return nil
}

// BleveType implements the bleve.Classifier Interface.
func (o *AIDRisk) BleveType() string {

	return "aidrisk"
}

// DeepCopy returns a deep copy if the AIDRisk.
func (o *AIDRisk) DeepCopy() *AIDRisk {

	if o == nil {
		return nil
	}

	out := &AIDRisk{}
	o.DeepCopyInto(out)

	return out
}

// DeepCopyInto copies the receiver into the given *AIDRisk.
func (o *AIDRisk) DeepCopyInto(out *AIDRisk) {

	target, err := copystructure.Copy(o)
	if err != nil {
		panic(fmt.Sprintf("Unable to deepcopy AIDRisk: %s", err))
	}

	*out = *target.(*AIDRisk)
}

// Validate valides the current information stored into the structure.
func (o *AIDRisk) Validate() error {

	errors := elemental.Errors{}
	requiredErrors := elemental.Errors{}

	if err := elemental.ValidateRequiredString("level", string(o.Level)); err != nil {
		requiredErrors = requiredErrors.Append(err)
	}

	if err := elemental.ValidateStringInList("level", string(o.Level), []string{"Low", "Medium", "High", "Critical"}, false); err != nil {
		errors = errors.Append(err)
	}

	if err := elemental.ValidateRequiredString("reason", o.Reason); err != nil {
		requiredErrors = requiredErrors.Append(err)
	}

	if len(requiredErrors) > 0 {
		return requiredErrors
	}

	if len(errors) > 0 {
		return errors
	}

	return nil
}

// SpecificationForAttribute returns the AttributeSpecification for the given attribute name key.
func (*AIDRisk) SpecificationForAttribute(name string) elemental.AttributeSpecification {

	if v, ok := AIDRiskAttributesMap[name]; ok {
		return v
	}

	// We could not find it, so let's check on the lower case indexed spec map
	return AIDRiskLowerCaseAttributesMap[name]
}

// AttributeSpecifications returns the full attribute specifications map.
func (*AIDRisk) AttributeSpecifications() map[string]elemental.AttributeSpecification {

	return AIDRiskAttributesMap
}

// ValueForAttribute returns the value for the given attribute.
// This is a very advanced function that you should not need but in some
// very specific use cases.
func (o *AIDRisk) ValueForAttribute(name string) any {

	switch name {
	case "gaps":
		return o.Gaps
	case "level":
		return o.Level
	case "reason":
		return o.Reason
	}

	return nil
}

// AIDRiskAttributesMap represents the map of attribute for AIDRisk.
var AIDRiskAttributesMap = map[string]elemental.AttributeSpecification{
	"Gaps": {
		AllowedChoices: []string{},
		BSONFieldName:  "gaps",
		ConvertedName:  "Gaps",
		Description:    `List of gaps which are creating the risk.`,
		Exposed:        true,
		Name:           "gaps",
		Stored:         true,
		SubType:        "string",
		Type:           "list",
	},
	"Level": {
		AllowedChoices: []string{"Low", "Medium", "High", "Critical"},
		BSONFieldName:  "level",
		ConvertedName:  "Level",
		Description:    `The level of the risk.`,
		Exposed:        true,
		Name:           "level",
		Required:       true,
		Stored:         true,
		Type:           "enum",
	},
	"Reason": {
		AllowedChoices: []string{},
		BSONFieldName:  "reason",
		ConvertedName:  "Reason",
		Description:    `The reason explaning the level.`,
		Exposed:        true,
		Name:           "reason",
		Required:       true,
		Stored:         true,
		Type:           "string",
	},
}

// AIDRiskLowerCaseAttributesMap represents the map of attribute for AIDRisk.
var AIDRiskLowerCaseAttributesMap = map[string]elemental.AttributeSpecification{
	"gaps": {
		AllowedChoices: []string{},
		BSONFieldName:  "gaps",
		ConvertedName:  "Gaps",
		Description:    `List of gaps which are creating the risk.`,
		Exposed:        true,
		Name:           "gaps",
		Stored:         true,
		SubType:        "string",
		Type:           "list",
	},
	"level": {
		AllowedChoices: []string{"Low", "Medium", "High", "Critical"},
		BSONFieldName:  "level",
		ConvertedName:  "Level",
		Description:    `The level of the risk.`,
		Exposed:        true,
		Name:           "level",
		Required:       true,
		Stored:         true,
		Type:           "enum",
	},
	"reason": {
		AllowedChoices: []string{},
		BSONFieldName:  "reason",
		ConvertedName:  "Reason",
		Description:    `The reason explaning the level.`,
		Exposed:        true,
		Name:           "reason",
		Required:       true,
		Stored:         true,
		Type:           "string",
	},
}

type mongoAttributesAIDRisk struct {
	Gaps   []string          `bson:"gaps,omitempty"`
	Level  AIDRiskLevelValue `bson:"level"`
	Reason string            `bson:"reason,omitempty"`
}
