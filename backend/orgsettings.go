// Code generated by elegen. DO NOT EDIT.
// Source: go.acuvity.ai/elemental (templates/model.gotpl)

package api

import (
	"fmt"
	"slices"
	"time"

	"github.com/globalsign/mgo/bson"
	"github.com/mitchellh/copystructure"
	"go.acuvity.ai/elemental"
)

// OrgSettingsIdentity represents the Identity of the object.
var OrgSettingsIdentity = elemental.Identity{
	Name:     "orgsettings",
	Category: "orgsettings",
	Package:  "lain",
	Private:  false,
}

// OrgSettingsList represents a list of OrgSettings
type OrgSettingsList []*OrgSettings

// Identity returns the identity of the objects in the list.
func (o OrgSettingsList) Identity() elemental.Identity {

	return OrgSettingsIdentity
}

// Copy returns a pointer to a copy the OrgSettingsList.
func (o OrgSettingsList) Copy() elemental.Identifiables {

	out := slices.Clone(o)
	return &out
}

// Append appends the objects to the a new copy of the OrgSettingsList.
func (o OrgSettingsList) Append(objects ...elemental.Identifiable) elemental.Identifiables {

	out := slices.Clone(o)
	for _, obj := range objects {
		out = append(out, obj.(*OrgSettings))
	}

	return out
}

// List converts the object to an elemental.IdentifiablesList.
func (o OrgSettingsList) List() elemental.IdentifiablesList {

	out := make(elemental.IdentifiablesList, len(o))
	for i := range len(o) {
		out[i] = o[i]
	}

	return out
}

// DefaultOrder returns the default ordering fields of the content.
func (o OrgSettingsList) DefaultOrder() []string {

	return []string{}
}

// ToSparse returns the OrgSettingsList converted to SparseOrgSettingsList.
// Objects in the list will only contain the given fields. No field means entire field set.
func (o OrgSettingsList) ToSparse(fields ...string) elemental.Identifiables {

	out := make(SparseOrgSettingsList, len(o))
	for i := range len(o) {
		out[i] = o[i].ToSparse(fields...).(*SparseOrgSettings)
	}

	return out
}

// Version returns the version of the content.
func (o OrgSettingsList) Version() int {

	return 1
}

// OrgSettings represents the model of a orgsettings
type OrgSettings struct {
	// The Certificate authority to use to validate user certificates in PEM format.
	CA string `json:"CA" msgpack:"CA" bson:"ca" mapstructure:"CA,omitempty"`

	// The currently used Certificate authorities's Common Name.
	CACommonNames []string `json:"CACommonNames" msgpack:"CACommonNames" bson:"cacommonnames" mapstructure:"CACommonNames,omitempty"`

	// ID is the identifier of the object.
	ID string `json:"ID,omitempty" msgpack:"ID,omitempty" bson:"-" mapstructure:"ID,omitempty"`

	// The rego policy that decides if the incoming request can access the
	// provider. If this empty, the dynamic policy transpiled from
	// AccessPolicies API objects will be used by Apexes. If set however,
	// everything computed by API objects are ignored and this becomes the final
	// policy.
	AccessPolicy string `json:"accessPolicy" msgpack:"accessPolicy" bson:"accesspolicy" mapstructure:"accessPolicy,omitempty"`

	// When enabled, an API authorization will be created in your
	// organization to allow the Support Team to access your organization in
	// read-only fashion to help you with any issue you might have.
	// Disable it again to remove the permissions.
	AllowSupportAccess bool `json:"allowSupportAccess" msgpack:"allowSupportAccess" bson:"allowsupportaccess" mapstructure:"allowSupportAccess,omitempty"`

	// Ask the user of web applications for consent before accessing a monitored
	// provider, using an html splash screen the first time they connect. If
	// this is not set, the users of the providers can still figure out the
	// provider is monitored. This is a courtesy and not a security feature.
	AskConsent bool `json:"askConsent" msgpack:"askConsent" bson:"askconsent" mapstructure:"askConsent,omitempty"`

	// The rego policy that decides in which team an user should be in. The team
	// will be passed to the accessPolicy. If this empty, the dynamic policy
	// transpiled from AssignPolicies API objects will be used by Apexes. If set
	// however, everything computed by API objects are ignored and this becomes
	// the final policy.
	AssignPolicy string `json:"assignPolicy" msgpack:"assignPolicy" bson:"assignpolicy" mapstructure:"assignPolicy,omitempty"`

	// The policy that decides how to handle the request content, once access
	// has been granted by accessPolicy and the content analysis was performed.
	// If this empty, the dynamic policy transpiled from AccessPolicies API
	// objects will be used by Apexes. If set however, everything computed by
	// API objects are ignored and this becomes the final policy.
	ContentPolicy string `json:"contentPolicy" msgpack:"contentPolicy" bson:"contentpolicy" mapstructure:"contentPolicy,omitempty"`

	// Creation date of the object.
	CreateTime time.Time `json:"createTime" msgpack:"createTime" bson:"createtime" mapstructure:"createTime,omitempty"`

	// If true, it disables discovering of the visited URLs.
	DisableURLDiscovery bool `json:"disableURLDiscovery" msgpack:"disableURLDiscovery" bson:"disableurldiscovery" mapstructure:"disableURLDiscovery,omitempty"`

	// the fingerprint of the cas in the chain.
	Fingerprints []string `json:"fingerprints" msgpack:"fingerprints" bson:"fingerprints" mapstructure:"fingerprints,omitempty"`

	// The hash of the structure used to compare with new import version.
	ImportHash string `json:"importHash,omitempty" msgpack:"importHash,omitempty" bson:"importhash,omitempty" mapstructure:"importHash,omitempty"`

	// The user-defined import label that allows the system to group resources from the
	// same import operation.
	ImportLabel string `json:"importLabel,omitempty" msgpack:"importLabel,omitempty" bson:"importlabel,omitempty" mapstructure:"importLabel,omitempty"`

	// The namespace of the object.
	Namespace string `json:"namespace,omitempty" msgpack:"namespace,omitempty" bson:"namespace,omitempty" mapstructure:"namespace,omitempty"`

	// A few sentences about the organization. The description must be short
	// and detailed. It will be used by the inference engine to decide if the content
	// sent by the users are relevant to your company.
	Profile string `json:"profile" msgpack:"profile" bson:"profile" mapstructure:"profile,omitempty"`

	// Propagates the object to all child namespaces. This is always true.
	Propagate bool `json:"propagate" msgpack:"propagate" bson:"propagate" mapstructure:"propagate,omitempty"`

	// The providers which do not request employees' consent.
	ProvidersWithoutConsent []string `json:"providersWithoutConsent" msgpack:"providersWithoutConsent" bson:"providerswithoutconsent" mapstructure:"providersWithoutConsent,omitempty"`

	// The list of email recipients where digest reports will be sent to.
	ReportRecipientEmails []string `json:"reportRecipientEmails" msgpack:"reportRecipientEmails" bson:"reportrecipientemails" mapstructure:"reportRecipientEmails,omitempty"`

	// A link to the AI Safe Usage Document for the organization.
	// If provided, it is presented in the consent banner to the employees.
	SafeUsageURL string `json:"safeUsageURL" msgpack:"safeUsageURL" bson:"safeusageurl" mapstructure:"safeUsageURL,omitempty"`

	// If set, files uploaded by the users will be stored.
	StoreInputFiles bool `json:"storeInputFiles" msgpack:"storeInputFiles" bson:"storeinputfiles" mapstructure:"storeInputFiles,omitempty"`

	// If set, files sent to the users will be stored.
	StoreOutputFiles bool `json:"storeOutputFiles" msgpack:"storeOutputFiles" bson:"storeoutputfiles" mapstructure:"storeOutputFiles,omitempty"`

	// the IDs of the subject keys of the cas in the chain.
	SubjectKeyIDs []string `json:"subjectKeyIDs" msgpack:"subjectKeyIDs" bson:"subjectkeyids" mapstructure:"subjectKeyIDs,omitempty"`

	// Last update date of the object.
	UpdateTime time.Time `json:"updateTime" msgpack:"updateTime" bson:"updatetime" mapstructure:"updateTime,omitempty"`

	// If true, it uses Rego code to define team assignment, provider access and
	// content policies.
	UseRegoCodeOnly bool `json:"useRegoCodeOnly" msgpack:"useRegoCodeOnly" bson:"useregocodeonly" mapstructure:"useRegoCodeOnly,omitempty"`

	// Hash of the object used to shard the data.
	ZHash int `json:"-" msgpack:"-" bson:"zhash" mapstructure:"-,omitempty"`

	// Sharding zone.
	Zone int `json:"-" msgpack:"-" bson:"zone" mapstructure:"-,omitempty"`

	ModelVersion int `json:"-" msgpack:"-" bson:"_modelversion"`
}

// NewOrgSettings returns a new *OrgSettings
func NewOrgSettings() *OrgSettings {

	return &OrgSettings{
		ModelVersion:            1,
		CACommonNames:           []string{},
		Fingerprints:            []string{},
		Propagate:               true,
		ProvidersWithoutConsent: []string{},
		ReportRecipientEmails:   []string{},
		SubjectKeyIDs:           []string{},
	}
}

// Identity returns the Identity of the object.
func (o *OrgSettings) Identity() elemental.Identity {

	return OrgSettingsIdentity
}

// Identifier returns the value of the object's unique identifier.
func (o *OrgSettings) Identifier() string {

	return o.ID
}

// SetIdentifier sets the value of the object's unique identifier.
func (o *OrgSettings) SetIdentifier(id string) {

	o.ID = id
}

// GetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *OrgSettings) GetBSON() (any, error) {

	if o == nil {
		return nil, nil
	}

	s := &mongoAttributesOrgSettings{}

	s.CA = o.CA
	s.CACommonNames = o.CACommonNames
	if o.ID != "" {
		s.ID = bson.ObjectIdHex(o.ID)
	}
	s.AccessPolicy = o.AccessPolicy
	s.AllowSupportAccess = o.AllowSupportAccess
	s.AskConsent = o.AskConsent
	s.AssignPolicy = o.AssignPolicy
	s.ContentPolicy = o.ContentPolicy
	s.CreateTime = o.CreateTime
	s.DisableURLDiscovery = o.DisableURLDiscovery
	s.Fingerprints = o.Fingerprints
	s.ImportHash = o.ImportHash
	s.ImportLabel = o.ImportLabel
	s.Namespace = o.Namespace
	s.Profile = o.Profile
	s.Propagate = o.Propagate
	s.ProvidersWithoutConsent = o.ProvidersWithoutConsent
	s.ReportRecipientEmails = o.ReportRecipientEmails
	s.SafeUsageURL = o.SafeUsageURL
	s.StoreInputFiles = o.StoreInputFiles
	s.StoreOutputFiles = o.StoreOutputFiles
	s.SubjectKeyIDs = o.SubjectKeyIDs
	s.UpdateTime = o.UpdateTime
	s.UseRegoCodeOnly = o.UseRegoCodeOnly
	s.ZHash = o.ZHash
	s.Zone = o.Zone

	return s, nil
}

// SetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *OrgSettings) SetBSON(raw bson.Raw) error {

	if o == nil {
		return nil
	}

	s := &mongoAttributesOrgSettings{}
	if err := raw.Unmarshal(s); err != nil {
		return err
	}

	o.CA = s.CA
	o.CACommonNames = s.CACommonNames
	o.ID = s.ID.Hex()
	o.AccessPolicy = s.AccessPolicy
	o.AllowSupportAccess = s.AllowSupportAccess
	o.AskConsent = s.AskConsent
	o.AssignPolicy = s.AssignPolicy
	o.ContentPolicy = s.ContentPolicy
	o.CreateTime = s.CreateTime
	o.DisableURLDiscovery = s.DisableURLDiscovery
	o.Fingerprints = s.Fingerprints
	o.ImportHash = s.ImportHash
	o.ImportLabel = s.ImportLabel
	o.Namespace = s.Namespace
	o.Profile = s.Profile
	o.Propagate = s.Propagate
	o.ProvidersWithoutConsent = s.ProvidersWithoutConsent
	o.ReportRecipientEmails = s.ReportRecipientEmails
	o.SafeUsageURL = s.SafeUsageURL
	o.StoreInputFiles = s.StoreInputFiles
	o.StoreOutputFiles = s.StoreOutputFiles
	o.SubjectKeyIDs = s.SubjectKeyIDs
	o.UpdateTime = s.UpdateTime
	o.UseRegoCodeOnly = s.UseRegoCodeOnly
	o.ZHash = s.ZHash
	o.Zone = s.Zone

	return nil
}

// Version returns the hardcoded version of the model.
func (o *OrgSettings) Version() int {

	return 1
}

// BleveType implements the bleve.Classifier Interface.
func (o *OrgSettings) BleveType() string {

	return "orgsettings"
}

// DefaultOrder returns the list of default ordering fields.
func (o *OrgSettings) DefaultOrder() []string {

	return []string{}
}

// Doc returns the documentation for the object
func (o *OrgSettings) Doc() string {

	return `Manage the default settings for the entire organization.`
}

func (o *OrgSettings) String() string {

	return fmt.Sprintf("<%s:%s>", o.Identity().Name, o.Identifier())
}

// GetCreateTime returns the CreateTime of the receiver.
func (o *OrgSettings) GetCreateTime() time.Time {

	return o.CreateTime
}

// SetCreateTime sets the property CreateTime of the receiver using the given value.
func (o *OrgSettings) SetCreateTime(createTime time.Time) {

	o.CreateTime = createTime
}

// GetImportHash returns the ImportHash of the receiver.
func (o *OrgSettings) GetImportHash() string {

	return o.ImportHash
}

// SetImportHash sets the property ImportHash of the receiver using the given value.
func (o *OrgSettings) SetImportHash(importHash string) {

	o.ImportHash = importHash
}

// GetImportLabel returns the ImportLabel of the receiver.
func (o *OrgSettings) GetImportLabel() string {

	return o.ImportLabel
}

// SetImportLabel sets the property ImportLabel of the receiver using the given value.
func (o *OrgSettings) SetImportLabel(importLabel string) {

	o.ImportLabel = importLabel
}

// GetNamespace returns the Namespace of the receiver.
func (o *OrgSettings) GetNamespace() string {

	return o.Namespace
}

// SetNamespace sets the property Namespace of the receiver using the given value.
func (o *OrgSettings) SetNamespace(namespace string) {

	o.Namespace = namespace
}

// GetPropagate returns the Propagate of the receiver.
func (o *OrgSettings) GetPropagate() bool {

	return o.Propagate
}

// SetPropagate sets the property Propagate of the receiver using the given value.
func (o *OrgSettings) SetPropagate(propagate bool) {

	o.Propagate = propagate
}

// GetUpdateTime returns the UpdateTime of the receiver.
func (o *OrgSettings) GetUpdateTime() time.Time {

	return o.UpdateTime
}

// SetUpdateTime sets the property UpdateTime of the receiver using the given value.
func (o *OrgSettings) SetUpdateTime(updateTime time.Time) {

	o.UpdateTime = updateTime
}

// ToSparse returns the sparse version of the model.
// The returned object will only contain the given fields. No field means entire field set.
func (o *OrgSettings) ToSparse(fields ...string) elemental.SparseIdentifiable {

	if len(fields) == 0 {
		// nolint: goimports
		return &SparseOrgSettings{
			CA:                      &o.CA,
			CACommonNames:           &o.CACommonNames,
			ID:                      &o.ID,
			AccessPolicy:            &o.AccessPolicy,
			AllowSupportAccess:      &o.AllowSupportAccess,
			AskConsent:              &o.AskConsent,
			AssignPolicy:            &o.AssignPolicy,
			ContentPolicy:           &o.ContentPolicy,
			CreateTime:              &o.CreateTime,
			DisableURLDiscovery:     &o.DisableURLDiscovery,
			Fingerprints:            &o.Fingerprints,
			ImportHash:              &o.ImportHash,
			ImportLabel:             &o.ImportLabel,
			Namespace:               &o.Namespace,
			Profile:                 &o.Profile,
			Propagate:               &o.Propagate,
			ProvidersWithoutConsent: &o.ProvidersWithoutConsent,
			ReportRecipientEmails:   &o.ReportRecipientEmails,
			SafeUsageURL:            &o.SafeUsageURL,
			StoreInputFiles:         &o.StoreInputFiles,
			StoreOutputFiles:        &o.StoreOutputFiles,
			SubjectKeyIDs:           &o.SubjectKeyIDs,
			UpdateTime:              &o.UpdateTime,
			UseRegoCodeOnly:         &o.UseRegoCodeOnly,
			ZHash:                   &o.ZHash,
			Zone:                    &o.Zone,
		}
	}

	sp := &SparseOrgSettings{}
	for _, f := range fields {
		switch f {
		case "CA":
			sp.CA = &(o.CA)
		case "CACommonNames":
			sp.CACommonNames = &(o.CACommonNames)
		case "ID":
			sp.ID = &(o.ID)
		case "accessPolicy":
			sp.AccessPolicy = &(o.AccessPolicy)
		case "allowSupportAccess":
			sp.AllowSupportAccess = &(o.AllowSupportAccess)
		case "askConsent":
			sp.AskConsent = &(o.AskConsent)
		case "assignPolicy":
			sp.AssignPolicy = &(o.AssignPolicy)
		case "contentPolicy":
			sp.ContentPolicy = &(o.ContentPolicy)
		case "createTime":
			sp.CreateTime = &(o.CreateTime)
		case "disableURLDiscovery":
			sp.DisableURLDiscovery = &(o.DisableURLDiscovery)
		case "fingerprints":
			sp.Fingerprints = &(o.Fingerprints)
		case "importHash":
			sp.ImportHash = &(o.ImportHash)
		case "importLabel":
			sp.ImportLabel = &(o.ImportLabel)
		case "namespace":
			sp.Namespace = &(o.Namespace)
		case "profile":
			sp.Profile = &(o.Profile)
		case "propagate":
			sp.Propagate = &(o.Propagate)
		case "providersWithoutConsent":
			sp.ProvidersWithoutConsent = &(o.ProvidersWithoutConsent)
		case "reportRecipientEmails":
			sp.ReportRecipientEmails = &(o.ReportRecipientEmails)
		case "safeUsageURL":
			sp.SafeUsageURL = &(o.SafeUsageURL)
		case "storeInputFiles":
			sp.StoreInputFiles = &(o.StoreInputFiles)
		case "storeOutputFiles":
			sp.StoreOutputFiles = &(o.StoreOutputFiles)
		case "subjectKeyIDs":
			sp.SubjectKeyIDs = &(o.SubjectKeyIDs)
		case "updateTime":
			sp.UpdateTime = &(o.UpdateTime)
		case "useRegoCodeOnly":
			sp.UseRegoCodeOnly = &(o.UseRegoCodeOnly)
		case "zHash":
			sp.ZHash = &(o.ZHash)
		case "zone":
			sp.Zone = &(o.Zone)
		}
	}

	return sp
}

// Patch apply the non nil value of a *SparseOrgSettings to the object.
func (o *OrgSettings) Patch(sparse elemental.SparseIdentifiable) {
	if !sparse.Identity().IsEqual(o.Identity()) {
		panic("cannot patch from a parse with different identity")
	}

	so := sparse.(*SparseOrgSettings)
	if so.CA != nil {
		o.CA = *so.CA
	}
	if so.CACommonNames != nil {
		o.CACommonNames = *so.CACommonNames
	}
	if so.ID != nil {
		o.ID = *so.ID
	}
	if so.AccessPolicy != nil {
		o.AccessPolicy = *so.AccessPolicy
	}
	if so.AllowSupportAccess != nil {
		o.AllowSupportAccess = *so.AllowSupportAccess
	}
	if so.AskConsent != nil {
		o.AskConsent = *so.AskConsent
	}
	if so.AssignPolicy != nil {
		o.AssignPolicy = *so.AssignPolicy
	}
	if so.ContentPolicy != nil {
		o.ContentPolicy = *so.ContentPolicy
	}
	if so.CreateTime != nil {
		o.CreateTime = *so.CreateTime
	}
	if so.DisableURLDiscovery != nil {
		o.DisableURLDiscovery = *so.DisableURLDiscovery
	}
	if so.Fingerprints != nil {
		o.Fingerprints = *so.Fingerprints
	}
	if so.ImportHash != nil {
		o.ImportHash = *so.ImportHash
	}
	if so.ImportLabel != nil {
		o.ImportLabel = *so.ImportLabel
	}
	if so.Namespace != nil {
		o.Namespace = *so.Namespace
	}
	if so.Profile != nil {
		o.Profile = *so.Profile
	}
	if so.Propagate != nil {
		o.Propagate = *so.Propagate
	}
	if so.ProvidersWithoutConsent != nil {
		o.ProvidersWithoutConsent = *so.ProvidersWithoutConsent
	}
	if so.ReportRecipientEmails != nil {
		o.ReportRecipientEmails = *so.ReportRecipientEmails
	}
	if so.SafeUsageURL != nil {
		o.SafeUsageURL = *so.SafeUsageURL
	}
	if so.StoreInputFiles != nil {
		o.StoreInputFiles = *so.StoreInputFiles
	}
	if so.StoreOutputFiles != nil {
		o.StoreOutputFiles = *so.StoreOutputFiles
	}
	if so.SubjectKeyIDs != nil {
		o.SubjectKeyIDs = *so.SubjectKeyIDs
	}
	if so.UpdateTime != nil {
		o.UpdateTime = *so.UpdateTime
	}
	if so.UseRegoCodeOnly != nil {
		o.UseRegoCodeOnly = *so.UseRegoCodeOnly
	}
	if so.ZHash != nil {
		o.ZHash = *so.ZHash
	}
	if so.Zone != nil {
		o.Zone = *so.Zone
	}
}

// DeepCopy returns a deep copy if the OrgSettings.
func (o *OrgSettings) DeepCopy() *OrgSettings {

	if o == nil {
		return nil
	}

	out := &OrgSettings{}
	o.DeepCopyInto(out)

	return out
}

// DeepCopyInto copies the receiver into the given *OrgSettings.
func (o *OrgSettings) DeepCopyInto(out *OrgSettings) {

	target, err := copystructure.Copy(o)
	if err != nil {
		panic(fmt.Sprintf("Unable to deepcopy OrgSettings: %s", err))
	}

	*out = *target.(*OrgSettings)
}

// Validate valides the current information stored into the structure.
func (o *OrgSettings) Validate() error {

	errors := elemental.Errors{}
	requiredErrors := elemental.Errors{}

	if err := ValidatePEM("CA", o.CA); err != nil {
		errors = errors.Append(err)
	}

	if err := ValidateRego("accessPolicy", o.AccessPolicy); err != nil {
		errors = errors.Append(err)
	}

	if err := ValidateRego("assignPolicy", o.AssignPolicy); err != nil {
		errors = errors.Append(err)
	}

	if err := ValidateRego("contentPolicy", o.ContentPolicy); err != nil {
		errors = errors.Append(err)
	}

	if err := ValidateEmails("reportRecipientEmails", o.ReportRecipientEmails); err != nil {
		errors = errors.Append(err)
	}

	if len(requiredErrors) > 0 {
		return requiredErrors
	}

	if len(errors) > 0 {
		return errors
	}

	return nil
}

// SpecificationForAttribute returns the AttributeSpecification for the given attribute name key.
func (*OrgSettings) SpecificationForAttribute(name string) elemental.AttributeSpecification {

	if v, ok := OrgSettingsAttributesMap[name]; ok {
		return v
	}

	// We could not find it, so let's check on the lower case indexed spec map
	return OrgSettingsLowerCaseAttributesMap[name]
}

// AttributeSpecifications returns the full attribute specifications map.
func (*OrgSettings) AttributeSpecifications() map[string]elemental.AttributeSpecification {

	return OrgSettingsAttributesMap
}

// ValueForAttribute returns the value for the given attribute.
// This is a very advanced function that you should not need but in some
// very specific use cases.
func (o *OrgSettings) ValueForAttribute(name string) any {

	switch name {
	case "CA":
		return o.CA
	case "CACommonNames":
		return o.CACommonNames
	case "ID":
		return o.ID
	case "accessPolicy":
		return o.AccessPolicy
	case "allowSupportAccess":
		return o.AllowSupportAccess
	case "askConsent":
		return o.AskConsent
	case "assignPolicy":
		return o.AssignPolicy
	case "contentPolicy":
		return o.ContentPolicy
	case "createTime":
		return o.CreateTime
	case "disableURLDiscovery":
		return o.DisableURLDiscovery
	case "fingerprints":
		return o.Fingerprints
	case "importHash":
		return o.ImportHash
	case "importLabel":
		return o.ImportLabel
	case "namespace":
		return o.Namespace
	case "profile":
		return o.Profile
	case "propagate":
		return o.Propagate
	case "providersWithoutConsent":
		return o.ProvidersWithoutConsent
	case "reportRecipientEmails":
		return o.ReportRecipientEmails
	case "safeUsageURL":
		return o.SafeUsageURL
	case "storeInputFiles":
		return o.StoreInputFiles
	case "storeOutputFiles":
		return o.StoreOutputFiles
	case "subjectKeyIDs":
		return o.SubjectKeyIDs
	case "updateTime":
		return o.UpdateTime
	case "useRegoCodeOnly":
		return o.UseRegoCodeOnly
	case "zHash":
		return o.ZHash
	case "zone":
		return o.Zone
	}

	return nil
}

// OrgSettingsAttributesMap represents the map of attribute for OrgSettings.
var OrgSettingsAttributesMap = map[string]elemental.AttributeSpecification{
	"CA": {
		AllowedChoices: []string{},
		BSONFieldName:  "ca",
		ConvertedName:  "CA",
		Description:    `The Certificate authority to use to validate user certificates in PEM format.`,
		Exposed:        true,
		Name:           "CA",
		Stored:         true,
		Type:           "string",
	},
	"CACommonNames": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "cacommonnames",
		ConvertedName:  "CACommonNames",
		Description:    `The currently used Certificate authorities's Common Name.`,
		Exposed:        true,
		Name:           "CACommonNames",
		ReadOnly:       true,
		Stored:         true,
		SubType:        "string",
		Transient:      true,
		Type:           "list",
	},
	"ID": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "_id",
		ConvertedName:  "ID",
		Description:    `ID is the identifier of the object.`,
		Exposed:        true,
		Filterable:     true,
		Identifier:     true,
		Name:           "ID",
		Orderable:      true,
		ReadOnly:       true,
		Stored:         true,
		Type:           "string",
	},
	"AccessPolicy": {
		AllowedChoices: []string{},
		BSONFieldName:  "accesspolicy",
		ConvertedName:  "AccessPolicy",
		Description: `The rego policy that decides if the incoming request can access the
provider. If this empty, the dynamic policy transpiled from
AccessPolicies API objects will be used by Apexes. If set however,
everything computed by API objects are ignored and this becomes the final
policy.`,
		Exposed: true,
		Name:    "accessPolicy",
		Stored:  true,
		Type:    "string",
	},
	"AllowSupportAccess": {
		AllowedChoices: []string{},
		BSONFieldName:  "allowsupportaccess",
		ConvertedName:  "AllowSupportAccess",
		Description: `When enabled, an API authorization will be created in your
organization to allow the Support Team to access your organization in
read-only fashion to help you with any issue you might have.
Disable it again to remove the permissions.`,
		Exposed: true,
		Name:    "allowSupportAccess",
		Stored:  true,
		Type:    "boolean",
	},
	"AskConsent": {
		AllowedChoices: []string{},
		BSONFieldName:  "askconsent",
		ConvertedName:  "AskConsent",
		Description: `Ask the user of web applications for consent before accessing a monitored
provider, using an html splash screen the first time they connect. If
this is not set, the users of the providers can still figure out the
provider is monitored. This is a courtesy and not a security feature.`,
		Exposed: true,
		Name:    "askConsent",
		Stored:  true,
		Type:    "boolean",
	},
	"AssignPolicy": {
		AllowedChoices: []string{},
		BSONFieldName:  "assignpolicy",
		ConvertedName:  "AssignPolicy",
		Description: `The rego policy that decides in which team an user should be in. The team
will be passed to the accessPolicy. If this empty, the dynamic policy
transpiled from AssignPolicies API objects will be used by Apexes. If set
however, everything computed by API objects are ignored and this becomes
the final policy.`,
		Exposed: true,
		Name:    "assignPolicy",
		Stored:  true,
		Type:    "string",
	},
	"ContentPolicy": {
		AllowedChoices: []string{},
		BSONFieldName:  "contentpolicy",
		ConvertedName:  "ContentPolicy",
		Description: `The policy that decides how to handle the request content, once access
has been granted by accessPolicy and the content analysis was performed.
If this empty, the dynamic policy transpiled from AccessPolicies API
objects will be used by Apexes. If set however, everything computed by
API objects are ignored and this becomes the final policy.`,
		Exposed: true,
		Name:    "contentPolicy",
		Stored:  true,
		Type:    "string",
	},
	"CreateTime": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "createtime",
		ConvertedName:  "CreateTime",
		Description:    `Creation date of the object.`,
		Exposed:        true,
		Getter:         true,
		Name:           "createTime",
		Orderable:      true,
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Type:           "time",
	},
	"DisableURLDiscovery": {
		AllowedChoices: []string{},
		BSONFieldName:  "disableurldiscovery",
		ConvertedName:  "DisableURLDiscovery",
		Description:    `If true, it disables discovering of the visited URLs.`,
		Exposed:        true,
		Name:           "disableURLDiscovery",
		Stored:         true,
		Type:           "boolean",
	},
	"Fingerprints": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "fingerprints",
		ConvertedName:  "Fingerprints",
		Description:    `the fingerprint of the cas in the chain.`,
		Exposed:        true,
		Name:           "fingerprints",
		ReadOnly:       true,
		Stored:         true,
		SubType:        "string",
		Type:           "list",
	},
	"ImportHash": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "importhash",
		ConvertedName:  "ImportHash",
		CreationOnly:   true,
		Description:    `The hash of the structure used to compare with new import version.`,
		Exposed:        true,
		Getter:         true,
		Name:           "importHash",
		Setter:         true,
		Stored:         true,
		Type:           "string",
	},
	"ImportLabel": {
		AllowedChoices: []string{},
		BSONFieldName:  "importlabel",
		ConvertedName:  "ImportLabel",
		CreationOnly:   true,
		Description: `The user-defined import label that allows the system to group resources from the
same import operation.`,
		Exposed: true,
		Getter:  true,
		Name:    "importLabel",
		Setter:  true,
		Stored:  true,
		Type:    "string",
	},
	"Namespace": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "namespace",
		ConvertedName:  "Namespace",
		Description:    `The namespace of the object.`,
		Exposed:        true,
		Getter:         true,
		Name:           "namespace",
		Orderable:      true,
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Type:           "string",
	},
	"Profile": {
		AllowedChoices: []string{},
		BSONFieldName:  "profile",
		ConvertedName:  "Profile",
		Description: `A few sentences about the organization. The description must be short
and detailed. It will be used by the inference engine to decide if the content
sent by the users are relevant to your company.`,
		Exposed: true,
		Name:    "profile",
		Stored:  true,
		Type:    "string",
	},
	"Propagate": {
		AllowedChoices: []string{},
		BSONFieldName:  "propagate",
		ConvertedName:  "Propagate",
		DefaultValue:   true,
		Description:    `Propagates the object to all child namespaces. This is always true.`,
		Exposed:        true,
		Getter:         true,
		Name:           "propagate",
		Setter:         true,
		Stored:         true,
		Type:           "boolean",
	},
	"ProvidersWithoutConsent": {
		AllowedChoices: []string{},
		BSONFieldName:  "providerswithoutconsent",
		ConvertedName:  "ProvidersWithoutConsent",
		Description:    `The providers which do not request employees' consent.`,
		Exposed:        true,
		Name:           "providersWithoutConsent",
		Stored:         true,
		SubType:        "string",
		Type:           "list",
	},
	"ReportRecipientEmails": {
		AllowedChoices: []string{},
		BSONFieldName:  "reportrecipientemails",
		ConvertedName:  "ReportRecipientEmails",
		Description:    `The list of email recipients where digest reports will be sent to.`,
		Exposed:        true,
		Name:           "reportRecipientEmails",
		Stored:         true,
		SubType:        "string",
		Type:           "list",
	},
	"SafeUsageURL": {
		AllowedChoices: []string{},
		BSONFieldName:  "safeusageurl",
		ConvertedName:  "SafeUsageURL",
		Description: `A link to the AI Safe Usage Document for the organization. 
If provided, it is presented in the consent banner to the employees.`,
		Exposed: true,
		Name:    "safeUsageURL",
		Stored:  true,
		Type:    "string",
	},
	"StoreInputFiles": {
		AllowedChoices: []string{},
		BSONFieldName:  "storeinputfiles",
		ConvertedName:  "StoreInputFiles",
		Description:    `If set, files uploaded by the users will be stored.`,
		Exposed:        true,
		Name:           "storeInputFiles",
		Stored:         true,
		Type:           "boolean",
	},
	"StoreOutputFiles": {
		AllowedChoices: []string{},
		BSONFieldName:  "storeoutputfiles",
		ConvertedName:  "StoreOutputFiles",
		Description:    `If set, files sent to the users will be stored.`,
		Exposed:        true,
		Name:           "storeOutputFiles",
		Stored:         true,
		Type:           "boolean",
	},
	"SubjectKeyIDs": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "subjectkeyids",
		ConvertedName:  "SubjectKeyIDs",
		Description:    `the IDs of the subject keys of the cas in the chain.`,
		Exposed:        true,
		Name:           "subjectKeyIDs",
		ReadOnly:       true,
		Stored:         true,
		SubType:        "string",
		Type:           "list",
	},
	"UpdateTime": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "updatetime",
		ConvertedName:  "UpdateTime",
		Description:    `Last update date of the object.`,
		Exposed:        true,
		Getter:         true,
		Name:           "updateTime",
		Orderable:      true,
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Type:           "time",
	},
	"UseRegoCodeOnly": {
		AllowedChoices: []string{},
		BSONFieldName:  "useregocodeonly",
		ConvertedName:  "UseRegoCodeOnly",
		Description: `If true, it uses Rego code to define team assignment, provider access and
content policies.`,
		Exposed: true,
		Name:    "useRegoCodeOnly",
		Stored:  true,
		Type:    "boolean",
	},
}

// OrgSettingsLowerCaseAttributesMap represents the map of attribute for OrgSettings.
var OrgSettingsLowerCaseAttributesMap = map[string]elemental.AttributeSpecification{
	"ca": {
		AllowedChoices: []string{},
		BSONFieldName:  "ca",
		ConvertedName:  "CA",
		Description:    `The Certificate authority to use to validate user certificates in PEM format.`,
		Exposed:        true,
		Name:           "CA",
		Stored:         true,
		Type:           "string",
	},
	"cacommonnames": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "cacommonnames",
		ConvertedName:  "CACommonNames",
		Description:    `The currently used Certificate authorities's Common Name.`,
		Exposed:        true,
		Name:           "CACommonNames",
		ReadOnly:       true,
		Stored:         true,
		SubType:        "string",
		Transient:      true,
		Type:           "list",
	},
	"id": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "_id",
		ConvertedName:  "ID",
		Description:    `ID is the identifier of the object.`,
		Exposed:        true,
		Filterable:     true,
		Identifier:     true,
		Name:           "ID",
		Orderable:      true,
		ReadOnly:       true,
		Stored:         true,
		Type:           "string",
	},
	"accesspolicy": {
		AllowedChoices: []string{},
		BSONFieldName:  "accesspolicy",
		ConvertedName:  "AccessPolicy",
		Description: `The rego policy that decides if the incoming request can access the
provider. If this empty, the dynamic policy transpiled from
AccessPolicies API objects will be used by Apexes. If set however,
everything computed by API objects are ignored and this becomes the final
policy.`,
		Exposed: true,
		Name:    "accessPolicy",
		Stored:  true,
		Type:    "string",
	},
	"allowsupportaccess": {
		AllowedChoices: []string{},
		BSONFieldName:  "allowsupportaccess",
		ConvertedName:  "AllowSupportAccess",
		Description: `When enabled, an API authorization will be created in your
organization to allow the Support Team to access your organization in
read-only fashion to help you with any issue you might have.
Disable it again to remove the permissions.`,
		Exposed: true,
		Name:    "allowSupportAccess",
		Stored:  true,
		Type:    "boolean",
	},
	"askconsent": {
		AllowedChoices: []string{},
		BSONFieldName:  "askconsent",
		ConvertedName:  "AskConsent",
		Description: `Ask the user of web applications for consent before accessing a monitored
provider, using an html splash screen the first time they connect. If
this is not set, the users of the providers can still figure out the
provider is monitored. This is a courtesy and not a security feature.`,
		Exposed: true,
		Name:    "askConsent",
		Stored:  true,
		Type:    "boolean",
	},
	"assignpolicy": {
		AllowedChoices: []string{},
		BSONFieldName:  "assignpolicy",
		ConvertedName:  "AssignPolicy",
		Description: `The rego policy that decides in which team an user should be in. The team
will be passed to the accessPolicy. If this empty, the dynamic policy
transpiled from AssignPolicies API objects will be used by Apexes. If set
however, everything computed by API objects are ignored and this becomes
the final policy.`,
		Exposed: true,
		Name:    "assignPolicy",
		Stored:  true,
		Type:    "string",
	},
	"contentpolicy": {
		AllowedChoices: []string{},
		BSONFieldName:  "contentpolicy",
		ConvertedName:  "ContentPolicy",
		Description: `The policy that decides how to handle the request content, once access
has been granted by accessPolicy and the content analysis was performed.
If this empty, the dynamic policy transpiled from AccessPolicies API
objects will be used by Apexes. If set however, everything computed by
API objects are ignored and this becomes the final policy.`,
		Exposed: true,
		Name:    "contentPolicy",
		Stored:  true,
		Type:    "string",
	},
	"createtime": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "createtime",
		ConvertedName:  "CreateTime",
		Description:    `Creation date of the object.`,
		Exposed:        true,
		Getter:         true,
		Name:           "createTime",
		Orderable:      true,
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Type:           "time",
	},
	"disableurldiscovery": {
		AllowedChoices: []string{},
		BSONFieldName:  "disableurldiscovery",
		ConvertedName:  "DisableURLDiscovery",
		Description:    `If true, it disables discovering of the visited URLs.`,
		Exposed:        true,
		Name:           "disableURLDiscovery",
		Stored:         true,
		Type:           "boolean",
	},
	"fingerprints": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "fingerprints",
		ConvertedName:  "Fingerprints",
		Description:    `the fingerprint of the cas in the chain.`,
		Exposed:        true,
		Name:           "fingerprints",
		ReadOnly:       true,
		Stored:         true,
		SubType:        "string",
		Type:           "list",
	},
	"importhash": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "importhash",
		ConvertedName:  "ImportHash",
		CreationOnly:   true,
		Description:    `The hash of the structure used to compare with new import version.`,
		Exposed:        true,
		Getter:         true,
		Name:           "importHash",
		Setter:         true,
		Stored:         true,
		Type:           "string",
	},
	"importlabel": {
		AllowedChoices: []string{},
		BSONFieldName:  "importlabel",
		ConvertedName:  "ImportLabel",
		CreationOnly:   true,
		Description: `The user-defined import label that allows the system to group resources from the
same import operation.`,
		Exposed: true,
		Getter:  true,
		Name:    "importLabel",
		Setter:  true,
		Stored:  true,
		Type:    "string",
	},
	"namespace": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "namespace",
		ConvertedName:  "Namespace",
		Description:    `The namespace of the object.`,
		Exposed:        true,
		Getter:         true,
		Name:           "namespace",
		Orderable:      true,
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Type:           "string",
	},
	"profile": {
		AllowedChoices: []string{},
		BSONFieldName:  "profile",
		ConvertedName:  "Profile",
		Description: `A few sentences about the organization. The description must be short
and detailed. It will be used by the inference engine to decide if the content
sent by the users are relevant to your company.`,
		Exposed: true,
		Name:    "profile",
		Stored:  true,
		Type:    "string",
	},
	"propagate": {
		AllowedChoices: []string{},
		BSONFieldName:  "propagate",
		ConvertedName:  "Propagate",
		DefaultValue:   true,
		Description:    `Propagates the object to all child namespaces. This is always true.`,
		Exposed:        true,
		Getter:         true,
		Name:           "propagate",
		Setter:         true,
		Stored:         true,
		Type:           "boolean",
	},
	"providerswithoutconsent": {
		AllowedChoices: []string{},
		BSONFieldName:  "providerswithoutconsent",
		ConvertedName:  "ProvidersWithoutConsent",
		Description:    `The providers which do not request employees' consent.`,
		Exposed:        true,
		Name:           "providersWithoutConsent",
		Stored:         true,
		SubType:        "string",
		Type:           "list",
	},
	"reportrecipientemails": {
		AllowedChoices: []string{},
		BSONFieldName:  "reportrecipientemails",
		ConvertedName:  "ReportRecipientEmails",
		Description:    `The list of email recipients where digest reports will be sent to.`,
		Exposed:        true,
		Name:           "reportRecipientEmails",
		Stored:         true,
		SubType:        "string",
		Type:           "list",
	},
	"safeusageurl": {
		AllowedChoices: []string{},
		BSONFieldName:  "safeusageurl",
		ConvertedName:  "SafeUsageURL",
		Description: `A link to the AI Safe Usage Document for the organization. 
If provided, it is presented in the consent banner to the employees.`,
		Exposed: true,
		Name:    "safeUsageURL",
		Stored:  true,
		Type:    "string",
	},
	"storeinputfiles": {
		AllowedChoices: []string{},
		BSONFieldName:  "storeinputfiles",
		ConvertedName:  "StoreInputFiles",
		Description:    `If set, files uploaded by the users will be stored.`,
		Exposed:        true,
		Name:           "storeInputFiles",
		Stored:         true,
		Type:           "boolean",
	},
	"storeoutputfiles": {
		AllowedChoices: []string{},
		BSONFieldName:  "storeoutputfiles",
		ConvertedName:  "StoreOutputFiles",
		Description:    `If set, files sent to the users will be stored.`,
		Exposed:        true,
		Name:           "storeOutputFiles",
		Stored:         true,
		Type:           "boolean",
	},
	"subjectkeyids": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "subjectkeyids",
		ConvertedName:  "SubjectKeyIDs",
		Description:    `the IDs of the subject keys of the cas in the chain.`,
		Exposed:        true,
		Name:           "subjectKeyIDs",
		ReadOnly:       true,
		Stored:         true,
		SubType:        "string",
		Type:           "list",
	},
	"updatetime": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "updatetime",
		ConvertedName:  "UpdateTime",
		Description:    `Last update date of the object.`,
		Exposed:        true,
		Getter:         true,
		Name:           "updateTime",
		Orderable:      true,
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Type:           "time",
	},
	"useregocodeonly": {
		AllowedChoices: []string{},
		BSONFieldName:  "useregocodeonly",
		ConvertedName:  "UseRegoCodeOnly",
		Description: `If true, it uses Rego code to define team assignment, provider access and
content policies.`,
		Exposed: true,
		Name:    "useRegoCodeOnly",
		Stored:  true,
		Type:    "boolean",
	},
}

// SparseOrgSettingsList represents a list of SparseOrgSettings
type SparseOrgSettingsList []*SparseOrgSettings

// Identity returns the identity of the objects in the list.
func (o SparseOrgSettingsList) Identity() elemental.Identity {

	return OrgSettingsIdentity
}

// Copy returns a pointer to a copy the SparseOrgSettingsList.
func (o SparseOrgSettingsList) Copy() elemental.Identifiables {

	copy := slices.Clone(o)
	return &copy
}

// Append appends the objects to the a new copy of the SparseOrgSettingsList.
func (o SparseOrgSettingsList) Append(objects ...elemental.Identifiable) elemental.Identifiables {

	out := slices.Clone(o)
	for _, obj := range objects {
		out = append(out, obj.(*SparseOrgSettings))
	}

	return out
}

// List converts the object to an elemental.IdentifiablesList.
func (o SparseOrgSettingsList) List() elemental.IdentifiablesList {

	out := make(elemental.IdentifiablesList, len(o))
	for i := range len(o) {
		out[i] = o[i]
	}

	return out
}

// DefaultOrder returns the default ordering fields of the content.
func (o SparseOrgSettingsList) DefaultOrder() []string {

	return []string{}
}

// ToPlain returns the SparseOrgSettingsList converted to OrgSettingsList.
func (o SparseOrgSettingsList) ToPlain() elemental.IdentifiablesList {

	out := make(elemental.IdentifiablesList, len(o))
	for i := range len(o) {
		out[i] = o[i].ToPlain()
	}

	return out
}

// Version returns the version of the content.
func (o SparseOrgSettingsList) Version() int {

	return 1
}

// SparseOrgSettings represents the sparse version of a orgsettings.
type SparseOrgSettings struct {
	// The Certificate authority to use to validate user certificates in PEM format.
	CA *string `json:"CA,omitempty" msgpack:"CA,omitempty" bson:"ca,omitempty" mapstructure:"CA,omitempty"`

	// The currently used Certificate authorities's Common Name.
	CACommonNames *[]string `json:"CACommonNames,omitempty" msgpack:"CACommonNames,omitempty" bson:"cacommonnames,omitempty" mapstructure:"CACommonNames,omitempty"`

	// ID is the identifier of the object.
	ID *string `json:"ID,omitempty" msgpack:"ID,omitempty" bson:"-" mapstructure:"ID,omitempty"`

	// The rego policy that decides if the incoming request can access the
	// provider. If this empty, the dynamic policy transpiled from
	// AccessPolicies API objects will be used by Apexes. If set however,
	// everything computed by API objects are ignored and this becomes the final
	// policy.
	AccessPolicy *string `json:"accessPolicy,omitempty" msgpack:"accessPolicy,omitempty" bson:"accesspolicy,omitempty" mapstructure:"accessPolicy,omitempty"`

	// When enabled, an API authorization will be created in your
	// organization to allow the Support Team to access your organization in
	// read-only fashion to help you with any issue you might have.
	// Disable it again to remove the permissions.
	AllowSupportAccess *bool `json:"allowSupportAccess,omitempty" msgpack:"allowSupportAccess,omitempty" bson:"allowsupportaccess,omitempty" mapstructure:"allowSupportAccess,omitempty"`

	// Ask the user of web applications for consent before accessing a monitored
	// provider, using an html splash screen the first time they connect. If
	// this is not set, the users of the providers can still figure out the
	// provider is monitored. This is a courtesy and not a security feature.
	AskConsent *bool `json:"askConsent,omitempty" msgpack:"askConsent,omitempty" bson:"askconsent,omitempty" mapstructure:"askConsent,omitempty"`

	// The rego policy that decides in which team an user should be in. The team
	// will be passed to the accessPolicy. If this empty, the dynamic policy
	// transpiled from AssignPolicies API objects will be used by Apexes. If set
	// however, everything computed by API objects are ignored and this becomes
	// the final policy.
	AssignPolicy *string `json:"assignPolicy,omitempty" msgpack:"assignPolicy,omitempty" bson:"assignpolicy,omitempty" mapstructure:"assignPolicy,omitempty"`

	// The policy that decides how to handle the request content, once access
	// has been granted by accessPolicy and the content analysis was performed.
	// If this empty, the dynamic policy transpiled from AccessPolicies API
	// objects will be used by Apexes. If set however, everything computed by
	// API objects are ignored and this becomes the final policy.
	ContentPolicy *string `json:"contentPolicy,omitempty" msgpack:"contentPolicy,omitempty" bson:"contentpolicy,omitempty" mapstructure:"contentPolicy,omitempty"`

	// Creation date of the object.
	CreateTime *time.Time `json:"createTime,omitempty" msgpack:"createTime,omitempty" bson:"createtime,omitempty" mapstructure:"createTime,omitempty"`

	// If true, it disables discovering of the visited URLs.
	DisableURLDiscovery *bool `json:"disableURLDiscovery,omitempty" msgpack:"disableURLDiscovery,omitempty" bson:"disableurldiscovery,omitempty" mapstructure:"disableURLDiscovery,omitempty"`

	// the fingerprint of the cas in the chain.
	Fingerprints *[]string `json:"fingerprints,omitempty" msgpack:"fingerprints,omitempty" bson:"fingerprints,omitempty" mapstructure:"fingerprints,omitempty"`

	// The hash of the structure used to compare with new import version.
	ImportHash *string `json:"importHash,omitempty" msgpack:"importHash,omitempty" bson:"importhash,omitempty" mapstructure:"importHash,omitempty"`

	// The user-defined import label that allows the system to group resources from the
	// same import operation.
	ImportLabel *string `json:"importLabel,omitempty" msgpack:"importLabel,omitempty" bson:"importlabel,omitempty" mapstructure:"importLabel,omitempty"`

	// The namespace of the object.
	Namespace *string `json:"namespace,omitempty" msgpack:"namespace,omitempty" bson:"namespace,omitempty" mapstructure:"namespace,omitempty"`

	// A few sentences about the organization. The description must be short
	// and detailed. It will be used by the inference engine to decide if the content
	// sent by the users are relevant to your company.
	Profile *string `json:"profile,omitempty" msgpack:"profile,omitempty" bson:"profile,omitempty" mapstructure:"profile,omitempty"`

	// Propagates the object to all child namespaces. This is always true.
	Propagate *bool `json:"propagate,omitempty" msgpack:"propagate,omitempty" bson:"propagate,omitempty" mapstructure:"propagate,omitempty"`

	// The providers which do not request employees' consent.
	ProvidersWithoutConsent *[]string `json:"providersWithoutConsent,omitempty" msgpack:"providersWithoutConsent,omitempty" bson:"providerswithoutconsent,omitempty" mapstructure:"providersWithoutConsent,omitempty"`

	// The list of email recipients where digest reports will be sent to.
	ReportRecipientEmails *[]string `json:"reportRecipientEmails,omitempty" msgpack:"reportRecipientEmails,omitempty" bson:"reportrecipientemails,omitempty" mapstructure:"reportRecipientEmails,omitempty"`

	// A link to the AI Safe Usage Document for the organization.
	// If provided, it is presented in the consent banner to the employees.
	SafeUsageURL *string `json:"safeUsageURL,omitempty" msgpack:"safeUsageURL,omitempty" bson:"safeusageurl,omitempty" mapstructure:"safeUsageURL,omitempty"`

	// If set, files uploaded by the users will be stored.
	StoreInputFiles *bool `json:"storeInputFiles,omitempty" msgpack:"storeInputFiles,omitempty" bson:"storeinputfiles,omitempty" mapstructure:"storeInputFiles,omitempty"`

	// If set, files sent to the users will be stored.
	StoreOutputFiles *bool `json:"storeOutputFiles,omitempty" msgpack:"storeOutputFiles,omitempty" bson:"storeoutputfiles,omitempty" mapstructure:"storeOutputFiles,omitempty"`

	// the IDs of the subject keys of the cas in the chain.
	SubjectKeyIDs *[]string `json:"subjectKeyIDs,omitempty" msgpack:"subjectKeyIDs,omitempty" bson:"subjectkeyids,omitempty" mapstructure:"subjectKeyIDs,omitempty"`

	// Last update date of the object.
	UpdateTime *time.Time `json:"updateTime,omitempty" msgpack:"updateTime,omitempty" bson:"updatetime,omitempty" mapstructure:"updateTime,omitempty"`

	// If true, it uses Rego code to define team assignment, provider access and
	// content policies.
	UseRegoCodeOnly *bool `json:"useRegoCodeOnly,omitempty" msgpack:"useRegoCodeOnly,omitempty" bson:"useregocodeonly,omitempty" mapstructure:"useRegoCodeOnly,omitempty"`

	// Hash of the object used to shard the data.
	ZHash *int `json:"-" msgpack:"-" bson:"zhash,omitempty" mapstructure:"-,omitempty"`

	// Sharding zone.
	Zone *int `json:"-" msgpack:"-" bson:"zone,omitempty" mapstructure:"-,omitempty"`

	ModelVersion int `json:"-" msgpack:"-" bson:"_modelversion"`
}

// NewSparseOrgSettings returns a new  SparseOrgSettings.
func NewSparseOrgSettings() *SparseOrgSettings {
	return &SparseOrgSettings{}
}

// Identity returns the Identity of the sparse object.
func (o *SparseOrgSettings) Identity() elemental.Identity {

	return OrgSettingsIdentity
}

// Identifier returns the value of the sparse object's unique identifier.
func (o *SparseOrgSettings) Identifier() string {

	if o.ID == nil {
		return ""
	}
	return *o.ID
}

// SetIdentifier sets the value of the sparse object's unique identifier.
func (o *SparseOrgSettings) SetIdentifier(id string) {

	if id != "" {
		o.ID = &id
	} else {
		o.ID = nil
	}
}

// GetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *SparseOrgSettings) GetBSON() (any, error) {

	if o == nil {
		return nil, nil
	}

	s := &mongoAttributesSparseOrgSettings{}

	if o.CA != nil {
		s.CA = o.CA
	}
	if o.CACommonNames != nil {
		s.CACommonNames = o.CACommonNames
	}
	if o.ID != nil {
		s.ID = bson.ObjectIdHex(*o.ID)
	}
	if o.AccessPolicy != nil {
		s.AccessPolicy = o.AccessPolicy
	}
	if o.AllowSupportAccess != nil {
		s.AllowSupportAccess = o.AllowSupportAccess
	}
	if o.AskConsent != nil {
		s.AskConsent = o.AskConsent
	}
	if o.AssignPolicy != nil {
		s.AssignPolicy = o.AssignPolicy
	}
	if o.ContentPolicy != nil {
		s.ContentPolicy = o.ContentPolicy
	}
	if o.CreateTime != nil {
		s.CreateTime = o.CreateTime
	}
	if o.DisableURLDiscovery != nil {
		s.DisableURLDiscovery = o.DisableURLDiscovery
	}
	if o.Fingerprints != nil {
		s.Fingerprints = o.Fingerprints
	}
	if o.ImportHash != nil {
		s.ImportHash = o.ImportHash
	}
	if o.ImportLabel != nil {
		s.ImportLabel = o.ImportLabel
	}
	if o.Namespace != nil {
		s.Namespace = o.Namespace
	}
	if o.Profile != nil {
		s.Profile = o.Profile
	}
	if o.Propagate != nil {
		s.Propagate = o.Propagate
	}
	if o.ProvidersWithoutConsent != nil {
		s.ProvidersWithoutConsent = o.ProvidersWithoutConsent
	}
	if o.ReportRecipientEmails != nil {
		s.ReportRecipientEmails = o.ReportRecipientEmails
	}
	if o.SafeUsageURL != nil {
		s.SafeUsageURL = o.SafeUsageURL
	}
	if o.StoreInputFiles != nil {
		s.StoreInputFiles = o.StoreInputFiles
	}
	if o.StoreOutputFiles != nil {
		s.StoreOutputFiles = o.StoreOutputFiles
	}
	if o.SubjectKeyIDs != nil {
		s.SubjectKeyIDs = o.SubjectKeyIDs
	}
	if o.UpdateTime != nil {
		s.UpdateTime = o.UpdateTime
	}
	if o.UseRegoCodeOnly != nil {
		s.UseRegoCodeOnly = o.UseRegoCodeOnly
	}
	if o.ZHash != nil {
		s.ZHash = o.ZHash
	}
	if o.Zone != nil {
		s.Zone = o.Zone
	}

	return s, nil
}

// SetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *SparseOrgSettings) SetBSON(raw bson.Raw) error {

	if o == nil {
		return nil
	}

	s := &mongoAttributesSparseOrgSettings{}
	if err := raw.Unmarshal(s); err != nil {
		return err
	}

	if s.CA != nil {
		o.CA = s.CA
	}
	if s.CACommonNames != nil {
		o.CACommonNames = s.CACommonNames
	}
	id := s.ID.Hex()
	o.ID = &id
	if s.AccessPolicy != nil {
		o.AccessPolicy = s.AccessPolicy
	}
	if s.AllowSupportAccess != nil {
		o.AllowSupportAccess = s.AllowSupportAccess
	}
	if s.AskConsent != nil {
		o.AskConsent = s.AskConsent
	}
	if s.AssignPolicy != nil {
		o.AssignPolicy = s.AssignPolicy
	}
	if s.ContentPolicy != nil {
		o.ContentPolicy = s.ContentPolicy
	}
	if s.CreateTime != nil {
		o.CreateTime = s.CreateTime
	}
	if s.DisableURLDiscovery != nil {
		o.DisableURLDiscovery = s.DisableURLDiscovery
	}
	if s.Fingerprints != nil {
		o.Fingerprints = s.Fingerprints
	}
	if s.ImportHash != nil {
		o.ImportHash = s.ImportHash
	}
	if s.ImportLabel != nil {
		o.ImportLabel = s.ImportLabel
	}
	if s.Namespace != nil {
		o.Namespace = s.Namespace
	}
	if s.Profile != nil {
		o.Profile = s.Profile
	}
	if s.Propagate != nil {
		o.Propagate = s.Propagate
	}
	if s.ProvidersWithoutConsent != nil {
		o.ProvidersWithoutConsent = s.ProvidersWithoutConsent
	}
	if s.ReportRecipientEmails != nil {
		o.ReportRecipientEmails = s.ReportRecipientEmails
	}
	if s.SafeUsageURL != nil {
		o.SafeUsageURL = s.SafeUsageURL
	}
	if s.StoreInputFiles != nil {
		o.StoreInputFiles = s.StoreInputFiles
	}
	if s.StoreOutputFiles != nil {
		o.StoreOutputFiles = s.StoreOutputFiles
	}
	if s.SubjectKeyIDs != nil {
		o.SubjectKeyIDs = s.SubjectKeyIDs
	}
	if s.UpdateTime != nil {
		o.UpdateTime = s.UpdateTime
	}
	if s.UseRegoCodeOnly != nil {
		o.UseRegoCodeOnly = s.UseRegoCodeOnly
	}
	if s.ZHash != nil {
		o.ZHash = s.ZHash
	}
	if s.Zone != nil {
		o.Zone = s.Zone
	}

	return nil
}

// Version returns the hardcoded version of the model.
func (o *SparseOrgSettings) Version() int {

	return 1
}

// ToPlain returns the plain version of the sparse model.
func (o *SparseOrgSettings) ToPlain() elemental.PlainIdentifiable {

	out := NewOrgSettings()
	if o.CA != nil {
		out.CA = *o.CA
	}
	if o.CACommonNames != nil {
		out.CACommonNames = *o.CACommonNames
	}
	if o.ID != nil {
		out.ID = *o.ID
	}
	if o.AccessPolicy != nil {
		out.AccessPolicy = *o.AccessPolicy
	}
	if o.AllowSupportAccess != nil {
		out.AllowSupportAccess = *o.AllowSupportAccess
	}
	if o.AskConsent != nil {
		out.AskConsent = *o.AskConsent
	}
	if o.AssignPolicy != nil {
		out.AssignPolicy = *o.AssignPolicy
	}
	if o.ContentPolicy != nil {
		out.ContentPolicy = *o.ContentPolicy
	}
	if o.CreateTime != nil {
		out.CreateTime = *o.CreateTime
	}
	if o.DisableURLDiscovery != nil {
		out.DisableURLDiscovery = *o.DisableURLDiscovery
	}
	if o.Fingerprints != nil {
		out.Fingerprints = *o.Fingerprints
	}
	if o.ImportHash != nil {
		out.ImportHash = *o.ImportHash
	}
	if o.ImportLabel != nil {
		out.ImportLabel = *o.ImportLabel
	}
	if o.Namespace != nil {
		out.Namespace = *o.Namespace
	}
	if o.Profile != nil {
		out.Profile = *o.Profile
	}
	if o.Propagate != nil {
		out.Propagate = *o.Propagate
	}
	if o.ProvidersWithoutConsent != nil {
		out.ProvidersWithoutConsent = *o.ProvidersWithoutConsent
	}
	if o.ReportRecipientEmails != nil {
		out.ReportRecipientEmails = *o.ReportRecipientEmails
	}
	if o.SafeUsageURL != nil {
		out.SafeUsageURL = *o.SafeUsageURL
	}
	if o.StoreInputFiles != nil {
		out.StoreInputFiles = *o.StoreInputFiles
	}
	if o.StoreOutputFiles != nil {
		out.StoreOutputFiles = *o.StoreOutputFiles
	}
	if o.SubjectKeyIDs != nil {
		out.SubjectKeyIDs = *o.SubjectKeyIDs
	}
	if o.UpdateTime != nil {
		out.UpdateTime = *o.UpdateTime
	}
	if o.UseRegoCodeOnly != nil {
		out.UseRegoCodeOnly = *o.UseRegoCodeOnly
	}
	if o.ZHash != nil {
		out.ZHash = *o.ZHash
	}
	if o.Zone != nil {
		out.Zone = *o.Zone
	}

	return out
}

// GetCreateTime returns the CreateTime of the receiver.
func (o *SparseOrgSettings) GetCreateTime() (out time.Time) {

	if o.CreateTime == nil {
		return
	}

	return *o.CreateTime
}

// SetCreateTime sets the property CreateTime of the receiver using the address of the given value.
func (o *SparseOrgSettings) SetCreateTime(createTime time.Time) {

	o.CreateTime = &createTime
}

// GetImportHash returns the ImportHash of the receiver.
func (o *SparseOrgSettings) GetImportHash() (out string) {

	if o.ImportHash == nil {
		return
	}

	return *o.ImportHash
}

// SetImportHash sets the property ImportHash of the receiver using the address of the given value.
func (o *SparseOrgSettings) SetImportHash(importHash string) {

	o.ImportHash = &importHash
}

// GetImportLabel returns the ImportLabel of the receiver.
func (o *SparseOrgSettings) GetImportLabel() (out string) {

	if o.ImportLabel == nil {
		return
	}

	return *o.ImportLabel
}

// SetImportLabel sets the property ImportLabel of the receiver using the address of the given value.
func (o *SparseOrgSettings) SetImportLabel(importLabel string) {

	o.ImportLabel = &importLabel
}

// GetNamespace returns the Namespace of the receiver.
func (o *SparseOrgSettings) GetNamespace() (out string) {

	if o.Namespace == nil {
		return
	}

	return *o.Namespace
}

// SetNamespace sets the property Namespace of the receiver using the address of the given value.
func (o *SparseOrgSettings) SetNamespace(namespace string) {

	o.Namespace = &namespace
}

// GetPropagate returns the Propagate of the receiver.
func (o *SparseOrgSettings) GetPropagate() (out bool) {

	if o.Propagate == nil {
		return
	}

	return *o.Propagate
}

// SetPropagate sets the property Propagate of the receiver using the address of the given value.
func (o *SparseOrgSettings) SetPropagate(propagate bool) {

	o.Propagate = &propagate
}

// GetUpdateTime returns the UpdateTime of the receiver.
func (o *SparseOrgSettings) GetUpdateTime() (out time.Time) {

	if o.UpdateTime == nil {
		return
	}

	return *o.UpdateTime
}

// SetUpdateTime sets the property UpdateTime of the receiver using the address of the given value.
func (o *SparseOrgSettings) SetUpdateTime(updateTime time.Time) {

	o.UpdateTime = &updateTime
}

// DeepCopy returns a deep copy if the SparseOrgSettings.
func (o *SparseOrgSettings) DeepCopy() *SparseOrgSettings {

	if o == nil {
		return nil
	}

	out := &SparseOrgSettings{}
	o.DeepCopyInto(out)

	return out
}

// DeepCopyInto copies the receiver into the given *SparseOrgSettings.
func (o *SparseOrgSettings) DeepCopyInto(out *SparseOrgSettings) {

	target, err := copystructure.Copy(o)
	if err != nil {
		panic(fmt.Sprintf("Unable to deepcopy SparseOrgSettings: %s", err))
	}

	*out = *target.(*SparseOrgSettings)
}

type mongoAttributesOrgSettings struct {
	CA                      string        `bson:"ca"`
	CACommonNames           []string      `bson:"cacommonnames"`
	ID                      bson.ObjectId `bson:"_id,omitempty"`
	AccessPolicy            string        `bson:"accesspolicy"`
	AllowSupportAccess      bool          `bson:"allowsupportaccess"`
	AskConsent              bool          `bson:"askconsent"`
	AssignPolicy            string        `bson:"assignpolicy"`
	ContentPolicy           string        `bson:"contentpolicy"`
	CreateTime              time.Time     `bson:"createtime"`
	DisableURLDiscovery     bool          `bson:"disableurldiscovery"`
	Fingerprints            []string      `bson:"fingerprints"`
	ImportHash              string        `bson:"importhash,omitempty"`
	ImportLabel             string        `bson:"importlabel,omitempty"`
	Namespace               string        `bson:"namespace,omitempty"`
	Profile                 string        `bson:"profile"`
	Propagate               bool          `bson:"propagate"`
	ProvidersWithoutConsent []string      `bson:"providerswithoutconsent"`
	ReportRecipientEmails   []string      `bson:"reportrecipientemails"`
	SafeUsageURL            string        `bson:"safeusageurl"`
	StoreInputFiles         bool          `bson:"storeinputfiles"`
	StoreOutputFiles        bool          `bson:"storeoutputfiles"`
	SubjectKeyIDs           []string      `bson:"subjectkeyids"`
	UpdateTime              time.Time     `bson:"updatetime"`
	UseRegoCodeOnly         bool          `bson:"useregocodeonly"`
	ZHash                   int           `bson:"zhash"`
	Zone                    int           `bson:"zone"`
}
type mongoAttributesSparseOrgSettings struct {
	CA                      *string       `bson:"ca,omitempty"`
	CACommonNames           *[]string     `bson:"cacommonnames,omitempty"`
	ID                      bson.ObjectId `bson:"_id,omitempty"`
	AccessPolicy            *string       `bson:"accesspolicy,omitempty"`
	AllowSupportAccess      *bool         `bson:"allowsupportaccess,omitempty"`
	AskConsent              *bool         `bson:"askconsent,omitempty"`
	AssignPolicy            *string       `bson:"assignpolicy,omitempty"`
	ContentPolicy           *string       `bson:"contentpolicy,omitempty"`
	CreateTime              *time.Time    `bson:"createtime,omitempty"`
	DisableURLDiscovery     *bool         `bson:"disableurldiscovery,omitempty"`
	Fingerprints            *[]string     `bson:"fingerprints,omitempty"`
	ImportHash              *string       `bson:"importhash,omitempty"`
	ImportLabel             *string       `bson:"importlabel,omitempty"`
	Namespace               *string       `bson:"namespace,omitempty"`
	Profile                 *string       `bson:"profile,omitempty"`
	Propagate               *bool         `bson:"propagate,omitempty"`
	ProvidersWithoutConsent *[]string     `bson:"providerswithoutconsent,omitempty"`
	ReportRecipientEmails   *[]string     `bson:"reportrecipientemails,omitempty"`
	SafeUsageURL            *string       `bson:"safeusageurl,omitempty"`
	StoreInputFiles         *bool         `bson:"storeinputfiles,omitempty"`
	StoreOutputFiles        *bool         `bson:"storeoutputfiles,omitempty"`
	SubjectKeyIDs           *[]string     `bson:"subjectkeyids,omitempty"`
	UpdateTime              *time.Time    `bson:"updatetime,omitempty"`
	UseRegoCodeOnly         *bool         `bson:"useregocodeonly,omitempty"`
	ZHash                   *int          `bson:"zhash,omitempty"`
	Zone                    *int          `bson:"zone,omitempty"`
}
