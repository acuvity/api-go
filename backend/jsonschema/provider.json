{
  "$extends": [
    "@sharded",
    "@identifiable",
    "@timed",
    "@importable",
    "@auto-propagated"
  ],
  "$friendlyName": "Provider",
  "$friendlyNamePlural": "Providers",
  "$modelName": "Provider",
  "$modelPackage": "lain",
  "$modelResourceName": "providers",
  "$modelRestName": "provider",
  "additionalProperties": false,
  "description": "Providers are services that can be accessed using the APEX. These can both be external services as well as internal services built/deployed within the organization.",
  "properties": {
    "ID": {
      "$friendlyName": "ID",
      "$readOnly": true,
      "description": "ID is the identifier of the object.",
      "title": "ID",
      "type": [
        "string",
        "null"
      ]
    },
    "analyzeOutput": {
      "$friendlyName": "Analyze Output",
      "description": "If enabled, run the analysis pipelines on the provider output. No policy will be applied, but the response will be analyzed and classified.",
      "title": "analyzeOutput",
      "type": [
        "boolean",
        "null"
      ]
    },
    "category": {
      "$friendlyName": "Provider Category",
      "$required": true,
      "description": "The category of the provider.",
      "enum": [
        "User",
        "App"
      ],
      "title": "category"
    },
    "createTime": {
      "$friendlyName": "CreateTime",
      "$readOnly": true,
      "description": "Creation date of the object.",
      "title": "createTime",
      "type": [
        "string",
        "null"
      ]
    },
    "description": {
      "$friendlyName": "Description",
      "description": "The description of the provider.",
      "title": "description",
      "type": [
        "string",
        "null"
      ]
    },
    "errorTransformer": {
      "$friendlyName": "Error Transformer",
      "$ref": "errortransformer.json",
      "description": "Use to transform an error before sending it back to the client.",
      "title": "errorTransformer"
    },
    "experimental": {
      "$friendlyName": "Experimental",
      "description": "If true, consider this provider as experimental. It will require to use a custom PAC Config to make it usable from the proxy.pac.",
      "title": "experimental",
      "type": [
        "boolean",
        "null"
      ]
    },
    "extractors": {
      "$friendlyName": "Extractors",
      "description": "List of extractors for the provider.",
      "items": {
        "$ref": "extractorref.json"
      },
      "title": "extractors",
      "type": "array"
    },
    "friendlyName": {
      "$friendlyName": "Friendly Name",
      "$required": true,
      "description": "Friendly Name of the provider.",
      "title": "friendlyName",
      "type": "string"
    },
    "hosts": {
      "$friendlyName": "Hosts",
      "description": "Hosts supported by the providers.",
      "items": {
        "$ref": "host.json"
      },
      "title": "hosts",
      "type": "array"
    },
    "icon": {
      "$friendlyName": "Icon",
      "description": "The icon of the provider, base64 encoded.",
      "title": "icon",
      "type": [
        "string",
        "null"
      ]
    },
    "importHash": {
      "$creationOnly": true,
      "$friendlyName": "ImportHash",
      "description": "The hash of the structure used to compare with new import version.",
      "title": "importHash",
      "type": [
        "string",
        "null"
      ]
    },
    "importLabel": {
      "$creationOnly": true,
      "$friendlyName": "ImportLabel",
      "description": "The user-defined import label that allows the system to group resources from the same import operation.",
      "title": "importLabel",
      "type": [
        "string",
        "null"
      ]
    },
    "injectors": {
      "$friendlyName": "Injectors",
      "description": "Defines injection point for javascript snippet.",
      "items": {
        "$ref": "injector.json"
      },
      "title": "injectors",
      "type": "array"
    },
    "lib": {
      "$friendlyName": "Lib",
      "description": "If set, this snippet of lua will available in all extractors of the provider, acting as an effective library. It must be a valid lua module. It will be available to all extractor by doing local plib = require('plib').",
      "title": "lib",
      "type": [
        "string",
        "null"
      ]
    },
    "mappers": {
      "$friendlyName": "Mappers",
      "description": "List of user mappers.",
      "items": {
        "$ref": "mapper.json"
      },
      "title": "mappers",
      "type": "array"
    },
    "name": {
      "$friendlyName": "Name",
      "$required": true,
      "description": "Name of the provider.",
      "title": "name",
      "type": "string"
    },
    "namespace": {
      "$friendlyName": "Namespace",
      "$readOnly": true,
      "description": "The namespace of the object.",
      "title": "namespace",
      "type": [
        "string",
        "null"
      ]
    },
    "propagate": {
      "$defaultValue": true,
      "$friendlyName": "Propagate",
      "description": "Propagates the object to all child namespaces. This is always true.",
      "title": "propagate",
      "type": [
        "boolean",
        "null"
      ]
    },
    "riskScore": {
      "$friendlyName": "Risk Score",
      "description": "The latest risk score of the provider.",
      "title": "riskScore",
      "type": [
        "number",
        "null"
      ]
    },
    "status": {
      "$defaultValue": "Stable",
      "$friendlyName": "Status",
      "$required": true,
      "description": "The support status of the provider.",
      "enum": [
        "Stable",
        "Unstable"
      ],
      "title": "status"
    },
    "tokenSwap": {
      "$friendlyName": "TokenSwap",
      "description": "If true, consider the incoming calls to use an acuvity token and swap them using registered providertokens.",
      "title": "tokenSwap",
      "type": [
        "boolean",
        "null"
      ]
    },
    "trustedCA": {
      "$friendlyName": "Trusted CA",
      "description": "If set, additionally trust the Certificate Authorities from the PEM data. This is useful when working on a custom provider using a self signed CA chain.",
      "title": "trustedCA",
      "type": [
        "string",
        "null"
      ]
    },
    "updateTime": {
      "$friendlyName": "UpdateTime",
      "$readOnly": true,
      "description": "Last update date of the object.",
      "title": "updateTime",
      "type": [
        "string",
        "null"
      ]
    },
    "upstreamUnsecure": {
      "$friendlyName": "UpstreamUnsecure",
      "description": "If enabled, force the ustream scheme to be HTTP instead of https. Mostly use for dev purposes.",
      "title": "upstreamUnsecure",
      "type": [
        "boolean",
        "null"
      ]
    },
    "webHost": {
      "$friendlyName": "Web Host",
      "description": "The main hosts for marketing and legal materials content. This is used to link some HQ domain to the actual provider domain. For instance webHost for mail.superhuman.com should be superhuman.com.",
      "title": "webHost",
      "type": [
        "string",
        "null"
      ]
    }
  },
  "required": [
    "category",
    "friendlyName",
    "name",
    "status"
  ],
  "title": "Provider",
  "type": "object"
}