{
  "$extends": [],
  "$friendlyName": "App Component",
  "$friendlyNamePlural": "App Components",
  "$modelName": "AppComponent",
  "$modelPackage": "lain",
  "$modelResourceName": "appcomponents",
  "$modelRestName": "appcomponent",
  "additionalProperties": true,
  "description": "Represents a particular component of the application.",
  "properties": {
    "CAInjectionEnabled": {
      "$friendlyName": "CA Injection Enabled",
      "description": "EXPERIMENTAL. If egress mode is inline, the Apex will act as a transparent proxy. The certificates that will be served by the proxy are generated by the Apex itself which are issued by a dynamic TLS CA. If you enable this feature, the matching app component instances will get the CA certificate dynamically injected into the system trust store.",
      "title": "CAInjectionEnabled",
      "type": [
        "boolean",
        "null"
      ]
    },
    "description": {
      "$friendlyName": "Description",
      "description": "The description of the component.",
      "title": "description",
      "type": [
        "string",
        "null"
      ]
    },
    "egressMode": {
      "$defaultValue": "Disabled",
      "$friendlyName": "Egress Mode",
      "description": "The egress datapath mode to use for network traffic going out to providers for this application component. By default this is set to disabled. However, this can be changed to mirror traffic where the Apex is only providing visibility with no possibility of any access or content policies to take effect. Or this can be set to inline in which case all traffic to providers will be redirected to the Apex which acts as a transparent proxy in this case. In this mode access and content policies will take effect.",
      "enum": [
        "Disabled",
        "Mirror",
        "Inline"
      ],
      "title": "egressMode"
    },
    "ingressProviderConfigs": {
      "$friendlyName": "Ingress Provider Configs",
      "description": "The ingress provider configurations to serve for this application. If this app component serves multiple ingress providers, you must define an ingress provider config for every single one of them. If you need access to the same ingress provider over different port configurations (for example one serving https while another port serves plain http), then you must define two ingress provider configurations and reuse the same provider name within the configuration.",
      "items": {
        "$ref": "ingressproviderconfig.json"
      },
      "title": "ingressProviderConfigs",
      "type": "array"
    },
    "name": {
      "$friendlyName": "Name",
      "$required": true,
      "description": "The component name.",
      "pattern": "^[a-zA-Z0-9-_]+$",
      "title": "name",
      "type": "string"
    },
    "selector": {
      "$friendlyName": "Selector",
      "description": "A tag expression that identify an application component based on downstream labels.",
      "items": {
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "title": "selector",
      "type": "array"
    },
    "token": {
      "$friendlyName": "Token",
      "$readOnly": true,
      "description": "The token for the current component. Only populated by the backend when the caller's claim match the parents app.subject.",
      "title": "token",
      "type": [
        "string",
        "null"
      ]
    }
  },
  "required": [
    "name"
  ],
  "title": "AppComponent",
  "type": "object"
}