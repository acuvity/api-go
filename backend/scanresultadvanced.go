// Code generated by elegen. DO NOT EDIT.
// Source: go.acuvity.ai/elemental (templates/model.gotpl)

package api

import (
	"fmt"

	"github.com/globalsign/mgo/bson"
	"github.com/mitchellh/copystructure"
	"go.acuvity.ai/elemental"
)

// ScanResultAdvancedStatusValue represents the possible values for attribute "status".
type ScanResultAdvancedStatusValue string

const (
	// ScanResultAdvancedStatusFailed represents the value Failed.
	ScanResultAdvancedStatusFailed ScanResultAdvancedStatusValue = "Failed"

	// ScanResultAdvancedStatusPass represents the value Pass.
	ScanResultAdvancedStatusPass ScanResultAdvancedStatusValue = "Pass"

	// ScanResultAdvancedStatusSkipped represents the value Skipped.
	ScanResultAdvancedStatusSkipped ScanResultAdvancedStatusValue = "Skipped"
)

// ScanResultAdvanced represents the model of a scanresultadvanced
type ScanResultAdvanced struct {
	// The description of the scan.
	Description string `json:"description" msgpack:"description" bson:"description" mapstructure:"description,omitempty"`

	// If the status is 'Failed', holds the user facing error.
	Error string `json:"error" msgpack:"error" bson:"error" mapstructure:"error,omitempty"`

	// The name of the scan.
	Name string `json:"name" msgpack:"name" bson:"name" mapstructure:"name,omitempty"`

	// Status of the scan.
	Status ScanResultAdvancedStatusValue `json:"status" msgpack:"status" bson:"status" mapstructure:"status,omitempty"`

	ModelVersion int `json:"-" msgpack:"-" bson:"_modelversion"`
}

// NewScanResultAdvanced returns a new *ScanResultAdvanced
func NewScanResultAdvanced() *ScanResultAdvanced {

	return &ScanResultAdvanced{
		ModelVersion: 1,
	}
}

// GetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *ScanResultAdvanced) GetBSON() (any, error) {

	if o == nil {
		return nil, nil
	}

	s := &mongoAttributesScanResultAdvanced{}

	s.Description = o.Description
	s.Error = o.Error
	s.Name = o.Name
	s.Status = o.Status

	return s, nil
}

// SetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *ScanResultAdvanced) SetBSON(raw bson.Raw) error {

	if o == nil || raw.Kind == bson.ElementNil {
		return bson.ErrSetZero
	}

	s := &mongoAttributesScanResultAdvanced{}
	if err := raw.Unmarshal(s); err != nil {
		return err
	}

	o.Description = s.Description
	o.Error = s.Error
	o.Name = s.Name
	o.Status = s.Status

	return nil
}

// BleveType implements the bleve.Classifier Interface.
func (o *ScanResultAdvanced) BleveType() string {

	return "scanresultadvanced"
}

// DeepCopy returns a deep copy if the ScanResultAdvanced.
func (o *ScanResultAdvanced) DeepCopy() *ScanResultAdvanced {

	if o == nil {
		return nil
	}

	out := &ScanResultAdvanced{}
	o.DeepCopyInto(out)

	return out
}

// DeepCopyInto copies the receiver into the given *ScanResultAdvanced.
func (o *ScanResultAdvanced) DeepCopyInto(out *ScanResultAdvanced) {

	target, err := copystructure.Copy(o)
	if err != nil {
		panic(fmt.Sprintf("Unable to deepcopy ScanResultAdvanced: %s", err))
	}

	*out = *target.(*ScanResultAdvanced)
}

// Validate valides the current information stored into the structure.
func (o *ScanResultAdvanced) Validate() error {

	errors := elemental.Errors{}
	requiredErrors := elemental.Errors{}

	if err := elemental.ValidateRequiredString("description", o.Description); err != nil {
		requiredErrors = requiredErrors.Append(err)
	}

	if err := elemental.ValidateRequiredString("name", o.Name); err != nil {
		requiredErrors = requiredErrors.Append(err)
	}

	if err := elemental.ValidateRequiredString("status", string(o.Status)); err != nil {
		requiredErrors = requiredErrors.Append(err)
	}

	if err := elemental.ValidateStringInList("status", string(o.Status), []string{"Pass", "Failed", "Skipped"}, false); err != nil {
		errors = errors.Append(err)
	}

	if len(requiredErrors) > 0 {
		return requiredErrors
	}

	if len(errors) > 0 {
		return errors
	}

	return nil
}

// SpecificationForAttribute returns the AttributeSpecification for the given attribute name key.
func (*ScanResultAdvanced) SpecificationForAttribute(name string) elemental.AttributeSpecification {

	if v, ok := ScanResultAdvancedAttributesMap[name]; ok {
		return v
	}

	// We could not find it, so let's check on the lower case indexed spec map
	return ScanResultAdvancedLowerCaseAttributesMap[name]
}

// AttributeSpecifications returns the full attribute specifications map.
func (*ScanResultAdvanced) AttributeSpecifications() map[string]elemental.AttributeSpecification {

	return ScanResultAdvancedAttributesMap
}

// ValueForAttribute returns the value for the given attribute.
// This is a very advanced function that you should not need but in some
// very specific use cases.
func (o *ScanResultAdvanced) ValueForAttribute(name string) any {

	switch name {
	case "description":
		return o.Description
	case "error":
		return o.Error
	case "name":
		return o.Name
	case "status":
		return o.Status
	}

	return nil
}

// ScanResultAdvancedAttributesMap represents the map of attribute for ScanResultAdvanced.
var ScanResultAdvancedAttributesMap = map[string]elemental.AttributeSpecification{
	"Description": {
		AllowedChoices: []string{},
		BSONFieldName:  "description",
		ConvertedName:  "Description",
		Description:    `The description of the scan.`,
		Exposed:        true,
		Name:           "description",
		Required:       true,
		Stored:         true,
		Type:           "string",
	},
	"Error": {
		AllowedChoices: []string{},
		BSONFieldName:  "error",
		ConvertedName:  "Error",
		Description:    `If the status is 'Failed', holds the user facing error.`,
		Exposed:        true,
		Name:           "error",
		Stored:         true,
		Type:           "string",
	},
	"Name": {
		AllowedChoices: []string{},
		BSONFieldName:  "name",
		ConvertedName:  "Name",
		Description:    `The name of the scan.`,
		Exposed:        true,
		Name:           "name",
		Required:       true,
		Stored:         true,
		Type:           "string",
	},
	"Status": {
		AllowedChoices: []string{"Pass", "Failed", "Skipped"},
		BSONFieldName:  "status",
		ConvertedName:  "Status",
		Description:    `Status of the scan.`,
		Exposed:        true,
		Name:           "status",
		Required:       true,
		Stored:         true,
		Type:           "enum",
	},
}

// ScanResultAdvancedLowerCaseAttributesMap represents the map of attribute for ScanResultAdvanced.
var ScanResultAdvancedLowerCaseAttributesMap = map[string]elemental.AttributeSpecification{
	"description": {
		AllowedChoices: []string{},
		BSONFieldName:  "description",
		ConvertedName:  "Description",
		Description:    `The description of the scan.`,
		Exposed:        true,
		Name:           "description",
		Required:       true,
		Stored:         true,
		Type:           "string",
	},
	"error": {
		AllowedChoices: []string{},
		BSONFieldName:  "error",
		ConvertedName:  "Error",
		Description:    `If the status is 'Failed', holds the user facing error.`,
		Exposed:        true,
		Name:           "error",
		Stored:         true,
		Type:           "string",
	},
	"name": {
		AllowedChoices: []string{},
		BSONFieldName:  "name",
		ConvertedName:  "Name",
		Description:    `The name of the scan.`,
		Exposed:        true,
		Name:           "name",
		Required:       true,
		Stored:         true,
		Type:           "string",
	},
	"status": {
		AllowedChoices: []string{"Pass", "Failed", "Skipped"},
		BSONFieldName:  "status",
		ConvertedName:  "Status",
		Description:    `Status of the scan.`,
		Exposed:        true,
		Name:           "status",
		Required:       true,
		Stored:         true,
		Type:           "enum",
	},
}

type mongoAttributesScanResultAdvanced struct {
	Description string                        `bson:"description"`
	Error       string                        `bson:"error"`
	Name        string                        `bson:"name"`
	Status      ScanResultAdvancedStatusValue `bson:"status"`
}
