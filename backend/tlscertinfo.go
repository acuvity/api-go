// Code generated by elegen. DO NOT EDIT.
// Source: go.acuvity.ai/elemental (templates/model.gotpl)

package api

import (
	"fmt"
	"time"

	"github.com/globalsign/mgo/bson"
	"github.com/mitchellh/copystructure"
	"go.acuvity.ai/elemental"
)

// TLSCertInfo represents the model of a tlscertinfo
type TLSCertInfo struct {
	// The DNS Alt Names.
	DNSAltNames []string `json:"DNSAltNames" msgpack:"DNSAltNames" bson:"dnsaltnames" mapstructure:"DNSAltNames,omitempty"`

	// The IP Alt Names.
	IPAltNames []string `json:"IPAltNames" msgpack:"IPAltNames" bson:"ipaltnames" mapstructure:"IPAltNames,omitempty"`

	// The name of the subject.
	CommonName string `json:"commonName" msgpack:"commonName" bson:"commonname" mapstructure:"commonName,omitempty"`

	// The countries of the subject.
	Countries []string `json:"countries" msgpack:"countries" bson:"countries" mapstructure:"countries,omitempty"`

	// The expiration date of the certificate.
	Expiration time.Time `json:"expiration" msgpack:"expiration" bson:"expiration" mapstructure:"expiration,omitempty"`

	// The name of the issuer.
	IssuerCommonName string `json:"issuerCommonName" msgpack:"issuerCommonName" bson:"issuercommonname" mapstructure:"issuerCommonName,omitempty"`

	// The countries of the issuer.
	IssuerCountries []string `json:"issuerCountries" msgpack:"issuerCountries" bson:"issuercountries" mapstructure:"issuerCountries,omitempty"`

	// The organizational units of the issuer.
	IssuerOrgUnits []string `json:"issuerOrgUnits" msgpack:"issuerOrgUnits" bson:"issuerorgunits" mapstructure:"issuerOrgUnits,omitempty"`

	// The organizations of the issuer.
	IssuerOrgs []string `json:"issuerOrgs" msgpack:"issuerOrgs" bson:"issuerorgs" mapstructure:"issuerOrgs,omitempty"`

	// The string representation of the issuer serial number.
	IssuerSerial string `json:"issuerSerial" msgpack:"issuerSerial" bson:"issuerserial" mapstructure:"issuerSerial,omitempty"`

	// The organizational units of the subject.
	OrgUnits []string `json:"orgUnits" msgpack:"orgUnits" bson:"orgunits" mapstructure:"orgUnits,omitempty"`

	// The organizations of the subject.
	Orgs []string `json:"orgs" msgpack:"orgs" bson:"orgs" mapstructure:"orgs,omitempty"`

	// The string representation of the certificate serial number.
	Serial string `json:"serial" msgpack:"serial" bson:"serial" mapstructure:"serial,omitempty"`

	ModelVersion int `json:"-" msgpack:"-" bson:"_modelversion"`
}

// NewTLSCertInfo returns a new *TLSCertInfo
func NewTLSCertInfo() *TLSCertInfo {

	return &TLSCertInfo{
		ModelVersion:    1,
		DNSAltNames:     []string{},
		IPAltNames:      []string{},
		Countries:       []string{},
		IssuerCountries: []string{},
		IssuerOrgUnits:  []string{},
		IssuerOrgs:      []string{},
		OrgUnits:        []string{},
		Orgs:            []string{},
	}
}

// GetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *TLSCertInfo) GetBSON() (any, error) {

	if o == nil {
		return nil, nil
	}

	s := &mongoAttributesTLSCertInfo{}

	s.DNSAltNames = o.DNSAltNames
	s.IPAltNames = o.IPAltNames
	s.CommonName = o.CommonName
	s.Countries = o.Countries
	s.Expiration = o.Expiration
	s.IssuerCommonName = o.IssuerCommonName
	s.IssuerCountries = o.IssuerCountries
	s.IssuerOrgUnits = o.IssuerOrgUnits
	s.IssuerOrgs = o.IssuerOrgs
	s.IssuerSerial = o.IssuerSerial
	s.OrgUnits = o.OrgUnits
	s.Orgs = o.Orgs
	s.Serial = o.Serial

	return s, nil
}

// SetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *TLSCertInfo) SetBSON(raw bson.Raw) error {

	if o == nil || raw.Kind == bson.ElementNil {
		return bson.ErrSetZero
	}

	s := &mongoAttributesTLSCertInfo{}
	if err := raw.Unmarshal(s); err != nil {
		return err
	}

	o.DNSAltNames = s.DNSAltNames
	o.IPAltNames = s.IPAltNames
	o.CommonName = s.CommonName
	o.Countries = s.Countries
	o.Expiration = s.Expiration
	o.IssuerCommonName = s.IssuerCommonName
	o.IssuerCountries = s.IssuerCountries
	o.IssuerOrgUnits = s.IssuerOrgUnits
	o.IssuerOrgs = s.IssuerOrgs
	o.IssuerSerial = s.IssuerSerial
	o.OrgUnits = s.OrgUnits
	o.Orgs = s.Orgs
	o.Serial = s.Serial

	return nil
}

// BleveType implements the bleve.Classifier Interface.
func (o *TLSCertInfo) BleveType() string {

	return "tlscertinfo"
}

// DeepCopy returns a deep copy if the TLSCertInfo.
func (o *TLSCertInfo) DeepCopy() *TLSCertInfo {

	if o == nil {
		return nil
	}

	out := &TLSCertInfo{}
	o.DeepCopyInto(out)

	return out
}

// DeepCopyInto copies the receiver into the given *TLSCertInfo.
func (o *TLSCertInfo) DeepCopyInto(out *TLSCertInfo) {

	target, err := copystructure.Copy(o)
	if err != nil {
		panic(fmt.Sprintf("Unable to deepcopy TLSCertInfo: %s", err))
	}

	*out = *target.(*TLSCertInfo)
}

// Validate valides the current information stored into the structure.
func (o *TLSCertInfo) Validate() error {

	errors := elemental.Errors{}
	requiredErrors := elemental.Errors{}

	if len(requiredErrors) > 0 {
		return requiredErrors
	}

	if len(errors) > 0 {
		return errors
	}

	return nil
}

// SpecificationForAttribute returns the AttributeSpecification for the given attribute name key.
func (*TLSCertInfo) SpecificationForAttribute(name string) elemental.AttributeSpecification {

	if v, ok := TLSCertInfoAttributesMap[name]; ok {
		return v
	}

	// We could not find it, so let's check on the lower case indexed spec map
	return TLSCertInfoLowerCaseAttributesMap[name]
}

// AttributeSpecifications returns the full attribute specifications map.
func (*TLSCertInfo) AttributeSpecifications() map[string]elemental.AttributeSpecification {

	return TLSCertInfoAttributesMap
}

// ValueForAttribute returns the value for the given attribute.
// This is a very advanced function that you should not need but in some
// very specific use cases.
func (o *TLSCertInfo) ValueForAttribute(name string) any {

	switch name {
	case "DNSAltNames":
		return o.DNSAltNames
	case "IPAltNames":
		return o.IPAltNames
	case "commonName":
		return o.CommonName
	case "countries":
		return o.Countries
	case "expiration":
		return o.Expiration
	case "issuerCommonName":
		return o.IssuerCommonName
	case "issuerCountries":
		return o.IssuerCountries
	case "issuerOrgUnits":
		return o.IssuerOrgUnits
	case "issuerOrgs":
		return o.IssuerOrgs
	case "issuerSerial":
		return o.IssuerSerial
	case "orgUnits":
		return o.OrgUnits
	case "orgs":
		return o.Orgs
	case "serial":
		return o.Serial
	}

	return nil
}

// TLSCertInfoAttributesMap represents the map of attribute for TLSCertInfo.
var TLSCertInfoAttributesMap = map[string]elemental.AttributeSpecification{
	"DNSAltNames": {
		AllowedChoices: []string{},
		BSONFieldName:  "dnsaltnames",
		ConvertedName:  "DNSAltNames",
		Description:    `The DNS Alt Names.`,
		Exposed:        true,
		Name:           "DNSAltNames",
		Stored:         true,
		SubType:        "string",
		Type:           "list",
	},
	"IPAltNames": {
		AllowedChoices: []string{},
		BSONFieldName:  "ipaltnames",
		ConvertedName:  "IPAltNames",
		Description:    `The IP Alt Names.`,
		Exposed:        true,
		Name:           "IPAltNames",
		Stored:         true,
		SubType:        "string",
		Type:           "list",
	},
	"CommonName": {
		AllowedChoices: []string{},
		BSONFieldName:  "commonname",
		ConvertedName:  "CommonName",
		Description:    `The name of the subject.`,
		Exposed:        true,
		Name:           "commonName",
		Stored:         true,
		Type:           "string",
	},
	"Countries": {
		AllowedChoices: []string{},
		BSONFieldName:  "countries",
		ConvertedName:  "Countries",
		Description:    `The countries of the subject.`,
		Exposed:        true,
		Name:           "countries",
		Stored:         true,
		SubType:        "string",
		Type:           "list",
	},
	"Expiration": {
		AllowedChoices: []string{},
		BSONFieldName:  "expiration",
		ConvertedName:  "Expiration",
		Description:    `The expiration date of the certificate.`,
		Exposed:        true,
		Name:           "expiration",
		Stored:         true,
		Type:           "time",
	},
	"IssuerCommonName": {
		AllowedChoices: []string{},
		BSONFieldName:  "issuercommonname",
		ConvertedName:  "IssuerCommonName",
		Description:    `The name of the issuer.`,
		Exposed:        true,
		Name:           "issuerCommonName",
		Stored:         true,
		Type:           "string",
	},
	"IssuerCountries": {
		AllowedChoices: []string{},
		BSONFieldName:  "issuercountries",
		ConvertedName:  "IssuerCountries",
		Description:    `The countries of the issuer.`,
		Exposed:        true,
		Name:           "issuerCountries",
		Stored:         true,
		SubType:        "string",
		Type:           "list",
	},
	"IssuerOrgUnits": {
		AllowedChoices: []string{},
		BSONFieldName:  "issuerorgunits",
		ConvertedName:  "IssuerOrgUnits",
		Description:    `The organizational units of the issuer.`,
		Exposed:        true,
		Name:           "issuerOrgUnits",
		Stored:         true,
		SubType:        "string",
		Type:           "list",
	},
	"IssuerOrgs": {
		AllowedChoices: []string{},
		BSONFieldName:  "issuerorgs",
		ConvertedName:  "IssuerOrgs",
		Description:    `The organizations of the issuer.`,
		Exposed:        true,
		Name:           "issuerOrgs",
		Stored:         true,
		SubType:        "string",
		Type:           "list",
	},
	"IssuerSerial": {
		AllowedChoices: []string{},
		BSONFieldName:  "issuerserial",
		ConvertedName:  "IssuerSerial",
		Description:    `The string representation of the issuer serial number.`,
		Exposed:        true,
		Name:           "issuerSerial",
		Stored:         true,
		Type:           "string",
	},
	"OrgUnits": {
		AllowedChoices: []string{},
		BSONFieldName:  "orgunits",
		ConvertedName:  "OrgUnits",
		Description:    `The organizational units of the subject.`,
		Exposed:        true,
		Name:           "orgUnits",
		Stored:         true,
		SubType:        "string",
		Type:           "list",
	},
	"Orgs": {
		AllowedChoices: []string{},
		BSONFieldName:  "orgs",
		ConvertedName:  "Orgs",
		Description:    `The organizations of the subject.`,
		Exposed:        true,
		Name:           "orgs",
		Stored:         true,
		SubType:        "string",
		Type:           "list",
	},
	"Serial": {
		AllowedChoices: []string{},
		BSONFieldName:  "serial",
		ConvertedName:  "Serial",
		Description:    `The string representation of the certificate serial number.`,
		Exposed:        true,
		Name:           "serial",
		Stored:         true,
		Type:           "string",
	},
}

// TLSCertInfoLowerCaseAttributesMap represents the map of attribute for TLSCertInfo.
var TLSCertInfoLowerCaseAttributesMap = map[string]elemental.AttributeSpecification{
	"dnsaltnames": {
		AllowedChoices: []string{},
		BSONFieldName:  "dnsaltnames",
		ConvertedName:  "DNSAltNames",
		Description:    `The DNS Alt Names.`,
		Exposed:        true,
		Name:           "DNSAltNames",
		Stored:         true,
		SubType:        "string",
		Type:           "list",
	},
	"ipaltnames": {
		AllowedChoices: []string{},
		BSONFieldName:  "ipaltnames",
		ConvertedName:  "IPAltNames",
		Description:    `The IP Alt Names.`,
		Exposed:        true,
		Name:           "IPAltNames",
		Stored:         true,
		SubType:        "string",
		Type:           "list",
	},
	"commonname": {
		AllowedChoices: []string{},
		BSONFieldName:  "commonname",
		ConvertedName:  "CommonName",
		Description:    `The name of the subject.`,
		Exposed:        true,
		Name:           "commonName",
		Stored:         true,
		Type:           "string",
	},
	"countries": {
		AllowedChoices: []string{},
		BSONFieldName:  "countries",
		ConvertedName:  "Countries",
		Description:    `The countries of the subject.`,
		Exposed:        true,
		Name:           "countries",
		Stored:         true,
		SubType:        "string",
		Type:           "list",
	},
	"expiration": {
		AllowedChoices: []string{},
		BSONFieldName:  "expiration",
		ConvertedName:  "Expiration",
		Description:    `The expiration date of the certificate.`,
		Exposed:        true,
		Name:           "expiration",
		Stored:         true,
		Type:           "time",
	},
	"issuercommonname": {
		AllowedChoices: []string{},
		BSONFieldName:  "issuercommonname",
		ConvertedName:  "IssuerCommonName",
		Description:    `The name of the issuer.`,
		Exposed:        true,
		Name:           "issuerCommonName",
		Stored:         true,
		Type:           "string",
	},
	"issuercountries": {
		AllowedChoices: []string{},
		BSONFieldName:  "issuercountries",
		ConvertedName:  "IssuerCountries",
		Description:    `The countries of the issuer.`,
		Exposed:        true,
		Name:           "issuerCountries",
		Stored:         true,
		SubType:        "string",
		Type:           "list",
	},
	"issuerorgunits": {
		AllowedChoices: []string{},
		BSONFieldName:  "issuerorgunits",
		ConvertedName:  "IssuerOrgUnits",
		Description:    `The organizational units of the issuer.`,
		Exposed:        true,
		Name:           "issuerOrgUnits",
		Stored:         true,
		SubType:        "string",
		Type:           "list",
	},
	"issuerorgs": {
		AllowedChoices: []string{},
		BSONFieldName:  "issuerorgs",
		ConvertedName:  "IssuerOrgs",
		Description:    `The organizations of the issuer.`,
		Exposed:        true,
		Name:           "issuerOrgs",
		Stored:         true,
		SubType:        "string",
		Type:           "list",
	},
	"issuerserial": {
		AllowedChoices: []string{},
		BSONFieldName:  "issuerserial",
		ConvertedName:  "IssuerSerial",
		Description:    `The string representation of the issuer serial number.`,
		Exposed:        true,
		Name:           "issuerSerial",
		Stored:         true,
		Type:           "string",
	},
	"orgunits": {
		AllowedChoices: []string{},
		BSONFieldName:  "orgunits",
		ConvertedName:  "OrgUnits",
		Description:    `The organizational units of the subject.`,
		Exposed:        true,
		Name:           "orgUnits",
		Stored:         true,
		SubType:        "string",
		Type:           "list",
	},
	"orgs": {
		AllowedChoices: []string{},
		BSONFieldName:  "orgs",
		ConvertedName:  "Orgs",
		Description:    `The organizations of the subject.`,
		Exposed:        true,
		Name:           "orgs",
		Stored:         true,
		SubType:        "string",
		Type:           "list",
	},
	"serial": {
		AllowedChoices: []string{},
		BSONFieldName:  "serial",
		ConvertedName:  "Serial",
		Description:    `The string representation of the certificate serial number.`,
		Exposed:        true,
		Name:           "serial",
		Stored:         true,
		Type:           "string",
	},
}

type mongoAttributesTLSCertInfo struct {
	DNSAltNames      []string  `bson:"dnsaltnames"`
	IPAltNames       []string  `bson:"ipaltnames"`
	CommonName       string    `bson:"commonname"`
	Countries        []string  `bson:"countries"`
	Expiration       time.Time `bson:"expiration"`
	IssuerCommonName string    `bson:"issuercommonname"`
	IssuerCountries  []string  `bson:"issuercountries"`
	IssuerOrgUnits   []string  `bson:"issuerorgunits"`
	IssuerOrgs       []string  `bson:"issuerorgs"`
	IssuerSerial     string    `bson:"issuerserial"`
	OrgUnits         []string  `bson:"orgunits"`
	Orgs             []string  `bson:"orgs"`
	Serial           string    `bson:"serial"`
}
