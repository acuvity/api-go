// Code generated by elegen. DO NOT EDIT.
// Source: go.acuvity.ai/elemental (templates/model.gotpl)

package api

import (
	"fmt"

	"github.com/globalsign/mgo/bson"
	"github.com/mitchellh/copystructure"
	"go.acuvity.ai/elemental"
)

// LandingTypeValue represents the possible values for attribute "type".
type LandingTypeValue string

const (
	// LandingTypeAll represents the value All.
	LandingTypeAll LandingTypeValue = "All"

	// LandingTypeApps represents the value Apps.
	LandingTypeApps LandingTypeValue = "Apps"

	// LandingTypeEmployees represents the value Employees.
	LandingTypeEmployees LandingTypeValue = "Employees"
)

// LandingIdentity represents the Identity of the object.
var LandingIdentity = elemental.Identity{
	Name:     "landing",
	Category: "landings",
	Package:  "lain",
	Private:  false,
}

// LandingsList represents a list of Landings
type LandingsList []*Landing

// Identity returns the identity of the objects in the list.
func (o LandingsList) Identity() elemental.Identity {

	return LandingIdentity
}

// Copy returns a pointer to a copy the LandingsList.
func (o LandingsList) Copy() elemental.Identifiables {

	out := append(LandingsList{}, o...)
	return &out
}

// Append appends the objects to the a new copy of the LandingsList.
func (o LandingsList) Append(objects ...elemental.Identifiable) elemental.Identifiables {

	out := append(LandingsList{}, o...)
	for _, obj := range objects {
		out = append(out, obj.(*Landing))
	}

	return out
}

// List converts the object to an elemental.IdentifiablesList.
func (o LandingsList) List() elemental.IdentifiablesList {

	out := make(elemental.IdentifiablesList, len(o))
	for i := 0; i < len(o); i++ {
		out[i] = o[i]
	}

	return out
}

// DefaultOrder returns the default ordering fields of the content.
func (o LandingsList) DefaultOrder() []string {

	return []string{}
}

// ToSparse returns the LandingsList converted to SparseLandingsList.
// Objects in the list will only contain the given fields. No field means entire field set.
func (o LandingsList) ToSparse(fields ...string) elemental.Identifiables {

	out := make(SparseLandingsList, len(o))
	for i := 0; i < len(o); i++ {
		out[i] = o[i].ToSparse(fields...).(*SparseLanding)
	}

	return out
}

// Version returns the version of the content.
func (o LandingsList) Version() int {

	return 1
}

// Landing represents the model of a landing
type Landing struct {
	// The identifier of the landing.
	ID string `json:"ID" msgpack:"ID" bson:"-" mapstructure:"ID,omitempty"`

	// The permissions for the landing type.
	Permissions map[string]map[string]bool `json:"permissions" msgpack:"permissions" bson:"-" mapstructure:"permissions,omitempty"`

	// Type of access.
	Type LandingTypeValue `json:"type" msgpack:"type" bson:"-" mapstructure:"type,omitempty"`

	ModelVersion int `json:"-" msgpack:"-" bson:"_modelversion"`
}

// NewLanding returns a new *Landing
func NewLanding() *Landing {

	return &Landing{
		ModelVersion: 1,
		Permissions:  map[string]map[string]bool{},
	}
}

// Identity returns the Identity of the object.
func (o *Landing) Identity() elemental.Identity {

	return LandingIdentity
}

// Identifier returns the value of the object's unique identifier.
func (o *Landing) Identifier() string {

	return ""
}

// SetIdentifier sets the value of the object's unique identifier.
func (o *Landing) SetIdentifier(id string) {

}

// GetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *Landing) GetBSON() (any, error) {

	if o == nil {
		return nil, nil
	}

	s := &mongoAttributesLanding{}

	return s, nil
}

// SetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *Landing) SetBSON(raw bson.Raw) error {

	if o == nil {
		return nil
	}

	s := &mongoAttributesLanding{}
	if err := raw.Unmarshal(s); err != nil {
		return err
	}

	return nil
}

// Version returns the hardcoded version of the model.
func (o *Landing) Version() int {

	return 1
}

// BleveType implements the bleve.Classifier Interface.
func (o *Landing) BleveType() string {

	return "landing"
}

// DefaultOrder returns the list of default ordering fields.
func (o *Landing) DefaultOrder() []string {

	return []string{}
}

// Doc returns the documentation for the object
func (o *Landing) Doc() string {

	return `Potential Landing namespaces based on permissions.`
}

func (o *Landing) String() string {

	return fmt.Sprintf("<%s:%s>", o.Identity().Name, o.Identifier())
}

// ToSparse returns the sparse version of the model.
// The returned object will only contain the given fields. No field means entire field set.
func (o *Landing) ToSparse(fields ...string) elemental.SparseIdentifiable {

	if len(fields) == 0 {
		// nolint: goimports
		return &SparseLanding{
			ID:          &o.ID,
			Permissions: &o.Permissions,
			Type:        &o.Type,
		}
	}

	sp := &SparseLanding{}
	for _, f := range fields {
		switch f {
		case "ID":
			sp.ID = &(o.ID)
		case "permissions":
			sp.Permissions = &(o.Permissions)
		case "type":
			sp.Type = &(o.Type)
		}
	}

	return sp
}

// Patch apply the non nil value of a *SparseLanding to the object.
func (o *Landing) Patch(sparse elemental.SparseIdentifiable) {
	if !sparse.Identity().IsEqual(o.Identity()) {
		panic("cannot patch from a parse with different identity")
	}

	so := sparse.(*SparseLanding)
	if so.ID != nil {
		o.ID = *so.ID
	}
	if so.Permissions != nil {
		o.Permissions = *so.Permissions
	}
	if so.Type != nil {
		o.Type = *so.Type
	}
}

// DeepCopy returns a deep copy if the Landing.
func (o *Landing) DeepCopy() *Landing {

	if o == nil {
		return nil
	}

	out := &Landing{}
	o.DeepCopyInto(out)

	return out
}

// DeepCopyInto copies the receiver into the given *Landing.
func (o *Landing) DeepCopyInto(out *Landing) {

	target, err := copystructure.Copy(o)
	if err != nil {
		panic(fmt.Sprintf("Unable to deepcopy Landing: %s", err))
	}

	*out = *target.(*Landing)
}

// Validate valides the current information stored into the structure.
func (o *Landing) Validate() error {

	errors := elemental.Errors{}
	requiredErrors := elemental.Errors{}

	if err := elemental.ValidateStringInList("type", string(o.Type), []string{"Apps", "Employees", "All"}, false); err != nil {
		errors = errors.Append(err)
	}

	if len(requiredErrors) > 0 {
		return requiredErrors
	}

	if len(errors) > 0 {
		return errors
	}

	return nil
}

// SpecificationForAttribute returns the AttributeSpecification for the given attribute name key.
func (*Landing) SpecificationForAttribute(name string) elemental.AttributeSpecification {

	if v, ok := LandingAttributesMap[name]; ok {
		return v
	}

	// We could not find it, so let's check on the lower case indexed spec map
	return LandingLowerCaseAttributesMap[name]
}

// AttributeSpecifications returns the full attribute specifications map.
func (*Landing) AttributeSpecifications() map[string]elemental.AttributeSpecification {

	return LandingAttributesMap
}

// ValueForAttribute returns the value for the given attribute.
// This is a very advanced function that you should not need but in some
// very specific use cases.
func (o *Landing) ValueForAttribute(name string) any {

	switch name {
	case "ID":
		return o.ID
	case "permissions":
		return o.Permissions
	case "type":
		return o.Type
	}

	return nil
}

// LandingAttributesMap represents the map of attribute for Landing.
var LandingAttributesMap = map[string]elemental.AttributeSpecification{
	"ID": {
		AllowedChoices: []string{},
		ConvertedName:  "ID",
		Description:    `The identifier of the landing.`,
		Exposed:        true,
		Name:           "ID",
		Type:           "string",
	},
	"Permissions": {
		AllowedChoices: []string{},
		ConvertedName:  "Permissions",
		Description:    `The permissions for the landing type.`,
		Exposed:        true,
		Name:           "permissions",
		SubType:        "map[string]map[string]bool",
		Type:           "external",
	},
	"Type": {
		AllowedChoices: []string{"Apps", "Employees", "All"},
		ConvertedName:  "Type",
		Description:    `Type of access.`,
		Exposed:        true,
		Name:           "type",
		Type:           "enum",
	},
}

// LandingLowerCaseAttributesMap represents the map of attribute for Landing.
var LandingLowerCaseAttributesMap = map[string]elemental.AttributeSpecification{
	"id": {
		AllowedChoices: []string{},
		ConvertedName:  "ID",
		Description:    `The identifier of the landing.`,
		Exposed:        true,
		Name:           "ID",
		Type:           "string",
	},
	"permissions": {
		AllowedChoices: []string{},
		ConvertedName:  "Permissions",
		Description:    `The permissions for the landing type.`,
		Exposed:        true,
		Name:           "permissions",
		SubType:        "map[string]map[string]bool",
		Type:           "external",
	},
	"type": {
		AllowedChoices: []string{"Apps", "Employees", "All"},
		ConvertedName:  "Type",
		Description:    `Type of access.`,
		Exposed:        true,
		Name:           "type",
		Type:           "enum",
	},
}

// SparseLandingsList represents a list of SparseLandings
type SparseLandingsList []*SparseLanding

// Identity returns the identity of the objects in the list.
func (o SparseLandingsList) Identity() elemental.Identity {

	return LandingIdentity
}

// Copy returns a pointer to a copy the SparseLandingsList.
func (o SparseLandingsList) Copy() elemental.Identifiables {

	copy := append(SparseLandingsList{}, o...)
	return &copy
}

// Append appends the objects to the a new copy of the SparseLandingsList.
func (o SparseLandingsList) Append(objects ...elemental.Identifiable) elemental.Identifiables {

	out := append(SparseLandingsList{}, o...)
	for _, obj := range objects {
		out = append(out, obj.(*SparseLanding))
	}

	return out
}

// List converts the object to an elemental.IdentifiablesList.
func (o SparseLandingsList) List() elemental.IdentifiablesList {

	out := make(elemental.IdentifiablesList, len(o))
	for i := 0; i < len(o); i++ {
		out[i] = o[i]
	}

	return out
}

// DefaultOrder returns the default ordering fields of the content.
func (o SparseLandingsList) DefaultOrder() []string {

	return []string{}
}

// ToPlain returns the SparseLandingsList converted to LandingsList.
func (o SparseLandingsList) ToPlain() elemental.IdentifiablesList {

	out := make(elemental.IdentifiablesList, len(o))
	for i := 0; i < len(o); i++ {
		out[i] = o[i].ToPlain()
	}

	return out
}

// Version returns the version of the content.
func (o SparseLandingsList) Version() int {

	return 1
}

// SparseLanding represents the sparse version of a landing.
type SparseLanding struct {
	// The identifier of the landing.
	ID *string `json:"ID,omitempty" msgpack:"ID,omitempty" bson:"-" mapstructure:"ID,omitempty"`

	// The permissions for the landing type.
	Permissions *map[string]map[string]bool `json:"permissions,omitempty" msgpack:"permissions,omitempty" bson:"-" mapstructure:"permissions,omitempty"`

	// Type of access.
	Type *LandingTypeValue `json:"type,omitempty" msgpack:"type,omitempty" bson:"-" mapstructure:"type,omitempty"`

	ModelVersion int `json:"-" msgpack:"-" bson:"_modelversion"`
}

// NewSparseLanding returns a new  SparseLanding.
func NewSparseLanding() *SparseLanding {
	return &SparseLanding{}
}

// Identity returns the Identity of the sparse object.
func (o *SparseLanding) Identity() elemental.Identity {

	return LandingIdentity
}

// Identifier returns the value of the sparse object's unique identifier.
func (o *SparseLanding) Identifier() string {

	return ""
}

// SetIdentifier sets the value of the sparse object's unique identifier.
func (o *SparseLanding) SetIdentifier(id string) {

}

// GetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *SparseLanding) GetBSON() (any, error) {

	if o == nil {
		return nil, nil
	}

	s := &mongoAttributesSparseLanding{}

	return s, nil
}

// SetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *SparseLanding) SetBSON(raw bson.Raw) error {

	if o == nil {
		return nil
	}

	s := &mongoAttributesSparseLanding{}
	if err := raw.Unmarshal(s); err != nil {
		return err
	}

	return nil
}

// Version returns the hardcoded version of the model.
func (o *SparseLanding) Version() int {

	return 1
}

// ToPlain returns the plain version of the sparse model.
func (o *SparseLanding) ToPlain() elemental.PlainIdentifiable {

	out := NewLanding()
	if o.ID != nil {
		out.ID = *o.ID
	}
	if o.Permissions != nil {
		out.Permissions = *o.Permissions
	}
	if o.Type != nil {
		out.Type = *o.Type
	}

	return out
}

// DeepCopy returns a deep copy if the SparseLanding.
func (o *SparseLanding) DeepCopy() *SparseLanding {

	if o == nil {
		return nil
	}

	out := &SparseLanding{}
	o.DeepCopyInto(out)

	return out
}

// DeepCopyInto copies the receiver into the given *SparseLanding.
func (o *SparseLanding) DeepCopyInto(out *SparseLanding) {

	target, err := copystructure.Copy(o)
	if err != nil {
		panic(fmt.Sprintf("Unable to deepcopy SparseLanding: %s", err))
	}

	*out = *target.(*SparseLanding)
}

type mongoAttributesLanding struct {
}
type mongoAttributesSparseLanding struct {
}
