// Code generated by elegen. DO NOT EDIT.
// Source: go.acuvity.ai/elemental (templates/model.gotpl)

package api

import (
	"fmt"
	"slices"

	"github.com/globalsign/mgo/bson"
	"github.com/mitchellh/copystructure"
	"go.acuvity.ai/elemental"
)

// SinkSplunkIdentity represents the Identity of the object.
var SinkSplunkIdentity = elemental.Identity{
	Name:     "sinksplunk",
	Category: "sinksplunk",
	Package:  "avi",
	Private:  false,
}

// SinkSplunksList represents a list of SinkSplunks
type SinkSplunksList []*SinkSplunk

// Identity returns the identity of the objects in the list.
func (o SinkSplunksList) Identity() elemental.Identity {

	return SinkSplunkIdentity
}

// Copy returns a pointer to a copy the SinkSplunksList.
func (o SinkSplunksList) Copy() elemental.Identifiables {

	out := slices.Clone(o)
	return &out
}

// Append appends the objects to the a new copy of the SinkSplunksList.
func (o SinkSplunksList) Append(objects ...elemental.Identifiable) elemental.Identifiables {

	out := slices.Clone(o)
	for _, obj := range objects {
		out = append(out, obj.(*SinkSplunk))
	}

	return out
}

// List converts the object to an elemental.IdentifiablesList.
func (o SinkSplunksList) List() elemental.IdentifiablesList {

	out := make(elemental.IdentifiablesList, len(o))
	for i := range len(o) {
		out[i] = o[i]
	}

	return out
}

// DefaultOrder returns the default ordering fields of the content.
func (o SinkSplunksList) DefaultOrder() []string {

	return []string{}
}

// ToSparse returns the SinkSplunksList converted to SparseSinkSplunksList.
// Objects in the list will only contain the given fields. No field means entire field set.
func (o SinkSplunksList) ToSparse(fields ...string) elemental.Identifiables {

	out := make(SparseSinkSplunksList, len(o))
	for i := range len(o) {
		out[i] = o[i].ToSparse(fields...).(*SparseSinkSplunk)
	}

	return out
}

// Version returns the version of the content.
func (o SinkSplunksList) Version() int {

	return 1
}

// SinkSplunk represents the model of a sinksplunk
type SinkSplunk struct {
	// The HTTP event collector (HEC) URL to send the alert to.
	HECURL string `json:"HECURL" msgpack:"HECURL" bson:"hecurl" mapstructure:"HECURL,omitempty"`

	// If set, will use this as the CA for TLS communication.
	CertificateAuthority string `json:"certificateAuthority,omitempty" msgpack:"certificateAuthority,omitempty" bson:"certificateauthority,omitempty" mapstructure:"certificateAuthority,omitempty"`

	// If true, will attempt to skip TLS verification when communicating.
	InsecureSkipVerify bool `json:"insecureSkipVerify" msgpack:"insecureSkipVerify" bson:"insecureskipverify" mapstructure:"insecureSkipVerify,omitempty"`

	// The token to communicate with the HTTP event collector.
	Token string `json:"token" msgpack:"token" bson:"token" mapstructure:"token,omitempty"`

	ModelVersion int `json:"-" msgpack:"-" bson:"_modelversion"`
}

// NewSinkSplunk returns a new *SinkSplunk
func NewSinkSplunk() *SinkSplunk {

	return &SinkSplunk{
		ModelVersion: 1,
	}
}

// Identity returns the Identity of the object.
func (o *SinkSplunk) Identity() elemental.Identity {

	return SinkSplunkIdentity
}

// Identifier returns the value of the object's unique identifier.
func (o *SinkSplunk) Identifier() string {

	return ""
}

// SetIdentifier sets the value of the object's unique identifier.
func (o *SinkSplunk) SetIdentifier(id string) {

}

// GetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *SinkSplunk) GetBSON() (any, error) {

	if o == nil {
		return nil, nil
	}

	s := &mongoAttributesSinkSplunk{}

	s.HECURL = o.HECURL
	s.CertificateAuthority = o.CertificateAuthority
	s.InsecureSkipVerify = o.InsecureSkipVerify
	s.Token = o.Token

	return s, nil
}

// SetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *SinkSplunk) SetBSON(raw bson.Raw) error {

	if o == nil || raw.Kind == bson.ElementNil {
		return bson.ErrSetZero
	}

	s := &mongoAttributesSinkSplunk{}
	if err := raw.Unmarshal(s); err != nil {
		return err
	}

	o.HECURL = s.HECURL
	o.CertificateAuthority = s.CertificateAuthority
	o.InsecureSkipVerify = s.InsecureSkipVerify
	o.Token = s.Token

	return nil
}

// Version returns the hardcoded version of the model.
func (o *SinkSplunk) Version() int {

	return 1
}

// BleveType implements the bleve.Classifier Interface.
func (o *SinkSplunk) BleveType() string {

	return "sinksplunk"
}

// DefaultOrder returns the list of default ordering fields.
func (o *SinkSplunk) DefaultOrder() []string {

	return []string{}
}

// Doc returns the documentation for the object
func (o *SinkSplunk) Doc() string {

	return `Additional configuration for sending an alert to Splunk.`
}

func (o *SinkSplunk) String() string {

	return fmt.Sprintf("<%s:%s>", o.Identity().Name, o.Identifier())
}

// ToSparse returns the sparse version of the model.
// The returned object will only contain the given fields. No field means entire field set.
func (o *SinkSplunk) ToSparse(fields ...string) elemental.SparseIdentifiable {

	if len(fields) == 0 {
		// nolint: goimports
		return &SparseSinkSplunk{
			HECURL:               &o.HECURL,
			CertificateAuthority: &o.CertificateAuthority,
			InsecureSkipVerify:   &o.InsecureSkipVerify,
			Token:                &o.Token,
		}
	}

	sp := &SparseSinkSplunk{}
	for _, f := range fields {
		switch f {
		case "HECURL":
			sp.HECURL = &(o.HECURL)
		case "certificateAuthority":
			sp.CertificateAuthority = &(o.CertificateAuthority)
		case "insecureSkipVerify":
			sp.InsecureSkipVerify = &(o.InsecureSkipVerify)
		case "token":
			sp.Token = &(o.Token)
		}
	}

	return sp
}

// EncryptAttributes encrypts the attributes marked as `encrypted` using the given encrypter.
func (o *SinkSplunk) EncryptAttributes(encrypter elemental.AttributeEncrypter) (err error) {

	if o.HECURL, err = encrypter.EncryptString(o.HECURL); err != nil {
		return fmt.Errorf("unable to encrypt attribute 'HECURL' for 'SinkSplunk' (%s): %s", o.Identifier(), err)
	}
	if o.Token, err = encrypter.EncryptString(o.Token); err != nil {
		return fmt.Errorf("unable to encrypt attribute 'Token' for 'SinkSplunk' (%s): %s", o.Identifier(), err)
	}

	return nil
}

// DecryptAttributes decrypts the attributes marked as `encrypted` using the given decrypter.
func (o *SinkSplunk) DecryptAttributes(encrypter elemental.AttributeEncrypter) (err error) {

	if o.HECURL, err = encrypter.DecryptString(o.HECURL); err != nil {
		return fmt.Errorf("unable to decrypt attribute 'HECURL' for 'SinkSplunk' (%s): %s", o.Identifier(), err)
	}
	if o.Token, err = encrypter.DecryptString(o.Token); err != nil {
		return fmt.Errorf("unable to decrypt attribute 'Token' for 'SinkSplunk' (%s): %s", o.Identifier(), err)
	}

	return nil
}

// Patch apply the non nil value of a *SparseSinkSplunk to the object.
func (o *SinkSplunk) Patch(sparse elemental.SparseIdentifiable) {
	if !sparse.Identity().IsEqual(o.Identity()) {
		panic("cannot patch from a parse with different identity")
	}

	so := sparse.(*SparseSinkSplunk)
	if so.HECURL != nil {
		o.HECURL = *so.HECURL
	}
	if so.CertificateAuthority != nil {
		o.CertificateAuthority = *so.CertificateAuthority
	}
	if so.InsecureSkipVerify != nil {
		o.InsecureSkipVerify = *so.InsecureSkipVerify
	}
	if so.Token != nil {
		o.Token = *so.Token
	}
}

// DeepCopy returns a deep copy if the SinkSplunk.
func (o *SinkSplunk) DeepCopy() *SinkSplunk {

	if o == nil {
		return nil
	}

	out := &SinkSplunk{}
	o.DeepCopyInto(out)

	return out
}

// DeepCopyInto copies the receiver into the given *SinkSplunk.
func (o *SinkSplunk) DeepCopyInto(out *SinkSplunk) {

	target, err := copystructure.Copy(o)
	if err != nil {
		panic(fmt.Sprintf("Unable to deepcopy SinkSplunk: %s", err))
	}

	*out = *target.(*SinkSplunk)
}

// Validate valides the current information stored into the structure.
func (o *SinkSplunk) Validate() error {

	errors := elemental.Errors{}
	requiredErrors := elemental.Errors{}

	if len(requiredErrors) > 0 {
		return requiredErrors
	}

	if len(errors) > 0 {
		return errors
	}

	return nil
}

// SpecificationForAttribute returns the AttributeSpecification for the given attribute name key.
func (*SinkSplunk) SpecificationForAttribute(name string) elemental.AttributeSpecification {

	if v, ok := SinkSplunkAttributesMap[name]; ok {
		return v
	}

	// We could not find it, so let's check on the lower case indexed spec map
	return SinkSplunkLowerCaseAttributesMap[name]
}

// AttributeSpecifications returns the full attribute specifications map.
func (*SinkSplunk) AttributeSpecifications() map[string]elemental.AttributeSpecification {

	return SinkSplunkAttributesMap
}

// ValueForAttribute returns the value for the given attribute.
// This is a very advanced function that you should not need but in some
// very specific use cases.
func (o *SinkSplunk) ValueForAttribute(name string) any {

	switch name {
	case "HECURL":
		return o.HECURL
	case "certificateAuthority":
		return o.CertificateAuthority
	case "insecureSkipVerify":
		return o.InsecureSkipVerify
	case "token":
		return o.Token
	}

	return nil
}

// SinkSplunkAttributesMap represents the map of attribute for SinkSplunk.
var SinkSplunkAttributesMap = map[string]elemental.AttributeSpecification{
	"HECURL": {
		AllowedChoices: []string{},
		BSONFieldName:  "hecurl",
		ConvertedName:  "HECURL",
		Description:    `The HTTP event collector (HEC) URL to send the alert to.`,
		Encrypted:      true,
		Exposed:        true,
		Name:           "HECURL",
		Required:       true,
		Secret:         true,
		Stored:         true,
		Transient:      true,
		Type:           "string",
	},
	"CertificateAuthority": {
		AllowedChoices: []string{},
		BSONFieldName:  "certificateauthority",
		ConvertedName:  "CertificateAuthority",
		Description:    `If set, will use this as the CA for TLS communication.`,
		Exposed:        true,
		Name:           "certificateAuthority",
		Stored:         true,
		Type:           "string",
	},
	"InsecureSkipVerify": {
		AllowedChoices: []string{},
		BSONFieldName:  "insecureskipverify",
		ConvertedName:  "InsecureSkipVerify",
		Description:    `If true, will attempt to skip TLS verification when communicating.`,
		Exposed:        true,
		Name:           "insecureSkipVerify",
		Stored:         true,
		Type:           "boolean",
	},
	"Token": {
		AllowedChoices: []string{},
		BSONFieldName:  "token",
		ConvertedName:  "Token",
		Description:    `The token to communicate with the HTTP event collector.`,
		Encrypted:      true,
		Exposed:        true,
		Name:           "token",
		Required:       true,
		Secret:         true,
		Stored:         true,
		Transient:      true,
		Type:           "string",
	},
}

// SinkSplunkLowerCaseAttributesMap represents the map of attribute for SinkSplunk.
var SinkSplunkLowerCaseAttributesMap = map[string]elemental.AttributeSpecification{
	"hecurl": {
		AllowedChoices: []string{},
		BSONFieldName:  "hecurl",
		ConvertedName:  "HECURL",
		Description:    `The HTTP event collector (HEC) URL to send the alert to.`,
		Encrypted:      true,
		Exposed:        true,
		Name:           "HECURL",
		Required:       true,
		Secret:         true,
		Stored:         true,
		Transient:      true,
		Type:           "string",
	},
	"certificateauthority": {
		AllowedChoices: []string{},
		BSONFieldName:  "certificateauthority",
		ConvertedName:  "CertificateAuthority",
		Description:    `If set, will use this as the CA for TLS communication.`,
		Exposed:        true,
		Name:           "certificateAuthority",
		Stored:         true,
		Type:           "string",
	},
	"insecureskipverify": {
		AllowedChoices: []string{},
		BSONFieldName:  "insecureskipverify",
		ConvertedName:  "InsecureSkipVerify",
		Description:    `If true, will attempt to skip TLS verification when communicating.`,
		Exposed:        true,
		Name:           "insecureSkipVerify",
		Stored:         true,
		Type:           "boolean",
	},
	"token": {
		AllowedChoices: []string{},
		BSONFieldName:  "token",
		ConvertedName:  "Token",
		Description:    `The token to communicate with the HTTP event collector.`,
		Encrypted:      true,
		Exposed:        true,
		Name:           "token",
		Required:       true,
		Secret:         true,
		Stored:         true,
		Transient:      true,
		Type:           "string",
	},
}

// SparseSinkSplunksList represents a list of SparseSinkSplunks
type SparseSinkSplunksList []*SparseSinkSplunk

// Identity returns the identity of the objects in the list.
func (o SparseSinkSplunksList) Identity() elemental.Identity {

	return SinkSplunkIdentity
}

// Copy returns a pointer to a copy the SparseSinkSplunksList.
func (o SparseSinkSplunksList) Copy() elemental.Identifiables {

	copy := slices.Clone(o)
	return &copy
}

// Append appends the objects to the a new copy of the SparseSinkSplunksList.
func (o SparseSinkSplunksList) Append(objects ...elemental.Identifiable) elemental.Identifiables {

	out := slices.Clone(o)
	for _, obj := range objects {
		out = append(out, obj.(*SparseSinkSplunk))
	}

	return out
}

// List converts the object to an elemental.IdentifiablesList.
func (o SparseSinkSplunksList) List() elemental.IdentifiablesList {

	out := make(elemental.IdentifiablesList, len(o))
	for i := range len(o) {
		out[i] = o[i]
	}

	return out
}

// DefaultOrder returns the default ordering fields of the content.
func (o SparseSinkSplunksList) DefaultOrder() []string {

	return []string{}
}

// ToPlain returns the SparseSinkSplunksList converted to SinkSplunksList.
func (o SparseSinkSplunksList) ToPlain() elemental.IdentifiablesList {

	out := make(elemental.IdentifiablesList, len(o))
	for i := range len(o) {
		out[i] = o[i].ToPlain()
	}

	return out
}

// Version returns the version of the content.
func (o SparseSinkSplunksList) Version() int {

	return 1
}

// SparseSinkSplunk represents the sparse version of a sinksplunk.
type SparseSinkSplunk struct {
	// The HTTP event collector (HEC) URL to send the alert to.
	HECURL *string `json:"HECURL,omitempty" msgpack:"HECURL,omitempty" bson:"hecurl,omitempty" mapstructure:"HECURL,omitempty"`

	// If set, will use this as the CA for TLS communication.
	CertificateAuthority *string `json:"certificateAuthority,omitempty" msgpack:"certificateAuthority,omitempty" bson:"certificateauthority,omitempty" mapstructure:"certificateAuthority,omitempty"`

	// If true, will attempt to skip TLS verification when communicating.
	InsecureSkipVerify *bool `json:"insecureSkipVerify,omitempty" msgpack:"insecureSkipVerify,omitempty" bson:"insecureskipverify,omitempty" mapstructure:"insecureSkipVerify,omitempty"`

	// The token to communicate with the HTTP event collector.
	Token *string `json:"token,omitempty" msgpack:"token,omitempty" bson:"token,omitempty" mapstructure:"token,omitempty"`

	ModelVersion int `json:"-" msgpack:"-" bson:"_modelversion"`
}

// NewSparseSinkSplunk returns a new  SparseSinkSplunk.
func NewSparseSinkSplunk() *SparseSinkSplunk {
	return &SparseSinkSplunk{}
}

// Identity returns the Identity of the sparse object.
func (o *SparseSinkSplunk) Identity() elemental.Identity {

	return SinkSplunkIdentity
}

// Identifier returns the value of the sparse object's unique identifier.
func (o *SparseSinkSplunk) Identifier() string {

	return ""
}

// SetIdentifier sets the value of the sparse object's unique identifier.
func (o *SparseSinkSplunk) SetIdentifier(id string) {

}

// GetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *SparseSinkSplunk) GetBSON() (any, error) {

	if o == nil {
		return nil, nil
	}

	s := &mongoAttributesSparseSinkSplunk{}

	if o.HECURL != nil {
		s.HECURL = o.HECURL
	}
	if o.CertificateAuthority != nil {
		s.CertificateAuthority = o.CertificateAuthority
	}
	if o.InsecureSkipVerify != nil {
		s.InsecureSkipVerify = o.InsecureSkipVerify
	}
	if o.Token != nil {
		s.Token = o.Token
	}

	return s, nil
}

// SetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *SparseSinkSplunk) SetBSON(raw bson.Raw) error {

	if o == nil {
		return nil
	}

	s := &mongoAttributesSparseSinkSplunk{}
	if err := raw.Unmarshal(s); err != nil {
		return err
	}

	if s.HECURL != nil {
		o.HECURL = s.HECURL
	}
	if s.CertificateAuthority != nil {
		o.CertificateAuthority = s.CertificateAuthority
	}
	if s.InsecureSkipVerify != nil {
		o.InsecureSkipVerify = s.InsecureSkipVerify
	}
	if s.Token != nil {
		o.Token = s.Token
	}

	return nil
}

// Version returns the hardcoded version of the model.
func (o *SparseSinkSplunk) Version() int {

	return 1
}

// ToPlain returns the plain version of the sparse model.
func (o *SparseSinkSplunk) ToPlain() elemental.PlainIdentifiable {

	out := NewSinkSplunk()
	if o.HECURL != nil {
		out.HECURL = *o.HECURL
	}
	if o.CertificateAuthority != nil {
		out.CertificateAuthority = *o.CertificateAuthority
	}
	if o.InsecureSkipVerify != nil {
		out.InsecureSkipVerify = *o.InsecureSkipVerify
	}
	if o.Token != nil {
		out.Token = *o.Token
	}

	return out
}

// EncryptAttributes encrypts the attributes marked as `encrypted` using the given encrypter.
func (o *SparseSinkSplunk) EncryptAttributes(encrypter elemental.AttributeEncrypter) (err error) {

	if *o.HECURL, err = encrypter.EncryptString(*o.HECURL); err != nil {
		return fmt.Errorf("unable to encrypt attribute 'HECURL' for 'SparseSinkSplunk' (%s): %s", o.Identifier(), err)
	}
	if *o.Token, err = encrypter.EncryptString(*o.Token); err != nil {
		return fmt.Errorf("unable to encrypt attribute 'Token' for 'SparseSinkSplunk' (%s): %s", o.Identifier(), err)
	}

	return nil
}

// DecryptAttributes decrypts the attributes marked as `encrypted` using the given decrypter.
func (o *SparseSinkSplunk) DecryptAttributes(encrypter elemental.AttributeEncrypter) (err error) {

	if *o.HECURL, err = encrypter.DecryptString(*o.HECURL); err != nil {
		return fmt.Errorf("unable to decrypt attribute 'HECURL' for 'SparseSinkSplunk' (%s): %s", o.Identifier(), err)
	}
	if *o.Token, err = encrypter.DecryptString(*o.Token); err != nil {
		return fmt.Errorf("unable to decrypt attribute 'Token' for 'SparseSinkSplunk' (%s): %s", o.Identifier(), err)
	}

	return nil
}

// DeepCopy returns a deep copy if the SparseSinkSplunk.
func (o *SparseSinkSplunk) DeepCopy() *SparseSinkSplunk {

	if o == nil {
		return nil
	}

	out := &SparseSinkSplunk{}
	o.DeepCopyInto(out)

	return out
}

// DeepCopyInto copies the receiver into the given *SparseSinkSplunk.
func (o *SparseSinkSplunk) DeepCopyInto(out *SparseSinkSplunk) {

	target, err := copystructure.Copy(o)
	if err != nil {
		panic(fmt.Sprintf("Unable to deepcopy SparseSinkSplunk: %s", err))
	}

	*out = *target.(*SparseSinkSplunk)
}

type mongoAttributesSinkSplunk struct {
	HECURL               string `bson:"hecurl"`
	CertificateAuthority string `bson:"certificateauthority,omitempty"`
	InsecureSkipVerify   bool   `bson:"insecureskipverify"`
	Token                string `bson:"token"`
}
type mongoAttributesSparseSinkSplunk struct {
	HECURL               *string `bson:"hecurl,omitempty"`
	CertificateAuthority *string `bson:"certificateauthority,omitempty"`
	InsecureSkipVerify   *bool   `bson:"insecureskipverify,omitempty"`
	Token                *string `bson:"token,omitempty"`
}
