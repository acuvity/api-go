// Code generated by elegen. DO NOT EDIT.
// Source: go.acuvity.ai/elemental (templates/model.gotpl)

package api

import (
	"fmt"
	"slices"

	"github.com/globalsign/mgo/bson"
	"github.com/mitchellh/copystructure"
	"go.acuvity.ai/elemental"
)

// LatencyIdentity represents the Identity of the object.
var LatencyIdentity = elemental.Identity{
	Name:     "latency",
	Category: "latencies",
	Package:  "lain",
	Private:  false,
}

// LatenciesList represents a list of Latencies
type LatenciesList []*Latency

// Identity returns the identity of the objects in the list.
func (o LatenciesList) Identity() elemental.Identity {

	return LatencyIdentity
}

// Copy returns a pointer to a copy the LatenciesList.
func (o LatenciesList) Copy() elemental.Identifiables {

	out := slices.Clone(o)
	return &out
}

// Append appends the objects to the a new copy of the LatenciesList.
func (o LatenciesList) Append(objects ...elemental.Identifiable) elemental.Identifiables {

	out := slices.Clone(o)
	for _, obj := range objects {
		out = append(out, obj.(*Latency))
	}

	return out
}

// List converts the object to an elemental.IdentifiablesList.
func (o LatenciesList) List() elemental.IdentifiablesList {

	out := make(elemental.IdentifiablesList, len(o))
	for i := range len(o) {
		out[i] = o[i]
	}

	return out
}

// DefaultOrder returns the default ordering fields of the content.
func (o LatenciesList) DefaultOrder() []string {

	return []string{}
}

// ToSparse returns the LatenciesList converted to SparseLatenciesList.
// Objects in the list will only contain the given fields. No field means entire field set.
func (o LatenciesList) ToSparse(fields ...string) elemental.Identifiables {

	out := make(SparseLatenciesList, len(o))
	for i := range len(o) {
		out[i] = o[i].ToSparse(fields...).(*SparseLatency)
	}

	return out
}

// Version returns the version of the content.
func (o LatenciesList) Version() int {

	return 1
}

// Latency represents the model of a latency
type Latency struct {
	// How much time it took to run the access policy in nanoseconds.
	AccessPolicy int `json:"accessPolicy" msgpack:"accessPolicy" bson:"accesspolicy" mapstructure:"accessPolicy,omitempty"`

	// How much time it took to run content analysis in nanoseconds.
	Analysis int `json:"analysis" msgpack:"analysis" bson:"analysis" mapstructure:"analysis,omitempty"`

	// How much time it took to run the assign policy in nanoseconds.
	AssignPolicy int `json:"assignPolicy" msgpack:"assignPolicy" bson:"assignpolicy" mapstructure:"assignPolicy,omitempty"`

	// How much time it took to run content policy in nanoseconds.
	ContentPolicy int `json:"contentPolicy" msgpack:"contentPolicy" bson:"contentpolicy" mapstructure:"contentPolicy,omitempty"`

	// How much time it took to run input or output extraction in nanoseconds.
	Extraction int `json:"extraction" msgpack:"extraction" bson:"extraction" mapstructure:"extraction,omitempty"`

	ModelVersion int `json:"-" msgpack:"-" bson:"_modelversion"`
}

// NewLatency returns a new *Latency
func NewLatency() *Latency {

	return &Latency{
		ModelVersion: 1,
	}
}

// Identity returns the Identity of the object.
func (o *Latency) Identity() elemental.Identity {

	return LatencyIdentity
}

// Identifier returns the value of the object's unique identifier.
func (o *Latency) Identifier() string {

	return ""
}

// SetIdentifier sets the value of the object's unique identifier.
func (o *Latency) SetIdentifier(id string) {

}

// GetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *Latency) GetBSON() (any, error) {

	if o == nil {
		return nil, nil
	}

	s := &mongoAttributesLatency{}

	s.AccessPolicy = o.AccessPolicy
	s.Analysis = o.Analysis
	s.AssignPolicy = o.AssignPolicy
	s.ContentPolicy = o.ContentPolicy
	s.Extraction = o.Extraction

	return s, nil
}

// SetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *Latency) SetBSON(raw bson.Raw) error {

	if o == nil || raw.Kind == bson.ElementNil {
		return bson.ErrSetZero
	}

	s := &mongoAttributesLatency{}
	if err := raw.Unmarshal(s); err != nil {
		return err
	}

	o.AccessPolicy = s.AccessPolicy
	o.Analysis = s.Analysis
	o.AssignPolicy = s.AssignPolicy
	o.ContentPolicy = s.ContentPolicy
	o.Extraction = s.Extraction

	return nil
}

// Version returns the hardcoded version of the model.
func (o *Latency) Version() int {

	return 1
}

// BleveType implements the bleve.Classifier Interface.
func (o *Latency) BleveType() string {

	return "latency"
}

// DefaultOrder returns the list of default ordering fields.
func (o *Latency) DefaultOrder() []string {

	return []string{}
}

// Doc returns the documentation for the object
func (o *Latency) Doc() string {

	return `Holds information about latencies introduced by Apex.`
}

func (o *Latency) String() string {

	return fmt.Sprintf("<%s:%s>", o.Identity().Name, o.Identifier())
}

// ToSparse returns the sparse version of the model.
// The returned object will only contain the given fields. No field means entire field set.
func (o *Latency) ToSparse(fields ...string) elemental.SparseIdentifiable {

	if len(fields) == 0 {
		// nolint: goimports
		return &SparseLatency{
			AccessPolicy:  &o.AccessPolicy,
			Analysis:      &o.Analysis,
			AssignPolicy:  &o.AssignPolicy,
			ContentPolicy: &o.ContentPolicy,
			Extraction:    &o.Extraction,
		}
	}

	sp := &SparseLatency{}
	for _, f := range fields {
		switch f {
		case "accessPolicy":
			sp.AccessPolicy = &(o.AccessPolicy)
		case "analysis":
			sp.Analysis = &(o.Analysis)
		case "assignPolicy":
			sp.AssignPolicy = &(o.AssignPolicy)
		case "contentPolicy":
			sp.ContentPolicy = &(o.ContentPolicy)
		case "extraction":
			sp.Extraction = &(o.Extraction)
		}
	}

	return sp
}

// Patch apply the non nil value of a *SparseLatency to the object.
func (o *Latency) Patch(sparse elemental.SparseIdentifiable) {
	if !sparse.Identity().IsEqual(o.Identity()) {
		panic("cannot patch from a parse with different identity")
	}

	so := sparse.(*SparseLatency)
	if so.AccessPolicy != nil {
		o.AccessPolicy = *so.AccessPolicy
	}
	if so.Analysis != nil {
		o.Analysis = *so.Analysis
	}
	if so.AssignPolicy != nil {
		o.AssignPolicy = *so.AssignPolicy
	}
	if so.ContentPolicy != nil {
		o.ContentPolicy = *so.ContentPolicy
	}
	if so.Extraction != nil {
		o.Extraction = *so.Extraction
	}
}

// DeepCopy returns a deep copy if the Latency.
func (o *Latency) DeepCopy() *Latency {

	if o == nil {
		return nil
	}

	out := &Latency{}
	o.DeepCopyInto(out)

	return out
}

// DeepCopyInto copies the receiver into the given *Latency.
func (o *Latency) DeepCopyInto(out *Latency) {

	target, err := copystructure.Copy(o)
	if err != nil {
		panic(fmt.Sprintf("Unable to deepcopy Latency: %s", err))
	}

	*out = *target.(*Latency)
}

// Validate valides the current information stored into the structure.
func (o *Latency) Validate() error {

	errors := elemental.Errors{}
	requiredErrors := elemental.Errors{}

	if len(requiredErrors) > 0 {
		return requiredErrors
	}

	if len(errors) > 0 {
		return errors
	}

	return nil
}

// SpecificationForAttribute returns the AttributeSpecification for the given attribute name key.
func (*Latency) SpecificationForAttribute(name string) elemental.AttributeSpecification {

	if v, ok := LatencyAttributesMap[name]; ok {
		return v
	}

	// We could not find it, so let's check on the lower case indexed spec map
	return LatencyLowerCaseAttributesMap[name]
}

// AttributeSpecifications returns the full attribute specifications map.
func (*Latency) AttributeSpecifications() map[string]elemental.AttributeSpecification {

	return LatencyAttributesMap
}

// ValueForAttribute returns the value for the given attribute.
// This is a very advanced function that you should not need but in some
// very specific use cases.
func (o *Latency) ValueForAttribute(name string) any {

	switch name {
	case "accessPolicy":
		return o.AccessPolicy
	case "analysis":
		return o.Analysis
	case "assignPolicy":
		return o.AssignPolicy
	case "contentPolicy":
		return o.ContentPolicy
	case "extraction":
		return o.Extraction
	}

	return nil
}

// LatencyAttributesMap represents the map of attribute for Latency.
var LatencyAttributesMap = map[string]elemental.AttributeSpecification{
	"AccessPolicy": {
		AllowedChoices: []string{},
		BSONFieldName:  "accesspolicy",
		ConvertedName:  "AccessPolicy",
		Description:    `How much time it took to run the access policy in nanoseconds.`,
		Exposed:        true,
		Name:           "accessPolicy",
		Stored:         true,
		Type:           "integer",
	},
	"Analysis": {
		AllowedChoices: []string{},
		BSONFieldName:  "analysis",
		ConvertedName:  "Analysis",
		Description:    `How much time it took to run content analysis in nanoseconds.`,
		Exposed:        true,
		Name:           "analysis",
		Stored:         true,
		Type:           "integer",
	},
	"AssignPolicy": {
		AllowedChoices: []string{},
		BSONFieldName:  "assignpolicy",
		ConvertedName:  "AssignPolicy",
		Description:    `How much time it took to run the assign policy in nanoseconds.`,
		Exposed:        true,
		Name:           "assignPolicy",
		Stored:         true,
		Type:           "integer",
	},
	"ContentPolicy": {
		AllowedChoices: []string{},
		BSONFieldName:  "contentpolicy",
		ConvertedName:  "ContentPolicy",
		Description:    `How much time it took to run content policy in nanoseconds.`,
		Exposed:        true,
		Name:           "contentPolicy",
		Stored:         true,
		Type:           "integer",
	},
	"Extraction": {
		AllowedChoices: []string{},
		BSONFieldName:  "extraction",
		ConvertedName:  "Extraction",
		Description:    `How much time it took to run input or output extraction in nanoseconds.`,
		Exposed:        true,
		Name:           "extraction",
		Stored:         true,
		Type:           "integer",
	},
}

// LatencyLowerCaseAttributesMap represents the map of attribute for Latency.
var LatencyLowerCaseAttributesMap = map[string]elemental.AttributeSpecification{
	"accesspolicy": {
		AllowedChoices: []string{},
		BSONFieldName:  "accesspolicy",
		ConvertedName:  "AccessPolicy",
		Description:    `How much time it took to run the access policy in nanoseconds.`,
		Exposed:        true,
		Name:           "accessPolicy",
		Stored:         true,
		Type:           "integer",
	},
	"analysis": {
		AllowedChoices: []string{},
		BSONFieldName:  "analysis",
		ConvertedName:  "Analysis",
		Description:    `How much time it took to run content analysis in nanoseconds.`,
		Exposed:        true,
		Name:           "analysis",
		Stored:         true,
		Type:           "integer",
	},
	"assignpolicy": {
		AllowedChoices: []string{},
		BSONFieldName:  "assignpolicy",
		ConvertedName:  "AssignPolicy",
		Description:    `How much time it took to run the assign policy in nanoseconds.`,
		Exposed:        true,
		Name:           "assignPolicy",
		Stored:         true,
		Type:           "integer",
	},
	"contentpolicy": {
		AllowedChoices: []string{},
		BSONFieldName:  "contentpolicy",
		ConvertedName:  "ContentPolicy",
		Description:    `How much time it took to run content policy in nanoseconds.`,
		Exposed:        true,
		Name:           "contentPolicy",
		Stored:         true,
		Type:           "integer",
	},
	"extraction": {
		AllowedChoices: []string{},
		BSONFieldName:  "extraction",
		ConvertedName:  "Extraction",
		Description:    `How much time it took to run input or output extraction in nanoseconds.`,
		Exposed:        true,
		Name:           "extraction",
		Stored:         true,
		Type:           "integer",
	},
}

// SparseLatenciesList represents a list of SparseLatencies
type SparseLatenciesList []*SparseLatency

// Identity returns the identity of the objects in the list.
func (o SparseLatenciesList) Identity() elemental.Identity {

	return LatencyIdentity
}

// Copy returns a pointer to a copy the SparseLatenciesList.
func (o SparseLatenciesList) Copy() elemental.Identifiables {

	copy := slices.Clone(o)
	return &copy
}

// Append appends the objects to the a new copy of the SparseLatenciesList.
func (o SparseLatenciesList) Append(objects ...elemental.Identifiable) elemental.Identifiables {

	out := slices.Clone(o)
	for _, obj := range objects {
		out = append(out, obj.(*SparseLatency))
	}

	return out
}

// List converts the object to an elemental.IdentifiablesList.
func (o SparseLatenciesList) List() elemental.IdentifiablesList {

	out := make(elemental.IdentifiablesList, len(o))
	for i := range len(o) {
		out[i] = o[i]
	}

	return out
}

// DefaultOrder returns the default ordering fields of the content.
func (o SparseLatenciesList) DefaultOrder() []string {

	return []string{}
}

// ToPlain returns the SparseLatenciesList converted to LatenciesList.
func (o SparseLatenciesList) ToPlain() elemental.IdentifiablesList {

	out := make(elemental.IdentifiablesList, len(o))
	for i := range len(o) {
		out[i] = o[i].ToPlain()
	}

	return out
}

// Version returns the version of the content.
func (o SparseLatenciesList) Version() int {

	return 1
}

// SparseLatency represents the sparse version of a latency.
type SparseLatency struct {
	// How much time it took to run the access policy in nanoseconds.
	AccessPolicy *int `json:"accessPolicy,omitempty" msgpack:"accessPolicy,omitempty" bson:"accesspolicy,omitempty" mapstructure:"accessPolicy,omitempty"`

	// How much time it took to run content analysis in nanoseconds.
	Analysis *int `json:"analysis,omitempty" msgpack:"analysis,omitempty" bson:"analysis,omitempty" mapstructure:"analysis,omitempty"`

	// How much time it took to run the assign policy in nanoseconds.
	AssignPolicy *int `json:"assignPolicy,omitempty" msgpack:"assignPolicy,omitempty" bson:"assignpolicy,omitempty" mapstructure:"assignPolicy,omitempty"`

	// How much time it took to run content policy in nanoseconds.
	ContentPolicy *int `json:"contentPolicy,omitempty" msgpack:"contentPolicy,omitempty" bson:"contentpolicy,omitempty" mapstructure:"contentPolicy,omitempty"`

	// How much time it took to run input or output extraction in nanoseconds.
	Extraction *int `json:"extraction,omitempty" msgpack:"extraction,omitempty" bson:"extraction,omitempty" mapstructure:"extraction,omitempty"`

	ModelVersion int `json:"-" msgpack:"-" bson:"_modelversion"`
}

// NewSparseLatency returns a new  SparseLatency.
func NewSparseLatency() *SparseLatency {
	return &SparseLatency{}
}

// Identity returns the Identity of the sparse object.
func (o *SparseLatency) Identity() elemental.Identity {

	return LatencyIdentity
}

// Identifier returns the value of the sparse object's unique identifier.
func (o *SparseLatency) Identifier() string {

	return ""
}

// SetIdentifier sets the value of the sparse object's unique identifier.
func (o *SparseLatency) SetIdentifier(id string) {

}

// GetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *SparseLatency) GetBSON() (any, error) {

	if o == nil {
		return nil, nil
	}

	s := &mongoAttributesSparseLatency{}

	if o.AccessPolicy != nil {
		s.AccessPolicy = o.AccessPolicy
	}
	if o.Analysis != nil {
		s.Analysis = o.Analysis
	}
	if o.AssignPolicy != nil {
		s.AssignPolicy = o.AssignPolicy
	}
	if o.ContentPolicy != nil {
		s.ContentPolicy = o.ContentPolicy
	}
	if o.Extraction != nil {
		s.Extraction = o.Extraction
	}

	return s, nil
}

// SetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *SparseLatency) SetBSON(raw bson.Raw) error {

	if o == nil {
		return nil
	}

	s := &mongoAttributesSparseLatency{}
	if err := raw.Unmarshal(s); err != nil {
		return err
	}

	if s.AccessPolicy != nil {
		o.AccessPolicy = s.AccessPolicy
	}
	if s.Analysis != nil {
		o.Analysis = s.Analysis
	}
	if s.AssignPolicy != nil {
		o.AssignPolicy = s.AssignPolicy
	}
	if s.ContentPolicy != nil {
		o.ContentPolicy = s.ContentPolicy
	}
	if s.Extraction != nil {
		o.Extraction = s.Extraction
	}

	return nil
}

// Version returns the hardcoded version of the model.
func (o *SparseLatency) Version() int {

	return 1
}

// ToPlain returns the plain version of the sparse model.
func (o *SparseLatency) ToPlain() elemental.PlainIdentifiable {

	out := NewLatency()
	if o.AccessPolicy != nil {
		out.AccessPolicy = *o.AccessPolicy
	}
	if o.Analysis != nil {
		out.Analysis = *o.Analysis
	}
	if o.AssignPolicy != nil {
		out.AssignPolicy = *o.AssignPolicy
	}
	if o.ContentPolicy != nil {
		out.ContentPolicy = *o.ContentPolicy
	}
	if o.Extraction != nil {
		out.Extraction = *o.Extraction
	}

	return out
}

// DeepCopy returns a deep copy if the SparseLatency.
func (o *SparseLatency) DeepCopy() *SparseLatency {

	if o == nil {
		return nil
	}

	out := &SparseLatency{}
	o.DeepCopyInto(out)

	return out
}

// DeepCopyInto copies the receiver into the given *SparseLatency.
func (o *SparseLatency) DeepCopyInto(out *SparseLatency) {

	target, err := copystructure.Copy(o)
	if err != nil {
		panic(fmt.Sprintf("Unable to deepcopy SparseLatency: %s", err))
	}

	*out = *target.(*SparseLatency)
}

type mongoAttributesLatency struct {
	AccessPolicy  int `bson:"accesspolicy"`
	Analysis      int `bson:"analysis"`
	AssignPolicy  int `bson:"assignpolicy"`
	ContentPolicy int `bson:"contentpolicy"`
	Extraction    int `bson:"extraction"`
}
type mongoAttributesSparseLatency struct {
	AccessPolicy  *int `bson:"accesspolicy,omitempty"`
	Analysis      *int `bson:"analysis,omitempty"`
	AssignPolicy  *int `bson:"assignpolicy,omitempty"`
	ContentPolicy *int `bson:"contentpolicy,omitempty"`
	Extraction    *int `bson:"extraction,omitempty"`
}
