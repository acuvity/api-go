// Code generated by elegen. DO NOT EDIT.
// Source: go.acuvity.ai/elemental (templates/model.gotpl)

package api

import (
	"fmt"

	"github.com/globalsign/mgo/bson"
	"github.com/mitchellh/copystructure"
	"go.acuvity.ai/elemental"
)

// MCPMessageDirectionValue represents the possible values for attribute "direction".
type MCPMessageDirectionValue string

const (
	// MCPMessageDirectionClient2Server represents the value Client2Server.
	MCPMessageDirectionClient2Server MCPMessageDirectionValue = "Client2Server"

	// MCPMessageDirectionServer2Client represents the value Server2Client.
	MCPMessageDirectionServer2Client MCPMessageDirectionValue = "Server2Client"
)

// MCPMessageTypeValue represents the possible values for attribute "type".
type MCPMessageTypeValue string

const (
	// MCPMessageTypeNotification represents the value Notification.
	MCPMessageTypeNotification MCPMessageTypeValue = "Notification"

	// MCPMessageTypeRequest represents the value Request.
	MCPMessageTypeRequest MCPMessageTypeValue = "Request"

	// MCPMessageTypeResponse represents the value Response.
	MCPMessageTypeResponse MCPMessageTypeValue = "Response"
)

// MCPMessage represents the model of a mcpmessage
type MCPMessage struct {
	// The communication direction of the MCP message which can be from client to
	// server, or from server to client.
	Direction MCPMessageDirectionValue `json:"direction" msgpack:"direction" bson:"direction" mapstructure:"direction,omitempty"`

	// IsError is true in case if a response is an error response as opposed to a
	// result. Note that this is not the same as a result which has isError set to true
	// within the result. This is a protocol level error. This will always be false for
	// requests and notifications, and false for reponses when the response has a
	// result.
	IsError bool `json:"isError,omitempty" msgpack:"isError,omitempty" bson:"iserror,omitempty" mapstructure:"isError,omitempty"`

	// This is the method name of the request or notification. Contrary to MCP this is
	// set on responses as well if possible in which case the format will be of the
	// form method/params.name.
	Method string `json:"method,omitempty" msgpack:"method,omitempty" bson:"method,omitempty" mapstructure:"method,omitempty"`

	// The ID of a request or a response. We always extract this as a string even
	// though this can be a string or number in MCP. It is derived from the id field of
	// a request or a response.
	RequestID string `json:"requestID,omitempty" msgpack:"requestID,omitempty" bson:"requestid,omitempty" mapstructure:"requestID,omitempty"`

	// The session ID that this MCP message belongs to. This is strictly speaking not
	// part of MCP, and this can be empty.
	SessionID string `json:"sessionID,omitempty" msgpack:"sessionID,omitempty" bson:"sessionid,omitempty" mapstructure:"sessionID,omitempty"`

	// The MCP message type which can be Request, Response or Notification.
	Type MCPMessageTypeValue `json:"type" msgpack:"type" bson:"type" mapstructure:"type,omitempty"`

	ModelVersion int `json:"-" msgpack:"-" bson:"_modelversion"`
}

// NewMCPMessage returns a new *MCPMessage
func NewMCPMessage() *MCPMessage {

	return &MCPMessage{
		ModelVersion: 1,
	}
}

// GetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *MCPMessage) GetBSON() (any, error) {

	if o == nil {
		return nil, nil
	}

	s := &mongoAttributesMCPMessage{}

	s.Direction = o.Direction
	s.IsError = o.IsError
	s.Method = o.Method
	s.RequestID = o.RequestID
	s.SessionID = o.SessionID
	s.Type = o.Type

	return s, nil
}

// SetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *MCPMessage) SetBSON(raw bson.Raw) error {

	if o == nil || raw.Kind == bson.ElementNil {
		return bson.ErrSetZero
	}

	s := &mongoAttributesMCPMessage{}
	if err := raw.Unmarshal(s); err != nil {
		return err
	}

	o.Direction = s.Direction
	o.IsError = s.IsError
	o.Method = s.Method
	o.RequestID = s.RequestID
	o.SessionID = s.SessionID
	o.Type = s.Type

	return nil
}

// BleveType implements the bleve.Classifier Interface.
func (o *MCPMessage) BleveType() string {

	return "mcpmessage"
}

// DeepCopy returns a deep copy if the MCPMessage.
func (o *MCPMessage) DeepCopy() *MCPMessage {

	if o == nil {
		return nil
	}

	out := &MCPMessage{}
	o.DeepCopyInto(out)

	return out
}

// DeepCopyInto copies the receiver into the given *MCPMessage.
func (o *MCPMessage) DeepCopyInto(out *MCPMessage) {

	target, err := copystructure.Copy(o)
	if err != nil {
		panic(fmt.Sprintf("Unable to deepcopy MCPMessage: %s", err))
	}

	*out = *target.(*MCPMessage)
}

// Validate valides the current information stored into the structure.
func (o *MCPMessage) Validate() error {

	errors := elemental.Errors{}
	requiredErrors := elemental.Errors{}

	if err := elemental.ValidateRequiredString("direction", string(o.Direction)); err != nil {
		requiredErrors = requiredErrors.Append(err)
	}

	if err := elemental.ValidateStringInList("direction", string(o.Direction), []string{"Client2Server", "Server2Client"}, false); err != nil {
		errors = errors.Append(err)
	}

	if err := elemental.ValidateRequiredString("type", string(o.Type)); err != nil {
		requiredErrors = requiredErrors.Append(err)
	}

	if err := elemental.ValidateStringInList("type", string(o.Type), []string{"Request", "Response", "Notification"}, false); err != nil {
		errors = errors.Append(err)
	}

	if len(requiredErrors) > 0 {
		return requiredErrors
	}

	if len(errors) > 0 {
		return errors
	}

	return nil
}

// SpecificationForAttribute returns the AttributeSpecification for the given attribute name key.
func (*MCPMessage) SpecificationForAttribute(name string) elemental.AttributeSpecification {

	if v, ok := MCPMessageAttributesMap[name]; ok {
		return v
	}

	// We could not find it, so let's check on the lower case indexed spec map
	return MCPMessageLowerCaseAttributesMap[name]
}

// AttributeSpecifications returns the full attribute specifications map.
func (*MCPMessage) AttributeSpecifications() map[string]elemental.AttributeSpecification {

	return MCPMessageAttributesMap
}

// ValueForAttribute returns the value for the given attribute.
// This is a very advanced function that you should not need but in some
// very specific use cases.
func (o *MCPMessage) ValueForAttribute(name string) any {

	switch name {
	case "direction":
		return o.Direction
	case "isError":
		return o.IsError
	case "method":
		return o.Method
	case "requestID":
		return o.RequestID
	case "sessionID":
		return o.SessionID
	case "type":
		return o.Type
	}

	return nil
}

// MCPMessageAttributesMap represents the map of attribute for MCPMessage.
var MCPMessageAttributesMap = map[string]elemental.AttributeSpecification{
	"Direction": {
		AllowedChoices: []string{"Client2Server", "Server2Client"},
		BSONFieldName:  "direction",
		ConvertedName:  "Direction",
		Description: `The communication direction of the MCP message which can be from client to
server, or from server to client.`,
		Exposed:  true,
		Name:     "direction",
		Required: true,
		Stored:   true,
		Type:     "enum",
	},
	"IsError": {
		AllowedChoices: []string{},
		BSONFieldName:  "iserror",
		ConvertedName:  "IsError",
		Description: `IsError is true in case if a response is an error response as opposed to a
result. Note that this is not the same as a result which has isError set to true
within the result. This is a protocol level error. This will always be false for
requests and notifications, and false for reponses when the response has a
result.`,
		Exposed: true,
		Name:    "isError",
		Stored:  true,
		Type:    "boolean",
	},
	"Method": {
		AllowedChoices: []string{},
		BSONFieldName:  "method",
		ConvertedName:  "Method",
		Description: `This is the method name of the request or notification. Contrary to MCP this is
set on responses as well if possible in which case the format will be of the
form method/params.name.`,
		Exposed: true,
		Name:    "method",
		Stored:  true,
		Type:    "string",
	},
	"RequestID": {
		AllowedChoices: []string{},
		BSONFieldName:  "requestid",
		ConvertedName:  "RequestID",
		Description: `The ID of a request or a response. We always extract this as a string even
though this can be a string or number in MCP. It is derived from the id field of
a request or a response.`,
		Exposed: true,
		Name:    "requestID",
		Stored:  true,
		Type:    "string",
	},
	"SessionID": {
		AllowedChoices: []string{},
		BSONFieldName:  "sessionid",
		ConvertedName:  "SessionID",
		Description: `The session ID that this MCP message belongs to. This is strictly speaking not
part of MCP, and this can be empty.`,
		Exposed: true,
		Name:    "sessionID",
		Stored:  true,
		Type:    "string",
	},
	"Type": {
		AllowedChoices: []string{"Request", "Response", "Notification"},
		BSONFieldName:  "type",
		ConvertedName:  "Type",
		Description:    `The MCP message type which can be Request, Response or Notification.`,
		Exposed:        true,
		Name:           "type",
		Required:       true,
		Stored:         true,
		Type:           "enum",
	},
}

// MCPMessageLowerCaseAttributesMap represents the map of attribute for MCPMessage.
var MCPMessageLowerCaseAttributesMap = map[string]elemental.AttributeSpecification{
	"direction": {
		AllowedChoices: []string{"Client2Server", "Server2Client"},
		BSONFieldName:  "direction",
		ConvertedName:  "Direction",
		Description: `The communication direction of the MCP message which can be from client to
server, or from server to client.`,
		Exposed:  true,
		Name:     "direction",
		Required: true,
		Stored:   true,
		Type:     "enum",
	},
	"iserror": {
		AllowedChoices: []string{},
		BSONFieldName:  "iserror",
		ConvertedName:  "IsError",
		Description: `IsError is true in case if a response is an error response as opposed to a
result. Note that this is not the same as a result which has isError set to true
within the result. This is a protocol level error. This will always be false for
requests and notifications, and false for reponses when the response has a
result.`,
		Exposed: true,
		Name:    "isError",
		Stored:  true,
		Type:    "boolean",
	},
	"method": {
		AllowedChoices: []string{},
		BSONFieldName:  "method",
		ConvertedName:  "Method",
		Description: `This is the method name of the request or notification. Contrary to MCP this is
set on responses as well if possible in which case the format will be of the
form method/params.name.`,
		Exposed: true,
		Name:    "method",
		Stored:  true,
		Type:    "string",
	},
	"requestid": {
		AllowedChoices: []string{},
		BSONFieldName:  "requestid",
		ConvertedName:  "RequestID",
		Description: `The ID of a request or a response. We always extract this as a string even
though this can be a string or number in MCP. It is derived from the id field of
a request or a response.`,
		Exposed: true,
		Name:    "requestID",
		Stored:  true,
		Type:    "string",
	},
	"sessionid": {
		AllowedChoices: []string{},
		BSONFieldName:  "sessionid",
		ConvertedName:  "SessionID",
		Description: `The session ID that this MCP message belongs to. This is strictly speaking not
part of MCP, and this can be empty.`,
		Exposed: true,
		Name:    "sessionID",
		Stored:  true,
		Type:    "string",
	},
	"type": {
		AllowedChoices: []string{"Request", "Response", "Notification"},
		BSONFieldName:  "type",
		ConvertedName:  "Type",
		Description:    `The MCP message type which can be Request, Response or Notification.`,
		Exposed:        true,
		Name:           "type",
		Required:       true,
		Stored:         true,
		Type:           "enum",
	},
}

type mongoAttributesMCPMessage struct {
	Direction MCPMessageDirectionValue `bson:"direction"`
	IsError   bool                     `bson:"iserror,omitempty"`
	Method    string                   `bson:"method,omitempty"`
	RequestID string                   `bson:"requestid,omitempty"`
	SessionID string                   `bson:"sessionid,omitempty"`
	Type      MCPMessageTypeValue      `bson:"type"`
}
