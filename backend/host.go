// Code generated by elegen. DO NOT EDIT.
// Source: go.acuvity.ai/elemental (templates/model.gotpl)

package api

import (
	"fmt"

	"github.com/globalsign/mgo/bson"
	"github.com/mitchellh/copystructure"
	"go.acuvity.ai/elemental"
)

// Host represents the model of a host
type Host struct {
	// Disable Apex routines to try to mimic client's tls handshake signature. You
	// probably want this on.
	DisableFingerprintingResistance bool `json:"disableFingerprintingResistance" msgpack:"disableFingerprintingResistance" bson:"disablefingerprintingresistance" mapstructure:"disableFingerprintingResistance,omitempty"`

	// The hostname.
	Name string `json:"name" msgpack:"name" bson:"name" mapstructure:"name,omitempty"`

	// URL prefix for additional matching.
	Prefix string `json:"prefix,omitempty" msgpack:"prefix,omitempty" bson:"prefix,omitempty" mapstructure:"prefix,omitempty"`

	// The proxy label to use to exit to this host.
	ProxyLabel string `json:"proxyLabel,omitempty" msgpack:"proxyLabel,omitempty" bson:"proxylabel,omitempty" mapstructure:"proxyLabel,omitempty"`

	ModelVersion int `json:"-" msgpack:"-" bson:"_modelversion"`
}

// NewHost returns a new *Host
func NewHost() *Host {

	return &Host{
		ModelVersion: 1,
	}
}

// GetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *Host) GetBSON() (any, error) {

	if o == nil {
		return nil, nil
	}

	s := &mongoAttributesHost{}

	s.DisableFingerprintingResistance = o.DisableFingerprintingResistance
	s.Name = o.Name
	s.Prefix = o.Prefix
	s.ProxyLabel = o.ProxyLabel

	return s, nil
}

// SetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *Host) SetBSON(raw bson.Raw) error {

	if o == nil || raw.Kind == bson.ElementNil {
		return bson.ErrSetZero
	}

	s := &mongoAttributesHost{}
	if err := raw.Unmarshal(s); err != nil {
		return err
	}

	o.DisableFingerprintingResistance = s.DisableFingerprintingResistance
	o.Name = s.Name
	o.Prefix = s.Prefix
	o.ProxyLabel = s.ProxyLabel

	return nil
}

// BleveType implements the bleve.Classifier Interface.
func (o *Host) BleveType() string {

	return "host"
}

// DeepCopy returns a deep copy if the Host.
func (o *Host) DeepCopy() *Host {

	if o == nil {
		return nil
	}

	out := &Host{}
	o.DeepCopyInto(out)

	return out
}

// DeepCopyInto copies the receiver into the given *Host.
func (o *Host) DeepCopyInto(out *Host) {

	target, err := copystructure.Copy(o)
	if err != nil {
		panic(fmt.Sprintf("Unable to deepcopy Host: %s", err))
	}

	*out = *target.(*Host)
}

// Validate valides the current information stored into the structure.
func (o *Host) Validate() error {

	errors := elemental.Errors{}
	requiredErrors := elemental.Errors{}

	if err := elemental.ValidateRequiredString("name", o.Name); err != nil {
		requiredErrors = requiredErrors.Append(err)
	}

	if len(requiredErrors) > 0 {
		return requiredErrors
	}

	if len(errors) > 0 {
		return errors
	}

	return nil
}

// SpecificationForAttribute returns the AttributeSpecification for the given attribute name key.
func (*Host) SpecificationForAttribute(name string) elemental.AttributeSpecification {

	if v, ok := HostAttributesMap[name]; ok {
		return v
	}

	// We could not find it, so let's check on the lower case indexed spec map
	return HostLowerCaseAttributesMap[name]
}

// AttributeSpecifications returns the full attribute specifications map.
func (*Host) AttributeSpecifications() map[string]elemental.AttributeSpecification {

	return HostAttributesMap
}

// ValueForAttribute returns the value for the given attribute.
// This is a very advanced function that you should not need but in some
// very specific use cases.
func (o *Host) ValueForAttribute(name string) any {

	switch name {
	case "disableFingerprintingResistance":
		return o.DisableFingerprintingResistance
	case "name":
		return o.Name
	case "prefix":
		return o.Prefix
	case "proxyLabel":
		return o.ProxyLabel
	}

	return nil
}

// HostAttributesMap represents the map of attribute for Host.
var HostAttributesMap = map[string]elemental.AttributeSpecification{
	"DisableFingerprintingResistance": {
		AllowedChoices: []string{},
		BSONFieldName:  "disablefingerprintingresistance",
		ConvertedName:  "DisableFingerprintingResistance",
		Description: `Disable Apex routines to try to mimic client's tls handshake signature. You
probably want this on.`,
		Exposed: true,
		Name:    "disableFingerprintingResistance",
		Stored:  true,
		Type:    "boolean",
	},
	"Name": {
		AllowedChoices: []string{},
		BSONFieldName:  "name",
		ConvertedName:  "Name",
		Description:    `The hostname.`,
		Exposed:        true,
		Name:           "name",
		Required:       true,
		Stored:         true,
		Type:           "string",
	},
	"Prefix": {
		AllowedChoices: []string{},
		BSONFieldName:  "prefix",
		ConvertedName:  "Prefix",
		Description:    `URL prefix for additional matching.`,
		Exposed:        true,
		Name:           "prefix",
		Stored:         true,
		Type:           "string",
	},
	"ProxyLabel": {
		AllowedChoices: []string{},
		BSONFieldName:  "proxylabel",
		ConvertedName:  "ProxyLabel",
		Description:    `The proxy label to use to exit to this host.`,
		Exposed:        true,
		Name:           "proxyLabel",
		Stored:         true,
		Type:           "string",
	},
}

// HostLowerCaseAttributesMap represents the map of attribute for Host.
var HostLowerCaseAttributesMap = map[string]elemental.AttributeSpecification{
	"disablefingerprintingresistance": {
		AllowedChoices: []string{},
		BSONFieldName:  "disablefingerprintingresistance",
		ConvertedName:  "DisableFingerprintingResistance",
		Description: `Disable Apex routines to try to mimic client's tls handshake signature. You
probably want this on.`,
		Exposed: true,
		Name:    "disableFingerprintingResistance",
		Stored:  true,
		Type:    "boolean",
	},
	"name": {
		AllowedChoices: []string{},
		BSONFieldName:  "name",
		ConvertedName:  "Name",
		Description:    `The hostname.`,
		Exposed:        true,
		Name:           "name",
		Required:       true,
		Stored:         true,
		Type:           "string",
	},
	"prefix": {
		AllowedChoices: []string{},
		BSONFieldName:  "prefix",
		ConvertedName:  "Prefix",
		Description:    `URL prefix for additional matching.`,
		Exposed:        true,
		Name:           "prefix",
		Stored:         true,
		Type:           "string",
	},
	"proxylabel": {
		AllowedChoices: []string{},
		BSONFieldName:  "proxylabel",
		ConvertedName:  "ProxyLabel",
		Description:    `The proxy label to use to exit to this host.`,
		Exposed:        true,
		Name:           "proxyLabel",
		Stored:         true,
		Type:           "string",
	},
}

type mongoAttributesHost struct {
	DisableFingerprintingResistance bool   `bson:"disablefingerprintingresistance"`
	Name                            string `bson:"name"`
	Prefix                          string `bson:"prefix,omitempty"`
	ProxyLabel                      string `bson:"proxylabel,omitempty"`
}
