// Code generated by elegen. DO NOT EDIT.
// Source: go.acuvity.ai/elemental (templates/model.gotpl)

package api

import (
	"fmt"

	"github.com/globalsign/mgo/bson"
	"github.com/mitchellh/copystructure"
	"go.acuvity.ai/elemental"
)

// MetricIdentity represents the Identity of the object.
var MetricIdentity = elemental.Identity{
	Name:     "metric",
	Category: "metrics",
	Package:  "snitch",
	Private:  false,
}

// MetricsList represents a list of Metrics
type MetricsList []*Metric

// Identity returns the identity of the objects in the list.
func (o MetricsList) Identity() elemental.Identity {

	return MetricIdentity
}

// Copy returns a pointer to a copy the MetricsList.
func (o MetricsList) Copy() elemental.Identifiables {

	out := append(MetricsList{}, o...)
	return &out
}

// Append appends the objects to the a new copy of the MetricsList.
func (o MetricsList) Append(objects ...elemental.Identifiable) elemental.Identifiables {

	out := append(MetricsList{}, o...)
	for _, obj := range objects {
		out = append(out, obj.(*Metric))
	}

	return out
}

// List converts the object to an elemental.IdentifiablesList.
func (o MetricsList) List() elemental.IdentifiablesList {

	out := make(elemental.IdentifiablesList, len(o))
	for i := 0; i < len(o); i++ {
		out[i] = o[i]
	}

	return out
}

// DefaultOrder returns the default ordering fields of the content.
func (o MetricsList) DefaultOrder() []string {

	return []string{}
}

// ToSparse returns the MetricsList converted to SparseMetricsList.
// Objects in the list will only contain the given fields. No field means entire field set.
func (o MetricsList) ToSparse(fields ...string) elemental.Identifiables {

	out := make(SparseMetricsList, len(o))
	for i := 0; i < len(o); i++ {
		out[i] = o[i].ToSparse(fields...).(*SparseMetric)
	}

	return out
}

// Version returns the version of the content.
func (o MetricsList) Version() int {

	return 1
}

// Metric represents the model of a metric
type Metric struct {
	// ID is the identifier of the object.
	ID string `json:"ID,omitempty" msgpack:"ID,omitempty" bson:"-" mapstructure:"ID,omitempty"`

	// The namespace of the object.
	Namespace string `json:"namespace,omitempty" msgpack:"namespace,omitempty" bson:"namespace,omitempty" mapstructure:"namespace,omitempty"`

	// The query in Prometheus query format.
	Query string `json:"query" msgpack:"query" bson:"-" mapstructure:"query,omitempty"`

	// The result of the request.
	Result []map[string]any `json:"result" msgpack:"result" bson:"-" mapstructure:"result,omitempty"`

	// The type of the result.
	ResultType string `json:"resultType,omitempty" msgpack:"resultType,omitempty" bson:"-" mapstructure:"resultType,omitempty"`

	// The time for the query in any format supported by
	// https://github.com/araddon/dateparse.
	Time string `json:"time,omitempty" msgpack:"time,omitempty" bson:"-" mapstructure:"time,omitempty"`

	// The relative time of the time window as time.Duration.
	TimeRelative string `json:"timeRelative,omitempty" msgpack:"timeRelative,omitempty" bson:"-" mapstructure:"timeRelative,omitempty"`

	ModelVersion int `json:"-" msgpack:"-" bson:"_modelversion"`
}

// NewMetric returns a new *Metric
func NewMetric() *Metric {

	return &Metric{
		ModelVersion: 1,
		Result:       []map[string]any{},
	}
}

// Identity returns the Identity of the object.
func (o *Metric) Identity() elemental.Identity {

	return MetricIdentity
}

// Identifier returns the value of the object's unique identifier.
func (o *Metric) Identifier() string {

	return o.ID
}

// SetIdentifier sets the value of the object's unique identifier.
func (o *Metric) SetIdentifier(id string) {

	o.ID = id
}

// GetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *Metric) GetBSON() (any, error) {

	if o == nil {
		return nil, nil
	}

	s := &mongoAttributesMetric{}

	if o.ID != "" {
		s.ID = bson.ObjectIdHex(o.ID)
	}
	s.Namespace = o.Namespace

	return s, nil
}

// SetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *Metric) SetBSON(raw bson.Raw) error {

	if o == nil {
		return nil
	}

	s := &mongoAttributesMetric{}
	if err := raw.Unmarshal(s); err != nil {
		return err
	}

	o.ID = s.ID.Hex()
	o.Namespace = s.Namespace

	return nil
}

// Version returns the hardcoded version of the model.
func (o *Metric) Version() int {

	return 1
}

// BleveType implements the bleve.Classifier Interface.
func (o *Metric) BleveType() string {

	return "metric"
}

// DefaultOrder returns the list of default ordering fields.
func (o *Metric) DefaultOrder() []string {

	return []string{}
}

// Doc returns the documentation for the object
func (o *Metric) Doc() string {

	return `This is a metric stored in Mimir.`
}

func (o *Metric) String() string {

	return fmt.Sprintf("<%s:%s>", o.Identity().Name, o.Identifier())
}

// GetNamespace returns the Namespace of the receiver.
func (o *Metric) GetNamespace() string {

	return o.Namespace
}

// SetNamespace sets the property Namespace of the receiver using the given value.
func (o *Metric) SetNamespace(namespace string) {

	o.Namespace = namespace
}

// GetTime returns the Time of the receiver.
func (o *Metric) GetTime() string {

	return o.Time
}

// SetTime sets the property Time of the receiver using the given value.
func (o *Metric) SetTime(time string) {

	o.Time = time
}

// GetTimeRelative returns the TimeRelative of the receiver.
func (o *Metric) GetTimeRelative() string {

	return o.TimeRelative
}

// SetTimeRelative sets the property TimeRelative of the receiver using the given value.
func (o *Metric) SetTimeRelative(timeRelative string) {

	o.TimeRelative = timeRelative
}

// ToSparse returns the sparse version of the model.
// The returned object will only contain the given fields. No field means entire field set.
func (o *Metric) ToSparse(fields ...string) elemental.SparseIdentifiable {

	if len(fields) == 0 {
		// nolint: goimports
		return &SparseMetric{
			ID:           &o.ID,
			Namespace:    &o.Namespace,
			Query:        &o.Query,
			Result:       &o.Result,
			ResultType:   &o.ResultType,
			Time:         &o.Time,
			TimeRelative: &o.TimeRelative,
		}
	}

	sp := &SparseMetric{}
	for _, f := range fields {
		switch f {
		case "ID":
			sp.ID = &(o.ID)
		case "namespace":
			sp.Namespace = &(o.Namespace)
		case "query":
			sp.Query = &(o.Query)
		case "result":
			sp.Result = &(o.Result)
		case "resultType":
			sp.ResultType = &(o.ResultType)
		case "time":
			sp.Time = &(o.Time)
		case "timeRelative":
			sp.TimeRelative = &(o.TimeRelative)
		}
	}

	return sp
}

// Patch apply the non nil value of a *SparseMetric to the object.
func (o *Metric) Patch(sparse elemental.SparseIdentifiable) {
	if !sparse.Identity().IsEqual(o.Identity()) {
		panic("cannot patch from a parse with different identity")
	}

	so := sparse.(*SparseMetric)
	if so.ID != nil {
		o.ID = *so.ID
	}
	if so.Namespace != nil {
		o.Namespace = *so.Namespace
	}
	if so.Query != nil {
		o.Query = *so.Query
	}
	if so.Result != nil {
		o.Result = *so.Result
	}
	if so.ResultType != nil {
		o.ResultType = *so.ResultType
	}
	if so.Time != nil {
		o.Time = *so.Time
	}
	if so.TimeRelative != nil {
		o.TimeRelative = *so.TimeRelative
	}
}

// DeepCopy returns a deep copy if the Metric.
func (o *Metric) DeepCopy() *Metric {

	if o == nil {
		return nil
	}

	out := &Metric{}
	o.DeepCopyInto(out)

	return out
}

// DeepCopyInto copies the receiver into the given *Metric.
func (o *Metric) DeepCopyInto(out *Metric) {

	target, err := copystructure.Copy(o)
	if err != nil {
		panic(fmt.Sprintf("Unable to deepcopy Metric: %s", err))
	}

	*out = *target.(*Metric)
}

// Validate valides the current information stored into the structure.
func (o *Metric) Validate() error {

	errors := elemental.Errors{}
	requiredErrors := elemental.Errors{}

	if err := elemental.ValidateRequiredString("query", o.Query); err != nil {
		requiredErrors = requiredErrors.Append(err)
	}

	if err := ValidateDuration("timeRelative", o.TimeRelative); err != nil {
		errors = errors.Append(err)
	}

	if len(requiredErrors) > 0 {
		return requiredErrors
	}

	if len(errors) > 0 {
		return errors
	}

	return nil
}

// SpecificationForAttribute returns the AttributeSpecification for the given attribute name key.
func (*Metric) SpecificationForAttribute(name string) elemental.AttributeSpecification {

	if v, ok := MetricAttributesMap[name]; ok {
		return v
	}

	// We could not find it, so let's check on the lower case indexed spec map
	return MetricLowerCaseAttributesMap[name]
}

// AttributeSpecifications returns the full attribute specifications map.
func (*Metric) AttributeSpecifications() map[string]elemental.AttributeSpecification {

	return MetricAttributesMap
}

// ValueForAttribute returns the value for the given attribute.
// This is a very advanced function that you should not need but in some
// very specific use cases.
func (o *Metric) ValueForAttribute(name string) any {

	switch name {
	case "ID":
		return o.ID
	case "namespace":
		return o.Namespace
	case "query":
		return o.Query
	case "result":
		return o.Result
	case "resultType":
		return o.ResultType
	case "time":
		return o.Time
	case "timeRelative":
		return o.TimeRelative
	}

	return nil
}

// MetricAttributesMap represents the map of attribute for Metric.
var MetricAttributesMap = map[string]elemental.AttributeSpecification{
	"ID": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "_id",
		ConvertedName:  "ID",
		Description:    `ID is the identifier of the object.`,
		Exposed:        true,
		Filterable:     true,
		Identifier:     true,
		Name:           "ID",
		Orderable:      true,
		ReadOnly:       true,
		Stored:         true,
		Type:           "string",
	},
	"Namespace": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "namespace",
		ConvertedName:  "Namespace",
		Description:    `The namespace of the object.`,
		Exposed:        true,
		Getter:         true,
		Name:           "namespace",
		Orderable:      true,
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Type:           "string",
	},
	"Query": {
		AllowedChoices: []string{},
		ConvertedName:  "Query",
		Description:    `The query in Prometheus query format.`,
		Exposed:        true,
		Name:           "query",
		Required:       true,
		Type:           "string",
	},
	"Result": {
		AllowedChoices: []string{},
		ConvertedName:  "Result",
		Description:    `The result of the request.`,
		Exposed:        true,
		Name:           "result",
		SubType:        "[]map[string]any",
		Type:           "external",
	},
	"ResultType": {
		AllowedChoices: []string{},
		ConvertedName:  "ResultType",
		Description:    `The type of the result.`,
		Exposed:        true,
		Name:           "resultType",
		Type:           "string",
	},
	"Time": {
		AllowedChoices: []string{},
		ConvertedName:  "Time",
		Description: `The time for the query in any format supported by
https://github.com/araddon/dateparse.`,
		Exposed: true,
		Getter:  true,
		Name:    "time",
		Setter:  true,
		Type:    "string",
	},
	"TimeRelative": {
		AllowedChoices: []string{},
		ConvertedName:  "TimeRelative",
		Description:    `The relative time of the time window as time.Duration.`,
		Exposed:        true,
		Getter:         true,
		Name:           "timeRelative",
		Setter:         true,
		Type:           "string",
	},
}

// MetricLowerCaseAttributesMap represents the map of attribute for Metric.
var MetricLowerCaseAttributesMap = map[string]elemental.AttributeSpecification{
	"id": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "_id",
		ConvertedName:  "ID",
		Description:    `ID is the identifier of the object.`,
		Exposed:        true,
		Filterable:     true,
		Identifier:     true,
		Name:           "ID",
		Orderable:      true,
		ReadOnly:       true,
		Stored:         true,
		Type:           "string",
	},
	"namespace": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "namespace",
		ConvertedName:  "Namespace",
		Description:    `The namespace of the object.`,
		Exposed:        true,
		Getter:         true,
		Name:           "namespace",
		Orderable:      true,
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Type:           "string",
	},
	"query": {
		AllowedChoices: []string{},
		ConvertedName:  "Query",
		Description:    `The query in Prometheus query format.`,
		Exposed:        true,
		Name:           "query",
		Required:       true,
		Type:           "string",
	},
	"result": {
		AllowedChoices: []string{},
		ConvertedName:  "Result",
		Description:    `The result of the request.`,
		Exposed:        true,
		Name:           "result",
		SubType:        "[]map[string]any",
		Type:           "external",
	},
	"resulttype": {
		AllowedChoices: []string{},
		ConvertedName:  "ResultType",
		Description:    `The type of the result.`,
		Exposed:        true,
		Name:           "resultType",
		Type:           "string",
	},
	"time": {
		AllowedChoices: []string{},
		ConvertedName:  "Time",
		Description: `The time for the query in any format supported by
https://github.com/araddon/dateparse.`,
		Exposed: true,
		Getter:  true,
		Name:    "time",
		Setter:  true,
		Type:    "string",
	},
	"timerelative": {
		AllowedChoices: []string{},
		ConvertedName:  "TimeRelative",
		Description:    `The relative time of the time window as time.Duration.`,
		Exposed:        true,
		Getter:         true,
		Name:           "timeRelative",
		Setter:         true,
		Type:           "string",
	},
}

// SparseMetricsList represents a list of SparseMetrics
type SparseMetricsList []*SparseMetric

// Identity returns the identity of the objects in the list.
func (o SparseMetricsList) Identity() elemental.Identity {

	return MetricIdentity
}

// Copy returns a pointer to a copy the SparseMetricsList.
func (o SparseMetricsList) Copy() elemental.Identifiables {

	copy := append(SparseMetricsList{}, o...)
	return &copy
}

// Append appends the objects to the a new copy of the SparseMetricsList.
func (o SparseMetricsList) Append(objects ...elemental.Identifiable) elemental.Identifiables {

	out := append(SparseMetricsList{}, o...)
	for _, obj := range objects {
		out = append(out, obj.(*SparseMetric))
	}

	return out
}

// List converts the object to an elemental.IdentifiablesList.
func (o SparseMetricsList) List() elemental.IdentifiablesList {

	out := make(elemental.IdentifiablesList, len(o))
	for i := 0; i < len(o); i++ {
		out[i] = o[i]
	}

	return out
}

// DefaultOrder returns the default ordering fields of the content.
func (o SparseMetricsList) DefaultOrder() []string {

	return []string{}
}

// ToPlain returns the SparseMetricsList converted to MetricsList.
func (o SparseMetricsList) ToPlain() elemental.IdentifiablesList {

	out := make(elemental.IdentifiablesList, len(o))
	for i := 0; i < len(o); i++ {
		out[i] = o[i].ToPlain()
	}

	return out
}

// Version returns the version of the content.
func (o SparseMetricsList) Version() int {

	return 1
}

// SparseMetric represents the sparse version of a metric.
type SparseMetric struct {
	// ID is the identifier of the object.
	ID *string `json:"ID,omitempty" msgpack:"ID,omitempty" bson:"-" mapstructure:"ID,omitempty"`

	// The namespace of the object.
	Namespace *string `json:"namespace,omitempty" msgpack:"namespace,omitempty" bson:"namespace,omitempty" mapstructure:"namespace,omitempty"`

	// The query in Prometheus query format.
	Query *string `json:"query,omitempty" msgpack:"query,omitempty" bson:"-" mapstructure:"query,omitempty"`

	// The result of the request.
	Result *[]map[string]any `json:"result,omitempty" msgpack:"result,omitempty" bson:"-" mapstructure:"result,omitempty"`

	// The type of the result.
	ResultType *string `json:"resultType,omitempty" msgpack:"resultType,omitempty" bson:"-" mapstructure:"resultType,omitempty"`

	// The time for the query in any format supported by
	// https://github.com/araddon/dateparse.
	Time *string `json:"time,omitempty" msgpack:"time,omitempty" bson:"-" mapstructure:"time,omitempty"`

	// The relative time of the time window as time.Duration.
	TimeRelative *string `json:"timeRelative,omitempty" msgpack:"timeRelative,omitempty" bson:"-" mapstructure:"timeRelative,omitempty"`

	ModelVersion int `json:"-" msgpack:"-" bson:"_modelversion"`
}

// NewSparseMetric returns a new  SparseMetric.
func NewSparseMetric() *SparseMetric {
	return &SparseMetric{}
}

// Identity returns the Identity of the sparse object.
func (o *SparseMetric) Identity() elemental.Identity {

	return MetricIdentity
}

// Identifier returns the value of the sparse object's unique identifier.
func (o *SparseMetric) Identifier() string {

	if o.ID == nil {
		return ""
	}
	return *o.ID
}

// SetIdentifier sets the value of the sparse object's unique identifier.
func (o *SparseMetric) SetIdentifier(id string) {

	if id != "" {
		o.ID = &id
	} else {
		o.ID = nil
	}
}

// GetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *SparseMetric) GetBSON() (any, error) {

	if o == nil {
		return nil, nil
	}

	s := &mongoAttributesSparseMetric{}

	if o.ID != nil {
		s.ID = bson.ObjectIdHex(*o.ID)
	}
	if o.Namespace != nil {
		s.Namespace = o.Namespace
	}

	return s, nil
}

// SetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *SparseMetric) SetBSON(raw bson.Raw) error {

	if o == nil {
		return nil
	}

	s := &mongoAttributesSparseMetric{}
	if err := raw.Unmarshal(s); err != nil {
		return err
	}

	id := s.ID.Hex()
	o.ID = &id
	if s.Namespace != nil {
		o.Namespace = s.Namespace
	}

	return nil
}

// Version returns the hardcoded version of the model.
func (o *SparseMetric) Version() int {

	return 1
}

// ToPlain returns the plain version of the sparse model.
func (o *SparseMetric) ToPlain() elemental.PlainIdentifiable {

	out := NewMetric()
	if o.ID != nil {
		out.ID = *o.ID
	}
	if o.Namespace != nil {
		out.Namespace = *o.Namespace
	}
	if o.Query != nil {
		out.Query = *o.Query
	}
	if o.Result != nil {
		out.Result = *o.Result
	}
	if o.ResultType != nil {
		out.ResultType = *o.ResultType
	}
	if o.Time != nil {
		out.Time = *o.Time
	}
	if o.TimeRelative != nil {
		out.TimeRelative = *o.TimeRelative
	}

	return out
}

// GetNamespace returns the Namespace of the receiver.
func (o *SparseMetric) GetNamespace() (out string) {

	if o.Namespace == nil {
		return
	}

	return *o.Namespace
}

// SetNamespace sets the property Namespace of the receiver using the address of the given value.
func (o *SparseMetric) SetNamespace(namespace string) {

	o.Namespace = &namespace
}

// GetTime returns the Time of the receiver.
func (o *SparseMetric) GetTime() (out string) {

	if o.Time == nil {
		return
	}

	return *o.Time
}

// SetTime sets the property Time of the receiver using the address of the given value.
func (o *SparseMetric) SetTime(time string) {

	o.Time = &time
}

// GetTimeRelative returns the TimeRelative of the receiver.
func (o *SparseMetric) GetTimeRelative() (out string) {

	if o.TimeRelative == nil {
		return
	}

	return *o.TimeRelative
}

// SetTimeRelative sets the property TimeRelative of the receiver using the address of the given value.
func (o *SparseMetric) SetTimeRelative(timeRelative string) {

	o.TimeRelative = &timeRelative
}

// DeepCopy returns a deep copy if the SparseMetric.
func (o *SparseMetric) DeepCopy() *SparseMetric {

	if o == nil {
		return nil
	}

	out := &SparseMetric{}
	o.DeepCopyInto(out)

	return out
}

// DeepCopyInto copies the receiver into the given *SparseMetric.
func (o *SparseMetric) DeepCopyInto(out *SparseMetric) {

	target, err := copystructure.Copy(o)
	if err != nil {
		panic(fmt.Sprintf("Unable to deepcopy SparseMetric: %s", err))
	}

	*out = *target.(*SparseMetric)
}

type mongoAttributesMetric struct {
	ID        bson.ObjectId `bson:"_id,omitempty"`
	Namespace string        `bson:"namespace,omitempty"`
}
type mongoAttributesSparseMetric struct {
	ID        bson.ObjectId `bson:"_id,omitempty"`
	Namespace *string       `bson:"namespace,omitempty"`
}
