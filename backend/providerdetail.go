// Code generated by elegen. DO NOT EDIT.
// Source: go.acuvity.ai/elemental (templates/model.gotpl)

package api

import (
	"fmt"

	"github.com/globalsign/mgo/bson"
	"github.com/mitchellh/copystructure"
	"go.acuvity.ai/elemental"
)

// ProviderDetailIdentity represents the Identity of the object.
var ProviderDetailIdentity = elemental.Identity{
	Name:     "providerdetail",
	Category: "providerdetails",
	Package:  "lain",
	Private:  false,
}

// ProviderDetailsList represents a list of ProviderDetails
type ProviderDetailsList []*ProviderDetail

// Identity returns the identity of the objects in the list.
func (o ProviderDetailsList) Identity() elemental.Identity {

	return ProviderDetailIdentity
}

// Copy returns a pointer to a copy the ProviderDetailsList.
func (o ProviderDetailsList) Copy() elemental.Identifiables {

	out := append(ProviderDetailsList{}, o...)
	return &out
}

// Append appends the objects to the a new copy of the ProviderDetailsList.
func (o ProviderDetailsList) Append(objects ...elemental.Identifiable) elemental.Identifiables {

	out := append(ProviderDetailsList{}, o...)
	for _, obj := range objects {
		out = append(out, obj.(*ProviderDetail))
	}

	return out
}

// List converts the object to an elemental.IdentifiablesList.
func (o ProviderDetailsList) List() elemental.IdentifiablesList {

	out := make(elemental.IdentifiablesList, len(o))
	for i := 0; i < len(o); i++ {
		out[i] = o[i]
	}

	return out
}

// DefaultOrder returns the default ordering fields of the content.
func (o ProviderDetailsList) DefaultOrder() []string {

	return []string{}
}

// ToSparse returns the ProviderDetailsList converted to SparseProviderDetailsList.
// Objects in the list will only contain the given fields. No field means entire field set.
func (o ProviderDetailsList) ToSparse(fields ...string) elemental.Identifiables {

	out := make(SparseProviderDetailsList, len(o))
	for i := 0; i < len(o); i++ {
		out[i] = o[i].ToSparse(fields...).(*SparseProviderDetail)
	}

	return out
}

// Version returns the version of the content.
func (o ProviderDetailsList) Version() int {

	return 1
}

// ProviderDetail represents the model of a providerdetail
type ProviderDetail struct {
	// ID is the identifier of the object.
	ID string `json:"ID,omitempty" msgpack:"ID,omitempty" bson:"-" mapstructure:"ID,omitempty"`

	// The list of compliance provided by the domain.
	Compliances []string `json:"compliances,omitempty" msgpack:"compliances,omitempty" bson:"compliances,omitempty" mapstructure:"compliances,omitempty"`

	// The user data storage location.
	DataResidency []string `json:"dataResidency,omitempty" msgpack:"dataResidency,omitempty" bson:"dataresidency,omitempty" mapstructure:"dataResidency,omitempty"`

	// Does the provider share user data with 3rd party or services.
	DataSharing bool `json:"dataSharing,omitempty" msgpack:"dataSharing,omitempty" bson:"datasharing,omitempty" mapstructure:"dataSharing,omitempty"`

	// Does the provider share user data with consent with 3rd party or services.
	DataSharingConsent bool `json:"dataSharingConsent,omitempty" msgpack:"dataSharingConsent,omitempty" bson:"datasharingconsent,omitempty" mapstructure:"dataSharingConsent,omitempty"`

	// The description of the provider detail.
	Description string `json:"description" msgpack:"description" bson:"-" mapstructure:"description,omitempty"`

	// Domain of the provider detail.
	Domain string `json:"domain" msgpack:"domain" bson:"-" mapstructure:"domain,omitempty"`

	// Friendly Name of the provider detail.
	FriendlyName string `json:"friendlyName" msgpack:"friendlyName" bson:"-" mapstructure:"friendlyName,omitempty"`

	// The icon of the providerdetail, base64 encoded.
	Icon string `json:"icon,omitempty" msgpack:"icon,omitempty" bson:"-" mapstructure:"icon,omitempty"`

	// List of AI models used by the domain.
	Models []string `json:"models,omitempty" msgpack:"models,omitempty" bson:"models,omitempty" mapstructure:"models,omitempty"`

	// Name of the provider detail.
	Name string `json:"name" msgpack:"name" bson:"-" mapstructure:"name,omitempty"`

	// The namespace of the object.
	Namespace string `json:"namespace,omitempty" msgpack:"namespace,omitempty" bson:"namespace,omitempty" mapstructure:"namespace,omitempty"`

	// The data retention policies by the domain for each type of users.
	ProviderRetentionPolicies []*ProviderRetentionPolicy `json:"providerRetentionPolicies,omitempty" msgpack:"providerRetentionPolicies,omitempty" bson:"providerretentionpolicies,omitempty" mapstructure:"providerRetentionPolicies,omitempty"`

	// Does the provider use user data for training its model.
	ProviderTrainingPolicies []*ProviderTrainingPolicy `json:"providerTrainingPolicies,omitempty" msgpack:"providerTrainingPolicies,omitempty" bson:"providertrainingpolicies,omitempty" mapstructure:"providerTrainingPolicies,omitempty"`

	// The risk score for the domain.
	RiskScore float64 `json:"riskScore" msgpack:"riskScore" bson:"-" mapstructure:"riskScore,omitempty"`

	// Does provider use third party model.
	ThirdPartyModelUsage bool `json:"thirdPartyModelUsage,omitempty" msgpack:"thirdPartyModelUsage,omitempty" bson:"thirdpartymodelusage,omitempty" mapstructure:"thirdPartyModelUsage,omitempty"`

	ModelVersion int `json:"-" msgpack:"-" bson:"_modelversion"`
}

// NewProviderDetail returns a new *ProviderDetail
func NewProviderDetail() *ProviderDetail {

	return &ProviderDetail{
		ModelVersion:              1,
		Compliances:               []string{},
		DataResidency:             []string{},
		Models:                    []string{},
		ProviderRetentionPolicies: []*ProviderRetentionPolicy{},
	}
}

// Identity returns the Identity of the object.
func (o *ProviderDetail) Identity() elemental.Identity {

	return ProviderDetailIdentity
}

// Identifier returns the value of the object's unique identifier.
func (o *ProviderDetail) Identifier() string {

	return o.ID
}

// SetIdentifier sets the value of the object's unique identifier.
func (o *ProviderDetail) SetIdentifier(id string) {

	o.ID = id
}

// GetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *ProviderDetail) GetBSON() (any, error) {

	if o == nil {
		return nil, nil
	}

	s := &mongoAttributesProviderDetail{}

	if o.ID != "" {
		s.ID = bson.ObjectIdHex(o.ID)
	}
	s.Compliances = o.Compliances
	s.DataResidency = o.DataResidency
	s.DataSharing = o.DataSharing
	s.DataSharingConsent = o.DataSharingConsent
	s.Models = o.Models
	s.Namespace = o.Namespace
	s.ProviderRetentionPolicies = o.ProviderRetentionPolicies
	s.ProviderTrainingPolicies = o.ProviderTrainingPolicies
	s.ThirdPartyModelUsage = o.ThirdPartyModelUsage

	return s, nil
}

// SetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *ProviderDetail) SetBSON(raw bson.Raw) error {

	if o == nil {
		return nil
	}

	s := &mongoAttributesProviderDetail{}
	if err := raw.Unmarshal(s); err != nil {
		return err
	}

	o.ID = s.ID.Hex()
	o.Compliances = s.Compliances
	o.DataResidency = s.DataResidency
	o.DataSharing = s.DataSharing
	o.DataSharingConsent = s.DataSharingConsent
	o.Models = s.Models
	o.Namespace = s.Namespace
	o.ProviderRetentionPolicies = s.ProviderRetentionPolicies
	o.ProviderTrainingPolicies = s.ProviderTrainingPolicies
	o.ThirdPartyModelUsage = s.ThirdPartyModelUsage

	return nil
}

// Version returns the hardcoded version of the model.
func (o *ProviderDetail) Version() int {

	return 1
}

// BleveType implements the bleve.Classifier Interface.
func (o *ProviderDetail) BleveType() string {

	return "providerdetail"
}

// DefaultOrder returns the list of default ordering fields.
func (o *ProviderDetail) DefaultOrder() []string {

	return []string{}
}

// Doc returns the documentation for the object
func (o *ProviderDetail) Doc() string {

	return `List all information about the provider and its AI domain.`
}

func (o *ProviderDetail) String() string {

	return fmt.Sprintf("<%s:%s>", o.Identity().Name, o.Identifier())
}

// GetNamespace returns the Namespace of the receiver.
func (o *ProviderDetail) GetNamespace() string {

	return o.Namespace
}

// SetNamespace sets the property Namespace of the receiver using the given value.
func (o *ProviderDetail) SetNamespace(namespace string) {

	o.Namespace = namespace
}

// ToSparse returns the sparse version of the model.
// The returned object will only contain the given fields. No field means entire field set.
func (o *ProviderDetail) ToSparse(fields ...string) elemental.SparseIdentifiable {

	if len(fields) == 0 {
		// nolint: goimports
		return &SparseProviderDetail{
			ID:                        &o.ID,
			Compliances:               &o.Compliances,
			DataResidency:             &o.DataResidency,
			DataSharing:               &o.DataSharing,
			DataSharingConsent:        &o.DataSharingConsent,
			Description:               &o.Description,
			Domain:                    &o.Domain,
			FriendlyName:              &o.FriendlyName,
			Icon:                      &o.Icon,
			Models:                    &o.Models,
			Name:                      &o.Name,
			Namespace:                 &o.Namespace,
			ProviderRetentionPolicies: &o.ProviderRetentionPolicies,
			ProviderTrainingPolicies:  &o.ProviderTrainingPolicies,
			RiskScore:                 &o.RiskScore,
			ThirdPartyModelUsage:      &o.ThirdPartyModelUsage,
		}
	}

	sp := &SparseProviderDetail{}
	for _, f := range fields {
		switch f {
		case "ID":
			sp.ID = &(o.ID)
		case "compliances":
			sp.Compliances = &(o.Compliances)
		case "dataResidency":
			sp.DataResidency = &(o.DataResidency)
		case "dataSharing":
			sp.DataSharing = &(o.DataSharing)
		case "dataSharingConsent":
			sp.DataSharingConsent = &(o.DataSharingConsent)
		case "description":
			sp.Description = &(o.Description)
		case "domain":
			sp.Domain = &(o.Domain)
		case "friendlyName":
			sp.FriendlyName = &(o.FriendlyName)
		case "icon":
			sp.Icon = &(o.Icon)
		case "models":
			sp.Models = &(o.Models)
		case "name":
			sp.Name = &(o.Name)
		case "namespace":
			sp.Namespace = &(o.Namespace)
		case "providerRetentionPolicies":
			sp.ProviderRetentionPolicies = &(o.ProviderRetentionPolicies)
		case "providerTrainingPolicies":
			sp.ProviderTrainingPolicies = &(o.ProviderTrainingPolicies)
		case "riskScore":
			sp.RiskScore = &(o.RiskScore)
		case "thirdPartyModelUsage":
			sp.ThirdPartyModelUsage = &(o.ThirdPartyModelUsage)
		}
	}

	return sp
}

// Patch apply the non nil value of a *SparseProviderDetail to the object.
func (o *ProviderDetail) Patch(sparse elemental.SparseIdentifiable) {
	if !sparse.Identity().IsEqual(o.Identity()) {
		panic("cannot patch from a parse with different identity")
	}

	so := sparse.(*SparseProviderDetail)
	if so.ID != nil {
		o.ID = *so.ID
	}
	if so.Compliances != nil {
		o.Compliances = *so.Compliances
	}
	if so.DataResidency != nil {
		o.DataResidency = *so.DataResidency
	}
	if so.DataSharing != nil {
		o.DataSharing = *so.DataSharing
	}
	if so.DataSharingConsent != nil {
		o.DataSharingConsent = *so.DataSharingConsent
	}
	if so.Description != nil {
		o.Description = *so.Description
	}
	if so.Domain != nil {
		o.Domain = *so.Domain
	}
	if so.FriendlyName != nil {
		o.FriendlyName = *so.FriendlyName
	}
	if so.Icon != nil {
		o.Icon = *so.Icon
	}
	if so.Models != nil {
		o.Models = *so.Models
	}
	if so.Name != nil {
		o.Name = *so.Name
	}
	if so.Namespace != nil {
		o.Namespace = *so.Namespace
	}
	if so.ProviderRetentionPolicies != nil {
		o.ProviderRetentionPolicies = *so.ProviderRetentionPolicies
	}
	if so.ProviderTrainingPolicies != nil {
		o.ProviderTrainingPolicies = *so.ProviderTrainingPolicies
	}
	if so.RiskScore != nil {
		o.RiskScore = *so.RiskScore
	}
	if so.ThirdPartyModelUsage != nil {
		o.ThirdPartyModelUsage = *so.ThirdPartyModelUsage
	}
}

// DeepCopy returns a deep copy if the ProviderDetail.
func (o *ProviderDetail) DeepCopy() *ProviderDetail {

	if o == nil {
		return nil
	}

	out := &ProviderDetail{}
	o.DeepCopyInto(out)

	return out
}

// DeepCopyInto copies the receiver into the given *ProviderDetail.
func (o *ProviderDetail) DeepCopyInto(out *ProviderDetail) {

	target, err := copystructure.Copy(o)
	if err != nil {
		panic(fmt.Sprintf("Unable to deepcopy ProviderDetail: %s", err))
	}

	*out = *target.(*ProviderDetail)
}

// Validate valides the current information stored into the structure.
func (o *ProviderDetail) Validate() error {

	errors := elemental.Errors{}
	requiredErrors := elemental.Errors{}

	if err := elemental.ValidateRequiredString("friendlyName", o.FriendlyName); err != nil {
		requiredErrors = requiredErrors.Append(err)
	}

	if err := elemental.ValidateRequiredString("name", o.Name); err != nil {
		requiredErrors = requiredErrors.Append(err)
	}

	for _, sub := range o.ProviderRetentionPolicies {
		if sub == nil {
			continue
		}
		elemental.ResetDefaultForZeroValues(sub)
		if err := sub.Validate(); err != nil {
			errors = errors.Append(err)
		}
	}

	for _, sub := range o.ProviderTrainingPolicies {
		if sub == nil {
			continue
		}
		elemental.ResetDefaultForZeroValues(sub)
		if err := sub.Validate(); err != nil {
			errors = errors.Append(err)
		}
	}

	if err := elemental.ValidateRequiredFloat("riskScore", o.RiskScore); err != nil {
		requiredErrors = requiredErrors.Append(err)
	}

	if err := elemental.ValidateMaximumFloat("riskScore", o.RiskScore, 1, false); err != nil {
		errors = errors.Append(err)
	}

	if len(requiredErrors) > 0 {
		return requiredErrors
	}

	if len(errors) > 0 {
		return errors
	}

	return nil
}

// SpecificationForAttribute returns the AttributeSpecification for the given attribute name key.
func (*ProviderDetail) SpecificationForAttribute(name string) elemental.AttributeSpecification {

	if v, ok := ProviderDetailAttributesMap[name]; ok {
		return v
	}

	// We could not find it, so let's check on the lower case indexed spec map
	return ProviderDetailLowerCaseAttributesMap[name]
}

// AttributeSpecifications returns the full attribute specifications map.
func (*ProviderDetail) AttributeSpecifications() map[string]elemental.AttributeSpecification {

	return ProviderDetailAttributesMap
}

// ValueForAttribute returns the value for the given attribute.
// This is a very advanced function that you should not need but in some
// very specific use cases.
func (o *ProviderDetail) ValueForAttribute(name string) any {

	switch name {
	case "ID":
		return o.ID
	case "compliances":
		return o.Compliances
	case "dataResidency":
		return o.DataResidency
	case "dataSharing":
		return o.DataSharing
	case "dataSharingConsent":
		return o.DataSharingConsent
	case "description":
		return o.Description
	case "domain":
		return o.Domain
	case "friendlyName":
		return o.FriendlyName
	case "icon":
		return o.Icon
	case "models":
		return o.Models
	case "name":
		return o.Name
	case "namespace":
		return o.Namespace
	case "providerRetentionPolicies":
		return o.ProviderRetentionPolicies
	case "providerTrainingPolicies":
		return o.ProviderTrainingPolicies
	case "riskScore":
		return o.RiskScore
	case "thirdPartyModelUsage":
		return o.ThirdPartyModelUsage
	}

	return nil
}

// ProviderDetailAttributesMap represents the map of attribute for ProviderDetail.
var ProviderDetailAttributesMap = map[string]elemental.AttributeSpecification{
	"ID": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "_id",
		ConvertedName:  "ID",
		Description:    `ID is the identifier of the object.`,
		Exposed:        true,
		Filterable:     true,
		Identifier:     true,
		Name:           "ID",
		Orderable:      true,
		ReadOnly:       true,
		Stored:         true,
		Type:           "string",
	},
	"Compliances": {
		AllowedChoices: []string{},
		BSONFieldName:  "compliances",
		ConvertedName:  "Compliances",
		Description:    `The list of compliance provided by the domain.`,
		Exposed:        true,
		Name:           "compliances",
		Stored:         true,
		SubType:        "string",
		Type:           "list",
	},
	"DataResidency": {
		AllowedChoices: []string{},
		BSONFieldName:  "dataresidency",
		ConvertedName:  "DataResidency",
		Description:    `The user data storage location.`,
		Exposed:        true,
		Name:           "dataResidency",
		Stored:         true,
		SubType:        "string",
		Type:           "list",
	},
	"DataSharing": {
		AllowedChoices: []string{},
		BSONFieldName:  "datasharing",
		ConvertedName:  "DataSharing",
		Description:    `Does the provider share user data with 3rd party or services.`,
		Exposed:        true,
		Name:           "dataSharing",
		Stored:         true,
		Type:           "boolean",
	},
	"DataSharingConsent": {
		AllowedChoices: []string{},
		BSONFieldName:  "datasharingconsent",
		ConvertedName:  "DataSharingConsent",
		Description:    `Does the provider share user data with consent with 3rd party or services.`,
		Exposed:        true,
		Name:           "dataSharingConsent",
		Stored:         true,
		Type:           "boolean",
	},
	"Description": {
		AllowedChoices: []string{},
		ConvertedName:  "Description",
		Description:    `The description of the provider detail.`,
		Exposed:        true,
		Name:           "description",
		Type:           "string",
	},
	"Domain": {
		AllowedChoices: []string{},
		ConvertedName:  "Domain",
		Description:    `Domain of the provider detail.`,
		Exposed:        true,
		Name:           "domain",
		Type:           "string",
	},
	"FriendlyName": {
		AllowedChoices: []string{},
		ConvertedName:  "FriendlyName",
		Description:    `Friendly Name of the provider detail.`,
		Exposed:        true,
		Name:           "friendlyName",
		Required:       true,
		Type:           "string",
	},
	"Icon": {
		AllowedChoices: []string{},
		ConvertedName:  "Icon",
		Description:    `The icon of the providerdetail, base64 encoded.`,
		Exposed:        true,
		Name:           "icon",
		Type:           "string",
	},
	"Models": {
		AllowedChoices: []string{},
		BSONFieldName:  "models",
		ConvertedName:  "Models",
		Description:    `List of AI models used by the domain.`,
		Exposed:        true,
		Name:           "models",
		Stored:         true,
		SubType:        "string",
		Type:           "list",
	},
	"Name": {
		AllowedChoices: []string{},
		ConvertedName:  "Name",
		Description:    `Name of the provider detail.`,
		Exposed:        true,
		Name:           "name",
		Required:       true,
		Type:           "string",
	},
	"Namespace": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "namespace",
		ConvertedName:  "Namespace",
		Description:    `The namespace of the object.`,
		Exposed:        true,
		Getter:         true,
		Name:           "namespace",
		Orderable:      true,
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Type:           "string",
	},
	"ProviderRetentionPolicies": {
		AllowedChoices: []string{},
		BSONFieldName:  "providerretentionpolicies",
		ConvertedName:  "ProviderRetentionPolicies",
		Description:    `The data retention policies by the domain for each type of users.`,
		Exposed:        true,
		Name:           "providerRetentionPolicies",
		Stored:         true,
		SubType:        "providerretentionpolicy",
		Type:           "refList",
	},
	"ProviderTrainingPolicies": {
		AllowedChoices: []string{},
		BSONFieldName:  "providertrainingpolicies",
		ConvertedName:  "ProviderTrainingPolicies",
		Description:    `Does the provider use user data for training its model.`,
		Exposed:        true,
		Name:           "providerTrainingPolicies",
		Stored:         true,
		SubType:        "providertrainingpolicy",
		Type:           "refList",
	},
	"RiskScore": {
		AllowedChoices: []string{},
		ConvertedName:  "RiskScore",
		Description:    `The risk score for the domain.`,
		Exposed:        true,
		MaxValue:       1,
		Name:           "riskScore",
		Required:       true,
		Type:           "float",
	},
	"ThirdPartyModelUsage": {
		AllowedChoices: []string{},
		BSONFieldName:  "thirdpartymodelusage",
		ConvertedName:  "ThirdPartyModelUsage",
		Description:    `Does provider use third party model.`,
		Exposed:        true,
		Name:           "thirdPartyModelUsage",
		Stored:         true,
		Type:           "boolean",
	},
}

// ProviderDetailLowerCaseAttributesMap represents the map of attribute for ProviderDetail.
var ProviderDetailLowerCaseAttributesMap = map[string]elemental.AttributeSpecification{
	"id": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "_id",
		ConvertedName:  "ID",
		Description:    `ID is the identifier of the object.`,
		Exposed:        true,
		Filterable:     true,
		Identifier:     true,
		Name:           "ID",
		Orderable:      true,
		ReadOnly:       true,
		Stored:         true,
		Type:           "string",
	},
	"compliances": {
		AllowedChoices: []string{},
		BSONFieldName:  "compliances",
		ConvertedName:  "Compliances",
		Description:    `The list of compliance provided by the domain.`,
		Exposed:        true,
		Name:           "compliances",
		Stored:         true,
		SubType:        "string",
		Type:           "list",
	},
	"dataresidency": {
		AllowedChoices: []string{},
		BSONFieldName:  "dataresidency",
		ConvertedName:  "DataResidency",
		Description:    `The user data storage location.`,
		Exposed:        true,
		Name:           "dataResidency",
		Stored:         true,
		SubType:        "string",
		Type:           "list",
	},
	"datasharing": {
		AllowedChoices: []string{},
		BSONFieldName:  "datasharing",
		ConvertedName:  "DataSharing",
		Description:    `Does the provider share user data with 3rd party or services.`,
		Exposed:        true,
		Name:           "dataSharing",
		Stored:         true,
		Type:           "boolean",
	},
	"datasharingconsent": {
		AllowedChoices: []string{},
		BSONFieldName:  "datasharingconsent",
		ConvertedName:  "DataSharingConsent",
		Description:    `Does the provider share user data with consent with 3rd party or services.`,
		Exposed:        true,
		Name:           "dataSharingConsent",
		Stored:         true,
		Type:           "boolean",
	},
	"description": {
		AllowedChoices: []string{},
		ConvertedName:  "Description",
		Description:    `The description of the provider detail.`,
		Exposed:        true,
		Name:           "description",
		Type:           "string",
	},
	"domain": {
		AllowedChoices: []string{},
		ConvertedName:  "Domain",
		Description:    `Domain of the provider detail.`,
		Exposed:        true,
		Name:           "domain",
		Type:           "string",
	},
	"friendlyname": {
		AllowedChoices: []string{},
		ConvertedName:  "FriendlyName",
		Description:    `Friendly Name of the provider detail.`,
		Exposed:        true,
		Name:           "friendlyName",
		Required:       true,
		Type:           "string",
	},
	"icon": {
		AllowedChoices: []string{},
		ConvertedName:  "Icon",
		Description:    `The icon of the providerdetail, base64 encoded.`,
		Exposed:        true,
		Name:           "icon",
		Type:           "string",
	},
	"models": {
		AllowedChoices: []string{},
		BSONFieldName:  "models",
		ConvertedName:  "Models",
		Description:    `List of AI models used by the domain.`,
		Exposed:        true,
		Name:           "models",
		Stored:         true,
		SubType:        "string",
		Type:           "list",
	},
	"name": {
		AllowedChoices: []string{},
		ConvertedName:  "Name",
		Description:    `Name of the provider detail.`,
		Exposed:        true,
		Name:           "name",
		Required:       true,
		Type:           "string",
	},
	"namespace": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "namespace",
		ConvertedName:  "Namespace",
		Description:    `The namespace of the object.`,
		Exposed:        true,
		Getter:         true,
		Name:           "namespace",
		Orderable:      true,
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Type:           "string",
	},
	"providerretentionpolicies": {
		AllowedChoices: []string{},
		BSONFieldName:  "providerretentionpolicies",
		ConvertedName:  "ProviderRetentionPolicies",
		Description:    `The data retention policies by the domain for each type of users.`,
		Exposed:        true,
		Name:           "providerRetentionPolicies",
		Stored:         true,
		SubType:        "providerretentionpolicy",
		Type:           "refList",
	},
	"providertrainingpolicies": {
		AllowedChoices: []string{},
		BSONFieldName:  "providertrainingpolicies",
		ConvertedName:  "ProviderTrainingPolicies",
		Description:    `Does the provider use user data for training its model.`,
		Exposed:        true,
		Name:           "providerTrainingPolicies",
		Stored:         true,
		SubType:        "providertrainingpolicy",
		Type:           "refList",
	},
	"riskscore": {
		AllowedChoices: []string{},
		ConvertedName:  "RiskScore",
		Description:    `The risk score for the domain.`,
		Exposed:        true,
		MaxValue:       1,
		Name:           "riskScore",
		Required:       true,
		Type:           "float",
	},
	"thirdpartymodelusage": {
		AllowedChoices: []string{},
		BSONFieldName:  "thirdpartymodelusage",
		ConvertedName:  "ThirdPartyModelUsage",
		Description:    `Does provider use third party model.`,
		Exposed:        true,
		Name:           "thirdPartyModelUsage",
		Stored:         true,
		Type:           "boolean",
	},
}

// SparseProviderDetailsList represents a list of SparseProviderDetails
type SparseProviderDetailsList []*SparseProviderDetail

// Identity returns the identity of the objects in the list.
func (o SparseProviderDetailsList) Identity() elemental.Identity {

	return ProviderDetailIdentity
}

// Copy returns a pointer to a copy the SparseProviderDetailsList.
func (o SparseProviderDetailsList) Copy() elemental.Identifiables {

	copy := append(SparseProviderDetailsList{}, o...)
	return &copy
}

// Append appends the objects to the a new copy of the SparseProviderDetailsList.
func (o SparseProviderDetailsList) Append(objects ...elemental.Identifiable) elemental.Identifiables {

	out := append(SparseProviderDetailsList{}, o...)
	for _, obj := range objects {
		out = append(out, obj.(*SparseProviderDetail))
	}

	return out
}

// List converts the object to an elemental.IdentifiablesList.
func (o SparseProviderDetailsList) List() elemental.IdentifiablesList {

	out := make(elemental.IdentifiablesList, len(o))
	for i := 0; i < len(o); i++ {
		out[i] = o[i]
	}

	return out
}

// DefaultOrder returns the default ordering fields of the content.
func (o SparseProviderDetailsList) DefaultOrder() []string {

	return []string{}
}

// ToPlain returns the SparseProviderDetailsList converted to ProviderDetailsList.
func (o SparseProviderDetailsList) ToPlain() elemental.IdentifiablesList {

	out := make(elemental.IdentifiablesList, len(o))
	for i := 0; i < len(o); i++ {
		out[i] = o[i].ToPlain()
	}

	return out
}

// Version returns the version of the content.
func (o SparseProviderDetailsList) Version() int {

	return 1
}

// SparseProviderDetail represents the sparse version of a providerdetail.
type SparseProviderDetail struct {
	// ID is the identifier of the object.
	ID *string `json:"ID,omitempty" msgpack:"ID,omitempty" bson:"-" mapstructure:"ID,omitempty"`

	// The list of compliance provided by the domain.
	Compliances *[]string `json:"compliances,omitempty" msgpack:"compliances,omitempty" bson:"compliances,omitempty" mapstructure:"compliances,omitempty"`

	// The user data storage location.
	DataResidency *[]string `json:"dataResidency,omitempty" msgpack:"dataResidency,omitempty" bson:"dataresidency,omitempty" mapstructure:"dataResidency,omitempty"`

	// Does the provider share user data with 3rd party or services.
	DataSharing *bool `json:"dataSharing,omitempty" msgpack:"dataSharing,omitempty" bson:"datasharing,omitempty" mapstructure:"dataSharing,omitempty"`

	// Does the provider share user data with consent with 3rd party or services.
	DataSharingConsent *bool `json:"dataSharingConsent,omitempty" msgpack:"dataSharingConsent,omitempty" bson:"datasharingconsent,omitempty" mapstructure:"dataSharingConsent,omitempty"`

	// The description of the provider detail.
	Description *string `json:"description,omitempty" msgpack:"description,omitempty" bson:"-" mapstructure:"description,omitempty"`

	// Domain of the provider detail.
	Domain *string `json:"domain,omitempty" msgpack:"domain,omitempty" bson:"-" mapstructure:"domain,omitempty"`

	// Friendly Name of the provider detail.
	FriendlyName *string `json:"friendlyName,omitempty" msgpack:"friendlyName,omitempty" bson:"-" mapstructure:"friendlyName,omitempty"`

	// The icon of the providerdetail, base64 encoded.
	Icon *string `json:"icon,omitempty" msgpack:"icon,omitempty" bson:"-" mapstructure:"icon,omitempty"`

	// List of AI models used by the domain.
	Models *[]string `json:"models,omitempty" msgpack:"models,omitempty" bson:"models,omitempty" mapstructure:"models,omitempty"`

	// Name of the provider detail.
	Name *string `json:"name,omitempty" msgpack:"name,omitempty" bson:"-" mapstructure:"name,omitempty"`

	// The namespace of the object.
	Namespace *string `json:"namespace,omitempty" msgpack:"namespace,omitempty" bson:"namespace,omitempty" mapstructure:"namespace,omitempty"`

	// The data retention policies by the domain for each type of users.
	ProviderRetentionPolicies *[]*ProviderRetentionPolicy `json:"providerRetentionPolicies,omitempty" msgpack:"providerRetentionPolicies,omitempty" bson:"providerretentionpolicies,omitempty" mapstructure:"providerRetentionPolicies,omitempty"`

	// Does the provider use user data for training its model.
	ProviderTrainingPolicies *[]*ProviderTrainingPolicy `json:"providerTrainingPolicies,omitempty" msgpack:"providerTrainingPolicies,omitempty" bson:"providertrainingpolicies,omitempty" mapstructure:"providerTrainingPolicies,omitempty"`

	// The risk score for the domain.
	RiskScore *float64 `json:"riskScore,omitempty" msgpack:"riskScore,omitempty" bson:"-" mapstructure:"riskScore,omitempty"`

	// Does provider use third party model.
	ThirdPartyModelUsage *bool `json:"thirdPartyModelUsage,omitempty" msgpack:"thirdPartyModelUsage,omitempty" bson:"thirdpartymodelusage,omitempty" mapstructure:"thirdPartyModelUsage,omitempty"`

	ModelVersion int `json:"-" msgpack:"-" bson:"_modelversion"`
}

// NewSparseProviderDetail returns a new  SparseProviderDetail.
func NewSparseProviderDetail() *SparseProviderDetail {
	return &SparseProviderDetail{}
}

// Identity returns the Identity of the sparse object.
func (o *SparseProviderDetail) Identity() elemental.Identity {

	return ProviderDetailIdentity
}

// Identifier returns the value of the sparse object's unique identifier.
func (o *SparseProviderDetail) Identifier() string {

	if o.ID == nil {
		return ""
	}
	return *o.ID
}

// SetIdentifier sets the value of the sparse object's unique identifier.
func (o *SparseProviderDetail) SetIdentifier(id string) {

	if id != "" {
		o.ID = &id
	} else {
		o.ID = nil
	}
}

// GetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *SparseProviderDetail) GetBSON() (any, error) {

	if o == nil {
		return nil, nil
	}

	s := &mongoAttributesSparseProviderDetail{}

	if o.ID != nil {
		s.ID = bson.ObjectIdHex(*o.ID)
	}
	if o.Compliances != nil {
		s.Compliances = o.Compliances
	}
	if o.DataResidency != nil {
		s.DataResidency = o.DataResidency
	}
	if o.DataSharing != nil {
		s.DataSharing = o.DataSharing
	}
	if o.DataSharingConsent != nil {
		s.DataSharingConsent = o.DataSharingConsent
	}
	if o.Models != nil {
		s.Models = o.Models
	}
	if o.Namespace != nil {
		s.Namespace = o.Namespace
	}
	if o.ProviderRetentionPolicies != nil {
		s.ProviderRetentionPolicies = o.ProviderRetentionPolicies
	}
	if o.ProviderTrainingPolicies != nil {
		s.ProviderTrainingPolicies = o.ProviderTrainingPolicies
	}
	if o.ThirdPartyModelUsage != nil {
		s.ThirdPartyModelUsage = o.ThirdPartyModelUsage
	}

	return s, nil
}

// SetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *SparseProviderDetail) SetBSON(raw bson.Raw) error {

	if o == nil {
		return nil
	}

	s := &mongoAttributesSparseProviderDetail{}
	if err := raw.Unmarshal(s); err != nil {
		return err
	}

	id := s.ID.Hex()
	o.ID = &id
	if s.Compliances != nil {
		o.Compliances = s.Compliances
	}
	if s.DataResidency != nil {
		o.DataResidency = s.DataResidency
	}
	if s.DataSharing != nil {
		o.DataSharing = s.DataSharing
	}
	if s.DataSharingConsent != nil {
		o.DataSharingConsent = s.DataSharingConsent
	}
	if s.Models != nil {
		o.Models = s.Models
	}
	if s.Namespace != nil {
		o.Namespace = s.Namespace
	}
	if s.ProviderRetentionPolicies != nil {
		o.ProviderRetentionPolicies = s.ProviderRetentionPolicies
	}
	if s.ProviderTrainingPolicies != nil {
		o.ProviderTrainingPolicies = s.ProviderTrainingPolicies
	}
	if s.ThirdPartyModelUsage != nil {
		o.ThirdPartyModelUsage = s.ThirdPartyModelUsage
	}

	return nil
}

// Version returns the hardcoded version of the model.
func (o *SparseProviderDetail) Version() int {

	return 1
}

// ToPlain returns the plain version of the sparse model.
func (o *SparseProviderDetail) ToPlain() elemental.PlainIdentifiable {

	out := NewProviderDetail()
	if o.ID != nil {
		out.ID = *o.ID
	}
	if o.Compliances != nil {
		out.Compliances = *o.Compliances
	}
	if o.DataResidency != nil {
		out.DataResidency = *o.DataResidency
	}
	if o.DataSharing != nil {
		out.DataSharing = *o.DataSharing
	}
	if o.DataSharingConsent != nil {
		out.DataSharingConsent = *o.DataSharingConsent
	}
	if o.Description != nil {
		out.Description = *o.Description
	}
	if o.Domain != nil {
		out.Domain = *o.Domain
	}
	if o.FriendlyName != nil {
		out.FriendlyName = *o.FriendlyName
	}
	if o.Icon != nil {
		out.Icon = *o.Icon
	}
	if o.Models != nil {
		out.Models = *o.Models
	}
	if o.Name != nil {
		out.Name = *o.Name
	}
	if o.Namespace != nil {
		out.Namespace = *o.Namespace
	}
	if o.ProviderRetentionPolicies != nil {
		out.ProviderRetentionPolicies = *o.ProviderRetentionPolicies
	}
	if o.ProviderTrainingPolicies != nil {
		out.ProviderTrainingPolicies = *o.ProviderTrainingPolicies
	}
	if o.RiskScore != nil {
		out.RiskScore = *o.RiskScore
	}
	if o.ThirdPartyModelUsage != nil {
		out.ThirdPartyModelUsage = *o.ThirdPartyModelUsage
	}

	return out
}

// GetNamespace returns the Namespace of the receiver.
func (o *SparseProviderDetail) GetNamespace() (out string) {

	if o.Namespace == nil {
		return
	}

	return *o.Namespace
}

// SetNamespace sets the property Namespace of the receiver using the address of the given value.
func (o *SparseProviderDetail) SetNamespace(namespace string) {

	o.Namespace = &namespace
}

// DeepCopy returns a deep copy if the SparseProviderDetail.
func (o *SparseProviderDetail) DeepCopy() *SparseProviderDetail {

	if o == nil {
		return nil
	}

	out := &SparseProviderDetail{}
	o.DeepCopyInto(out)

	return out
}

// DeepCopyInto copies the receiver into the given *SparseProviderDetail.
func (o *SparseProviderDetail) DeepCopyInto(out *SparseProviderDetail) {

	target, err := copystructure.Copy(o)
	if err != nil {
		panic(fmt.Sprintf("Unable to deepcopy SparseProviderDetail: %s", err))
	}

	*out = *target.(*SparseProviderDetail)
}

type mongoAttributesProviderDetail struct {
	ID                        bson.ObjectId              `bson:"_id,omitempty"`
	Compliances               []string                   `bson:"compliances,omitempty"`
	DataResidency             []string                   `bson:"dataresidency,omitempty"`
	DataSharing               bool                       `bson:"datasharing,omitempty"`
	DataSharingConsent        bool                       `bson:"datasharingconsent,omitempty"`
	Models                    []string                   `bson:"models,omitempty"`
	Namespace                 string                     `bson:"namespace,omitempty"`
	ProviderRetentionPolicies []*ProviderRetentionPolicy `bson:"providerretentionpolicies,omitempty"`
	ProviderTrainingPolicies  []*ProviderTrainingPolicy  `bson:"providertrainingpolicies,omitempty"`
	ThirdPartyModelUsage      bool                       `bson:"thirdpartymodelusage,omitempty"`
}
type mongoAttributesSparseProviderDetail struct {
	ID                        bson.ObjectId               `bson:"_id,omitempty"`
	Compliances               *[]string                   `bson:"compliances,omitempty"`
	DataResidency             *[]string                   `bson:"dataresidency,omitempty"`
	DataSharing               *bool                       `bson:"datasharing,omitempty"`
	DataSharingConsent        *bool                       `bson:"datasharingconsent,omitempty"`
	Models                    *[]string                   `bson:"models,omitempty"`
	Namespace                 *string                     `bson:"namespace,omitempty"`
	ProviderRetentionPolicies *[]*ProviderRetentionPolicy `bson:"providerretentionpolicies,omitempty"`
	ProviderTrainingPolicies  *[]*ProviderTrainingPolicy  `bson:"providertrainingpolicies,omitempty"`
	ThirdPartyModelUsage      *bool                       `bson:"thirdpartymodelusage,omitempty"`
}
