// Code generated by elegen. DO NOT EDIT.
// Source: go.acuvity.ai/elemental (templates/model.gotpl)

package api

import (
	"fmt"
	"time"

	"github.com/globalsign/mgo/bson"
	"github.com/mitchellh/copystructure"
	"go.acuvity.ai/elemental"
)

// AgentConfigDNSMonitorPolicyValue represents the possible values for attribute "DNSMonitorPolicy".
type AgentConfigDNSMonitorPolicyValue string

const (
	// AgentConfigDNSMonitorPolicyEnforce represents the value Enforce.
	AgentConfigDNSMonitorPolicyEnforce AgentConfigDNSMonitorPolicyValue = "Enforce"

	// AgentConfigDNSMonitorPolicyWarn represents the value Warn.
	AgentConfigDNSMonitorPolicyWarn AgentConfigDNSMonitorPolicyValue = "Warn"
)

// AgentConfigIdentity represents the Identity of the object.
var AgentConfigIdentity = elemental.Identity{
	Name:     "agentconfig",
	Category: "agentconfigs",
	Package:  "lain",
	Private:  false,
}

// AgentConfigsList represents a list of AgentConfigs
type AgentConfigsList []*AgentConfig

// Identity returns the identity of the objects in the list.
func (o AgentConfigsList) Identity() elemental.Identity {

	return AgentConfigIdentity
}

// Copy returns a pointer to a copy the AgentConfigsList.
func (o AgentConfigsList) Copy() elemental.Identifiables {

	out := append(AgentConfigsList{}, o...)
	return &out
}

// Append appends the objects to the a new copy of the AgentConfigsList.
func (o AgentConfigsList) Append(objects ...elemental.Identifiable) elemental.Identifiables {

	out := append(AgentConfigsList{}, o...)
	for _, obj := range objects {
		out = append(out, obj.(*AgentConfig))
	}

	return out
}

// List converts the object to an elemental.IdentifiablesList.
func (o AgentConfigsList) List() elemental.IdentifiablesList {

	out := make(elemental.IdentifiablesList, len(o))
	for i := 0; i < len(o); i++ {
		out[i] = o[i]
	}

	return out
}

// DefaultOrder returns the default ordering fields of the content.
func (o AgentConfigsList) DefaultOrder() []string {

	return []string{}
}

// ToSparse returns the AgentConfigsList converted to SparseAgentConfigsList.
// Objects in the list will only contain the given fields. No field means entire field set.
func (o AgentConfigsList) ToSparse(fields ...string) elemental.Identifiables {

	out := make(SparseAgentConfigsList, len(o))
	for i := 0; i < len(o); i++ {
		out[i] = o[i].ToSparse(fields...).(*SparseAgentConfig)
	}

	return out
}

// Version returns the version of the content.
func (o AgentConfigsList) Version() int {

	return 1
}

// AgentConfig represents the model of a agentconfig
type AgentConfig struct {
	// If enabled, the agent will monitor DNS traffic.
	DNSMonitorEnabled bool `json:"DNSMonitorEnabled" msgpack:"DNSMonitorEnabled" bson:"dnsmonitorenabled" mapstructure:"DNSMonitorEnabled,omitempty"`

	// What action to take if the DNS monitor cannot start when enabled. Enforce will
	// stop the agent with an error, while Warn will post a log and continue on.
	DNSMonitorPolicy AgentConfigDNSMonitorPolicyValue `json:"DNSMonitorPolicy" msgpack:"DNSMonitorPolicy" bson:"dnsmonitorpolicy" mapstructure:"DNSMonitorPolicy,omitempty"`

	// ID is the identifier of the object.
	ID string `json:"ID,omitempty" msgpack:"ID,omitempty" bson:"-" mapstructure:"ID,omitempty"`

	// An administrator can set this for users to pause enforcement for this interval.
	// A value of 0s means that users are not allowed to pause the enforcement.
	AllowedPauseInterval string `json:"allowedPauseInterval" msgpack:"allowedPauseInterval" bson:"allowedpauseinterval" mapstructure:"allowedPauseInterval,omitempty"`

	// Creation date of the object.
	CreateTime time.Time `json:"createTime" msgpack:"createTime" bson:"createtime" mapstructure:"createTime,omitempty"`

	// Description of the agent configuration.
	Description string `json:"description" msgpack:"description" bson:"description" mapstructure:"description,omitempty"`

	// If disabled, the agent will rely on the CA already installed and trusted on the
	// system.
	DisableManagedCA bool `json:"disableManagedCA" msgpack:"disableManagedCA" bson:"disablemanagedca" mapstructure:"disableManagedCA,omitempty"`

	// If disabled, the system proxy needs to be configured manually.
	DisableSystemProxyManagement bool `json:"disableSystemProxyManagement" msgpack:"disableSystemProxyManagement" bson:"disablesystemproxymanagement" mapstructure:"disableSystemProxyManagement,omitempty"`

	// If disabled, the agent will stop reporting the visited domains.
	DisableURLDiscovery bool `json:"disableURLDiscovery" msgpack:"disableURLDiscovery" bson:"disableurldiscovery" mapstructure:"disableURLDiscovery,omitempty"`

	// If enabled, the agent will have the ability to pause enforcement.
	EnablePause bool `json:"enablePause" msgpack:"enablePause" bson:"enablepause" mapstructure:"enablePause,omitempty"`

	// The hash of the structure used to compare with new import version.
	ImportHash string `json:"importHash,omitempty" msgpack:"importHash,omitempty" bson:"importhash,omitempty" mapstructure:"importHash,omitempty"`

	// The user-defined import label that allows the system to group resources from the
	// same import operation.
	ImportLabel string `json:"importLabel,omitempty" msgpack:"importLabel,omitempty" bson:"importlabel,omitempty" mapstructure:"importLabel,omitempty"`

	// The port use by the agent to proxy the traffic.
	ListeningPort string `json:"listeningPort" msgpack:"listeningPort" bson:"listeningport" mapstructure:"listeningPort,omitempty"`

	// The name of the agent configuration.
	Name string `json:"name" msgpack:"name" bson:"name" mapstructure:"name,omitempty"`

	// The namespace of the object.
	Namespace string `json:"namespace,omitempty" msgpack:"namespace,omitempty" bson:"namespace,omitempty" mapstructure:"namespace,omitempty"`

	// The name of the PAC configuration to use.
	PacName string `json:"pacName" msgpack:"pacName" bson:"pacname" mapstructure:"pacName,omitempty"`

	// The ping interval at which acushield should check in with the backend.
	PingInterval string `json:"pingInterval" msgpack:"pingInterval" bson:"pinginterval" mapstructure:"pingInterval,omitempty"`

	// If disabled, the agent will not scan for genAI applications or plugins.
	ScanDisabled bool `json:"scanDisabled" msgpack:"scanDisabled" bson:"scandisabled" mapstructure:"scanDisabled,omitempty"`

	// The list of installed applications the scanner will look for.
	ScanInstalledApps []*AgentDiscoveredApp `json:"scanInstalledApps" msgpack:"scanInstalledApps" bson:"scaninstalledapps" mapstructure:"scanInstalledApps,omitempty"`

	// The interval in which scans take place by the agent.
	ScanInterval string `json:"scanInterval" msgpack:"scanInterval" bson:"scaninterval" mapstructure:"scanInterval,omitempty"`

	// The interval in which scan reports are sent to the backend.
	ScanReportInterval string `json:"scanReportInterval" msgpack:"scanReportInterval" bson:"scanreportinterval" mapstructure:"scanReportInterval,omitempty"`

	// The list of running processes the scanner will look for.
	ScanRunningProcesses []string `json:"scanRunningProcesses" msgpack:"scanRunningProcesses" bson:"scanrunningprocesses" mapstructure:"scanRunningProcesses,omitempty"`

	// Last update date of the object.
	UpdateTime time.Time `json:"updateTime" msgpack:"updateTime" bson:"updatetime" mapstructure:"updateTime,omitempty"`

	// If system proxy management is enabled and this flag is enabled, the system
	// can take another port, different that the listeningPort.
	UseDynamicPort bool `json:"useDynamicPort" msgpack:"useDynamicPort" bson:"usedynamicport" mapstructure:"useDynamicPort,omitempty"`

	// Hash of the object used to shard the data.
	ZHash int `json:"-" msgpack:"-" bson:"zhash" mapstructure:"-,omitempty"`

	// Sharding zone.
	Zone int `json:"-" msgpack:"-" bson:"zone" mapstructure:"-,omitempty"`

	ModelVersion int `json:"-" msgpack:"-" bson:"_modelversion"`
}

// NewAgentConfig returns a new *AgentConfig
func NewAgentConfig() *AgentConfig {

	return &AgentConfig{
		ModelVersion:         1,
		DNSMonitorPolicy:     AgentConfigDNSMonitorPolicyWarn,
		AllowedPauseInterval: "0s",
		ListeningPort:        "8081",
		PingInterval:         "10m",
		ScanInstalledApps:    []*AgentDiscoveredApp{},
		ScanInterval:         "1m",
		ScanReportInterval:   "1h",
		ScanRunningProcesses: []string{},
	}
}

// Identity returns the Identity of the object.
func (o *AgentConfig) Identity() elemental.Identity {

	return AgentConfigIdentity
}

// Identifier returns the value of the object's unique identifier.
func (o *AgentConfig) Identifier() string {

	return o.ID
}

// SetIdentifier sets the value of the object's unique identifier.
func (o *AgentConfig) SetIdentifier(id string) {

	o.ID = id
}

// GetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *AgentConfig) GetBSON() (any, error) {

	if o == nil {
		return nil, nil
	}

	s := &mongoAttributesAgentConfig{}

	s.DNSMonitorEnabled = o.DNSMonitorEnabled
	s.DNSMonitorPolicy = o.DNSMonitorPolicy
	if o.ID != "" {
		s.ID = bson.ObjectIdHex(o.ID)
	}
	s.AllowedPauseInterval = o.AllowedPauseInterval
	s.CreateTime = o.CreateTime
	s.Description = o.Description
	s.DisableManagedCA = o.DisableManagedCA
	s.DisableSystemProxyManagement = o.DisableSystemProxyManagement
	s.DisableURLDiscovery = o.DisableURLDiscovery
	s.EnablePause = o.EnablePause
	s.ImportHash = o.ImportHash
	s.ImportLabel = o.ImportLabel
	s.ListeningPort = o.ListeningPort
	s.Name = o.Name
	s.Namespace = o.Namespace
	s.PacName = o.PacName
	s.PingInterval = o.PingInterval
	s.ScanDisabled = o.ScanDisabled
	s.ScanInstalledApps = o.ScanInstalledApps
	s.ScanInterval = o.ScanInterval
	s.ScanReportInterval = o.ScanReportInterval
	s.ScanRunningProcesses = o.ScanRunningProcesses
	s.UpdateTime = o.UpdateTime
	s.UseDynamicPort = o.UseDynamicPort
	s.ZHash = o.ZHash
	s.Zone = o.Zone

	return s, nil
}

// SetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *AgentConfig) SetBSON(raw bson.Raw) error {

	if o == nil {
		return nil
	}

	s := &mongoAttributesAgentConfig{}
	if err := raw.Unmarshal(s); err != nil {
		return err
	}

	o.DNSMonitorEnabled = s.DNSMonitorEnabled
	o.DNSMonitorPolicy = s.DNSMonitorPolicy
	o.ID = s.ID.Hex()
	o.AllowedPauseInterval = s.AllowedPauseInterval
	o.CreateTime = s.CreateTime
	o.Description = s.Description
	o.DisableManagedCA = s.DisableManagedCA
	o.DisableSystemProxyManagement = s.DisableSystemProxyManagement
	o.DisableURLDiscovery = s.DisableURLDiscovery
	o.EnablePause = s.EnablePause
	o.ImportHash = s.ImportHash
	o.ImportLabel = s.ImportLabel
	o.ListeningPort = s.ListeningPort
	o.Name = s.Name
	o.Namespace = s.Namespace
	o.PacName = s.PacName
	o.PingInterval = s.PingInterval
	o.ScanDisabled = s.ScanDisabled
	o.ScanInstalledApps = s.ScanInstalledApps
	o.ScanInterval = s.ScanInterval
	o.ScanReportInterval = s.ScanReportInterval
	o.ScanRunningProcesses = s.ScanRunningProcesses
	o.UpdateTime = s.UpdateTime
	o.UseDynamicPort = s.UseDynamicPort
	o.ZHash = s.ZHash
	o.Zone = s.Zone

	return nil
}

// Version returns the hardcoded version of the model.
func (o *AgentConfig) Version() int {

	return 1
}

// BleveType implements the bleve.Classifier Interface.
func (o *AgentConfig) BleveType() string {

	return "agentconfig"
}

// DefaultOrder returns the list of default ordering fields.
func (o *AgentConfig) DefaultOrder() []string {

	return []string{}
}

// Doc returns the documentation for the object
func (o *AgentConfig) Doc() string {

	return `AgentConfig stores the configuration information for the acushield agent.`
}

func (o *AgentConfig) String() string {

	return fmt.Sprintf("<%s:%s>", o.Identity().Name, o.Identifier())
}

// GetCreateTime returns the CreateTime of the receiver.
func (o *AgentConfig) GetCreateTime() time.Time {

	return o.CreateTime
}

// SetCreateTime sets the property CreateTime of the receiver using the given value.
func (o *AgentConfig) SetCreateTime(createTime time.Time) {

	o.CreateTime = createTime
}

// GetImportHash returns the ImportHash of the receiver.
func (o *AgentConfig) GetImportHash() string {

	return o.ImportHash
}

// SetImportHash sets the property ImportHash of the receiver using the given value.
func (o *AgentConfig) SetImportHash(importHash string) {

	o.ImportHash = importHash
}

// GetImportLabel returns the ImportLabel of the receiver.
func (o *AgentConfig) GetImportLabel() string {

	return o.ImportLabel
}

// SetImportLabel sets the property ImportLabel of the receiver using the given value.
func (o *AgentConfig) SetImportLabel(importLabel string) {

	o.ImportLabel = importLabel
}

// GetNamespace returns the Namespace of the receiver.
func (o *AgentConfig) GetNamespace() string {

	return o.Namespace
}

// SetNamespace sets the property Namespace of the receiver using the given value.
func (o *AgentConfig) SetNamespace(namespace string) {

	o.Namespace = namespace
}

// GetUpdateTime returns the UpdateTime of the receiver.
func (o *AgentConfig) GetUpdateTime() time.Time {

	return o.UpdateTime
}

// SetUpdateTime sets the property UpdateTime of the receiver using the given value.
func (o *AgentConfig) SetUpdateTime(updateTime time.Time) {

	o.UpdateTime = updateTime
}

// ToSparse returns the sparse version of the model.
// The returned object will only contain the given fields. No field means entire field set.
func (o *AgentConfig) ToSparse(fields ...string) elemental.SparseIdentifiable {

	if len(fields) == 0 {
		// nolint: goimports
		return &SparseAgentConfig{
			DNSMonitorEnabled:            &o.DNSMonitorEnabled,
			DNSMonitorPolicy:             &o.DNSMonitorPolicy,
			ID:                           &o.ID,
			AllowedPauseInterval:         &o.AllowedPauseInterval,
			CreateTime:                   &o.CreateTime,
			Description:                  &o.Description,
			DisableManagedCA:             &o.DisableManagedCA,
			DisableSystemProxyManagement: &o.DisableSystemProxyManagement,
			DisableURLDiscovery:          &o.DisableURLDiscovery,
			EnablePause:                  &o.EnablePause,
			ImportHash:                   &o.ImportHash,
			ImportLabel:                  &o.ImportLabel,
			ListeningPort:                &o.ListeningPort,
			Name:                         &o.Name,
			Namespace:                    &o.Namespace,
			PacName:                      &o.PacName,
			PingInterval:                 &o.PingInterval,
			ScanDisabled:                 &o.ScanDisabled,
			ScanInstalledApps:            &o.ScanInstalledApps,
			ScanInterval:                 &o.ScanInterval,
			ScanReportInterval:           &o.ScanReportInterval,
			ScanRunningProcesses:         &o.ScanRunningProcesses,
			UpdateTime:                   &o.UpdateTime,
			UseDynamicPort:               &o.UseDynamicPort,
			ZHash:                        &o.ZHash,
			Zone:                         &o.Zone,
		}
	}

	sp := &SparseAgentConfig{}
	for _, f := range fields {
		switch f {
		case "DNSMonitorEnabled":
			sp.DNSMonitorEnabled = &(o.DNSMonitorEnabled)
		case "DNSMonitorPolicy":
			sp.DNSMonitorPolicy = &(o.DNSMonitorPolicy)
		case "ID":
			sp.ID = &(o.ID)
		case "allowedPauseInterval":
			sp.AllowedPauseInterval = &(o.AllowedPauseInterval)
		case "createTime":
			sp.CreateTime = &(o.CreateTime)
		case "description":
			sp.Description = &(o.Description)
		case "disableManagedCA":
			sp.DisableManagedCA = &(o.DisableManagedCA)
		case "disableSystemProxyManagement":
			sp.DisableSystemProxyManagement = &(o.DisableSystemProxyManagement)
		case "disableURLDiscovery":
			sp.DisableURLDiscovery = &(o.DisableURLDiscovery)
		case "enablePause":
			sp.EnablePause = &(o.EnablePause)
		case "importHash":
			sp.ImportHash = &(o.ImportHash)
		case "importLabel":
			sp.ImportLabel = &(o.ImportLabel)
		case "listeningPort":
			sp.ListeningPort = &(o.ListeningPort)
		case "name":
			sp.Name = &(o.Name)
		case "namespace":
			sp.Namespace = &(o.Namespace)
		case "pacName":
			sp.PacName = &(o.PacName)
		case "pingInterval":
			sp.PingInterval = &(o.PingInterval)
		case "scanDisabled":
			sp.ScanDisabled = &(o.ScanDisabled)
		case "scanInstalledApps":
			sp.ScanInstalledApps = &(o.ScanInstalledApps)
		case "scanInterval":
			sp.ScanInterval = &(o.ScanInterval)
		case "scanReportInterval":
			sp.ScanReportInterval = &(o.ScanReportInterval)
		case "scanRunningProcesses":
			sp.ScanRunningProcesses = &(o.ScanRunningProcesses)
		case "updateTime":
			sp.UpdateTime = &(o.UpdateTime)
		case "useDynamicPort":
			sp.UseDynamicPort = &(o.UseDynamicPort)
		case "zHash":
			sp.ZHash = &(o.ZHash)
		case "zone":
			sp.Zone = &(o.Zone)
		}
	}

	return sp
}

// Patch apply the non nil value of a *SparseAgentConfig to the object.
func (o *AgentConfig) Patch(sparse elemental.SparseIdentifiable) {
	if !sparse.Identity().IsEqual(o.Identity()) {
		panic("cannot patch from a parse with different identity")
	}

	so := sparse.(*SparseAgentConfig)
	if so.DNSMonitorEnabled != nil {
		o.DNSMonitorEnabled = *so.DNSMonitorEnabled
	}
	if so.DNSMonitorPolicy != nil {
		o.DNSMonitorPolicy = *so.DNSMonitorPolicy
	}
	if so.ID != nil {
		o.ID = *so.ID
	}
	if so.AllowedPauseInterval != nil {
		o.AllowedPauseInterval = *so.AllowedPauseInterval
	}
	if so.CreateTime != nil {
		o.CreateTime = *so.CreateTime
	}
	if so.Description != nil {
		o.Description = *so.Description
	}
	if so.DisableManagedCA != nil {
		o.DisableManagedCA = *so.DisableManagedCA
	}
	if so.DisableSystemProxyManagement != nil {
		o.DisableSystemProxyManagement = *so.DisableSystemProxyManagement
	}
	if so.DisableURLDiscovery != nil {
		o.DisableURLDiscovery = *so.DisableURLDiscovery
	}
	if so.EnablePause != nil {
		o.EnablePause = *so.EnablePause
	}
	if so.ImportHash != nil {
		o.ImportHash = *so.ImportHash
	}
	if so.ImportLabel != nil {
		o.ImportLabel = *so.ImportLabel
	}
	if so.ListeningPort != nil {
		o.ListeningPort = *so.ListeningPort
	}
	if so.Name != nil {
		o.Name = *so.Name
	}
	if so.Namespace != nil {
		o.Namespace = *so.Namespace
	}
	if so.PacName != nil {
		o.PacName = *so.PacName
	}
	if so.PingInterval != nil {
		o.PingInterval = *so.PingInterval
	}
	if so.ScanDisabled != nil {
		o.ScanDisabled = *so.ScanDisabled
	}
	if so.ScanInstalledApps != nil {
		o.ScanInstalledApps = *so.ScanInstalledApps
	}
	if so.ScanInterval != nil {
		o.ScanInterval = *so.ScanInterval
	}
	if so.ScanReportInterval != nil {
		o.ScanReportInterval = *so.ScanReportInterval
	}
	if so.ScanRunningProcesses != nil {
		o.ScanRunningProcesses = *so.ScanRunningProcesses
	}
	if so.UpdateTime != nil {
		o.UpdateTime = *so.UpdateTime
	}
	if so.UseDynamicPort != nil {
		o.UseDynamicPort = *so.UseDynamicPort
	}
	if so.ZHash != nil {
		o.ZHash = *so.ZHash
	}
	if so.Zone != nil {
		o.Zone = *so.Zone
	}
}

// DeepCopy returns a deep copy if the AgentConfig.
func (o *AgentConfig) DeepCopy() *AgentConfig {

	if o == nil {
		return nil
	}

	out := &AgentConfig{}
	o.DeepCopyInto(out)

	return out
}

// DeepCopyInto copies the receiver into the given *AgentConfig.
func (o *AgentConfig) DeepCopyInto(out *AgentConfig) {

	target, err := copystructure.Copy(o)
	if err != nil {
		panic(fmt.Sprintf("Unable to deepcopy AgentConfig: %s", err))
	}

	*out = *target.(*AgentConfig)
}

// Validate valides the current information stored into the structure.
func (o *AgentConfig) Validate() error {

	errors := elemental.Errors{}
	requiredErrors := elemental.Errors{}

	if err := elemental.ValidateStringInList("DNSMonitorPolicy", string(o.DNSMonitorPolicy), []string{"Warn", "Enforce"}, false); err != nil {
		errors = errors.Append(err)
	}

	if err := elemental.ValidateRequiredString("listeningPort", o.ListeningPort); err != nil {
		requiredErrors = requiredErrors.Append(err)
	}

	if err := elemental.ValidateRequiredString("name", o.Name); err != nil {
		requiredErrors = requiredErrors.Append(err)
	}

	for _, sub := range o.ScanInstalledApps {
		if sub == nil {
			continue
		}
		elemental.ResetDefaultForZeroValues(sub)
		if err := sub.Validate(); err != nil {
			errors = errors.Append(err)
		}
	}

	// Custom object validation.
	if err := ValidateAgentConfig(o); err != nil {
		errors = errors.Append(err)
	}

	if len(requiredErrors) > 0 {
		return requiredErrors
	}

	if len(errors) > 0 {
		return errors
	}

	return nil
}

// SpecificationForAttribute returns the AttributeSpecification for the given attribute name key.
func (*AgentConfig) SpecificationForAttribute(name string) elemental.AttributeSpecification {

	if v, ok := AgentConfigAttributesMap[name]; ok {
		return v
	}

	// We could not find it, so let's check on the lower case indexed spec map
	return AgentConfigLowerCaseAttributesMap[name]
}

// AttributeSpecifications returns the full attribute specifications map.
func (*AgentConfig) AttributeSpecifications() map[string]elemental.AttributeSpecification {

	return AgentConfigAttributesMap
}

// ValueForAttribute returns the value for the given attribute.
// This is a very advanced function that you should not need but in some
// very specific use cases.
func (o *AgentConfig) ValueForAttribute(name string) any {

	switch name {
	case "DNSMonitorEnabled":
		return o.DNSMonitorEnabled
	case "DNSMonitorPolicy":
		return o.DNSMonitorPolicy
	case "ID":
		return o.ID
	case "allowedPauseInterval":
		return o.AllowedPauseInterval
	case "createTime":
		return o.CreateTime
	case "description":
		return o.Description
	case "disableManagedCA":
		return o.DisableManagedCA
	case "disableSystemProxyManagement":
		return o.DisableSystemProxyManagement
	case "disableURLDiscovery":
		return o.DisableURLDiscovery
	case "enablePause":
		return o.EnablePause
	case "importHash":
		return o.ImportHash
	case "importLabel":
		return o.ImportLabel
	case "listeningPort":
		return o.ListeningPort
	case "name":
		return o.Name
	case "namespace":
		return o.Namespace
	case "pacName":
		return o.PacName
	case "pingInterval":
		return o.PingInterval
	case "scanDisabled":
		return o.ScanDisabled
	case "scanInstalledApps":
		return o.ScanInstalledApps
	case "scanInterval":
		return o.ScanInterval
	case "scanReportInterval":
		return o.ScanReportInterval
	case "scanRunningProcesses":
		return o.ScanRunningProcesses
	case "updateTime":
		return o.UpdateTime
	case "useDynamicPort":
		return o.UseDynamicPort
	case "zHash":
		return o.ZHash
	case "zone":
		return o.Zone
	}

	return nil
}

// AgentConfigAttributesMap represents the map of attribute for AgentConfig.
var AgentConfigAttributesMap = map[string]elemental.AttributeSpecification{
	"DNSMonitorEnabled": {
		AllowedChoices: []string{},
		BSONFieldName:  "dnsmonitorenabled",
		ConvertedName:  "DNSMonitorEnabled",
		Description:    `If enabled, the agent will monitor DNS traffic.`,
		Exposed:        true,
		Name:           "DNSMonitorEnabled",
		Stored:         true,
		Type:           "boolean",
	},
	"DNSMonitorPolicy": {
		AllowedChoices: []string{"Warn", "Enforce"},
		BSONFieldName:  "dnsmonitorpolicy",
		ConvertedName:  "DNSMonitorPolicy",
		DefaultValue:   AgentConfigDNSMonitorPolicyWarn,
		Description: `What action to take if the DNS monitor cannot start when enabled. Enforce will
stop the agent with an error, while Warn will post a log and continue on.`,
		Exposed: true,
		Name:    "DNSMonitorPolicy",
		Stored:  true,
		Type:    "enum",
	},
	"ID": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "_id",
		ConvertedName:  "ID",
		Description:    `ID is the identifier of the object.`,
		Exposed:        true,
		Filterable:     true,
		Identifier:     true,
		Name:           "ID",
		Orderable:      true,
		ReadOnly:       true,
		Stored:         true,
		Type:           "string",
	},
	"AllowedPauseInterval": {
		AllowedChoices: []string{},
		BSONFieldName:  "allowedpauseinterval",
		ConvertedName:  "AllowedPauseInterval",
		DefaultValue:   "0s",
		Description: `An administrator can set this for users to pause enforcement for this interval.
A value of 0s means that users are not allowed to pause the enforcement.`,
		Exposed: true,
		Name:    "allowedPauseInterval",
		Stored:  true,
		Type:    "string",
	},
	"CreateTime": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "createtime",
		ConvertedName:  "CreateTime",
		Description:    `Creation date of the object.`,
		Exposed:        true,
		Getter:         true,
		Name:           "createTime",
		Orderable:      true,
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Type:           "time",
	},
	"Description": {
		AllowedChoices: []string{},
		BSONFieldName:  "description",
		ConvertedName:  "Description",
		Description:    `Description of the agent configuration.`,
		Exposed:        true,
		Name:           "description",
		Stored:         true,
		Type:           "string",
	},
	"DisableManagedCA": {
		AllowedChoices: []string{},
		BSONFieldName:  "disablemanagedca",
		ConvertedName:  "DisableManagedCA",
		Description: `If disabled, the agent will rely on the CA already installed and trusted on the
system.`,
		Exposed: true,
		Name:    "disableManagedCA",
		Stored:  true,
		Type:    "boolean",
	},
	"DisableSystemProxyManagement": {
		AllowedChoices: []string{},
		BSONFieldName:  "disablesystemproxymanagement",
		ConvertedName:  "DisableSystemProxyManagement",
		Description:    `If disabled, the system proxy needs to be configured manually.`,
		Exposed:        true,
		Name:           "disableSystemProxyManagement",
		Stored:         true,
		Type:           "boolean",
	},
	"DisableURLDiscovery": {
		AllowedChoices: []string{},
		BSONFieldName:  "disableurldiscovery",
		ConvertedName:  "DisableURLDiscovery",
		Description:    `If disabled, the agent will stop reporting the visited domains.`,
		Exposed:        true,
		Name:           "disableURLDiscovery",
		Stored:         true,
		Type:           "boolean",
	},
	"EnablePause": {
		AllowedChoices: []string{},
		BSONFieldName:  "enablepause",
		ConvertedName:  "EnablePause",
		Description:    `If enabled, the agent will have the ability to pause enforcement.`,
		Exposed:        true,
		Name:           "enablePause",
		Stored:         true,
		Type:           "boolean",
	},
	"ImportHash": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "importhash",
		ConvertedName:  "ImportHash",
		CreationOnly:   true,
		Description:    `The hash of the structure used to compare with new import version.`,
		Exposed:        true,
		Getter:         true,
		Name:           "importHash",
		Setter:         true,
		Stored:         true,
		Type:           "string",
	},
	"ImportLabel": {
		AllowedChoices: []string{},
		BSONFieldName:  "importlabel",
		ConvertedName:  "ImportLabel",
		CreationOnly:   true,
		Description: `The user-defined import label that allows the system to group resources from the
same import operation.`,
		Exposed: true,
		Getter:  true,
		Name:    "importLabel",
		Setter:  true,
		Stored:  true,
		Type:    "string",
	},
	"ListeningPort": {
		AllowedChoices: []string{},
		BSONFieldName:  "listeningport",
		ConvertedName:  "ListeningPort",
		DefaultValue:   "8081",
		Description:    `The port use by the agent to proxy the traffic.`,
		Exposed:        true,
		Name:           "listeningPort",
		Required:       true,
		Stored:         true,
		Type:           "string",
	},
	"Name": {
		AllowedChoices: []string{},
		BSONFieldName:  "name",
		ConvertedName:  "Name",
		Description:    `The name of the agent configuration.`,
		Exposed:        true,
		Name:           "name",
		Required:       true,
		Stored:         true,
		Type:           "string",
	},
	"Namespace": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "namespace",
		ConvertedName:  "Namespace",
		Description:    `The namespace of the object.`,
		Exposed:        true,
		Getter:         true,
		Name:           "namespace",
		Orderable:      true,
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Type:           "string",
	},
	"PacName": {
		AllowedChoices: []string{},
		BSONFieldName:  "pacname",
		ConvertedName:  "PacName",
		Description:    `The name of the PAC configuration to use.`,
		Exposed:        true,
		Name:           "pacName",
		Stored:         true,
		Type:           "string",
	},
	"PingInterval": {
		AllowedChoices: []string{},
		BSONFieldName:  "pinginterval",
		ConvertedName:  "PingInterval",
		DefaultValue:   "10m",
		Description:    `The ping interval at which acushield should check in with the backend.`,
		Exposed:        true,
		Name:           "pingInterval",
		Stored:         true,
		Type:           "string",
	},
	"ScanDisabled": {
		AllowedChoices: []string{},
		BSONFieldName:  "scandisabled",
		ConvertedName:  "ScanDisabled",
		Description:    `If disabled, the agent will not scan for genAI applications or plugins.`,
		Exposed:        true,
		Name:           "scanDisabled",
		Stored:         true,
		Type:           "boolean",
	},
	"ScanInstalledApps": {
		AllowedChoices: []string{},
		BSONFieldName:  "scaninstalledapps",
		ConvertedName:  "ScanInstalledApps",
		Description:    `The list of installed applications the scanner will look for.`,
		Exposed:        true,
		Name:           "scanInstalledApps",
		Stored:         true,
		SubType:        "agentdiscoveredapp",
		Type:           "refList",
	},
	"ScanInterval": {
		AllowedChoices: []string{},
		BSONFieldName:  "scaninterval",
		ConvertedName:  "ScanInterval",
		DefaultValue:   "1m",
		Description:    `The interval in which scans take place by the agent.`,
		Exposed:        true,
		Name:           "scanInterval",
		Stored:         true,
		Type:           "string",
	},
	"ScanReportInterval": {
		AllowedChoices: []string{},
		BSONFieldName:  "scanreportinterval",
		ConvertedName:  "ScanReportInterval",
		DefaultValue:   "1h",
		Description:    `The interval in which scan reports are sent to the backend.`,
		Exposed:        true,
		Name:           "scanReportInterval",
		Stored:         true,
		Type:           "string",
	},
	"ScanRunningProcesses": {
		AllowedChoices: []string{},
		BSONFieldName:  "scanrunningprocesses",
		ConvertedName:  "ScanRunningProcesses",
		Description:    `The list of running processes the scanner will look for.`,
		Exposed:        true,
		Name:           "scanRunningProcesses",
		Stored:         true,
		SubType:        "string",
		Type:           "list",
	},
	"UpdateTime": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "updatetime",
		ConvertedName:  "UpdateTime",
		Description:    `Last update date of the object.`,
		Exposed:        true,
		Getter:         true,
		Name:           "updateTime",
		Orderable:      true,
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Type:           "time",
	},
	"UseDynamicPort": {
		AllowedChoices: []string{},
		BSONFieldName:  "usedynamicport",
		ConvertedName:  "UseDynamicPort",
		Description: `If system proxy management is enabled and this flag is enabled, the system
can take another port, different that the listeningPort.`,
		Exposed: true,
		Name:    "useDynamicPort",
		Stored:  true,
		Type:    "boolean",
	},
}

// AgentConfigLowerCaseAttributesMap represents the map of attribute for AgentConfig.
var AgentConfigLowerCaseAttributesMap = map[string]elemental.AttributeSpecification{
	"dnsmonitorenabled": {
		AllowedChoices: []string{},
		BSONFieldName:  "dnsmonitorenabled",
		ConvertedName:  "DNSMonitorEnabled",
		Description:    `If enabled, the agent will monitor DNS traffic.`,
		Exposed:        true,
		Name:           "DNSMonitorEnabled",
		Stored:         true,
		Type:           "boolean",
	},
	"dnsmonitorpolicy": {
		AllowedChoices: []string{"Warn", "Enforce"},
		BSONFieldName:  "dnsmonitorpolicy",
		ConvertedName:  "DNSMonitorPolicy",
		DefaultValue:   AgentConfigDNSMonitorPolicyWarn,
		Description: `What action to take if the DNS monitor cannot start when enabled. Enforce will
stop the agent with an error, while Warn will post a log and continue on.`,
		Exposed: true,
		Name:    "DNSMonitorPolicy",
		Stored:  true,
		Type:    "enum",
	},
	"id": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "_id",
		ConvertedName:  "ID",
		Description:    `ID is the identifier of the object.`,
		Exposed:        true,
		Filterable:     true,
		Identifier:     true,
		Name:           "ID",
		Orderable:      true,
		ReadOnly:       true,
		Stored:         true,
		Type:           "string",
	},
	"allowedpauseinterval": {
		AllowedChoices: []string{},
		BSONFieldName:  "allowedpauseinterval",
		ConvertedName:  "AllowedPauseInterval",
		DefaultValue:   "0s",
		Description: `An administrator can set this for users to pause enforcement for this interval.
A value of 0s means that users are not allowed to pause the enforcement.`,
		Exposed: true,
		Name:    "allowedPauseInterval",
		Stored:  true,
		Type:    "string",
	},
	"createtime": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "createtime",
		ConvertedName:  "CreateTime",
		Description:    `Creation date of the object.`,
		Exposed:        true,
		Getter:         true,
		Name:           "createTime",
		Orderable:      true,
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Type:           "time",
	},
	"description": {
		AllowedChoices: []string{},
		BSONFieldName:  "description",
		ConvertedName:  "Description",
		Description:    `Description of the agent configuration.`,
		Exposed:        true,
		Name:           "description",
		Stored:         true,
		Type:           "string",
	},
	"disablemanagedca": {
		AllowedChoices: []string{},
		BSONFieldName:  "disablemanagedca",
		ConvertedName:  "DisableManagedCA",
		Description: `If disabled, the agent will rely on the CA already installed and trusted on the
system.`,
		Exposed: true,
		Name:    "disableManagedCA",
		Stored:  true,
		Type:    "boolean",
	},
	"disablesystemproxymanagement": {
		AllowedChoices: []string{},
		BSONFieldName:  "disablesystemproxymanagement",
		ConvertedName:  "DisableSystemProxyManagement",
		Description:    `If disabled, the system proxy needs to be configured manually.`,
		Exposed:        true,
		Name:           "disableSystemProxyManagement",
		Stored:         true,
		Type:           "boolean",
	},
	"disableurldiscovery": {
		AllowedChoices: []string{},
		BSONFieldName:  "disableurldiscovery",
		ConvertedName:  "DisableURLDiscovery",
		Description:    `If disabled, the agent will stop reporting the visited domains.`,
		Exposed:        true,
		Name:           "disableURLDiscovery",
		Stored:         true,
		Type:           "boolean",
	},
	"enablepause": {
		AllowedChoices: []string{},
		BSONFieldName:  "enablepause",
		ConvertedName:  "EnablePause",
		Description:    `If enabled, the agent will have the ability to pause enforcement.`,
		Exposed:        true,
		Name:           "enablePause",
		Stored:         true,
		Type:           "boolean",
	},
	"importhash": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "importhash",
		ConvertedName:  "ImportHash",
		CreationOnly:   true,
		Description:    `The hash of the structure used to compare with new import version.`,
		Exposed:        true,
		Getter:         true,
		Name:           "importHash",
		Setter:         true,
		Stored:         true,
		Type:           "string",
	},
	"importlabel": {
		AllowedChoices: []string{},
		BSONFieldName:  "importlabel",
		ConvertedName:  "ImportLabel",
		CreationOnly:   true,
		Description: `The user-defined import label that allows the system to group resources from the
same import operation.`,
		Exposed: true,
		Getter:  true,
		Name:    "importLabel",
		Setter:  true,
		Stored:  true,
		Type:    "string",
	},
	"listeningport": {
		AllowedChoices: []string{},
		BSONFieldName:  "listeningport",
		ConvertedName:  "ListeningPort",
		DefaultValue:   "8081",
		Description:    `The port use by the agent to proxy the traffic.`,
		Exposed:        true,
		Name:           "listeningPort",
		Required:       true,
		Stored:         true,
		Type:           "string",
	},
	"name": {
		AllowedChoices: []string{},
		BSONFieldName:  "name",
		ConvertedName:  "Name",
		Description:    `The name of the agent configuration.`,
		Exposed:        true,
		Name:           "name",
		Required:       true,
		Stored:         true,
		Type:           "string",
	},
	"namespace": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "namespace",
		ConvertedName:  "Namespace",
		Description:    `The namespace of the object.`,
		Exposed:        true,
		Getter:         true,
		Name:           "namespace",
		Orderable:      true,
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Type:           "string",
	},
	"pacname": {
		AllowedChoices: []string{},
		BSONFieldName:  "pacname",
		ConvertedName:  "PacName",
		Description:    `The name of the PAC configuration to use.`,
		Exposed:        true,
		Name:           "pacName",
		Stored:         true,
		Type:           "string",
	},
	"pinginterval": {
		AllowedChoices: []string{},
		BSONFieldName:  "pinginterval",
		ConvertedName:  "PingInterval",
		DefaultValue:   "10m",
		Description:    `The ping interval at which acushield should check in with the backend.`,
		Exposed:        true,
		Name:           "pingInterval",
		Stored:         true,
		Type:           "string",
	},
	"scandisabled": {
		AllowedChoices: []string{},
		BSONFieldName:  "scandisabled",
		ConvertedName:  "ScanDisabled",
		Description:    `If disabled, the agent will not scan for genAI applications or plugins.`,
		Exposed:        true,
		Name:           "scanDisabled",
		Stored:         true,
		Type:           "boolean",
	},
	"scaninstalledapps": {
		AllowedChoices: []string{},
		BSONFieldName:  "scaninstalledapps",
		ConvertedName:  "ScanInstalledApps",
		Description:    `The list of installed applications the scanner will look for.`,
		Exposed:        true,
		Name:           "scanInstalledApps",
		Stored:         true,
		SubType:        "agentdiscoveredapp",
		Type:           "refList",
	},
	"scaninterval": {
		AllowedChoices: []string{},
		BSONFieldName:  "scaninterval",
		ConvertedName:  "ScanInterval",
		DefaultValue:   "1m",
		Description:    `The interval in which scans take place by the agent.`,
		Exposed:        true,
		Name:           "scanInterval",
		Stored:         true,
		Type:           "string",
	},
	"scanreportinterval": {
		AllowedChoices: []string{},
		BSONFieldName:  "scanreportinterval",
		ConvertedName:  "ScanReportInterval",
		DefaultValue:   "1h",
		Description:    `The interval in which scan reports are sent to the backend.`,
		Exposed:        true,
		Name:           "scanReportInterval",
		Stored:         true,
		Type:           "string",
	},
	"scanrunningprocesses": {
		AllowedChoices: []string{},
		BSONFieldName:  "scanrunningprocesses",
		ConvertedName:  "ScanRunningProcesses",
		Description:    `The list of running processes the scanner will look for.`,
		Exposed:        true,
		Name:           "scanRunningProcesses",
		Stored:         true,
		SubType:        "string",
		Type:           "list",
	},
	"updatetime": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "updatetime",
		ConvertedName:  "UpdateTime",
		Description:    `Last update date of the object.`,
		Exposed:        true,
		Getter:         true,
		Name:           "updateTime",
		Orderable:      true,
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Type:           "time",
	},
	"usedynamicport": {
		AllowedChoices: []string{},
		BSONFieldName:  "usedynamicport",
		ConvertedName:  "UseDynamicPort",
		Description: `If system proxy management is enabled and this flag is enabled, the system
can take another port, different that the listeningPort.`,
		Exposed: true,
		Name:    "useDynamicPort",
		Stored:  true,
		Type:    "boolean",
	},
}

// SparseAgentConfigsList represents a list of SparseAgentConfigs
type SparseAgentConfigsList []*SparseAgentConfig

// Identity returns the identity of the objects in the list.
func (o SparseAgentConfigsList) Identity() elemental.Identity {

	return AgentConfigIdentity
}

// Copy returns a pointer to a copy the SparseAgentConfigsList.
func (o SparseAgentConfigsList) Copy() elemental.Identifiables {

	copy := append(SparseAgentConfigsList{}, o...)
	return &copy
}

// Append appends the objects to the a new copy of the SparseAgentConfigsList.
func (o SparseAgentConfigsList) Append(objects ...elemental.Identifiable) elemental.Identifiables {

	out := append(SparseAgentConfigsList{}, o...)
	for _, obj := range objects {
		out = append(out, obj.(*SparseAgentConfig))
	}

	return out
}

// List converts the object to an elemental.IdentifiablesList.
func (o SparseAgentConfigsList) List() elemental.IdentifiablesList {

	out := make(elemental.IdentifiablesList, len(o))
	for i := 0; i < len(o); i++ {
		out[i] = o[i]
	}

	return out
}

// DefaultOrder returns the default ordering fields of the content.
func (o SparseAgentConfigsList) DefaultOrder() []string {

	return []string{}
}

// ToPlain returns the SparseAgentConfigsList converted to AgentConfigsList.
func (o SparseAgentConfigsList) ToPlain() elemental.IdentifiablesList {

	out := make(elemental.IdentifiablesList, len(o))
	for i := 0; i < len(o); i++ {
		out[i] = o[i].ToPlain()
	}

	return out
}

// Version returns the version of the content.
func (o SparseAgentConfigsList) Version() int {

	return 1
}

// SparseAgentConfig represents the sparse version of a agentconfig.
type SparseAgentConfig struct {
	// If enabled, the agent will monitor DNS traffic.
	DNSMonitorEnabled *bool `json:"DNSMonitorEnabled,omitempty" msgpack:"DNSMonitorEnabled,omitempty" bson:"dnsmonitorenabled,omitempty" mapstructure:"DNSMonitorEnabled,omitempty"`

	// What action to take if the DNS monitor cannot start when enabled. Enforce will
	// stop the agent with an error, while Warn will post a log and continue on.
	DNSMonitorPolicy *AgentConfigDNSMonitorPolicyValue `json:"DNSMonitorPolicy,omitempty" msgpack:"DNSMonitorPolicy,omitempty" bson:"dnsmonitorpolicy,omitempty" mapstructure:"DNSMonitorPolicy,omitempty"`

	// ID is the identifier of the object.
	ID *string `json:"ID,omitempty" msgpack:"ID,omitempty" bson:"-" mapstructure:"ID,omitempty"`

	// An administrator can set this for users to pause enforcement for this interval.
	// A value of 0s means that users are not allowed to pause the enforcement.
	AllowedPauseInterval *string `json:"allowedPauseInterval,omitempty" msgpack:"allowedPauseInterval,omitempty" bson:"allowedpauseinterval,omitempty" mapstructure:"allowedPauseInterval,omitempty"`

	// Creation date of the object.
	CreateTime *time.Time `json:"createTime,omitempty" msgpack:"createTime,omitempty" bson:"createtime,omitempty" mapstructure:"createTime,omitempty"`

	// Description of the agent configuration.
	Description *string `json:"description,omitempty" msgpack:"description,omitempty" bson:"description,omitempty" mapstructure:"description,omitempty"`

	// If disabled, the agent will rely on the CA already installed and trusted on the
	// system.
	DisableManagedCA *bool `json:"disableManagedCA,omitempty" msgpack:"disableManagedCA,omitempty" bson:"disablemanagedca,omitempty" mapstructure:"disableManagedCA,omitempty"`

	// If disabled, the system proxy needs to be configured manually.
	DisableSystemProxyManagement *bool `json:"disableSystemProxyManagement,omitempty" msgpack:"disableSystemProxyManagement,omitempty" bson:"disablesystemproxymanagement,omitempty" mapstructure:"disableSystemProxyManagement,omitempty"`

	// If disabled, the agent will stop reporting the visited domains.
	DisableURLDiscovery *bool `json:"disableURLDiscovery,omitempty" msgpack:"disableURLDiscovery,omitempty" bson:"disableurldiscovery,omitempty" mapstructure:"disableURLDiscovery,omitempty"`

	// If enabled, the agent will have the ability to pause enforcement.
	EnablePause *bool `json:"enablePause,omitempty" msgpack:"enablePause,omitempty" bson:"enablepause,omitempty" mapstructure:"enablePause,omitempty"`

	// The hash of the structure used to compare with new import version.
	ImportHash *string `json:"importHash,omitempty" msgpack:"importHash,omitempty" bson:"importhash,omitempty" mapstructure:"importHash,omitempty"`

	// The user-defined import label that allows the system to group resources from the
	// same import operation.
	ImportLabel *string `json:"importLabel,omitempty" msgpack:"importLabel,omitempty" bson:"importlabel,omitempty" mapstructure:"importLabel,omitempty"`

	// The port use by the agent to proxy the traffic.
	ListeningPort *string `json:"listeningPort,omitempty" msgpack:"listeningPort,omitempty" bson:"listeningport,omitempty" mapstructure:"listeningPort,omitempty"`

	// The name of the agent configuration.
	Name *string `json:"name,omitempty" msgpack:"name,omitempty" bson:"name,omitempty" mapstructure:"name,omitempty"`

	// The namespace of the object.
	Namespace *string `json:"namespace,omitempty" msgpack:"namespace,omitempty" bson:"namespace,omitempty" mapstructure:"namespace,omitempty"`

	// The name of the PAC configuration to use.
	PacName *string `json:"pacName,omitempty" msgpack:"pacName,omitempty" bson:"pacname,omitempty" mapstructure:"pacName,omitempty"`

	// The ping interval at which acushield should check in with the backend.
	PingInterval *string `json:"pingInterval,omitempty" msgpack:"pingInterval,omitempty" bson:"pinginterval,omitempty" mapstructure:"pingInterval,omitempty"`

	// If disabled, the agent will not scan for genAI applications or plugins.
	ScanDisabled *bool `json:"scanDisabled,omitempty" msgpack:"scanDisabled,omitempty" bson:"scandisabled,omitempty" mapstructure:"scanDisabled,omitempty"`

	// The list of installed applications the scanner will look for.
	ScanInstalledApps *[]*AgentDiscoveredApp `json:"scanInstalledApps,omitempty" msgpack:"scanInstalledApps,omitempty" bson:"scaninstalledapps,omitempty" mapstructure:"scanInstalledApps,omitempty"`

	// The interval in which scans take place by the agent.
	ScanInterval *string `json:"scanInterval,omitempty" msgpack:"scanInterval,omitempty" bson:"scaninterval,omitempty" mapstructure:"scanInterval,omitempty"`

	// The interval in which scan reports are sent to the backend.
	ScanReportInterval *string `json:"scanReportInterval,omitempty" msgpack:"scanReportInterval,omitempty" bson:"scanreportinterval,omitempty" mapstructure:"scanReportInterval,omitempty"`

	// The list of running processes the scanner will look for.
	ScanRunningProcesses *[]string `json:"scanRunningProcesses,omitempty" msgpack:"scanRunningProcesses,omitempty" bson:"scanrunningprocesses,omitempty" mapstructure:"scanRunningProcesses,omitempty"`

	// Last update date of the object.
	UpdateTime *time.Time `json:"updateTime,omitempty" msgpack:"updateTime,omitempty" bson:"updatetime,omitempty" mapstructure:"updateTime,omitempty"`

	// If system proxy management is enabled and this flag is enabled, the system
	// can take another port, different that the listeningPort.
	UseDynamicPort *bool `json:"useDynamicPort,omitempty" msgpack:"useDynamicPort,omitempty" bson:"usedynamicport,omitempty" mapstructure:"useDynamicPort,omitempty"`

	// Hash of the object used to shard the data.
	ZHash *int `json:"-" msgpack:"-" bson:"zhash,omitempty" mapstructure:"-,omitempty"`

	// Sharding zone.
	Zone *int `json:"-" msgpack:"-" bson:"zone,omitempty" mapstructure:"-,omitempty"`

	ModelVersion int `json:"-" msgpack:"-" bson:"_modelversion"`
}

// NewSparseAgentConfig returns a new  SparseAgentConfig.
func NewSparseAgentConfig() *SparseAgentConfig {
	return &SparseAgentConfig{}
}

// Identity returns the Identity of the sparse object.
func (o *SparseAgentConfig) Identity() elemental.Identity {

	return AgentConfigIdentity
}

// Identifier returns the value of the sparse object's unique identifier.
func (o *SparseAgentConfig) Identifier() string {

	if o.ID == nil {
		return ""
	}
	return *o.ID
}

// SetIdentifier sets the value of the sparse object's unique identifier.
func (o *SparseAgentConfig) SetIdentifier(id string) {

	if id != "" {
		o.ID = &id
	} else {
		o.ID = nil
	}
}

// GetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *SparseAgentConfig) GetBSON() (any, error) {

	if o == nil {
		return nil, nil
	}

	s := &mongoAttributesSparseAgentConfig{}

	if o.DNSMonitorEnabled != nil {
		s.DNSMonitorEnabled = o.DNSMonitorEnabled
	}
	if o.DNSMonitorPolicy != nil {
		s.DNSMonitorPolicy = o.DNSMonitorPolicy
	}
	if o.ID != nil {
		s.ID = bson.ObjectIdHex(*o.ID)
	}
	if o.AllowedPauseInterval != nil {
		s.AllowedPauseInterval = o.AllowedPauseInterval
	}
	if o.CreateTime != nil {
		s.CreateTime = o.CreateTime
	}
	if o.Description != nil {
		s.Description = o.Description
	}
	if o.DisableManagedCA != nil {
		s.DisableManagedCA = o.DisableManagedCA
	}
	if o.DisableSystemProxyManagement != nil {
		s.DisableSystemProxyManagement = o.DisableSystemProxyManagement
	}
	if o.DisableURLDiscovery != nil {
		s.DisableURLDiscovery = o.DisableURLDiscovery
	}
	if o.EnablePause != nil {
		s.EnablePause = o.EnablePause
	}
	if o.ImportHash != nil {
		s.ImportHash = o.ImportHash
	}
	if o.ImportLabel != nil {
		s.ImportLabel = o.ImportLabel
	}
	if o.ListeningPort != nil {
		s.ListeningPort = o.ListeningPort
	}
	if o.Name != nil {
		s.Name = o.Name
	}
	if o.Namespace != nil {
		s.Namespace = o.Namespace
	}
	if o.PacName != nil {
		s.PacName = o.PacName
	}
	if o.PingInterval != nil {
		s.PingInterval = o.PingInterval
	}
	if o.ScanDisabled != nil {
		s.ScanDisabled = o.ScanDisabled
	}
	if o.ScanInstalledApps != nil {
		s.ScanInstalledApps = o.ScanInstalledApps
	}
	if o.ScanInterval != nil {
		s.ScanInterval = o.ScanInterval
	}
	if o.ScanReportInterval != nil {
		s.ScanReportInterval = o.ScanReportInterval
	}
	if o.ScanRunningProcesses != nil {
		s.ScanRunningProcesses = o.ScanRunningProcesses
	}
	if o.UpdateTime != nil {
		s.UpdateTime = o.UpdateTime
	}
	if o.UseDynamicPort != nil {
		s.UseDynamicPort = o.UseDynamicPort
	}
	if o.ZHash != nil {
		s.ZHash = o.ZHash
	}
	if o.Zone != nil {
		s.Zone = o.Zone
	}

	return s, nil
}

// SetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *SparseAgentConfig) SetBSON(raw bson.Raw) error {

	if o == nil {
		return nil
	}

	s := &mongoAttributesSparseAgentConfig{}
	if err := raw.Unmarshal(s); err != nil {
		return err
	}

	if s.DNSMonitorEnabled != nil {
		o.DNSMonitorEnabled = s.DNSMonitorEnabled
	}
	if s.DNSMonitorPolicy != nil {
		o.DNSMonitorPolicy = s.DNSMonitorPolicy
	}
	id := s.ID.Hex()
	o.ID = &id
	if s.AllowedPauseInterval != nil {
		o.AllowedPauseInterval = s.AllowedPauseInterval
	}
	if s.CreateTime != nil {
		o.CreateTime = s.CreateTime
	}
	if s.Description != nil {
		o.Description = s.Description
	}
	if s.DisableManagedCA != nil {
		o.DisableManagedCA = s.DisableManagedCA
	}
	if s.DisableSystemProxyManagement != nil {
		o.DisableSystemProxyManagement = s.DisableSystemProxyManagement
	}
	if s.DisableURLDiscovery != nil {
		o.DisableURLDiscovery = s.DisableURLDiscovery
	}
	if s.EnablePause != nil {
		o.EnablePause = s.EnablePause
	}
	if s.ImportHash != nil {
		o.ImportHash = s.ImportHash
	}
	if s.ImportLabel != nil {
		o.ImportLabel = s.ImportLabel
	}
	if s.ListeningPort != nil {
		o.ListeningPort = s.ListeningPort
	}
	if s.Name != nil {
		o.Name = s.Name
	}
	if s.Namespace != nil {
		o.Namespace = s.Namespace
	}
	if s.PacName != nil {
		o.PacName = s.PacName
	}
	if s.PingInterval != nil {
		o.PingInterval = s.PingInterval
	}
	if s.ScanDisabled != nil {
		o.ScanDisabled = s.ScanDisabled
	}
	if s.ScanInstalledApps != nil {
		o.ScanInstalledApps = s.ScanInstalledApps
	}
	if s.ScanInterval != nil {
		o.ScanInterval = s.ScanInterval
	}
	if s.ScanReportInterval != nil {
		o.ScanReportInterval = s.ScanReportInterval
	}
	if s.ScanRunningProcesses != nil {
		o.ScanRunningProcesses = s.ScanRunningProcesses
	}
	if s.UpdateTime != nil {
		o.UpdateTime = s.UpdateTime
	}
	if s.UseDynamicPort != nil {
		o.UseDynamicPort = s.UseDynamicPort
	}
	if s.ZHash != nil {
		o.ZHash = s.ZHash
	}
	if s.Zone != nil {
		o.Zone = s.Zone
	}

	return nil
}

// Version returns the hardcoded version of the model.
func (o *SparseAgentConfig) Version() int {

	return 1
}

// ToPlain returns the plain version of the sparse model.
func (o *SparseAgentConfig) ToPlain() elemental.PlainIdentifiable {

	out := NewAgentConfig()
	if o.DNSMonitorEnabled != nil {
		out.DNSMonitorEnabled = *o.DNSMonitorEnabled
	}
	if o.DNSMonitorPolicy != nil {
		out.DNSMonitorPolicy = *o.DNSMonitorPolicy
	}
	if o.ID != nil {
		out.ID = *o.ID
	}
	if o.AllowedPauseInterval != nil {
		out.AllowedPauseInterval = *o.AllowedPauseInterval
	}
	if o.CreateTime != nil {
		out.CreateTime = *o.CreateTime
	}
	if o.Description != nil {
		out.Description = *o.Description
	}
	if o.DisableManagedCA != nil {
		out.DisableManagedCA = *o.DisableManagedCA
	}
	if o.DisableSystemProxyManagement != nil {
		out.DisableSystemProxyManagement = *o.DisableSystemProxyManagement
	}
	if o.DisableURLDiscovery != nil {
		out.DisableURLDiscovery = *o.DisableURLDiscovery
	}
	if o.EnablePause != nil {
		out.EnablePause = *o.EnablePause
	}
	if o.ImportHash != nil {
		out.ImportHash = *o.ImportHash
	}
	if o.ImportLabel != nil {
		out.ImportLabel = *o.ImportLabel
	}
	if o.ListeningPort != nil {
		out.ListeningPort = *o.ListeningPort
	}
	if o.Name != nil {
		out.Name = *o.Name
	}
	if o.Namespace != nil {
		out.Namespace = *o.Namespace
	}
	if o.PacName != nil {
		out.PacName = *o.PacName
	}
	if o.PingInterval != nil {
		out.PingInterval = *o.PingInterval
	}
	if o.ScanDisabled != nil {
		out.ScanDisabled = *o.ScanDisabled
	}
	if o.ScanInstalledApps != nil {
		out.ScanInstalledApps = *o.ScanInstalledApps
	}
	if o.ScanInterval != nil {
		out.ScanInterval = *o.ScanInterval
	}
	if o.ScanReportInterval != nil {
		out.ScanReportInterval = *o.ScanReportInterval
	}
	if o.ScanRunningProcesses != nil {
		out.ScanRunningProcesses = *o.ScanRunningProcesses
	}
	if o.UpdateTime != nil {
		out.UpdateTime = *o.UpdateTime
	}
	if o.UseDynamicPort != nil {
		out.UseDynamicPort = *o.UseDynamicPort
	}
	if o.ZHash != nil {
		out.ZHash = *o.ZHash
	}
	if o.Zone != nil {
		out.Zone = *o.Zone
	}

	return out
}

// GetCreateTime returns the CreateTime of the receiver.
func (o *SparseAgentConfig) GetCreateTime() (out time.Time) {

	if o.CreateTime == nil {
		return
	}

	return *o.CreateTime
}

// SetCreateTime sets the property CreateTime of the receiver using the address of the given value.
func (o *SparseAgentConfig) SetCreateTime(createTime time.Time) {

	o.CreateTime = &createTime
}

// GetImportHash returns the ImportHash of the receiver.
func (o *SparseAgentConfig) GetImportHash() (out string) {

	if o.ImportHash == nil {
		return
	}

	return *o.ImportHash
}

// SetImportHash sets the property ImportHash of the receiver using the address of the given value.
func (o *SparseAgentConfig) SetImportHash(importHash string) {

	o.ImportHash = &importHash
}

// GetImportLabel returns the ImportLabel of the receiver.
func (o *SparseAgentConfig) GetImportLabel() (out string) {

	if o.ImportLabel == nil {
		return
	}

	return *o.ImportLabel
}

// SetImportLabel sets the property ImportLabel of the receiver using the address of the given value.
func (o *SparseAgentConfig) SetImportLabel(importLabel string) {

	o.ImportLabel = &importLabel
}

// GetNamespace returns the Namespace of the receiver.
func (o *SparseAgentConfig) GetNamespace() (out string) {

	if o.Namespace == nil {
		return
	}

	return *o.Namespace
}

// SetNamespace sets the property Namespace of the receiver using the address of the given value.
func (o *SparseAgentConfig) SetNamespace(namespace string) {

	o.Namespace = &namespace
}

// GetUpdateTime returns the UpdateTime of the receiver.
func (o *SparseAgentConfig) GetUpdateTime() (out time.Time) {

	if o.UpdateTime == nil {
		return
	}

	return *o.UpdateTime
}

// SetUpdateTime sets the property UpdateTime of the receiver using the address of the given value.
func (o *SparseAgentConfig) SetUpdateTime(updateTime time.Time) {

	o.UpdateTime = &updateTime
}

// DeepCopy returns a deep copy if the SparseAgentConfig.
func (o *SparseAgentConfig) DeepCopy() *SparseAgentConfig {

	if o == nil {
		return nil
	}

	out := &SparseAgentConfig{}
	o.DeepCopyInto(out)

	return out
}

// DeepCopyInto copies the receiver into the given *SparseAgentConfig.
func (o *SparseAgentConfig) DeepCopyInto(out *SparseAgentConfig) {

	target, err := copystructure.Copy(o)
	if err != nil {
		panic(fmt.Sprintf("Unable to deepcopy SparseAgentConfig: %s", err))
	}

	*out = *target.(*SparseAgentConfig)
}

type mongoAttributesAgentConfig struct {
	DNSMonitorEnabled            bool                             `bson:"dnsmonitorenabled"`
	DNSMonitorPolicy             AgentConfigDNSMonitorPolicyValue `bson:"dnsmonitorpolicy"`
	ID                           bson.ObjectId                    `bson:"_id,omitempty"`
	AllowedPauseInterval         string                           `bson:"allowedpauseinterval"`
	CreateTime                   time.Time                        `bson:"createtime"`
	Description                  string                           `bson:"description"`
	DisableManagedCA             bool                             `bson:"disablemanagedca"`
	DisableSystemProxyManagement bool                             `bson:"disablesystemproxymanagement"`
	DisableURLDiscovery          bool                             `bson:"disableurldiscovery"`
	EnablePause                  bool                             `bson:"enablepause"`
	ImportHash                   string                           `bson:"importhash,omitempty"`
	ImportLabel                  string                           `bson:"importlabel,omitempty"`
	ListeningPort                string                           `bson:"listeningport"`
	Name                         string                           `bson:"name"`
	Namespace                    string                           `bson:"namespace,omitempty"`
	PacName                      string                           `bson:"pacname"`
	PingInterval                 string                           `bson:"pinginterval"`
	ScanDisabled                 bool                             `bson:"scandisabled"`
	ScanInstalledApps            []*AgentDiscoveredApp            `bson:"scaninstalledapps"`
	ScanInterval                 string                           `bson:"scaninterval"`
	ScanReportInterval           string                           `bson:"scanreportinterval"`
	ScanRunningProcesses         []string                         `bson:"scanrunningprocesses"`
	UpdateTime                   time.Time                        `bson:"updatetime"`
	UseDynamicPort               bool                             `bson:"usedynamicport"`
	ZHash                        int                              `bson:"zhash"`
	Zone                         int                              `bson:"zone"`
}
type mongoAttributesSparseAgentConfig struct {
	DNSMonitorEnabled            *bool                             `bson:"dnsmonitorenabled,omitempty"`
	DNSMonitorPolicy             *AgentConfigDNSMonitorPolicyValue `bson:"dnsmonitorpolicy,omitempty"`
	ID                           bson.ObjectId                     `bson:"_id,omitempty"`
	AllowedPauseInterval         *string                           `bson:"allowedpauseinterval,omitempty"`
	CreateTime                   *time.Time                        `bson:"createtime,omitempty"`
	Description                  *string                           `bson:"description,omitempty"`
	DisableManagedCA             *bool                             `bson:"disablemanagedca,omitempty"`
	DisableSystemProxyManagement *bool                             `bson:"disablesystemproxymanagement,omitempty"`
	DisableURLDiscovery          *bool                             `bson:"disableurldiscovery,omitempty"`
	EnablePause                  *bool                             `bson:"enablepause,omitempty"`
	ImportHash                   *string                           `bson:"importhash,omitempty"`
	ImportLabel                  *string                           `bson:"importlabel,omitempty"`
	ListeningPort                *string                           `bson:"listeningport,omitempty"`
	Name                         *string                           `bson:"name,omitempty"`
	Namespace                    *string                           `bson:"namespace,omitempty"`
	PacName                      *string                           `bson:"pacname,omitempty"`
	PingInterval                 *string                           `bson:"pinginterval,omitempty"`
	ScanDisabled                 *bool                             `bson:"scandisabled,omitempty"`
	ScanInstalledApps            *[]*AgentDiscoveredApp            `bson:"scaninstalledapps,omitempty"`
	ScanInterval                 *string                           `bson:"scaninterval,omitempty"`
	ScanReportInterval           *string                           `bson:"scanreportinterval,omitempty"`
	ScanRunningProcesses         *[]string                         `bson:"scanrunningprocesses,omitempty"`
	UpdateTime                   *time.Time                        `bson:"updatetime,omitempty"`
	UseDynamicPort               *bool                             `bson:"usedynamicport,omitempty"`
	ZHash                        *int                              `bson:"zhash,omitempty"`
	Zone                         *int                              `bson:"zone,omitempty"`
}
