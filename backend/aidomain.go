// Code generated by elegen. DO NOT EDIT.
// Source: go.acuvity.ai/elemental (templates/model.gotpl)

package api

import (
	"fmt"
	"slices"
	"time"

	"github.com/globalsign/mgo/bson"
	"github.com/mitchellh/copystructure"
	"go.acuvity.ai/elemental"
)

// AIDomainIdentity represents the Identity of the object.
var AIDomainIdentity = elemental.Identity{
	Name:     "aidomain",
	Category: "aidomains",
	Package:  "lain",
	Private:  false,
}

// AIDomainsList represents a list of AIDomains
type AIDomainsList []*AIDomain

// Identity returns the identity of the objects in the list.
func (o AIDomainsList) Identity() elemental.Identity {

	return AIDomainIdentity
}

// Copy returns a pointer to a copy the AIDomainsList.
func (o AIDomainsList) Copy() elemental.Identifiables {

	out := slices.Clone(o)
	return &out
}

// Append appends the objects to the a new copy of the AIDomainsList.
func (o AIDomainsList) Append(objects ...elemental.Identifiable) elemental.Identifiables {

	out := slices.Clone(o)
	for _, obj := range objects {
		out = append(out, obj.(*AIDomain))
	}

	return out
}

// List converts the object to an elemental.IdentifiablesList.
func (o AIDomainsList) List() elemental.IdentifiablesList {

	out := make(elemental.IdentifiablesList, len(o))
	for i := range len(o) {
		out[i] = o[i]
	}

	return out
}

// DefaultOrder returns the default ordering fields of the content.
func (o AIDomainsList) DefaultOrder() []string {

	return []string{}
}

// ToSparse returns the AIDomainsList converted to SparseAIDomainsList.
// Objects in the list will only contain the given fields. No field means entire field set.
func (o AIDomainsList) ToSparse(fields ...string) elemental.Identifiables {

	out := make(SparseAIDomainsList, len(o))
	for i := range len(o) {
		out[i] = o[i].ToSparse(fields...).(*SparseAIDomain)
	}

	return out
}

// Version returns the version of the content.
func (o AIDomainsList) Version() int {

	return 1
}

// AIDomain represents the model of a aidomain
type AIDomain struct {
	// ID is the identifier of the object.
	ID string `json:"ID,omitempty" msgpack:"ID,omitempty" bson:"-" mapstructure:"ID,omitempty"`

	// List of LLM providers the provider uses.
	LLMProviders []*AIDSectionLLMProvider `json:"LLMProviders,omitempty" msgpack:"LLMProviders,omitempty" bson:"llmproviders,omitempty" mapstructure:"LLMProviders,omitempty"`

	// Overall risk assessment for the LLM providers.
	LLMProvidersRisk *AIDRisk `json:"LLMProvidersRisk,omitempty" msgpack:"LLMProvidersRisk,omitempty" bson:"llmprovidersrisk,omitempty" mapstructure:"LLMProvidersRisk,omitempty"`

	// The address of the company.
	Address string `json:"address" msgpack:"address" bson:"address" mapstructure:"address,omitempty"`

	// The name of the company.
	Company string `json:"company" msgpack:"company" bson:"company" mapstructure:"company,omitempty"`

	// The url of the company.
	CompanyURL string `json:"companyURL" msgpack:"companyURL" bson:"companyurl" mapstructure:"companyURL,omitempty"`

	// Certifications or Security Frameworks implemented by the provider.
	Compliances []*AIDSectionCompliance `json:"compliances,omitempty" msgpack:"compliances,omitempty" bson:"compliances,omitempty" mapstructure:"compliances,omitempty"`

	// Overall risk assessment for the compliences.
	CompliancesRisk *AIDRisk `json:"compliancesRisk,omitempty" msgpack:"compliancesRisk,omitempty" bson:"compliancesrisk,omitempty" mapstructure:"compliancesRisk,omitempty"`

	// Creation date of the object.
	CreateTime time.Time `json:"createTime" msgpack:"createTime" bson:"createtime" mapstructure:"createTime,omitempty"`

	// List of policies defining how the provider will use customer data.
	DataPolicies []*AIDSectionDataPolicy `json:"dataPolicies,omitempty" msgpack:"dataPolicies,omitempty" bson:"datapolicies,omitempty" mapstructure:"dataPolicies,omitempty"`

	// Overall risk assessment for the data policies.
	DataPoliciesRisk *AIDRisk `json:"dataPoliciesRisk,omitempty" msgpack:"dataPoliciesRisk,omitempty" bson:"datapoliciesrisk,omitempty" mapstructure:"dataPoliciesRisk,omitempty"`

	// List of data processors used the provider.
	DataProcessors []*AIDSectionDataProcessor `json:"dataProcessors,omitempty" msgpack:"dataProcessors,omitempty" bson:"dataprocessors,omitempty" mapstructure:"dataProcessors,omitempty"`

	// Overall risk assessment for the data processors.
	DataProcessorsRisk *AIDRisk `json:"dataProcessorsRisk,omitempty" msgpack:"dataProcessorsRisk,omitempty" bson:"dataprocessorsrisk,omitempty" mapstructure:"dataProcessorsRisk,omitempty"`

	// A brief description about the AI domain and what services it provides.
	Description string `json:"description,omitempty" msgpack:"description,omitempty" bson:"description,omitempty" mapstructure:"description,omitempty"`

	// The domain of the service.
	Domain string `json:"domain" msgpack:"domain" bson:"domain" mapstructure:"domain,omitempty"`

	// The executive summary.
	ExecutiveSummary string `json:"executiveSummary,omitempty" msgpack:"executiveSummary,omitempty" bson:"executivesummary,omitempty" mapstructure:"executiveSummary,omitempty"`

	// The features implemented by the provider.
	Features []*AIDSection `json:"features" msgpack:"features" bson:"features" mapstructure:"features,omitempty"`

	// The hash of the structure used to compare with new import version.
	ImportHash string `json:"importHash,omitempty" msgpack:"importHash,omitempty" bson:"importhash,omitempty" mapstructure:"importHash,omitempty"`

	// The user-defined import label that allows the system to group resources from the
	// same import operation.
	ImportLabel string `json:"importLabel,omitempty" msgpack:"importLabel,omitempty" bson:"importlabel,omitempty" mapstructure:"importLabel,omitempty"`

	// The AI Categories of the services.
	Industry *AIDSection `json:"industry" msgpack:"industry" bson:"industry" mapstructure:"industry,omitempty"`

	// The name of the ai domain.
	Name string `json:"name" msgpack:"name" bson:"name" mapstructure:"name,omitempty"`

	// The namespace of the object.
	Namespace string `json:"namespace,omitempty" msgpack:"namespace,omitempty" bson:"namespace,omitempty" mapstructure:"namespace,omitempty"`

	// List of plans/tiers offered by the provider.
	Plans []*AIDSectionPlan `json:"plans" msgpack:"plans" bson:"plans" mapstructure:"plans,omitempty"`

	// Propagates the object to all child namespaces. This is always true.
	Propagate bool `json:"propagate" msgpack:"propagate" bson:"propagate" mapstructure:"propagate,omitempty"`

	// The name of the main provider.
	ProviderName string `json:"providerName,omitempty" msgpack:"providerName,omitempty" bson:"providername,omitempty" mapstructure:"providerName,omitempty"`

	// Quick machine friendly summary.
	Summary *AIDSummary `json:"summary,omitempty" msgpack:"summary,omitempty" bson:"summary,omitempty" mapstructure:"summary,omitempty"`

	// Last update date of the object.
	UpdateTime time.Time `json:"updateTime" msgpack:"updateTime" bson:"updatetime" mapstructure:"updateTime,omitempty"`

	// Hash of the object used to shard the data.
	ZHash int `json:"-" msgpack:"-" bson:"zhash" mapstructure:"-,omitempty"`

	// Sharding zone.
	Zone int `json:"-" msgpack:"-" bson:"zone" mapstructure:"-,omitempty"`

	ModelVersion int `json:"-" msgpack:"-" bson:"_modelversion"`
}

// NewAIDomain returns a new *AIDomain
func NewAIDomain() *AIDomain {

	return &AIDomain{
		ModelVersion: 1,
		Propagate:    true,
	}
}

// Identity returns the Identity of the object.
func (o *AIDomain) Identity() elemental.Identity {

	return AIDomainIdentity
}

// Identifier returns the value of the object's unique identifier.
func (o *AIDomain) Identifier() string {

	return o.ID
}

// SetIdentifier sets the value of the object's unique identifier.
func (o *AIDomain) SetIdentifier(id string) {

	o.ID = id
}

// GetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *AIDomain) GetBSON() (any, error) {

	if o == nil {
		return nil, nil
	}

	s := &mongoAttributesAIDomain{}

	if o.ID != "" {
		s.ID = bson.ObjectIdHex(o.ID)
	}
	s.LLMProviders = o.LLMProviders
	s.LLMProvidersRisk = o.LLMProvidersRisk
	s.Address = o.Address
	s.Company = o.Company
	s.CompanyURL = o.CompanyURL
	s.Compliances = o.Compliances
	s.CompliancesRisk = o.CompliancesRisk
	s.CreateTime = o.CreateTime
	s.DataPolicies = o.DataPolicies
	s.DataPoliciesRisk = o.DataPoliciesRisk
	s.DataProcessors = o.DataProcessors
	s.DataProcessorsRisk = o.DataProcessorsRisk
	s.Description = o.Description
	s.Domain = o.Domain
	s.ExecutiveSummary = o.ExecutiveSummary
	s.Features = o.Features
	s.ImportHash = o.ImportHash
	s.ImportLabel = o.ImportLabel
	s.Industry = o.Industry
	s.Name = o.Name
	s.Namespace = o.Namespace
	s.Plans = o.Plans
	s.Propagate = o.Propagate
	s.ProviderName = o.ProviderName
	s.Summary = o.Summary
	s.UpdateTime = o.UpdateTime
	s.ZHash = o.ZHash
	s.Zone = o.Zone

	return s, nil
}

// SetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *AIDomain) SetBSON(raw bson.Raw) error {

	if o == nil || raw.Kind == bson.ElementNil {
		return bson.ErrSetZero
	}

	s := &mongoAttributesAIDomain{}
	if err := raw.Unmarshal(s); err != nil {
		return err
	}

	o.ID = s.ID.Hex()
	o.LLMProviders = s.LLMProviders
	o.LLMProvidersRisk = s.LLMProvidersRisk
	o.Address = s.Address
	o.Company = s.Company
	o.CompanyURL = s.CompanyURL
	o.Compliances = s.Compliances
	o.CompliancesRisk = s.CompliancesRisk
	o.CreateTime = s.CreateTime
	o.DataPolicies = s.DataPolicies
	o.DataPoliciesRisk = s.DataPoliciesRisk
	o.DataProcessors = s.DataProcessors
	o.DataProcessorsRisk = s.DataProcessorsRisk
	o.Description = s.Description
	o.Domain = s.Domain
	o.ExecutiveSummary = s.ExecutiveSummary
	o.Features = s.Features
	o.ImportHash = s.ImportHash
	o.ImportLabel = s.ImportLabel
	o.Industry = s.Industry
	o.Name = s.Name
	o.Namespace = s.Namespace
	o.Plans = s.Plans
	o.Propagate = s.Propagate
	o.ProviderName = s.ProviderName
	o.Summary = s.Summary
	o.UpdateTime = s.UpdateTime
	o.ZHash = s.ZHash
	o.Zone = s.Zone

	return nil
}

// Version returns the hardcoded version of the model.
func (o *AIDomain) Version() int {

	return 1
}

// BleveType implements the bleve.Classifier Interface.
func (o *AIDomain) BleveType() string {

	return "aidomain"
}

// DefaultOrder returns the list of default ordering fields.
func (o *AIDomain) DefaultOrder() []string {

	return []string{}
}

// Doc returns the documentation for the object
func (o *AIDomain) Doc() string {

	return `AI domain provides an AI risk score given a domain url.`
}

func (o *AIDomain) String() string {

	return fmt.Sprintf("<%s:%s>", o.Identity().Name, o.Identifier())
}

// GetCreateTime returns the CreateTime of the receiver.
func (o *AIDomain) GetCreateTime() time.Time {

	return o.CreateTime
}

// SetCreateTime sets the property CreateTime of the receiver using the given value.
func (o *AIDomain) SetCreateTime(createTime time.Time) {

	o.CreateTime = createTime
}

// GetImportHash returns the ImportHash of the receiver.
func (o *AIDomain) GetImportHash() string {

	return o.ImportHash
}

// SetImportHash sets the property ImportHash of the receiver using the given value.
func (o *AIDomain) SetImportHash(importHash string) {

	o.ImportHash = importHash
}

// GetImportLabel returns the ImportLabel of the receiver.
func (o *AIDomain) GetImportLabel() string {

	return o.ImportLabel
}

// SetImportLabel sets the property ImportLabel of the receiver using the given value.
func (o *AIDomain) SetImportLabel(importLabel string) {

	o.ImportLabel = importLabel
}

// GetNamespace returns the Namespace of the receiver.
func (o *AIDomain) GetNamespace() string {

	return o.Namespace
}

// SetNamespace sets the property Namespace of the receiver using the given value.
func (o *AIDomain) SetNamespace(namespace string) {

	o.Namespace = namespace
}

// GetPropagate returns the Propagate of the receiver.
func (o *AIDomain) GetPropagate() bool {

	return o.Propagate
}

// SetPropagate sets the property Propagate of the receiver using the given value.
func (o *AIDomain) SetPropagate(propagate bool) {

	o.Propagate = propagate
}

// GetUpdateTime returns the UpdateTime of the receiver.
func (o *AIDomain) GetUpdateTime() time.Time {

	return o.UpdateTime
}

// SetUpdateTime sets the property UpdateTime of the receiver using the given value.
func (o *AIDomain) SetUpdateTime(updateTime time.Time) {

	o.UpdateTime = updateTime
}

// ToSparse returns the sparse version of the model.
// The returned object will only contain the given fields. No field means entire field set.
func (o *AIDomain) ToSparse(fields ...string) elemental.SparseIdentifiable {

	if len(fields) == 0 {
		// nolint: goimports
		return &SparseAIDomain{
			ID:                 &o.ID,
			LLMProviders:       &o.LLMProviders,
			LLMProvidersRisk:   o.LLMProvidersRisk,
			Address:            &o.Address,
			Company:            &o.Company,
			CompanyURL:         &o.CompanyURL,
			Compliances:        &o.Compliances,
			CompliancesRisk:    o.CompliancesRisk,
			CreateTime:         &o.CreateTime,
			DataPolicies:       &o.DataPolicies,
			DataPoliciesRisk:   o.DataPoliciesRisk,
			DataProcessors:     &o.DataProcessors,
			DataProcessorsRisk: o.DataProcessorsRisk,
			Description:        &o.Description,
			Domain:             &o.Domain,
			ExecutiveSummary:   &o.ExecutiveSummary,
			Features:           &o.Features,
			ImportHash:         &o.ImportHash,
			ImportLabel:        &o.ImportLabel,
			Industry:           o.Industry,
			Name:               &o.Name,
			Namespace:          &o.Namespace,
			Plans:              &o.Plans,
			Propagate:          &o.Propagate,
			ProviderName:       &o.ProviderName,
			Summary:            o.Summary,
			UpdateTime:         &o.UpdateTime,
			ZHash:              &o.ZHash,
			Zone:               &o.Zone,
		}
	}

	sp := &SparseAIDomain{}
	for _, f := range fields {
		switch f {
		case "ID":
			sp.ID = &(o.ID)
		case "LLMProviders":
			sp.LLMProviders = &(o.LLMProviders)
		case "LLMProvidersRisk":
			sp.LLMProvidersRisk = o.LLMProvidersRisk
		case "address":
			sp.Address = &(o.Address)
		case "company":
			sp.Company = &(o.Company)
		case "companyURL":
			sp.CompanyURL = &(o.CompanyURL)
		case "compliances":
			sp.Compliances = &(o.Compliances)
		case "compliancesRisk":
			sp.CompliancesRisk = o.CompliancesRisk
		case "createTime":
			sp.CreateTime = &(o.CreateTime)
		case "dataPolicies":
			sp.DataPolicies = &(o.DataPolicies)
		case "dataPoliciesRisk":
			sp.DataPoliciesRisk = o.DataPoliciesRisk
		case "dataProcessors":
			sp.DataProcessors = &(o.DataProcessors)
		case "dataProcessorsRisk":
			sp.DataProcessorsRisk = o.DataProcessorsRisk
		case "description":
			sp.Description = &(o.Description)
		case "domain":
			sp.Domain = &(o.Domain)
		case "executiveSummary":
			sp.ExecutiveSummary = &(o.ExecutiveSummary)
		case "features":
			sp.Features = &(o.Features)
		case "importHash":
			sp.ImportHash = &(o.ImportHash)
		case "importLabel":
			sp.ImportLabel = &(o.ImportLabel)
		case "industry":
			sp.Industry = o.Industry
		case "name":
			sp.Name = &(o.Name)
		case "namespace":
			sp.Namespace = &(o.Namespace)
		case "plans":
			sp.Plans = &(o.Plans)
		case "propagate":
			sp.Propagate = &(o.Propagate)
		case "providerName":
			sp.ProviderName = &(o.ProviderName)
		case "summary":
			sp.Summary = o.Summary
		case "updateTime":
			sp.UpdateTime = &(o.UpdateTime)
		case "zHash":
			sp.ZHash = &(o.ZHash)
		case "zone":
			sp.Zone = &(o.Zone)
		}
	}

	return sp
}

// Patch apply the non nil value of a *SparseAIDomain to the object.
func (o *AIDomain) Patch(sparse elemental.SparseIdentifiable) {
	if !sparse.Identity().IsEqual(o.Identity()) {
		panic("cannot patch from a parse with different identity")
	}

	so := sparse.(*SparseAIDomain)
	if so.ID != nil {
		o.ID = *so.ID
	}
	if so.LLMProviders != nil {
		o.LLMProviders = *so.LLMProviders
	}
	if so.LLMProvidersRisk != nil {
		o.LLMProvidersRisk = so.LLMProvidersRisk
	}
	if so.Address != nil {
		o.Address = *so.Address
	}
	if so.Company != nil {
		o.Company = *so.Company
	}
	if so.CompanyURL != nil {
		o.CompanyURL = *so.CompanyURL
	}
	if so.Compliances != nil {
		o.Compliances = *so.Compliances
	}
	if so.CompliancesRisk != nil {
		o.CompliancesRisk = so.CompliancesRisk
	}
	if so.CreateTime != nil {
		o.CreateTime = *so.CreateTime
	}
	if so.DataPolicies != nil {
		o.DataPolicies = *so.DataPolicies
	}
	if so.DataPoliciesRisk != nil {
		o.DataPoliciesRisk = so.DataPoliciesRisk
	}
	if so.DataProcessors != nil {
		o.DataProcessors = *so.DataProcessors
	}
	if so.DataProcessorsRisk != nil {
		o.DataProcessorsRisk = so.DataProcessorsRisk
	}
	if so.Description != nil {
		o.Description = *so.Description
	}
	if so.Domain != nil {
		o.Domain = *so.Domain
	}
	if so.ExecutiveSummary != nil {
		o.ExecutiveSummary = *so.ExecutiveSummary
	}
	if so.Features != nil {
		o.Features = *so.Features
	}
	if so.ImportHash != nil {
		o.ImportHash = *so.ImportHash
	}
	if so.ImportLabel != nil {
		o.ImportLabel = *so.ImportLabel
	}
	if so.Industry != nil {
		o.Industry = so.Industry
	}
	if so.Name != nil {
		o.Name = *so.Name
	}
	if so.Namespace != nil {
		o.Namespace = *so.Namespace
	}
	if so.Plans != nil {
		o.Plans = *so.Plans
	}
	if so.Propagate != nil {
		o.Propagate = *so.Propagate
	}
	if so.ProviderName != nil {
		o.ProviderName = *so.ProviderName
	}
	if so.Summary != nil {
		o.Summary = so.Summary
	}
	if so.UpdateTime != nil {
		o.UpdateTime = *so.UpdateTime
	}
	if so.ZHash != nil {
		o.ZHash = *so.ZHash
	}
	if so.Zone != nil {
		o.Zone = *so.Zone
	}
}

// DeepCopy returns a deep copy if the AIDomain.
func (o *AIDomain) DeepCopy() *AIDomain {

	if o == nil {
		return nil
	}

	out := &AIDomain{}
	o.DeepCopyInto(out)

	return out
}

// DeepCopyInto copies the receiver into the given *AIDomain.
func (o *AIDomain) DeepCopyInto(out *AIDomain) {

	target, err := copystructure.Copy(o)
	if err != nil {
		panic(fmt.Sprintf("Unable to deepcopy AIDomain: %s", err))
	}

	*out = *target.(*AIDomain)
}

// Validate valides the current information stored into the structure.
func (o *AIDomain) Validate() error {

	errors := elemental.Errors{}
	requiredErrors := elemental.Errors{}

	for _, sub := range o.LLMProviders {
		if sub == nil {
			continue
		}
		elemental.ResetDefaultForZeroValues(sub)
		if err := sub.Validate(); err != nil {
			errors = errors.Append(err)
		}
	}

	if o.LLMProvidersRisk != nil {
		elemental.ResetDefaultForZeroValues(o.LLMProvidersRisk)
		if err := o.LLMProvidersRisk.Validate(); err != nil {
			errors = errors.Append(err)
		}
	}

	for _, sub := range o.Compliances {
		if sub == nil {
			continue
		}
		elemental.ResetDefaultForZeroValues(sub)
		if err := sub.Validate(); err != nil {
			errors = errors.Append(err)
		}
	}

	if o.CompliancesRisk != nil {
		elemental.ResetDefaultForZeroValues(o.CompliancesRisk)
		if err := o.CompliancesRisk.Validate(); err != nil {
			errors = errors.Append(err)
		}
	}

	for _, sub := range o.DataPolicies {
		if sub == nil {
			continue
		}
		elemental.ResetDefaultForZeroValues(sub)
		if err := sub.Validate(); err != nil {
			errors = errors.Append(err)
		}
	}

	if o.DataPoliciesRisk != nil {
		elemental.ResetDefaultForZeroValues(o.DataPoliciesRisk)
		if err := o.DataPoliciesRisk.Validate(); err != nil {
			errors = errors.Append(err)
		}
	}

	for _, sub := range o.DataProcessors {
		if sub == nil {
			continue
		}
		elemental.ResetDefaultForZeroValues(sub)
		if err := sub.Validate(); err != nil {
			errors = errors.Append(err)
		}
	}

	if o.DataProcessorsRisk != nil {
		elemental.ResetDefaultForZeroValues(o.DataProcessorsRisk)
		if err := o.DataProcessorsRisk.Validate(); err != nil {
			errors = errors.Append(err)
		}
	}

	if err := elemental.ValidateRequiredString("domain", o.Domain); err != nil {
		requiredErrors = requiredErrors.Append(err)
	}

	for _, sub := range o.Features {
		if sub == nil {
			continue
		}
		elemental.ResetDefaultForZeroValues(sub)
		if err := sub.Validate(); err != nil {
			errors = errors.Append(err)
		}
	}

	if o.Industry != nil {
		elemental.ResetDefaultForZeroValues(o.Industry)
		if err := o.Industry.Validate(); err != nil {
			errors = errors.Append(err)
		}
	}

	if err := elemental.ValidateRequiredString("name", o.Name); err != nil {
		requiredErrors = requiredErrors.Append(err)
	}

	for _, sub := range o.Plans {
		if sub == nil {
			continue
		}
		elemental.ResetDefaultForZeroValues(sub)
		if err := sub.Validate(); err != nil {
			errors = errors.Append(err)
		}
	}

	if o.Summary != nil {
		elemental.ResetDefaultForZeroValues(o.Summary)
		if err := o.Summary.Validate(); err != nil {
			errors = errors.Append(err)
		}
	}

	if len(requiredErrors) > 0 {
		return requiredErrors
	}

	if len(errors) > 0 {
		return errors
	}

	return nil
}

// SpecificationForAttribute returns the AttributeSpecification for the given attribute name key.
func (*AIDomain) SpecificationForAttribute(name string) elemental.AttributeSpecification {

	if v, ok := AIDomainAttributesMap[name]; ok {
		return v
	}

	// We could not find it, so let's check on the lower case indexed spec map
	return AIDomainLowerCaseAttributesMap[name]
}

// AttributeSpecifications returns the full attribute specifications map.
func (*AIDomain) AttributeSpecifications() map[string]elemental.AttributeSpecification {

	return AIDomainAttributesMap
}

// ValueForAttribute returns the value for the given attribute.
// This is a very advanced function that you should not need but in some
// very specific use cases.
func (o *AIDomain) ValueForAttribute(name string) any {

	switch name {
	case "ID":
		return o.ID
	case "LLMProviders":
		return o.LLMProviders
	case "LLMProvidersRisk":
		return o.LLMProvidersRisk
	case "address":
		return o.Address
	case "company":
		return o.Company
	case "companyURL":
		return o.CompanyURL
	case "compliances":
		return o.Compliances
	case "compliancesRisk":
		return o.CompliancesRisk
	case "createTime":
		return o.CreateTime
	case "dataPolicies":
		return o.DataPolicies
	case "dataPoliciesRisk":
		return o.DataPoliciesRisk
	case "dataProcessors":
		return o.DataProcessors
	case "dataProcessorsRisk":
		return o.DataProcessorsRisk
	case "description":
		return o.Description
	case "domain":
		return o.Domain
	case "executiveSummary":
		return o.ExecutiveSummary
	case "features":
		return o.Features
	case "importHash":
		return o.ImportHash
	case "importLabel":
		return o.ImportLabel
	case "industry":
		return o.Industry
	case "name":
		return o.Name
	case "namespace":
		return o.Namespace
	case "plans":
		return o.Plans
	case "propagate":
		return o.Propagate
	case "providerName":
		return o.ProviderName
	case "summary":
		return o.Summary
	case "updateTime":
		return o.UpdateTime
	case "zHash":
		return o.ZHash
	case "zone":
		return o.Zone
	}

	return nil
}

// AIDomainAttributesMap represents the map of attribute for AIDomain.
var AIDomainAttributesMap = map[string]elemental.AttributeSpecification{
	"ID": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "_id",
		ConvertedName:  "ID",
		Description:    `ID is the identifier of the object.`,
		Exposed:        true,
		Filterable:     true,
		Identifier:     true,
		Name:           "ID",
		Orderable:      true,
		ReadOnly:       true,
		Stored:         true,
		Type:           "string",
	},
	"LLMProviders": {
		AllowedChoices: []string{},
		BSONFieldName:  "llmproviders",
		ConvertedName:  "LLMProviders",
		Description:    `List of LLM providers the provider uses.`,
		Exposed:        true,
		Name:           "LLMProviders",
		Stored:         true,
		SubType:        "aidsectionllmprovider",
		Type:           "refList",
	},
	"LLMProvidersRisk": {
		AllowedChoices: []string{},
		BSONFieldName:  "llmprovidersrisk",
		ConvertedName:  "LLMProvidersRisk",
		Description:    `Overall risk assessment for the LLM providers.`,
		Exposed:        true,
		Name:           "LLMProvidersRisk",
		Stored:         true,
		SubType:        "aidrisk",
		Type:           "ref",
	},
	"Address": {
		AllowedChoices: []string{},
		BSONFieldName:  "address",
		ConvertedName:  "Address",
		Description:    `The address of the company.`,
		Exposed:        true,
		Name:           "address",
		Stored:         true,
		Type:           "string",
	},
	"Company": {
		AllowedChoices: []string{},
		BSONFieldName:  "company",
		ConvertedName:  "Company",
		Description:    `The name of the company.`,
		Exposed:        true,
		Name:           "company",
		Stored:         true,
		Type:           "string",
	},
	"CompanyURL": {
		AllowedChoices: []string{},
		BSONFieldName:  "companyurl",
		ConvertedName:  "CompanyURL",
		Description:    `The url of the company.`,
		Exposed:        true,
		Name:           "companyURL",
		Stored:         true,
		Type:           "string",
	},
	"Compliances": {
		AllowedChoices: []string{},
		BSONFieldName:  "compliances",
		ConvertedName:  "Compliances",
		Description:    `Certifications or Security Frameworks implemented by the provider.`,
		Exposed:        true,
		Name:           "compliances",
		Stored:         true,
		SubType:        "aidsectioncompliance",
		Type:           "refList",
	},
	"CompliancesRisk": {
		AllowedChoices: []string{},
		BSONFieldName:  "compliancesrisk",
		ConvertedName:  "CompliancesRisk",
		Description:    `Overall risk assessment for the compliences.`,
		Exposed:        true,
		Name:           "compliancesRisk",
		Stored:         true,
		SubType:        "aidrisk",
		Type:           "ref",
	},
	"CreateTime": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "createtime",
		ConvertedName:  "CreateTime",
		Description:    `Creation date of the object.`,
		Exposed:        true,
		Getter:         true,
		Name:           "createTime",
		Orderable:      true,
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Type:           "time",
	},
	"DataPolicies": {
		AllowedChoices: []string{},
		BSONFieldName:  "datapolicies",
		ConvertedName:  "DataPolicies",
		Description:    `List of policies defining how the provider will use customer data.`,
		Exposed:        true,
		Name:           "dataPolicies",
		Stored:         true,
		SubType:        "aidsectiondatapolicy",
		Type:           "refList",
	},
	"DataPoliciesRisk": {
		AllowedChoices: []string{},
		BSONFieldName:  "datapoliciesrisk",
		ConvertedName:  "DataPoliciesRisk",
		Description:    `Overall risk assessment for the data policies.`,
		Exposed:        true,
		Name:           "dataPoliciesRisk",
		Stored:         true,
		SubType:        "aidrisk",
		Type:           "ref",
	},
	"DataProcessors": {
		AllowedChoices: []string{},
		BSONFieldName:  "dataprocessors",
		ConvertedName:  "DataProcessors",
		Description:    `List of data processors used the provider.`,
		Exposed:        true,
		Name:           "dataProcessors",
		Stored:         true,
		SubType:        "aidsectiondataprocessor",
		Type:           "refList",
	},
	"DataProcessorsRisk": {
		AllowedChoices: []string{},
		BSONFieldName:  "dataprocessorsrisk",
		ConvertedName:  "DataProcessorsRisk",
		Description:    `Overall risk assessment for the data processors.`,
		Exposed:        true,
		Name:           "dataProcessorsRisk",
		Stored:         true,
		SubType:        "aidrisk",
		Type:           "ref",
	},
	"Description": {
		AllowedChoices: []string{},
		BSONFieldName:  "description",
		ConvertedName:  "Description",
		Description:    `A brief description about the AI domain and what services it provides.`,
		Exposed:        true,
		Name:           "description",
		Stored:         true,
		Type:           "string",
	},
	"Domain": {
		AllowedChoices: []string{},
		BSONFieldName:  "domain",
		ConvertedName:  "Domain",
		Description:    `The domain of the service.`,
		Exposed:        true,
		Name:           "domain",
		Required:       true,
		Stored:         true,
		Type:           "string",
	},
	"ExecutiveSummary": {
		AllowedChoices: []string{},
		BSONFieldName:  "executivesummary",
		ConvertedName:  "ExecutiveSummary",
		Description:    `The executive summary.`,
		Exposed:        true,
		Name:           "executiveSummary",
		Stored:         true,
		Type:           "string",
	},
	"Features": {
		AllowedChoices: []string{},
		BSONFieldName:  "features",
		ConvertedName:  "Features",
		Description:    `The features implemented by the provider.`,
		Exposed:        true,
		Name:           "features",
		Stored:         true,
		SubType:        "aidsection",
		Type:           "refList",
	},
	"ImportHash": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "importhash",
		ConvertedName:  "ImportHash",
		CreationOnly:   true,
		Description:    `The hash of the structure used to compare with new import version.`,
		Exposed:        true,
		Getter:         true,
		Name:           "importHash",
		Setter:         true,
		Stored:         true,
		Type:           "string",
	},
	"ImportLabel": {
		AllowedChoices: []string{},
		BSONFieldName:  "importlabel",
		ConvertedName:  "ImportLabel",
		CreationOnly:   true,
		Description: `The user-defined import label that allows the system to group resources from the
same import operation.`,
		Exposed: true,
		Getter:  true,
		Name:    "importLabel",
		Setter:  true,
		Stored:  true,
		Type:    "string",
	},
	"Industry": {
		AllowedChoices: []string{},
		BSONFieldName:  "industry",
		ConvertedName:  "Industry",
		Description:    `The AI Categories of the services.`,
		Exposed:        true,
		Name:           "industry",
		Stored:         true,
		SubType:        "aidsection",
		Type:           "ref",
	},
	"Name": {
		AllowedChoices: []string{},
		BSONFieldName:  "name",
		ConvertedName:  "Name",
		Description:    `The name of the ai domain.`,
		Exposed:        true,
		Name:           "name",
		Required:       true,
		Stored:         true,
		Type:           "string",
	},
	"Namespace": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "namespace",
		ConvertedName:  "Namespace",
		Description:    `The namespace of the object.`,
		Exposed:        true,
		Getter:         true,
		Name:           "namespace",
		Orderable:      true,
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Type:           "string",
	},
	"Plans": {
		AllowedChoices: []string{},
		BSONFieldName:  "plans",
		ConvertedName:  "Plans",
		Description:    `List of plans/tiers offered by the provider.`,
		Exposed:        true,
		Name:           "plans",
		Stored:         true,
		SubType:        "aidsectionplan",
		Type:           "refList",
	},
	"Propagate": {
		AllowedChoices: []string{},
		BSONFieldName:  "propagate",
		ConvertedName:  "Propagate",
		DefaultValue:   true,
		Description:    `Propagates the object to all child namespaces. This is always true.`,
		Exposed:        true,
		Getter:         true,
		Name:           "propagate",
		Setter:         true,
		Stored:         true,
		Type:           "boolean",
	},
	"ProviderName": {
		AllowedChoices: []string{},
		BSONFieldName:  "providername",
		ConvertedName:  "ProviderName",
		Description:    `The name of the main provider.`,
		Exposed:        true,
		Name:           "providerName",
		Stored:         true,
		Type:           "string",
	},
	"Summary": {
		AllowedChoices: []string{},
		BSONFieldName:  "summary",
		ConvertedName:  "Summary",
		Description:    `Quick machine friendly summary.`,
		Exposed:        true,
		Name:           "summary",
		Stored:         true,
		SubType:        "aidsummary",
		Type:           "ref",
	},
	"UpdateTime": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "updatetime",
		ConvertedName:  "UpdateTime",
		Description:    `Last update date of the object.`,
		Exposed:        true,
		Getter:         true,
		Name:           "updateTime",
		Orderable:      true,
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Type:           "time",
	},
}

// AIDomainLowerCaseAttributesMap represents the map of attribute for AIDomain.
var AIDomainLowerCaseAttributesMap = map[string]elemental.AttributeSpecification{
	"id": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "_id",
		ConvertedName:  "ID",
		Description:    `ID is the identifier of the object.`,
		Exposed:        true,
		Filterable:     true,
		Identifier:     true,
		Name:           "ID",
		Orderable:      true,
		ReadOnly:       true,
		Stored:         true,
		Type:           "string",
	},
	"llmproviders": {
		AllowedChoices: []string{},
		BSONFieldName:  "llmproviders",
		ConvertedName:  "LLMProviders",
		Description:    `List of LLM providers the provider uses.`,
		Exposed:        true,
		Name:           "LLMProviders",
		Stored:         true,
		SubType:        "aidsectionllmprovider",
		Type:           "refList",
	},
	"llmprovidersrisk": {
		AllowedChoices: []string{},
		BSONFieldName:  "llmprovidersrisk",
		ConvertedName:  "LLMProvidersRisk",
		Description:    `Overall risk assessment for the LLM providers.`,
		Exposed:        true,
		Name:           "LLMProvidersRisk",
		Stored:         true,
		SubType:        "aidrisk",
		Type:           "ref",
	},
	"address": {
		AllowedChoices: []string{},
		BSONFieldName:  "address",
		ConvertedName:  "Address",
		Description:    `The address of the company.`,
		Exposed:        true,
		Name:           "address",
		Stored:         true,
		Type:           "string",
	},
	"company": {
		AllowedChoices: []string{},
		BSONFieldName:  "company",
		ConvertedName:  "Company",
		Description:    `The name of the company.`,
		Exposed:        true,
		Name:           "company",
		Stored:         true,
		Type:           "string",
	},
	"companyurl": {
		AllowedChoices: []string{},
		BSONFieldName:  "companyurl",
		ConvertedName:  "CompanyURL",
		Description:    `The url of the company.`,
		Exposed:        true,
		Name:           "companyURL",
		Stored:         true,
		Type:           "string",
	},
	"compliances": {
		AllowedChoices: []string{},
		BSONFieldName:  "compliances",
		ConvertedName:  "Compliances",
		Description:    `Certifications or Security Frameworks implemented by the provider.`,
		Exposed:        true,
		Name:           "compliances",
		Stored:         true,
		SubType:        "aidsectioncompliance",
		Type:           "refList",
	},
	"compliancesrisk": {
		AllowedChoices: []string{},
		BSONFieldName:  "compliancesrisk",
		ConvertedName:  "CompliancesRisk",
		Description:    `Overall risk assessment for the compliences.`,
		Exposed:        true,
		Name:           "compliancesRisk",
		Stored:         true,
		SubType:        "aidrisk",
		Type:           "ref",
	},
	"createtime": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "createtime",
		ConvertedName:  "CreateTime",
		Description:    `Creation date of the object.`,
		Exposed:        true,
		Getter:         true,
		Name:           "createTime",
		Orderable:      true,
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Type:           "time",
	},
	"datapolicies": {
		AllowedChoices: []string{},
		BSONFieldName:  "datapolicies",
		ConvertedName:  "DataPolicies",
		Description:    `List of policies defining how the provider will use customer data.`,
		Exposed:        true,
		Name:           "dataPolicies",
		Stored:         true,
		SubType:        "aidsectiondatapolicy",
		Type:           "refList",
	},
	"datapoliciesrisk": {
		AllowedChoices: []string{},
		BSONFieldName:  "datapoliciesrisk",
		ConvertedName:  "DataPoliciesRisk",
		Description:    `Overall risk assessment for the data policies.`,
		Exposed:        true,
		Name:           "dataPoliciesRisk",
		Stored:         true,
		SubType:        "aidrisk",
		Type:           "ref",
	},
	"dataprocessors": {
		AllowedChoices: []string{},
		BSONFieldName:  "dataprocessors",
		ConvertedName:  "DataProcessors",
		Description:    `List of data processors used the provider.`,
		Exposed:        true,
		Name:           "dataProcessors",
		Stored:         true,
		SubType:        "aidsectiondataprocessor",
		Type:           "refList",
	},
	"dataprocessorsrisk": {
		AllowedChoices: []string{},
		BSONFieldName:  "dataprocessorsrisk",
		ConvertedName:  "DataProcessorsRisk",
		Description:    `Overall risk assessment for the data processors.`,
		Exposed:        true,
		Name:           "dataProcessorsRisk",
		Stored:         true,
		SubType:        "aidrisk",
		Type:           "ref",
	},
	"description": {
		AllowedChoices: []string{},
		BSONFieldName:  "description",
		ConvertedName:  "Description",
		Description:    `A brief description about the AI domain and what services it provides.`,
		Exposed:        true,
		Name:           "description",
		Stored:         true,
		Type:           "string",
	},
	"domain": {
		AllowedChoices: []string{},
		BSONFieldName:  "domain",
		ConvertedName:  "Domain",
		Description:    `The domain of the service.`,
		Exposed:        true,
		Name:           "domain",
		Required:       true,
		Stored:         true,
		Type:           "string",
	},
	"executivesummary": {
		AllowedChoices: []string{},
		BSONFieldName:  "executivesummary",
		ConvertedName:  "ExecutiveSummary",
		Description:    `The executive summary.`,
		Exposed:        true,
		Name:           "executiveSummary",
		Stored:         true,
		Type:           "string",
	},
	"features": {
		AllowedChoices: []string{},
		BSONFieldName:  "features",
		ConvertedName:  "Features",
		Description:    `The features implemented by the provider.`,
		Exposed:        true,
		Name:           "features",
		Stored:         true,
		SubType:        "aidsection",
		Type:           "refList",
	},
	"importhash": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "importhash",
		ConvertedName:  "ImportHash",
		CreationOnly:   true,
		Description:    `The hash of the structure used to compare with new import version.`,
		Exposed:        true,
		Getter:         true,
		Name:           "importHash",
		Setter:         true,
		Stored:         true,
		Type:           "string",
	},
	"importlabel": {
		AllowedChoices: []string{},
		BSONFieldName:  "importlabel",
		ConvertedName:  "ImportLabel",
		CreationOnly:   true,
		Description: `The user-defined import label that allows the system to group resources from the
same import operation.`,
		Exposed: true,
		Getter:  true,
		Name:    "importLabel",
		Setter:  true,
		Stored:  true,
		Type:    "string",
	},
	"industry": {
		AllowedChoices: []string{},
		BSONFieldName:  "industry",
		ConvertedName:  "Industry",
		Description:    `The AI Categories of the services.`,
		Exposed:        true,
		Name:           "industry",
		Stored:         true,
		SubType:        "aidsection",
		Type:           "ref",
	},
	"name": {
		AllowedChoices: []string{},
		BSONFieldName:  "name",
		ConvertedName:  "Name",
		Description:    `The name of the ai domain.`,
		Exposed:        true,
		Name:           "name",
		Required:       true,
		Stored:         true,
		Type:           "string",
	},
	"namespace": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "namespace",
		ConvertedName:  "Namespace",
		Description:    `The namespace of the object.`,
		Exposed:        true,
		Getter:         true,
		Name:           "namespace",
		Orderable:      true,
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Type:           "string",
	},
	"plans": {
		AllowedChoices: []string{},
		BSONFieldName:  "plans",
		ConvertedName:  "Plans",
		Description:    `List of plans/tiers offered by the provider.`,
		Exposed:        true,
		Name:           "plans",
		Stored:         true,
		SubType:        "aidsectionplan",
		Type:           "refList",
	},
	"propagate": {
		AllowedChoices: []string{},
		BSONFieldName:  "propagate",
		ConvertedName:  "Propagate",
		DefaultValue:   true,
		Description:    `Propagates the object to all child namespaces. This is always true.`,
		Exposed:        true,
		Getter:         true,
		Name:           "propagate",
		Setter:         true,
		Stored:         true,
		Type:           "boolean",
	},
	"providername": {
		AllowedChoices: []string{},
		BSONFieldName:  "providername",
		ConvertedName:  "ProviderName",
		Description:    `The name of the main provider.`,
		Exposed:        true,
		Name:           "providerName",
		Stored:         true,
		Type:           "string",
	},
	"summary": {
		AllowedChoices: []string{},
		BSONFieldName:  "summary",
		ConvertedName:  "Summary",
		Description:    `Quick machine friendly summary.`,
		Exposed:        true,
		Name:           "summary",
		Stored:         true,
		SubType:        "aidsummary",
		Type:           "ref",
	},
	"updatetime": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "updatetime",
		ConvertedName:  "UpdateTime",
		Description:    `Last update date of the object.`,
		Exposed:        true,
		Getter:         true,
		Name:           "updateTime",
		Orderable:      true,
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Type:           "time",
	},
}

// SparseAIDomainsList represents a list of SparseAIDomains
type SparseAIDomainsList []*SparseAIDomain

// Identity returns the identity of the objects in the list.
func (o SparseAIDomainsList) Identity() elemental.Identity {

	return AIDomainIdentity
}

// Copy returns a pointer to a copy the SparseAIDomainsList.
func (o SparseAIDomainsList) Copy() elemental.Identifiables {

	copy := slices.Clone(o)
	return &copy
}

// Append appends the objects to the a new copy of the SparseAIDomainsList.
func (o SparseAIDomainsList) Append(objects ...elemental.Identifiable) elemental.Identifiables {

	out := slices.Clone(o)
	for _, obj := range objects {
		out = append(out, obj.(*SparseAIDomain))
	}

	return out
}

// List converts the object to an elemental.IdentifiablesList.
func (o SparseAIDomainsList) List() elemental.IdentifiablesList {

	out := make(elemental.IdentifiablesList, len(o))
	for i := range len(o) {
		out[i] = o[i]
	}

	return out
}

// DefaultOrder returns the default ordering fields of the content.
func (o SparseAIDomainsList) DefaultOrder() []string {

	return []string{}
}

// ToPlain returns the SparseAIDomainsList converted to AIDomainsList.
func (o SparseAIDomainsList) ToPlain() elemental.IdentifiablesList {

	out := make(elemental.IdentifiablesList, len(o))
	for i := range len(o) {
		out[i] = o[i].ToPlain()
	}

	return out
}

// Version returns the version of the content.
func (o SparseAIDomainsList) Version() int {

	return 1
}

// SparseAIDomain represents the sparse version of a aidomain.
type SparseAIDomain struct {
	// ID is the identifier of the object.
	ID *string `json:"ID,omitempty" msgpack:"ID,omitempty" bson:"-" mapstructure:"ID,omitempty"`

	// List of LLM providers the provider uses.
	LLMProviders *[]*AIDSectionLLMProvider `json:"LLMProviders,omitempty" msgpack:"LLMProviders,omitempty" bson:"llmproviders,omitempty" mapstructure:"LLMProviders,omitempty"`

	// Overall risk assessment for the LLM providers.
	LLMProvidersRisk *AIDRisk `json:"LLMProvidersRisk,omitempty" msgpack:"LLMProvidersRisk,omitempty" bson:"llmprovidersrisk,omitempty" mapstructure:"LLMProvidersRisk,omitempty"`

	// The address of the company.
	Address *string `json:"address,omitempty" msgpack:"address,omitempty" bson:"address,omitempty" mapstructure:"address,omitempty"`

	// The name of the company.
	Company *string `json:"company,omitempty" msgpack:"company,omitempty" bson:"company,omitempty" mapstructure:"company,omitempty"`

	// The url of the company.
	CompanyURL *string `json:"companyURL,omitempty" msgpack:"companyURL,omitempty" bson:"companyurl,omitempty" mapstructure:"companyURL,omitempty"`

	// Certifications or Security Frameworks implemented by the provider.
	Compliances *[]*AIDSectionCompliance `json:"compliances,omitempty" msgpack:"compliances,omitempty" bson:"compliances,omitempty" mapstructure:"compliances,omitempty"`

	// Overall risk assessment for the compliences.
	CompliancesRisk *AIDRisk `json:"compliancesRisk,omitempty" msgpack:"compliancesRisk,omitempty" bson:"compliancesrisk,omitempty" mapstructure:"compliancesRisk,omitempty"`

	// Creation date of the object.
	CreateTime *time.Time `json:"createTime,omitempty" msgpack:"createTime,omitempty" bson:"createtime,omitempty" mapstructure:"createTime,omitempty"`

	// List of policies defining how the provider will use customer data.
	DataPolicies *[]*AIDSectionDataPolicy `json:"dataPolicies,omitempty" msgpack:"dataPolicies,omitempty" bson:"datapolicies,omitempty" mapstructure:"dataPolicies,omitempty"`

	// Overall risk assessment for the data policies.
	DataPoliciesRisk *AIDRisk `json:"dataPoliciesRisk,omitempty" msgpack:"dataPoliciesRisk,omitempty" bson:"datapoliciesrisk,omitempty" mapstructure:"dataPoliciesRisk,omitempty"`

	// List of data processors used the provider.
	DataProcessors *[]*AIDSectionDataProcessor `json:"dataProcessors,omitempty" msgpack:"dataProcessors,omitempty" bson:"dataprocessors,omitempty" mapstructure:"dataProcessors,omitempty"`

	// Overall risk assessment for the data processors.
	DataProcessorsRisk *AIDRisk `json:"dataProcessorsRisk,omitempty" msgpack:"dataProcessorsRisk,omitempty" bson:"dataprocessorsrisk,omitempty" mapstructure:"dataProcessorsRisk,omitempty"`

	// A brief description about the AI domain and what services it provides.
	Description *string `json:"description,omitempty" msgpack:"description,omitempty" bson:"description,omitempty" mapstructure:"description,omitempty"`

	// The domain of the service.
	Domain *string `json:"domain,omitempty" msgpack:"domain,omitempty" bson:"domain,omitempty" mapstructure:"domain,omitempty"`

	// The executive summary.
	ExecutiveSummary *string `json:"executiveSummary,omitempty" msgpack:"executiveSummary,omitempty" bson:"executivesummary,omitempty" mapstructure:"executiveSummary,omitempty"`

	// The features implemented by the provider.
	Features *[]*AIDSection `json:"features,omitempty" msgpack:"features,omitempty" bson:"features,omitempty" mapstructure:"features,omitempty"`

	// The hash of the structure used to compare with new import version.
	ImportHash *string `json:"importHash,omitempty" msgpack:"importHash,omitempty" bson:"importhash,omitempty" mapstructure:"importHash,omitempty"`

	// The user-defined import label that allows the system to group resources from the
	// same import operation.
	ImportLabel *string `json:"importLabel,omitempty" msgpack:"importLabel,omitempty" bson:"importlabel,omitempty" mapstructure:"importLabel,omitempty"`

	// The AI Categories of the services.
	Industry *AIDSection `json:"industry,omitempty" msgpack:"industry,omitempty" bson:"industry,omitempty" mapstructure:"industry,omitempty"`

	// The name of the ai domain.
	Name *string `json:"name,omitempty" msgpack:"name,omitempty" bson:"name,omitempty" mapstructure:"name,omitempty"`

	// The namespace of the object.
	Namespace *string `json:"namespace,omitempty" msgpack:"namespace,omitempty" bson:"namespace,omitempty" mapstructure:"namespace,omitempty"`

	// List of plans/tiers offered by the provider.
	Plans *[]*AIDSectionPlan `json:"plans,omitempty" msgpack:"plans,omitempty" bson:"plans,omitempty" mapstructure:"plans,omitempty"`

	// Propagates the object to all child namespaces. This is always true.
	Propagate *bool `json:"propagate,omitempty" msgpack:"propagate,omitempty" bson:"propagate,omitempty" mapstructure:"propagate,omitempty"`

	// The name of the main provider.
	ProviderName *string `json:"providerName,omitempty" msgpack:"providerName,omitempty" bson:"providername,omitempty" mapstructure:"providerName,omitempty"`

	// Quick machine friendly summary.
	Summary *AIDSummary `json:"summary,omitempty" msgpack:"summary,omitempty" bson:"summary,omitempty" mapstructure:"summary,omitempty"`

	// Last update date of the object.
	UpdateTime *time.Time `json:"updateTime,omitempty" msgpack:"updateTime,omitempty" bson:"updatetime,omitempty" mapstructure:"updateTime,omitempty"`

	// Hash of the object used to shard the data.
	ZHash *int `json:"-" msgpack:"-" bson:"zhash,omitempty" mapstructure:"-,omitempty"`

	// Sharding zone.
	Zone *int `json:"-" msgpack:"-" bson:"zone,omitempty" mapstructure:"-,omitempty"`

	ModelVersion int `json:"-" msgpack:"-" bson:"_modelversion"`
}

// NewSparseAIDomain returns a new  SparseAIDomain.
func NewSparseAIDomain() *SparseAIDomain {
	return &SparseAIDomain{}
}

// Identity returns the Identity of the sparse object.
func (o *SparseAIDomain) Identity() elemental.Identity {

	return AIDomainIdentity
}

// Identifier returns the value of the sparse object's unique identifier.
func (o *SparseAIDomain) Identifier() string {

	if o.ID == nil {
		return ""
	}
	return *o.ID
}

// SetIdentifier sets the value of the sparse object's unique identifier.
func (o *SparseAIDomain) SetIdentifier(id string) {

	if id != "" {
		o.ID = &id
	} else {
		o.ID = nil
	}
}

// GetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *SparseAIDomain) GetBSON() (any, error) {

	if o == nil {
		return nil, nil
	}

	s := &mongoAttributesSparseAIDomain{}

	if o.ID != nil {
		s.ID = bson.ObjectIdHex(*o.ID)
	}
	if o.LLMProviders != nil {
		s.LLMProviders = o.LLMProviders
	}
	if o.LLMProvidersRisk != nil {
		s.LLMProvidersRisk = o.LLMProvidersRisk
	}
	if o.Address != nil {
		s.Address = o.Address
	}
	if o.Company != nil {
		s.Company = o.Company
	}
	if o.CompanyURL != nil {
		s.CompanyURL = o.CompanyURL
	}
	if o.Compliances != nil {
		s.Compliances = o.Compliances
	}
	if o.CompliancesRisk != nil {
		s.CompliancesRisk = o.CompliancesRisk
	}
	if o.CreateTime != nil {
		s.CreateTime = o.CreateTime
	}
	if o.DataPolicies != nil {
		s.DataPolicies = o.DataPolicies
	}
	if o.DataPoliciesRisk != nil {
		s.DataPoliciesRisk = o.DataPoliciesRisk
	}
	if o.DataProcessors != nil {
		s.DataProcessors = o.DataProcessors
	}
	if o.DataProcessorsRisk != nil {
		s.DataProcessorsRisk = o.DataProcessorsRisk
	}
	if o.Description != nil {
		s.Description = o.Description
	}
	if o.Domain != nil {
		s.Domain = o.Domain
	}
	if o.ExecutiveSummary != nil {
		s.ExecutiveSummary = o.ExecutiveSummary
	}
	if o.Features != nil {
		s.Features = o.Features
	}
	if o.ImportHash != nil {
		s.ImportHash = o.ImportHash
	}
	if o.ImportLabel != nil {
		s.ImportLabel = o.ImportLabel
	}
	if o.Industry != nil {
		s.Industry = o.Industry
	}
	if o.Name != nil {
		s.Name = o.Name
	}
	if o.Namespace != nil {
		s.Namespace = o.Namespace
	}
	if o.Plans != nil {
		s.Plans = o.Plans
	}
	if o.Propagate != nil {
		s.Propagate = o.Propagate
	}
	if o.ProviderName != nil {
		s.ProviderName = o.ProviderName
	}
	if o.Summary != nil {
		s.Summary = o.Summary
	}
	if o.UpdateTime != nil {
		s.UpdateTime = o.UpdateTime
	}
	if o.ZHash != nil {
		s.ZHash = o.ZHash
	}
	if o.Zone != nil {
		s.Zone = o.Zone
	}

	return s, nil
}

// SetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *SparseAIDomain) SetBSON(raw bson.Raw) error {

	if o == nil {
		return nil
	}

	s := &mongoAttributesSparseAIDomain{}
	if err := raw.Unmarshal(s); err != nil {
		return err
	}

	id := s.ID.Hex()
	o.ID = &id
	if s.LLMProviders != nil {
		o.LLMProviders = s.LLMProviders
	}
	if s.LLMProvidersRisk != nil {
		o.LLMProvidersRisk = s.LLMProvidersRisk
	}
	if s.Address != nil {
		o.Address = s.Address
	}
	if s.Company != nil {
		o.Company = s.Company
	}
	if s.CompanyURL != nil {
		o.CompanyURL = s.CompanyURL
	}
	if s.Compliances != nil {
		o.Compliances = s.Compliances
	}
	if s.CompliancesRisk != nil {
		o.CompliancesRisk = s.CompliancesRisk
	}
	if s.CreateTime != nil {
		o.CreateTime = s.CreateTime
	}
	if s.DataPolicies != nil {
		o.DataPolicies = s.DataPolicies
	}
	if s.DataPoliciesRisk != nil {
		o.DataPoliciesRisk = s.DataPoliciesRisk
	}
	if s.DataProcessors != nil {
		o.DataProcessors = s.DataProcessors
	}
	if s.DataProcessorsRisk != nil {
		o.DataProcessorsRisk = s.DataProcessorsRisk
	}
	if s.Description != nil {
		o.Description = s.Description
	}
	if s.Domain != nil {
		o.Domain = s.Domain
	}
	if s.ExecutiveSummary != nil {
		o.ExecutiveSummary = s.ExecutiveSummary
	}
	if s.Features != nil {
		o.Features = s.Features
	}
	if s.ImportHash != nil {
		o.ImportHash = s.ImportHash
	}
	if s.ImportLabel != nil {
		o.ImportLabel = s.ImportLabel
	}
	if s.Industry != nil {
		o.Industry = s.Industry
	}
	if s.Name != nil {
		o.Name = s.Name
	}
	if s.Namespace != nil {
		o.Namespace = s.Namespace
	}
	if s.Plans != nil {
		o.Plans = s.Plans
	}
	if s.Propagate != nil {
		o.Propagate = s.Propagate
	}
	if s.ProviderName != nil {
		o.ProviderName = s.ProviderName
	}
	if s.Summary != nil {
		o.Summary = s.Summary
	}
	if s.UpdateTime != nil {
		o.UpdateTime = s.UpdateTime
	}
	if s.ZHash != nil {
		o.ZHash = s.ZHash
	}
	if s.Zone != nil {
		o.Zone = s.Zone
	}

	return nil
}

// Version returns the hardcoded version of the model.
func (o *SparseAIDomain) Version() int {

	return 1
}

// ToPlain returns the plain version of the sparse model.
func (o *SparseAIDomain) ToPlain() elemental.PlainIdentifiable {

	out := NewAIDomain()
	if o.ID != nil {
		out.ID = *o.ID
	}
	if o.LLMProviders != nil {
		out.LLMProviders = *o.LLMProviders
	}
	if o.LLMProvidersRisk != nil {
		out.LLMProvidersRisk = o.LLMProvidersRisk
	}
	if o.Address != nil {
		out.Address = *o.Address
	}
	if o.Company != nil {
		out.Company = *o.Company
	}
	if o.CompanyURL != nil {
		out.CompanyURL = *o.CompanyURL
	}
	if o.Compliances != nil {
		out.Compliances = *o.Compliances
	}
	if o.CompliancesRisk != nil {
		out.CompliancesRisk = o.CompliancesRisk
	}
	if o.CreateTime != nil {
		out.CreateTime = *o.CreateTime
	}
	if o.DataPolicies != nil {
		out.DataPolicies = *o.DataPolicies
	}
	if o.DataPoliciesRisk != nil {
		out.DataPoliciesRisk = o.DataPoliciesRisk
	}
	if o.DataProcessors != nil {
		out.DataProcessors = *o.DataProcessors
	}
	if o.DataProcessorsRisk != nil {
		out.DataProcessorsRisk = o.DataProcessorsRisk
	}
	if o.Description != nil {
		out.Description = *o.Description
	}
	if o.Domain != nil {
		out.Domain = *o.Domain
	}
	if o.ExecutiveSummary != nil {
		out.ExecutiveSummary = *o.ExecutiveSummary
	}
	if o.Features != nil {
		out.Features = *o.Features
	}
	if o.ImportHash != nil {
		out.ImportHash = *o.ImportHash
	}
	if o.ImportLabel != nil {
		out.ImportLabel = *o.ImportLabel
	}
	if o.Industry != nil {
		out.Industry = o.Industry
	}
	if o.Name != nil {
		out.Name = *o.Name
	}
	if o.Namespace != nil {
		out.Namespace = *o.Namespace
	}
	if o.Plans != nil {
		out.Plans = *o.Plans
	}
	if o.Propagate != nil {
		out.Propagate = *o.Propagate
	}
	if o.ProviderName != nil {
		out.ProviderName = *o.ProviderName
	}
	if o.Summary != nil {
		out.Summary = o.Summary
	}
	if o.UpdateTime != nil {
		out.UpdateTime = *o.UpdateTime
	}
	if o.ZHash != nil {
		out.ZHash = *o.ZHash
	}
	if o.Zone != nil {
		out.Zone = *o.Zone
	}

	return out
}

// GetCreateTime returns the CreateTime of the receiver.
func (o *SparseAIDomain) GetCreateTime() (out time.Time) {

	if o.CreateTime == nil {
		return
	}

	return *o.CreateTime
}

// SetCreateTime sets the property CreateTime of the receiver using the address of the given value.
func (o *SparseAIDomain) SetCreateTime(createTime time.Time) {

	o.CreateTime = &createTime
}

// GetImportHash returns the ImportHash of the receiver.
func (o *SparseAIDomain) GetImportHash() (out string) {

	if o.ImportHash == nil {
		return
	}

	return *o.ImportHash
}

// SetImportHash sets the property ImportHash of the receiver using the address of the given value.
func (o *SparseAIDomain) SetImportHash(importHash string) {

	o.ImportHash = &importHash
}

// GetImportLabel returns the ImportLabel of the receiver.
func (o *SparseAIDomain) GetImportLabel() (out string) {

	if o.ImportLabel == nil {
		return
	}

	return *o.ImportLabel
}

// SetImportLabel sets the property ImportLabel of the receiver using the address of the given value.
func (o *SparseAIDomain) SetImportLabel(importLabel string) {

	o.ImportLabel = &importLabel
}

// GetNamespace returns the Namespace of the receiver.
func (o *SparseAIDomain) GetNamespace() (out string) {

	if o.Namespace == nil {
		return
	}

	return *o.Namespace
}

// SetNamespace sets the property Namespace of the receiver using the address of the given value.
func (o *SparseAIDomain) SetNamespace(namespace string) {

	o.Namespace = &namespace
}

// GetPropagate returns the Propagate of the receiver.
func (o *SparseAIDomain) GetPropagate() (out bool) {

	if o.Propagate == nil {
		return
	}

	return *o.Propagate
}

// SetPropagate sets the property Propagate of the receiver using the address of the given value.
func (o *SparseAIDomain) SetPropagate(propagate bool) {

	o.Propagate = &propagate
}

// GetUpdateTime returns the UpdateTime of the receiver.
func (o *SparseAIDomain) GetUpdateTime() (out time.Time) {

	if o.UpdateTime == nil {
		return
	}

	return *o.UpdateTime
}

// SetUpdateTime sets the property UpdateTime of the receiver using the address of the given value.
func (o *SparseAIDomain) SetUpdateTime(updateTime time.Time) {

	o.UpdateTime = &updateTime
}

// DeepCopy returns a deep copy if the SparseAIDomain.
func (o *SparseAIDomain) DeepCopy() *SparseAIDomain {

	if o == nil {
		return nil
	}

	out := &SparseAIDomain{}
	o.DeepCopyInto(out)

	return out
}

// DeepCopyInto copies the receiver into the given *SparseAIDomain.
func (o *SparseAIDomain) DeepCopyInto(out *SparseAIDomain) {

	target, err := copystructure.Copy(o)
	if err != nil {
		panic(fmt.Sprintf("Unable to deepcopy SparseAIDomain: %s", err))
	}

	*out = *target.(*SparseAIDomain)
}

type mongoAttributesAIDomain struct {
	ID                 bson.ObjectId              `bson:"_id,omitempty"`
	LLMProviders       []*AIDSectionLLMProvider   `bson:"llmproviders,omitempty"`
	LLMProvidersRisk   *AIDRisk                   `bson:"llmprovidersrisk,omitempty"`
	Address            string                     `bson:"address"`
	Company            string                     `bson:"company"`
	CompanyURL         string                     `bson:"companyurl"`
	Compliances        []*AIDSectionCompliance    `bson:"compliances,omitempty"`
	CompliancesRisk    *AIDRisk                   `bson:"compliancesrisk,omitempty"`
	CreateTime         time.Time                  `bson:"createtime"`
	DataPolicies       []*AIDSectionDataPolicy    `bson:"datapolicies,omitempty"`
	DataPoliciesRisk   *AIDRisk                   `bson:"datapoliciesrisk,omitempty"`
	DataProcessors     []*AIDSectionDataProcessor `bson:"dataprocessors,omitempty"`
	DataProcessorsRisk *AIDRisk                   `bson:"dataprocessorsrisk,omitempty"`
	Description        string                     `bson:"description,omitempty"`
	Domain             string                     `bson:"domain"`
	ExecutiveSummary   string                     `bson:"executivesummary,omitempty"`
	Features           []*AIDSection              `bson:"features"`
	ImportHash         string                     `bson:"importhash,omitempty"`
	ImportLabel        string                     `bson:"importlabel,omitempty"`
	Industry           *AIDSection                `bson:"industry"`
	Name               string                     `bson:"name"`
	Namespace          string                     `bson:"namespace,omitempty"`
	Plans              []*AIDSectionPlan          `bson:"plans"`
	Propagate          bool                       `bson:"propagate"`
	ProviderName       string                     `bson:"providername,omitempty"`
	Summary            *AIDSummary                `bson:"summary,omitempty"`
	UpdateTime         time.Time                  `bson:"updatetime"`
	ZHash              int                        `bson:"zhash"`
	Zone               int                        `bson:"zone"`
}
type mongoAttributesSparseAIDomain struct {
	ID                 bson.ObjectId               `bson:"_id,omitempty"`
	LLMProviders       *[]*AIDSectionLLMProvider   `bson:"llmproviders,omitempty"`
	LLMProvidersRisk   *AIDRisk                    `bson:"llmprovidersrisk,omitempty"`
	Address            *string                     `bson:"address,omitempty"`
	Company            *string                     `bson:"company,omitempty"`
	CompanyURL         *string                     `bson:"companyurl,omitempty"`
	Compliances        *[]*AIDSectionCompliance    `bson:"compliances,omitempty"`
	CompliancesRisk    *AIDRisk                    `bson:"compliancesrisk,omitempty"`
	CreateTime         *time.Time                  `bson:"createtime,omitempty"`
	DataPolicies       *[]*AIDSectionDataPolicy    `bson:"datapolicies,omitempty"`
	DataPoliciesRisk   *AIDRisk                    `bson:"datapoliciesrisk,omitempty"`
	DataProcessors     *[]*AIDSectionDataProcessor `bson:"dataprocessors,omitempty"`
	DataProcessorsRisk *AIDRisk                    `bson:"dataprocessorsrisk,omitempty"`
	Description        *string                     `bson:"description,omitempty"`
	Domain             *string                     `bson:"domain,omitempty"`
	ExecutiveSummary   *string                     `bson:"executivesummary,omitempty"`
	Features           *[]*AIDSection              `bson:"features,omitempty"`
	ImportHash         *string                     `bson:"importhash,omitempty"`
	ImportLabel        *string                     `bson:"importlabel,omitempty"`
	Industry           *AIDSection                 `bson:"industry,omitempty"`
	Name               *string                     `bson:"name,omitempty"`
	Namespace          *string                     `bson:"namespace,omitempty"`
	Plans              *[]*AIDSectionPlan          `bson:"plans,omitempty"`
	Propagate          *bool                       `bson:"propagate,omitempty"`
	ProviderName       *string                     `bson:"providername,omitempty"`
	Summary            *AIDSummary                 `bson:"summary,omitempty"`
	UpdateTime         *time.Time                  `bson:"updatetime,omitempty"`
	ZHash              *int                        `bson:"zhash,omitempty"`
	Zone               *int                        `bson:"zone,omitempty"`
}
