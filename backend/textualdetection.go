// Code generated by elegen. DO NOT EDIT.
// Source: go.acuvity.ai/elemental (templates/model.gotpl)

package api

import (
	"fmt"

	"github.com/globalsign/mgo/bson"
	"github.com/mitchellh/copystructure"
	"go.acuvity.ai/elemental"
)

// TextualDetectionTypeValue represents the possible values for attribute "type".
type TextualDetectionTypeValue string

const (
	// TextualDetectionTypeCDT represents the value CDT.
	TextualDetectionTypeCDT TextualDetectionTypeValue = "CDT"

	// TextualDetectionTypeKeyword represents the value Keyword.
	TextualDetectionTypeKeyword TextualDetectionTypeValue = "Keyword"

	// TextualDetectionTypePII represents the value PII.
	TextualDetectionTypePII TextualDetectionTypeValue = "PII"

	// TextualDetectionTypeSecret represents the value Secret.
	TextualDetectionTypeSecret TextualDetectionTypeValue = "Secret"
)

// TextualDetection represents the model of a textualdetection
type TextualDetection struct {
	// The original detected content.
	Content string `json:"-" msgpack:"-" bson:"-" mapstructure:"-,omitempty"`

	// The end position of the detection in the original data.
	End int `json:"end" msgpack:"end" bson:"end" mapstructure:"end,omitempty"`

	// The key that is used in the name's place, If empty, a sequence of X's are used.
	Key string `json:"key,omitempty" msgpack:"key,omitempty" bson:"key,omitempty" mapstructure:"key,omitempty"`

	// The name of the detection.
	Name string `json:"name,omitempty" msgpack:"name,omitempty" bson:"name,omitempty" mapstructure:"name,omitempty"`

	// If true this detection has been redacted.
	Redacted bool `json:"redacted,omitempty" msgpack:"redacted,omitempty" bson:"redacted,omitempty" mapstructure:"redacted,omitempty"`

	// The end position of the detection in the redacted data.
	RedactedEnd int `json:"redactedEnd" msgpack:"redactedEnd" bson:"redactedend" mapstructure:"redactedEnd,omitempty"`

	// The start position of the detection in the redacted data.
	RedactedStart int `json:"redactedStart" msgpack:"redactedStart" bson:"redactedstart" mapstructure:"redactedStart,omitempty"`

	// The confidence score of the detection.
	Score float64 `json:"score" msgpack:"score" bson:"score" mapstructure:"score,omitempty"`

	// The start position of the detection in the original data.
	Start int `json:"start" msgpack:"start" bson:"start" mapstructure:"start,omitempty"`

	// The type of detection.
	Type TextualDetectionTypeValue `json:"type" msgpack:"type" bson:"type" mapstructure:"type,omitempty"`

	ModelVersion int `json:"-" msgpack:"-" bson:"_modelversion"`
}

// NewTextualDetection returns a new *TextualDetection
func NewTextualDetection() *TextualDetection {

	return &TextualDetection{
		ModelVersion: 1,
	}
}

// GetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *TextualDetection) GetBSON() (any, error) {

	if o == nil {
		return nil, nil
	}

	s := &mongoAttributesTextualDetection{}

	s.End = o.End
	s.Key = o.Key
	s.Name = o.Name
	s.Redacted = o.Redacted
	s.RedactedEnd = o.RedactedEnd
	s.RedactedStart = o.RedactedStart
	s.Score = o.Score
	s.Start = o.Start
	s.Type = o.Type

	return s, nil
}

// SetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *TextualDetection) SetBSON(raw bson.Raw) error {

	if o == nil {
		return nil
	}

	s := &mongoAttributesTextualDetection{}
	if err := raw.Unmarshal(s); err != nil {
		return err
	}

	o.End = s.End
	o.Key = s.Key
	o.Name = s.Name
	o.Redacted = s.Redacted
	o.RedactedEnd = s.RedactedEnd
	o.RedactedStart = s.RedactedStart
	o.Score = s.Score
	o.Start = s.Start
	o.Type = s.Type

	return nil
}

// BleveType implements the bleve.Classifier Interface.
func (o *TextualDetection) BleveType() string {

	return "textualdetection"
}

// DeepCopy returns a deep copy if the TextualDetection.
func (o *TextualDetection) DeepCopy() *TextualDetection {

	if o == nil {
		return nil
	}

	out := &TextualDetection{}
	o.DeepCopyInto(out)

	return out
}

// DeepCopyInto copies the receiver into the given *TextualDetection.
func (o *TextualDetection) DeepCopyInto(out *TextualDetection) {

	target, err := copystructure.Copy(o)
	if err != nil {
		panic(fmt.Sprintf("Unable to deepcopy TextualDetection: %s", err))
	}

	*out = *target.(*TextualDetection)
}

// Validate valides the current information stored into the structure.
func (o *TextualDetection) Validate() error {

	errors := elemental.Errors{}
	requiredErrors := elemental.Errors{}

	if err := elemental.ValidateMaximumFloat("score", o.Score, 1, false); err != nil {
		errors = errors.Append(err)
	}

	if err := elemental.ValidateStringInList("type", string(o.Type), []string{"Keyword", "PII", "Secret", "CDT"}, false); err != nil {
		errors = errors.Append(err)
	}

	if len(requiredErrors) > 0 {
		return requiredErrors
	}

	if len(errors) > 0 {
		return errors
	}

	return nil
}

// SpecificationForAttribute returns the AttributeSpecification for the given attribute name key.
func (*TextualDetection) SpecificationForAttribute(name string) elemental.AttributeSpecification {

	if v, ok := TextualDetectionAttributesMap[name]; ok {
		return v
	}

	// We could not find it, so let's check on the lower case indexed spec map
	return TextualDetectionLowerCaseAttributesMap[name]
}

// AttributeSpecifications returns the full attribute specifications map.
func (*TextualDetection) AttributeSpecifications() map[string]elemental.AttributeSpecification {

	return TextualDetectionAttributesMap
}

// ValueForAttribute returns the value for the given attribute.
// This is a very advanced function that you should not need but in some
// very specific use cases.
func (o *TextualDetection) ValueForAttribute(name string) any {

	switch name {
	case "content":
		return o.Content
	case "end":
		return o.End
	case "key":
		return o.Key
	case "name":
		return o.Name
	case "redacted":
		return o.Redacted
	case "redactedEnd":
		return o.RedactedEnd
	case "redactedStart":
		return o.RedactedStart
	case "score":
		return o.Score
	case "start":
		return o.Start
	case "type":
		return o.Type
	}

	return nil
}

// TextualDetectionAttributesMap represents the map of attribute for TextualDetection.
var TextualDetectionAttributesMap = map[string]elemental.AttributeSpecification{

	"End": {
		AllowedChoices: []string{},
		BSONFieldName:  "end",
		ConvertedName:  "End",
		Description:    `The end position of the detection in the original data.`,
		Exposed:        true,
		Name:           "end",
		Stored:         true,
		Type:           "integer",
	},
	"Key": {
		AllowedChoices: []string{},
		BSONFieldName:  "key",
		ConvertedName:  "Key",
		Description:    `The key that is used in the name's place, If empty, a sequence of X's are used.`,
		Exposed:        true,
		Name:           "key",
		Stored:         true,
		Type:           "string",
	},
	"Name": {
		AllowedChoices: []string{},
		BSONFieldName:  "name",
		ConvertedName:  "Name",
		Description:    `The name of the detection.`,
		Exposed:        true,
		Name:           "name",
		Stored:         true,
		Type:           "string",
	},
	"Redacted": {
		AllowedChoices: []string{},
		BSONFieldName:  "redacted",
		ConvertedName:  "Redacted",
		Description:    `If true this detection has been redacted.`,
		Exposed:        true,
		Name:           "redacted",
		Stored:         true,
		Type:           "boolean",
	},
	"RedactedEnd": {
		AllowedChoices: []string{},
		BSONFieldName:  "redactedend",
		ConvertedName:  "RedactedEnd",
		Description:    `The end position of the detection in the redacted data.`,
		Exposed:        true,
		Name:           "redactedEnd",
		Stored:         true,
		Type:           "integer",
	},
	"RedactedStart": {
		AllowedChoices: []string{},
		BSONFieldName:  "redactedstart",
		ConvertedName:  "RedactedStart",
		Description:    `The start position of the detection in the redacted data.`,
		Exposed:        true,
		Name:           "redactedStart",
		Stored:         true,
		Type:           "integer",
	},
	"Score": {
		AllowedChoices: []string{},
		BSONFieldName:  "score",
		ConvertedName:  "Score",
		Description:    `The confidence score of the detection.`,
		Exposed:        true,
		MaxValue:       1,
		Name:           "score",
		Stored:         true,
		Type:           "float",
	},
	"Start": {
		AllowedChoices: []string{},
		BSONFieldName:  "start",
		ConvertedName:  "Start",
		Description:    `The start position of the detection in the original data.`,
		Exposed:        true,
		Name:           "start",
		Stored:         true,
		Type:           "integer",
	},
	"Type": {
		AllowedChoices: []string{"Keyword", "PII", "Secret", "CDT"},
		BSONFieldName:  "type",
		ConvertedName:  "Type",
		Description:    `The type of detection.`,
		Exposed:        true,
		Name:           "type",
		Stored:         true,
		Type:           "enum",
	},
}

// TextualDetectionLowerCaseAttributesMap represents the map of attribute for TextualDetection.
var TextualDetectionLowerCaseAttributesMap = map[string]elemental.AttributeSpecification{

	"end": {
		AllowedChoices: []string{},
		BSONFieldName:  "end",
		ConvertedName:  "End",
		Description:    `The end position of the detection in the original data.`,
		Exposed:        true,
		Name:           "end",
		Stored:         true,
		Type:           "integer",
	},
	"key": {
		AllowedChoices: []string{},
		BSONFieldName:  "key",
		ConvertedName:  "Key",
		Description:    `The key that is used in the name's place, If empty, a sequence of X's are used.`,
		Exposed:        true,
		Name:           "key",
		Stored:         true,
		Type:           "string",
	},
	"name": {
		AllowedChoices: []string{},
		BSONFieldName:  "name",
		ConvertedName:  "Name",
		Description:    `The name of the detection.`,
		Exposed:        true,
		Name:           "name",
		Stored:         true,
		Type:           "string",
	},
	"redacted": {
		AllowedChoices: []string{},
		BSONFieldName:  "redacted",
		ConvertedName:  "Redacted",
		Description:    `If true this detection has been redacted.`,
		Exposed:        true,
		Name:           "redacted",
		Stored:         true,
		Type:           "boolean",
	},
	"redactedend": {
		AllowedChoices: []string{},
		BSONFieldName:  "redactedend",
		ConvertedName:  "RedactedEnd",
		Description:    `The end position of the detection in the redacted data.`,
		Exposed:        true,
		Name:           "redactedEnd",
		Stored:         true,
		Type:           "integer",
	},
	"redactedstart": {
		AllowedChoices: []string{},
		BSONFieldName:  "redactedstart",
		ConvertedName:  "RedactedStart",
		Description:    `The start position of the detection in the redacted data.`,
		Exposed:        true,
		Name:           "redactedStart",
		Stored:         true,
		Type:           "integer",
	},
	"score": {
		AllowedChoices: []string{},
		BSONFieldName:  "score",
		ConvertedName:  "Score",
		Description:    `The confidence score of the detection.`,
		Exposed:        true,
		MaxValue:       1,
		Name:           "score",
		Stored:         true,
		Type:           "float",
	},
	"start": {
		AllowedChoices: []string{},
		BSONFieldName:  "start",
		ConvertedName:  "Start",
		Description:    `The start position of the detection in the original data.`,
		Exposed:        true,
		Name:           "start",
		Stored:         true,
		Type:           "integer",
	},
	"type": {
		AllowedChoices: []string{"Keyword", "PII", "Secret", "CDT"},
		BSONFieldName:  "type",
		ConvertedName:  "Type",
		Description:    `The type of detection.`,
		Exposed:        true,
		Name:           "type",
		Stored:         true,
		Type:           "enum",
	},
}

type mongoAttributesTextualDetection struct {
	End           int                       `bson:"end"`
	Key           string                    `bson:"key,omitempty"`
	Name          string                    `bson:"name,omitempty"`
	Redacted      bool                      `bson:"redacted,omitempty"`
	RedactedEnd   int                       `bson:"redactedend"`
	RedactedStart int                       `bson:"redactedstart"`
	Score         float64                   `bson:"score"`
	Start         int                       `bson:"start"`
	Type          TextualDetectionTypeValue `bson:"type"`
}
