// Code generated by elegen. DO NOT EDIT.
// Source: go.acuvity.ai/elemental (templates/model.gotpl)

package api

import (
	"fmt"
	"slices"

	"github.com/globalsign/mgo/bson"
	"github.com/mitchellh/copystructure"
	"go.acuvity.ai/elemental"
)

// RoleIdentity represents the Identity of the object.
var RoleIdentity = elemental.Identity{
	Name:     "role",
	Category: "roles",
	Package:  "lain",
	Private:  false,
}

// RolesList represents a list of Roles
type RolesList []*Role

// Identity returns the identity of the objects in the list.
func (o RolesList) Identity() elemental.Identity {

	return RoleIdentity
}

// Copy returns a pointer to a copy the RolesList.
func (o RolesList) Copy() elemental.Identifiables {

	out := slices.Clone(o)
	return &out
}

// Append appends the objects to the a new copy of the RolesList.
func (o RolesList) Append(objects ...elemental.Identifiable) elemental.Identifiables {

	out := slices.Clone(o)
	for _, obj := range objects {
		out = append(out, obj.(*Role))
	}

	return out
}

// List converts the object to an elemental.IdentifiablesList.
func (o RolesList) List() elemental.IdentifiablesList {

	out := make(elemental.IdentifiablesList, len(o))
	for i := range len(o) {
		out[i] = o[i]
	}

	return out
}

// DefaultOrder returns the default ordering fields of the content.
func (o RolesList) DefaultOrder() []string {

	return []string{}
}

// ToSparse returns the RolesList converted to SparseRolesList.
// Objects in the list will only contain the given fields. No field means entire field set.
func (o RolesList) ToSparse(fields ...string) elemental.Identifiables {

	out := make(SparseRolesList, len(o))
	for i := range len(o) {
		out[i] = o[i].ToSparse(fields...).(*SparseRole)
	}

	return out
}

// Version returns the version of the content.
func (o RolesList) Version() int {

	return 1
}

// Role represents the model of a role
type Role struct {
	// ID is the identifier of the object.
	ID string `json:"ID,omitempty" msgpack:"ID,omitempty" bson:"-" mapstructure:"ID,omitempty"`

	// The description of the role.
	Description string `json:"description" msgpack:"description" bson:"-" mapstructure:"description,omitempty"`

	// The friendly name of the role.
	FriendlyName string `json:"friendlyName" msgpack:"friendlyName" bson:"-" mapstructure:"friendlyName,omitempty"`

	// The name of the role.
	Name string `json:"name" msgpack:"name" bson:"-" mapstructure:"name,omitempty"`

	// The namespace of the object.
	Namespace string `json:"namespace,omitempty" msgpack:"namespace,omitempty" bson:"namespace,omitempty" mapstructure:"namespace,omitempty"`

	// Permissions for the role.
	Permissions []string `json:"permissions" msgpack:"permissions" bson:"-" mapstructure:"permissions,omitempty"`

	ModelVersion int `json:"-" msgpack:"-" bson:"_modelversion"`
}

// NewRole returns a new *Role
func NewRole() *Role {

	return &Role{
		ModelVersion: 1,
		Permissions:  []string{},
	}
}

// Identity returns the Identity of the object.
func (o *Role) Identity() elemental.Identity {

	return RoleIdentity
}

// Identifier returns the value of the object's unique identifier.
func (o *Role) Identifier() string {

	return o.ID
}

// SetIdentifier sets the value of the object's unique identifier.
func (o *Role) SetIdentifier(id string) {

	o.ID = id
}

// GetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *Role) GetBSON() (any, error) {

	if o == nil {
		return nil, nil
	}

	s := &mongoAttributesRole{}

	if o.ID != "" {
		s.ID = bson.ObjectIdHex(o.ID)
	}
	s.Namespace = o.Namespace

	return s, nil
}

// SetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *Role) SetBSON(raw bson.Raw) error {

	if o == nil {
		return nil
	}

	s := &mongoAttributesRole{}
	if err := raw.Unmarshal(s); err != nil {
		return err
	}

	o.ID = s.ID.Hex()
	o.Namespace = s.Namespace

	return nil
}

// Version returns the hardcoded version of the model.
func (o *Role) Version() int {

	return 1
}

// BleveType implements the bleve.Classifier Interface.
func (o *Role) BleveType() string {

	return "role"
}

// DefaultOrder returns the list of default ordering fields.
func (o *Role) DefaultOrder() []string {

	return []string{}
}

// Doc returns the documentation for the object
func (o *Role) Doc() string {

	return `Role for API Authorizations.`
}

func (o *Role) String() string {

	return fmt.Sprintf("<%s:%s>", o.Identity().Name, o.Identifier())
}

// GetNamespace returns the Namespace of the receiver.
func (o *Role) GetNamespace() string {

	return o.Namespace
}

// SetNamespace sets the property Namespace of the receiver using the given value.
func (o *Role) SetNamespace(namespace string) {

	o.Namespace = namespace
}

// ToSparse returns the sparse version of the model.
// The returned object will only contain the given fields. No field means entire field set.
func (o *Role) ToSparse(fields ...string) elemental.SparseIdentifiable {

	if len(fields) == 0 {
		// nolint: goimports
		return &SparseRole{
			ID:           &o.ID,
			Description:  &o.Description,
			FriendlyName: &o.FriendlyName,
			Name:         &o.Name,
			Namespace:    &o.Namespace,
			Permissions:  &o.Permissions,
		}
	}

	sp := &SparseRole{}
	for _, f := range fields {
		switch f {
		case "ID":
			sp.ID = &(o.ID)
		case "description":
			sp.Description = &(o.Description)
		case "friendlyName":
			sp.FriendlyName = &(o.FriendlyName)
		case "name":
			sp.Name = &(o.Name)
		case "namespace":
			sp.Namespace = &(o.Namespace)
		case "permissions":
			sp.Permissions = &(o.Permissions)
		}
	}

	return sp
}

// Patch apply the non nil value of a *SparseRole to the object.
func (o *Role) Patch(sparse elemental.SparseIdentifiable) {
	if !sparse.Identity().IsEqual(o.Identity()) {
		panic("cannot patch from a parse with different identity")
	}

	so := sparse.(*SparseRole)
	if so.ID != nil {
		o.ID = *so.ID
	}
	if so.Description != nil {
		o.Description = *so.Description
	}
	if so.FriendlyName != nil {
		o.FriendlyName = *so.FriendlyName
	}
	if so.Name != nil {
		o.Name = *so.Name
	}
	if so.Namespace != nil {
		o.Namespace = *so.Namespace
	}
	if so.Permissions != nil {
		o.Permissions = *so.Permissions
	}
}

// DeepCopy returns a deep copy if the Role.
func (o *Role) DeepCopy() *Role {

	if o == nil {
		return nil
	}

	out := &Role{}
	o.DeepCopyInto(out)

	return out
}

// DeepCopyInto copies the receiver into the given *Role.
func (o *Role) DeepCopyInto(out *Role) {

	target, err := copystructure.Copy(o)
	if err != nil {
		panic(fmt.Sprintf("Unable to deepcopy Role: %s", err))
	}

	*out = *target.(*Role)
}

// Validate valides the current information stored into the structure.
func (o *Role) Validate() error {

	errors := elemental.Errors{}
	requiredErrors := elemental.Errors{}

	if len(requiredErrors) > 0 {
		return requiredErrors
	}

	if len(errors) > 0 {
		return errors
	}

	return nil
}

// SpecificationForAttribute returns the AttributeSpecification for the given attribute name key.
func (*Role) SpecificationForAttribute(name string) elemental.AttributeSpecification {

	if v, ok := RoleAttributesMap[name]; ok {
		return v
	}

	// We could not find it, so let's check on the lower case indexed spec map
	return RoleLowerCaseAttributesMap[name]
}

// AttributeSpecifications returns the full attribute specifications map.
func (*Role) AttributeSpecifications() map[string]elemental.AttributeSpecification {

	return RoleAttributesMap
}

// ValueForAttribute returns the value for the given attribute.
// This is a very advanced function that you should not need but in some
// very specific use cases.
func (o *Role) ValueForAttribute(name string) any {

	switch name {
	case "ID":
		return o.ID
	case "description":
		return o.Description
	case "friendlyName":
		return o.FriendlyName
	case "name":
		return o.Name
	case "namespace":
		return o.Namespace
	case "permissions":
		return o.Permissions
	}

	return nil
}

// RoleAttributesMap represents the map of attribute for Role.
var RoleAttributesMap = map[string]elemental.AttributeSpecification{
	"ID": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "_id",
		ConvertedName:  "ID",
		Description:    `ID is the identifier of the object.`,
		Exposed:        true,
		Filterable:     true,
		Identifier:     true,
		Name:           "ID",
		Orderable:      true,
		ReadOnly:       true,
		Stored:         true,
		Type:           "string",
	},
	"Description": {
		AllowedChoices: []string{},
		ConvertedName:  "Description",
		Description:    `The description of the role.`,
		Exposed:        true,
		Name:           "description",
		Type:           "string",
	},
	"FriendlyName": {
		AllowedChoices: []string{},
		ConvertedName:  "FriendlyName",
		Description:    `The friendly name of the role.`,
		Exposed:        true,
		Name:           "friendlyName",
		Type:           "string",
	},
	"Name": {
		AllowedChoices: []string{},
		ConvertedName:  "Name",
		Description:    `The name of the role.`,
		Exposed:        true,
		Name:           "name",
		Type:           "string",
	},
	"Namespace": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "namespace",
		ConvertedName:  "Namespace",
		Description:    `The namespace of the object.`,
		Exposed:        true,
		Getter:         true,
		Name:           "namespace",
		Orderable:      true,
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Type:           "string",
	},
	"Permissions": {
		AllowedChoices: []string{},
		ConvertedName:  "Permissions",
		Description:    `Permissions for the role.`,
		Exposed:        true,
		Name:           "permissions",
		SubType:        "string",
		Type:           "list",
	},
}

// RoleLowerCaseAttributesMap represents the map of attribute for Role.
var RoleLowerCaseAttributesMap = map[string]elemental.AttributeSpecification{
	"id": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "_id",
		ConvertedName:  "ID",
		Description:    `ID is the identifier of the object.`,
		Exposed:        true,
		Filterable:     true,
		Identifier:     true,
		Name:           "ID",
		Orderable:      true,
		ReadOnly:       true,
		Stored:         true,
		Type:           "string",
	},
	"description": {
		AllowedChoices: []string{},
		ConvertedName:  "Description",
		Description:    `The description of the role.`,
		Exposed:        true,
		Name:           "description",
		Type:           "string",
	},
	"friendlyname": {
		AllowedChoices: []string{},
		ConvertedName:  "FriendlyName",
		Description:    `The friendly name of the role.`,
		Exposed:        true,
		Name:           "friendlyName",
		Type:           "string",
	},
	"name": {
		AllowedChoices: []string{},
		ConvertedName:  "Name",
		Description:    `The name of the role.`,
		Exposed:        true,
		Name:           "name",
		Type:           "string",
	},
	"namespace": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "namespace",
		ConvertedName:  "Namespace",
		Description:    `The namespace of the object.`,
		Exposed:        true,
		Getter:         true,
		Name:           "namespace",
		Orderable:      true,
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Type:           "string",
	},
	"permissions": {
		AllowedChoices: []string{},
		ConvertedName:  "Permissions",
		Description:    `Permissions for the role.`,
		Exposed:        true,
		Name:           "permissions",
		SubType:        "string",
		Type:           "list",
	},
}

// SparseRolesList represents a list of SparseRoles
type SparseRolesList []*SparseRole

// Identity returns the identity of the objects in the list.
func (o SparseRolesList) Identity() elemental.Identity {

	return RoleIdentity
}

// Copy returns a pointer to a copy the SparseRolesList.
func (o SparseRolesList) Copy() elemental.Identifiables {

	copy := slices.Clone(o)
	return &copy
}

// Append appends the objects to the a new copy of the SparseRolesList.
func (o SparseRolesList) Append(objects ...elemental.Identifiable) elemental.Identifiables {

	out := slices.Clone(o)
	for _, obj := range objects {
		out = append(out, obj.(*SparseRole))
	}

	return out
}

// List converts the object to an elemental.IdentifiablesList.
func (o SparseRolesList) List() elemental.IdentifiablesList {

	out := make(elemental.IdentifiablesList, len(o))
	for i := range len(o) {
		out[i] = o[i]
	}

	return out
}

// DefaultOrder returns the default ordering fields of the content.
func (o SparseRolesList) DefaultOrder() []string {

	return []string{}
}

// ToPlain returns the SparseRolesList converted to RolesList.
func (o SparseRolesList) ToPlain() elemental.IdentifiablesList {

	out := make(elemental.IdentifiablesList, len(o))
	for i := range len(o) {
		out[i] = o[i].ToPlain()
	}

	return out
}

// Version returns the version of the content.
func (o SparseRolesList) Version() int {

	return 1
}

// SparseRole represents the sparse version of a role.
type SparseRole struct {
	// ID is the identifier of the object.
	ID *string `json:"ID,omitempty" msgpack:"ID,omitempty" bson:"-" mapstructure:"ID,omitempty"`

	// The description of the role.
	Description *string `json:"description,omitempty" msgpack:"description,omitempty" bson:"-" mapstructure:"description,omitempty"`

	// The friendly name of the role.
	FriendlyName *string `json:"friendlyName,omitempty" msgpack:"friendlyName,omitempty" bson:"-" mapstructure:"friendlyName,omitempty"`

	// The name of the role.
	Name *string `json:"name,omitempty" msgpack:"name,omitempty" bson:"-" mapstructure:"name,omitempty"`

	// The namespace of the object.
	Namespace *string `json:"namespace,omitempty" msgpack:"namespace,omitempty" bson:"namespace,omitempty" mapstructure:"namespace,omitempty"`

	// Permissions for the role.
	Permissions *[]string `json:"permissions,omitempty" msgpack:"permissions,omitempty" bson:"-" mapstructure:"permissions,omitempty"`

	ModelVersion int `json:"-" msgpack:"-" bson:"_modelversion"`
}

// NewSparseRole returns a new  SparseRole.
func NewSparseRole() *SparseRole {
	return &SparseRole{}
}

// Identity returns the Identity of the sparse object.
func (o *SparseRole) Identity() elemental.Identity {

	return RoleIdentity
}

// Identifier returns the value of the sparse object's unique identifier.
func (o *SparseRole) Identifier() string {

	if o.ID == nil {
		return ""
	}
	return *o.ID
}

// SetIdentifier sets the value of the sparse object's unique identifier.
func (o *SparseRole) SetIdentifier(id string) {

	if id != "" {
		o.ID = &id
	} else {
		o.ID = nil
	}
}

// GetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *SparseRole) GetBSON() (any, error) {

	if o == nil {
		return nil, nil
	}

	s := &mongoAttributesSparseRole{}

	if o.ID != nil {
		s.ID = bson.ObjectIdHex(*o.ID)
	}
	if o.Namespace != nil {
		s.Namespace = o.Namespace
	}

	return s, nil
}

// SetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *SparseRole) SetBSON(raw bson.Raw) error {

	if o == nil {
		return nil
	}

	s := &mongoAttributesSparseRole{}
	if err := raw.Unmarshal(s); err != nil {
		return err
	}

	id := s.ID.Hex()
	o.ID = &id
	if s.Namespace != nil {
		o.Namespace = s.Namespace
	}

	return nil
}

// Version returns the hardcoded version of the model.
func (o *SparseRole) Version() int {

	return 1
}

// ToPlain returns the plain version of the sparse model.
func (o *SparseRole) ToPlain() elemental.PlainIdentifiable {

	out := NewRole()
	if o.ID != nil {
		out.ID = *o.ID
	}
	if o.Description != nil {
		out.Description = *o.Description
	}
	if o.FriendlyName != nil {
		out.FriendlyName = *o.FriendlyName
	}
	if o.Name != nil {
		out.Name = *o.Name
	}
	if o.Namespace != nil {
		out.Namespace = *o.Namespace
	}
	if o.Permissions != nil {
		out.Permissions = *o.Permissions
	}

	return out
}

// GetNamespace returns the Namespace of the receiver.
func (o *SparseRole) GetNamespace() (out string) {

	if o.Namespace == nil {
		return
	}

	return *o.Namespace
}

// SetNamespace sets the property Namespace of the receiver using the address of the given value.
func (o *SparseRole) SetNamespace(namespace string) {

	o.Namespace = &namespace
}

// DeepCopy returns a deep copy if the SparseRole.
func (o *SparseRole) DeepCopy() *SparseRole {

	if o == nil {
		return nil
	}

	out := &SparseRole{}
	o.DeepCopyInto(out)

	return out
}

// DeepCopyInto copies the receiver into the given *SparseRole.
func (o *SparseRole) DeepCopyInto(out *SparseRole) {

	target, err := copystructure.Copy(o)
	if err != nil {
		panic(fmt.Sprintf("Unable to deepcopy SparseRole: %s", err))
	}

	*out = *target.(*SparseRole)
}

type mongoAttributesRole struct {
	ID        bson.ObjectId `bson:"_id,omitempty"`
	Namespace string        `bson:"namespace,omitempty"`
}
type mongoAttributesSparseRole struct {
	ID        bson.ObjectId `bson:"_id,omitempty"`
	Namespace *string       `bson:"namespace,omitempty"`
}
