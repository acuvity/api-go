// Code generated by elegen. DO NOT EDIT.
// Source: go.acuvity.ai/elemental (templates/model.gotpl)

package api

import (
	"fmt"
	"slices"
	"time"

	"github.com/globalsign/mgo/bson"
	"github.com/mitchellh/copystructure"
	"go.acuvity.ai/elemental"
)

// AgentStatusValue represents the possible values for attribute "status".
type AgentStatusValue string

const (
	// AgentStatusAlive represents the value Alive.
	AgentStatusAlive AgentStatusValue = "Alive"

	// AgentStatusPaused represents the value Paused.
	AgentStatusPaused AgentStatusValue = "Paused"

	// AgentStatusStopped represents the value Stopped.
	AgentStatusStopped AgentStatusValue = "Stopped"
)

// AgentIdentity represents the Identity of the object.
var AgentIdentity = elemental.Identity{
	Name:     "agent",
	Category: "agents",
	Package:  "lain",
	Private:  false,
}

// AgentsList represents a list of Agents
type AgentsList []*Agent

// Identity returns the identity of the objects in the list.
func (o AgentsList) Identity() elemental.Identity {

	return AgentIdentity
}

// Copy returns a pointer to a copy the AgentsList.
func (o AgentsList) Copy() elemental.Identifiables {

	out := slices.Clone(o)
	return &out
}

// Append appends the objects to the a new copy of the AgentsList.
func (o AgentsList) Append(objects ...elemental.Identifiable) elemental.Identifiables {

	out := slices.Clone(o)
	for _, obj := range objects {
		out = append(out, obj.(*Agent))
	}

	return out
}

// List converts the object to an elemental.IdentifiablesList.
func (o AgentsList) List() elemental.IdentifiablesList {

	out := make(elemental.IdentifiablesList, len(o))
	for i := range len(o) {
		out[i] = o[i]
	}

	return out
}

// DefaultOrder returns the default ordering fields of the content.
func (o AgentsList) DefaultOrder() []string {

	return []string{}
}

// ToSparse returns the AgentsList converted to SparseAgentsList.
// Objects in the list will only contain the given fields. No field means entire field set.
func (o AgentsList) ToSparse(fields ...string) elemental.Identifiables {

	out := make(SparseAgentsList, len(o))
	for i := range len(o) {
		out[i] = o[i].ToSparse(fields...).(*SparseAgent)
	}

	return out
}

// Version returns the version of the content.
func (o AgentsList) Version() int {

	return 1
}

// Agent represents the model of a agent
type Agent struct {
	// ID is the identifier of the object.
	ID string `json:"ID,omitempty" msgpack:"ID,omitempty" bson:"-" mapstructure:"ID,omitempty"`

	// The agent configuration.
	AgentConfig *AgentConfig `json:"agentConfig,omitempty" msgpack:"agentConfig,omitempty" bson:"agentconfig,omitempty" mapstructure:"agentConfig,omitempty"`

	// The current version of the agent.
	CurrentVersion string `json:"currentVersion" msgpack:"currentVersion" bson:"currentversion" mapstructure:"currentVersion,omitempty"`

	// The name of the host where the agent is runnning.
	Hostname string `json:"hostname" msgpack:"hostname" bson:"hostname" mapstructure:"hostname,omitempty"`

	// The hash of the structure used to compare with new import version.
	ImportHash string `json:"importHash,omitempty" msgpack:"importHash,omitempty" bson:"importhash,omitempty" mapstructure:"importHash,omitempty"`

	// The user-defined import label that allows the system to group resources from the
	// same import operation.
	ImportLabel string `json:"importLabel,omitempty" msgpack:"importLabel,omitempty" bson:"importlabel,omitempty" mapstructure:"importLabel,omitempty"`

	// True if the apex is reachable.
	IsAPEXReachable bool `json:"isAPEXReachable" msgpack:"isAPEXReachable" bson:"isapexreachable" mapstructure:"isAPEXReachable,omitempty"`

	// True if the apex is trusted.
	IsAPEXTrusted bool `json:"isAPEXTrusted" msgpack:"isAPEXTrusted" bson:"isapextrusted" mapstructure:"isAPEXTrusted,omitempty"`

	// The state of the managed CA.
	ManagedCAState bool `json:"managedCAState" msgpack:"managedCAState" bson:"managedcastate" mapstructure:"managedCAState,omitempty"`

	// The list of managed interfaces.
	ManagedInterfaces []string `json:"managedInterfaces" msgpack:"managedInterfaces" bson:"managedinterfaces" mapstructure:"managedInterfaces,omitempty"`

	// The namespace of the object.
	Namespace string `json:"namespace,omitempty" msgpack:"namespace,omitempty" bson:"namespace,omitempty" mapstructure:"namespace,omitempty"`

	// The last ping recorded for the agent.
	Ping time.Time `json:"ping" msgpack:"ping" bson:"ping" mapstructure:"ping,omitempty"`

	// The principal of the object.
	Principal *Principal `json:"principal" msgpack:"principal" bson:"principal" mapstructure:"principal,omitempty"`

	// The start time for the agent.
	Start time.Time `json:"start" msgpack:"start" bson:"start" mapstructure:"start,omitempty"`

	// The status of the agent.
	Status AgentStatusValue `json:"status" msgpack:"status" bson:"status" mapstructure:"status,omitempty"`

	// The state of the system proxy management.
	SystemProxyManagementState bool `json:"systemProxyManagementState" msgpack:"systemProxyManagementState" bson:"systemproxymanagementstate" mapstructure:"systemProxyManagementState,omitempty"`

	// Hash of the object used to shard the data.
	ZHash int `json:"-" msgpack:"-" bson:"zhash" mapstructure:"-,omitempty"`

	// Sharding zone.
	Zone int `json:"-" msgpack:"-" bson:"zone" mapstructure:"-,omitempty"`

	ModelVersion int `json:"-" msgpack:"-" bson:"_modelversion"`
}

// NewAgent returns a new *Agent
func NewAgent() *Agent {

	return &Agent{
		ModelVersion:      1,
		ManagedInterfaces: []string{},
		Principal:         NewPrincipal(),
	}
}

// Identity returns the Identity of the object.
func (o *Agent) Identity() elemental.Identity {

	return AgentIdentity
}

// Identifier returns the value of the object's unique identifier.
func (o *Agent) Identifier() string {

	return o.ID
}

// SetIdentifier sets the value of the object's unique identifier.
func (o *Agent) SetIdentifier(id string) {

	o.ID = id
}

// GetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *Agent) GetBSON() (any, error) {

	if o == nil {
		return nil, nil
	}

	s := &mongoAttributesAgent{}

	if o.ID != "" {
		s.ID = bson.ObjectIdHex(o.ID)
	}
	s.AgentConfig = o.AgentConfig
	s.CurrentVersion = o.CurrentVersion
	s.Hostname = o.Hostname
	s.ImportHash = o.ImportHash
	s.ImportLabel = o.ImportLabel
	s.IsAPEXReachable = o.IsAPEXReachable
	s.IsAPEXTrusted = o.IsAPEXTrusted
	s.ManagedCAState = o.ManagedCAState
	s.ManagedInterfaces = o.ManagedInterfaces
	s.Namespace = o.Namespace
	s.Ping = o.Ping
	s.Principal = o.Principal
	s.Start = o.Start
	s.Status = o.Status
	s.SystemProxyManagementState = o.SystemProxyManagementState
	s.ZHash = o.ZHash
	s.Zone = o.Zone

	return s, nil
}

// SetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *Agent) SetBSON(raw bson.Raw) error {

	if o == nil {
		return nil
	}

	s := &mongoAttributesAgent{}
	if err := raw.Unmarshal(s); err != nil {
		return err
	}

	o.ID = s.ID.Hex()
	o.AgentConfig = s.AgentConfig
	o.CurrentVersion = s.CurrentVersion
	o.Hostname = s.Hostname
	o.ImportHash = s.ImportHash
	o.ImportLabel = s.ImportLabel
	o.IsAPEXReachable = s.IsAPEXReachable
	o.IsAPEXTrusted = s.IsAPEXTrusted
	o.ManagedCAState = s.ManagedCAState
	o.ManagedInterfaces = s.ManagedInterfaces
	o.Namespace = s.Namespace
	o.Ping = s.Ping
	o.Principal = s.Principal
	o.Start = s.Start
	o.Status = s.Status
	o.SystemProxyManagementState = s.SystemProxyManagementState
	o.ZHash = s.ZHash
	o.Zone = s.Zone

	return nil
}

// Version returns the hardcoded version of the model.
func (o *Agent) Version() int {

	return 1
}

// BleveType implements the bleve.Classifier Interface.
func (o *Agent) BleveType() string {

	return "agent"
}

// DefaultOrder returns the list of default ordering fields.
func (o *Agent) DefaultOrder() []string {

	return []string{}
}

// Doc returns the documentation for the object
func (o *Agent) Doc() string {

	return `Displays the status of Acushield agents deployed on usersâ€™ machines, providing
insights into their operational state and activity.`
}

func (o *Agent) String() string {

	return fmt.Sprintf("<%s:%s>", o.Identity().Name, o.Identifier())
}

// GetImportHash returns the ImportHash of the receiver.
func (o *Agent) GetImportHash() string {

	return o.ImportHash
}

// SetImportHash sets the property ImportHash of the receiver using the given value.
func (o *Agent) SetImportHash(importHash string) {

	o.ImportHash = importHash
}

// GetImportLabel returns the ImportLabel of the receiver.
func (o *Agent) GetImportLabel() string {

	return o.ImportLabel
}

// SetImportLabel sets the property ImportLabel of the receiver using the given value.
func (o *Agent) SetImportLabel(importLabel string) {

	o.ImportLabel = importLabel
}

// GetNamespace returns the Namespace of the receiver.
func (o *Agent) GetNamespace() string {

	return o.Namespace
}

// SetNamespace sets the property Namespace of the receiver using the given value.
func (o *Agent) SetNamespace(namespace string) {

	o.Namespace = namespace
}

// ToSparse returns the sparse version of the model.
// The returned object will only contain the given fields. No field means entire field set.
func (o *Agent) ToSparse(fields ...string) elemental.SparseIdentifiable {

	if len(fields) == 0 {
		// nolint: goimports
		return &SparseAgent{
			ID:                         &o.ID,
			AgentConfig:                o.AgentConfig,
			CurrentVersion:             &o.CurrentVersion,
			Hostname:                   &o.Hostname,
			ImportHash:                 &o.ImportHash,
			ImportLabel:                &o.ImportLabel,
			IsAPEXReachable:            &o.IsAPEXReachable,
			IsAPEXTrusted:              &o.IsAPEXTrusted,
			ManagedCAState:             &o.ManagedCAState,
			ManagedInterfaces:          &o.ManagedInterfaces,
			Namespace:                  &o.Namespace,
			Ping:                       &o.Ping,
			Principal:                  o.Principal,
			Start:                      &o.Start,
			Status:                     &o.Status,
			SystemProxyManagementState: &o.SystemProxyManagementState,
			ZHash:                      &o.ZHash,
			Zone:                       &o.Zone,
		}
	}

	sp := &SparseAgent{}
	for _, f := range fields {
		switch f {
		case "ID":
			sp.ID = &(o.ID)
		case "agentConfig":
			sp.AgentConfig = o.AgentConfig
		case "currentVersion":
			sp.CurrentVersion = &(o.CurrentVersion)
		case "hostname":
			sp.Hostname = &(o.Hostname)
		case "importHash":
			sp.ImportHash = &(o.ImportHash)
		case "importLabel":
			sp.ImportLabel = &(o.ImportLabel)
		case "isAPEXReachable":
			sp.IsAPEXReachable = &(o.IsAPEXReachable)
		case "isAPEXTrusted":
			sp.IsAPEXTrusted = &(o.IsAPEXTrusted)
		case "managedCAState":
			sp.ManagedCAState = &(o.ManagedCAState)
		case "managedInterfaces":
			sp.ManagedInterfaces = &(o.ManagedInterfaces)
		case "namespace":
			sp.Namespace = &(o.Namespace)
		case "ping":
			sp.Ping = &(o.Ping)
		case "principal":
			sp.Principal = o.Principal
		case "start":
			sp.Start = &(o.Start)
		case "status":
			sp.Status = &(o.Status)
		case "systemProxyManagementState":
			sp.SystemProxyManagementState = &(o.SystemProxyManagementState)
		case "zHash":
			sp.ZHash = &(o.ZHash)
		case "zone":
			sp.Zone = &(o.Zone)
		}
	}

	return sp
}

// Patch apply the non nil value of a *SparseAgent to the object.
func (o *Agent) Patch(sparse elemental.SparseIdentifiable) {
	if !sparse.Identity().IsEqual(o.Identity()) {
		panic("cannot patch from a parse with different identity")
	}

	so := sparse.(*SparseAgent)
	if so.ID != nil {
		o.ID = *so.ID
	}
	if so.AgentConfig != nil {
		o.AgentConfig = so.AgentConfig
	}
	if so.CurrentVersion != nil {
		o.CurrentVersion = *so.CurrentVersion
	}
	if so.Hostname != nil {
		o.Hostname = *so.Hostname
	}
	if so.ImportHash != nil {
		o.ImportHash = *so.ImportHash
	}
	if so.ImportLabel != nil {
		o.ImportLabel = *so.ImportLabel
	}
	if so.IsAPEXReachable != nil {
		o.IsAPEXReachable = *so.IsAPEXReachable
	}
	if so.IsAPEXTrusted != nil {
		o.IsAPEXTrusted = *so.IsAPEXTrusted
	}
	if so.ManagedCAState != nil {
		o.ManagedCAState = *so.ManagedCAState
	}
	if so.ManagedInterfaces != nil {
		o.ManagedInterfaces = *so.ManagedInterfaces
	}
	if so.Namespace != nil {
		o.Namespace = *so.Namespace
	}
	if so.Ping != nil {
		o.Ping = *so.Ping
	}
	if so.Principal != nil {
		o.Principal = so.Principal
	}
	if so.Start != nil {
		o.Start = *so.Start
	}
	if so.Status != nil {
		o.Status = *so.Status
	}
	if so.SystemProxyManagementState != nil {
		o.SystemProxyManagementState = *so.SystemProxyManagementState
	}
	if so.ZHash != nil {
		o.ZHash = *so.ZHash
	}
	if so.Zone != nil {
		o.Zone = *so.Zone
	}
}

// DeepCopy returns a deep copy if the Agent.
func (o *Agent) DeepCopy() *Agent {

	if o == nil {
		return nil
	}

	out := &Agent{}
	o.DeepCopyInto(out)

	return out
}

// DeepCopyInto copies the receiver into the given *Agent.
func (o *Agent) DeepCopyInto(out *Agent) {

	target, err := copystructure.Copy(o)
	if err != nil {
		panic(fmt.Sprintf("Unable to deepcopy Agent: %s", err))
	}

	*out = *target.(*Agent)
}

// Validate valides the current information stored into the structure.
func (o *Agent) Validate() error {

	errors := elemental.Errors{}
	requiredErrors := elemental.Errors{}

	if o.AgentConfig != nil {
		elemental.ResetDefaultForZeroValues(o.AgentConfig)
		if err := o.AgentConfig.Validate(); err != nil {
			errors = errors.Append(err)
		}
	}

	if err := elemental.ValidateRequiredString("currentVersion", o.CurrentVersion); err != nil {
		requiredErrors = requiredErrors.Append(err)
	}

	if err := elemental.ValidateRequiredString("hostname", o.Hostname); err != nil {
		requiredErrors = requiredErrors.Append(err)
	}

	if err := elemental.ValidateRequiredTime("ping", o.Ping); err != nil {
		requiredErrors = requiredErrors.Append(err)
	}

	if o.Principal != nil {
		elemental.ResetDefaultForZeroValues(o.Principal)
		if err := o.Principal.Validate(); err != nil {
			errors = errors.Append(err)
		}
	}

	if err := elemental.ValidateRequiredTime("start", o.Start); err != nil {
		requiredErrors = requiredErrors.Append(err)
	}

	if err := elemental.ValidateRequiredString("status", string(o.Status)); err != nil {
		requiredErrors = requiredErrors.Append(err)
	}

	if err := elemental.ValidateStringInList("status", string(o.Status), []string{"Alive", "Paused", "Stopped"}, false); err != nil {
		errors = errors.Append(err)
	}

	if len(requiredErrors) > 0 {
		return requiredErrors
	}

	if len(errors) > 0 {
		return errors
	}

	return nil
}

// SpecificationForAttribute returns the AttributeSpecification for the given attribute name key.
func (*Agent) SpecificationForAttribute(name string) elemental.AttributeSpecification {

	if v, ok := AgentAttributesMap[name]; ok {
		return v
	}

	// We could not find it, so let's check on the lower case indexed spec map
	return AgentLowerCaseAttributesMap[name]
}

// AttributeSpecifications returns the full attribute specifications map.
func (*Agent) AttributeSpecifications() map[string]elemental.AttributeSpecification {

	return AgentAttributesMap
}

// ValueForAttribute returns the value for the given attribute.
// This is a very advanced function that you should not need but in some
// very specific use cases.
func (o *Agent) ValueForAttribute(name string) any {

	switch name {
	case "ID":
		return o.ID
	case "agentConfig":
		return o.AgentConfig
	case "currentVersion":
		return o.CurrentVersion
	case "hostname":
		return o.Hostname
	case "importHash":
		return o.ImportHash
	case "importLabel":
		return o.ImportLabel
	case "isAPEXReachable":
		return o.IsAPEXReachable
	case "isAPEXTrusted":
		return o.IsAPEXTrusted
	case "managedCAState":
		return o.ManagedCAState
	case "managedInterfaces":
		return o.ManagedInterfaces
	case "namespace":
		return o.Namespace
	case "ping":
		return o.Ping
	case "principal":
		return o.Principal
	case "start":
		return o.Start
	case "status":
		return o.Status
	case "systemProxyManagementState":
		return o.SystemProxyManagementState
	case "zHash":
		return o.ZHash
	case "zone":
		return o.Zone
	}

	return nil
}

// AgentAttributesMap represents the map of attribute for Agent.
var AgentAttributesMap = map[string]elemental.AttributeSpecification{
	"ID": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "_id",
		ConvertedName:  "ID",
		Description:    `ID is the identifier of the object.`,
		Exposed:        true,
		Filterable:     true,
		Identifier:     true,
		Name:           "ID",
		Orderable:      true,
		ReadOnly:       true,
		Stored:         true,
		Type:           "string",
	},
	"AgentConfig": {
		AllowedChoices: []string{},
		BSONFieldName:  "agentconfig",
		ConvertedName:  "AgentConfig",
		Description:    `The agent configuration.`,
		Exposed:        true,
		Name:           "agentConfig",
		Stored:         true,
		SubType:        "agentconfig",
		Type:           "ref",
	},
	"CurrentVersion": {
		AllowedChoices: []string{},
		BSONFieldName:  "currentversion",
		ConvertedName:  "CurrentVersion",
		Description:    `The current version of the agent.`,
		Exposed:        true,
		Name:           "currentVersion",
		Required:       true,
		Stored:         true,
		Type:           "string",
	},
	"Hostname": {
		AllowedChoices: []string{},
		BSONFieldName:  "hostname",
		ConvertedName:  "Hostname",
		Description:    `The name of the host where the agent is runnning.`,
		Exposed:        true,
		Name:           "hostname",
		Required:       true,
		Stored:         true,
		Type:           "string",
	},
	"ImportHash": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "importhash",
		ConvertedName:  "ImportHash",
		CreationOnly:   true,
		Description:    `The hash of the structure used to compare with new import version.`,
		Exposed:        true,
		Getter:         true,
		Name:           "importHash",
		Setter:         true,
		Stored:         true,
		Type:           "string",
	},
	"ImportLabel": {
		AllowedChoices: []string{},
		BSONFieldName:  "importlabel",
		ConvertedName:  "ImportLabel",
		CreationOnly:   true,
		Description: `The user-defined import label that allows the system to group resources from the
same import operation.`,
		Exposed: true,
		Getter:  true,
		Name:    "importLabel",
		Setter:  true,
		Stored:  true,
		Type:    "string",
	},
	"IsAPEXReachable": {
		AllowedChoices: []string{},
		BSONFieldName:  "isapexreachable",
		ConvertedName:  "IsAPEXReachable",
		Description:    `True if the apex is reachable.`,
		Exposed:        true,
		Name:           "isAPEXReachable",
		Stored:         true,
		Type:           "boolean",
	},
	"IsAPEXTrusted": {
		AllowedChoices: []string{},
		BSONFieldName:  "isapextrusted",
		ConvertedName:  "IsAPEXTrusted",
		Description:    `True if the apex is trusted.`,
		Exposed:        true,
		Name:           "isAPEXTrusted",
		Stored:         true,
		Type:           "boolean",
	},
	"ManagedCAState": {
		AllowedChoices: []string{},
		BSONFieldName:  "managedcastate",
		ConvertedName:  "ManagedCAState",
		Description:    `The state of the managed CA.`,
		Exposed:        true,
		Name:           "managedCAState",
		Stored:         true,
		Type:           "boolean",
	},
	"ManagedInterfaces": {
		AllowedChoices: []string{},
		BSONFieldName:  "managedinterfaces",
		ConvertedName:  "ManagedInterfaces",
		Description:    `The list of managed interfaces.`,
		Exposed:        true,
		Name:           "managedInterfaces",
		Stored:         true,
		SubType:        "string",
		Type:           "list",
	},
	"Namespace": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "namespace",
		ConvertedName:  "Namespace",
		Description:    `The namespace of the object.`,
		Exposed:        true,
		Getter:         true,
		Name:           "namespace",
		Orderable:      true,
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Type:           "string",
	},
	"Ping": {
		AllowedChoices: []string{},
		BSONFieldName:  "ping",
		ConvertedName:  "Ping",
		Description:    `The last ping recorded for the agent.`,
		Exposed:        true,
		Name:           "ping",
		Required:       true,
		Stored:         true,
		Type:           "time",
	},
	"Principal": {
		AllowedChoices: []string{},
		BSONFieldName:  "principal",
		ConvertedName:  "Principal",
		Description:    `The principal of the object.`,
		Exposed:        true,
		Name:           "principal",
		Required:       true,
		Stored:         true,
		SubType:        "principal",
		Type:           "ref",
	},
	"Start": {
		AllowedChoices: []string{},
		BSONFieldName:  "start",
		ConvertedName:  "Start",
		Description:    `The start time for the agent.`,
		Exposed:        true,
		Name:           "start",
		Required:       true,
		Stored:         true,
		Type:           "time",
	},
	"Status": {
		AllowedChoices: []string{"Alive", "Paused", "Stopped"},
		BSONFieldName:  "status",
		ConvertedName:  "Status",
		Description:    `The status of the agent.`,
		Exposed:        true,
		Name:           "status",
		Required:       true,
		Stored:         true,
		Type:           "enum",
	},
	"SystemProxyManagementState": {
		AllowedChoices: []string{},
		BSONFieldName:  "systemproxymanagementstate",
		ConvertedName:  "SystemProxyManagementState",
		Description:    `The state of the system proxy management.`,
		Exposed:        true,
		Name:           "systemProxyManagementState",
		Stored:         true,
		Type:           "boolean",
	},
}

// AgentLowerCaseAttributesMap represents the map of attribute for Agent.
var AgentLowerCaseAttributesMap = map[string]elemental.AttributeSpecification{
	"id": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "_id",
		ConvertedName:  "ID",
		Description:    `ID is the identifier of the object.`,
		Exposed:        true,
		Filterable:     true,
		Identifier:     true,
		Name:           "ID",
		Orderable:      true,
		ReadOnly:       true,
		Stored:         true,
		Type:           "string",
	},
	"agentconfig": {
		AllowedChoices: []string{},
		BSONFieldName:  "agentconfig",
		ConvertedName:  "AgentConfig",
		Description:    `The agent configuration.`,
		Exposed:        true,
		Name:           "agentConfig",
		Stored:         true,
		SubType:        "agentconfig",
		Type:           "ref",
	},
	"currentversion": {
		AllowedChoices: []string{},
		BSONFieldName:  "currentversion",
		ConvertedName:  "CurrentVersion",
		Description:    `The current version of the agent.`,
		Exposed:        true,
		Name:           "currentVersion",
		Required:       true,
		Stored:         true,
		Type:           "string",
	},
	"hostname": {
		AllowedChoices: []string{},
		BSONFieldName:  "hostname",
		ConvertedName:  "Hostname",
		Description:    `The name of the host where the agent is runnning.`,
		Exposed:        true,
		Name:           "hostname",
		Required:       true,
		Stored:         true,
		Type:           "string",
	},
	"importhash": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "importhash",
		ConvertedName:  "ImportHash",
		CreationOnly:   true,
		Description:    `The hash of the structure used to compare with new import version.`,
		Exposed:        true,
		Getter:         true,
		Name:           "importHash",
		Setter:         true,
		Stored:         true,
		Type:           "string",
	},
	"importlabel": {
		AllowedChoices: []string{},
		BSONFieldName:  "importlabel",
		ConvertedName:  "ImportLabel",
		CreationOnly:   true,
		Description: `The user-defined import label that allows the system to group resources from the
same import operation.`,
		Exposed: true,
		Getter:  true,
		Name:    "importLabel",
		Setter:  true,
		Stored:  true,
		Type:    "string",
	},
	"isapexreachable": {
		AllowedChoices: []string{},
		BSONFieldName:  "isapexreachable",
		ConvertedName:  "IsAPEXReachable",
		Description:    `True if the apex is reachable.`,
		Exposed:        true,
		Name:           "isAPEXReachable",
		Stored:         true,
		Type:           "boolean",
	},
	"isapextrusted": {
		AllowedChoices: []string{},
		BSONFieldName:  "isapextrusted",
		ConvertedName:  "IsAPEXTrusted",
		Description:    `True if the apex is trusted.`,
		Exposed:        true,
		Name:           "isAPEXTrusted",
		Stored:         true,
		Type:           "boolean",
	},
	"managedcastate": {
		AllowedChoices: []string{},
		BSONFieldName:  "managedcastate",
		ConvertedName:  "ManagedCAState",
		Description:    `The state of the managed CA.`,
		Exposed:        true,
		Name:           "managedCAState",
		Stored:         true,
		Type:           "boolean",
	},
	"managedinterfaces": {
		AllowedChoices: []string{},
		BSONFieldName:  "managedinterfaces",
		ConvertedName:  "ManagedInterfaces",
		Description:    `The list of managed interfaces.`,
		Exposed:        true,
		Name:           "managedInterfaces",
		Stored:         true,
		SubType:        "string",
		Type:           "list",
	},
	"namespace": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "namespace",
		ConvertedName:  "Namespace",
		Description:    `The namespace of the object.`,
		Exposed:        true,
		Getter:         true,
		Name:           "namespace",
		Orderable:      true,
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Type:           "string",
	},
	"ping": {
		AllowedChoices: []string{},
		BSONFieldName:  "ping",
		ConvertedName:  "Ping",
		Description:    `The last ping recorded for the agent.`,
		Exposed:        true,
		Name:           "ping",
		Required:       true,
		Stored:         true,
		Type:           "time",
	},
	"principal": {
		AllowedChoices: []string{},
		BSONFieldName:  "principal",
		ConvertedName:  "Principal",
		Description:    `The principal of the object.`,
		Exposed:        true,
		Name:           "principal",
		Required:       true,
		Stored:         true,
		SubType:        "principal",
		Type:           "ref",
	},
	"start": {
		AllowedChoices: []string{},
		BSONFieldName:  "start",
		ConvertedName:  "Start",
		Description:    `The start time for the agent.`,
		Exposed:        true,
		Name:           "start",
		Required:       true,
		Stored:         true,
		Type:           "time",
	},
	"status": {
		AllowedChoices: []string{"Alive", "Paused", "Stopped"},
		BSONFieldName:  "status",
		ConvertedName:  "Status",
		Description:    `The status of the agent.`,
		Exposed:        true,
		Name:           "status",
		Required:       true,
		Stored:         true,
		Type:           "enum",
	},
	"systemproxymanagementstate": {
		AllowedChoices: []string{},
		BSONFieldName:  "systemproxymanagementstate",
		ConvertedName:  "SystemProxyManagementState",
		Description:    `The state of the system proxy management.`,
		Exposed:        true,
		Name:           "systemProxyManagementState",
		Stored:         true,
		Type:           "boolean",
	},
}

// SparseAgentsList represents a list of SparseAgents
type SparseAgentsList []*SparseAgent

// Identity returns the identity of the objects in the list.
func (o SparseAgentsList) Identity() elemental.Identity {

	return AgentIdentity
}

// Copy returns a pointer to a copy the SparseAgentsList.
func (o SparseAgentsList) Copy() elemental.Identifiables {

	copy := slices.Clone(o)
	return &copy
}

// Append appends the objects to the a new copy of the SparseAgentsList.
func (o SparseAgentsList) Append(objects ...elemental.Identifiable) elemental.Identifiables {

	out := slices.Clone(o)
	for _, obj := range objects {
		out = append(out, obj.(*SparseAgent))
	}

	return out
}

// List converts the object to an elemental.IdentifiablesList.
func (o SparseAgentsList) List() elemental.IdentifiablesList {

	out := make(elemental.IdentifiablesList, len(o))
	for i := range len(o) {
		out[i] = o[i]
	}

	return out
}

// DefaultOrder returns the default ordering fields of the content.
func (o SparseAgentsList) DefaultOrder() []string {

	return []string{}
}

// ToPlain returns the SparseAgentsList converted to AgentsList.
func (o SparseAgentsList) ToPlain() elemental.IdentifiablesList {

	out := make(elemental.IdentifiablesList, len(o))
	for i := range len(o) {
		out[i] = o[i].ToPlain()
	}

	return out
}

// Version returns the version of the content.
func (o SparseAgentsList) Version() int {

	return 1
}

// SparseAgent represents the sparse version of a agent.
type SparseAgent struct {
	// ID is the identifier of the object.
	ID *string `json:"ID,omitempty" msgpack:"ID,omitempty" bson:"-" mapstructure:"ID,omitempty"`

	// The agent configuration.
	AgentConfig *AgentConfig `json:"agentConfig,omitempty" msgpack:"agentConfig,omitempty" bson:"agentconfig,omitempty" mapstructure:"agentConfig,omitempty"`

	// The current version of the agent.
	CurrentVersion *string `json:"currentVersion,omitempty" msgpack:"currentVersion,omitempty" bson:"currentversion,omitempty" mapstructure:"currentVersion,omitempty"`

	// The name of the host where the agent is runnning.
	Hostname *string `json:"hostname,omitempty" msgpack:"hostname,omitempty" bson:"hostname,omitempty" mapstructure:"hostname,omitempty"`

	// The hash of the structure used to compare with new import version.
	ImportHash *string `json:"importHash,omitempty" msgpack:"importHash,omitempty" bson:"importhash,omitempty" mapstructure:"importHash,omitempty"`

	// The user-defined import label that allows the system to group resources from the
	// same import operation.
	ImportLabel *string `json:"importLabel,omitempty" msgpack:"importLabel,omitempty" bson:"importlabel,omitempty" mapstructure:"importLabel,omitempty"`

	// True if the apex is reachable.
	IsAPEXReachable *bool `json:"isAPEXReachable,omitempty" msgpack:"isAPEXReachable,omitempty" bson:"isapexreachable,omitempty" mapstructure:"isAPEXReachable,omitempty"`

	// True if the apex is trusted.
	IsAPEXTrusted *bool `json:"isAPEXTrusted,omitempty" msgpack:"isAPEXTrusted,omitempty" bson:"isapextrusted,omitempty" mapstructure:"isAPEXTrusted,omitempty"`

	// The state of the managed CA.
	ManagedCAState *bool `json:"managedCAState,omitempty" msgpack:"managedCAState,omitempty" bson:"managedcastate,omitempty" mapstructure:"managedCAState,omitempty"`

	// The list of managed interfaces.
	ManagedInterfaces *[]string `json:"managedInterfaces,omitempty" msgpack:"managedInterfaces,omitempty" bson:"managedinterfaces,omitempty" mapstructure:"managedInterfaces,omitempty"`

	// The namespace of the object.
	Namespace *string `json:"namespace,omitempty" msgpack:"namespace,omitempty" bson:"namespace,omitempty" mapstructure:"namespace,omitempty"`

	// The last ping recorded for the agent.
	Ping *time.Time `json:"ping,omitempty" msgpack:"ping,omitempty" bson:"ping,omitempty" mapstructure:"ping,omitempty"`

	// The principal of the object.
	Principal *Principal `json:"principal,omitempty" msgpack:"principal,omitempty" bson:"principal,omitempty" mapstructure:"principal,omitempty"`

	// The start time for the agent.
	Start *time.Time `json:"start,omitempty" msgpack:"start,omitempty" bson:"start,omitempty" mapstructure:"start,omitempty"`

	// The status of the agent.
	Status *AgentStatusValue `json:"status,omitempty" msgpack:"status,omitempty" bson:"status,omitempty" mapstructure:"status,omitempty"`

	// The state of the system proxy management.
	SystemProxyManagementState *bool `json:"systemProxyManagementState,omitempty" msgpack:"systemProxyManagementState,omitempty" bson:"systemproxymanagementstate,omitempty" mapstructure:"systemProxyManagementState,omitempty"`

	// Hash of the object used to shard the data.
	ZHash *int `json:"-" msgpack:"-" bson:"zhash,omitempty" mapstructure:"-,omitempty"`

	// Sharding zone.
	Zone *int `json:"-" msgpack:"-" bson:"zone,omitempty" mapstructure:"-,omitempty"`

	ModelVersion int `json:"-" msgpack:"-" bson:"_modelversion"`
}

// NewSparseAgent returns a new  SparseAgent.
func NewSparseAgent() *SparseAgent {
	return &SparseAgent{}
}

// Identity returns the Identity of the sparse object.
func (o *SparseAgent) Identity() elemental.Identity {

	return AgentIdentity
}

// Identifier returns the value of the sparse object's unique identifier.
func (o *SparseAgent) Identifier() string {

	if o.ID == nil {
		return ""
	}
	return *o.ID
}

// SetIdentifier sets the value of the sparse object's unique identifier.
func (o *SparseAgent) SetIdentifier(id string) {

	if id != "" {
		o.ID = &id
	} else {
		o.ID = nil
	}
}

// GetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *SparseAgent) GetBSON() (any, error) {

	if o == nil {
		return nil, nil
	}

	s := &mongoAttributesSparseAgent{}

	if o.ID != nil {
		s.ID = bson.ObjectIdHex(*o.ID)
	}
	if o.AgentConfig != nil {
		s.AgentConfig = o.AgentConfig
	}
	if o.CurrentVersion != nil {
		s.CurrentVersion = o.CurrentVersion
	}
	if o.Hostname != nil {
		s.Hostname = o.Hostname
	}
	if o.ImportHash != nil {
		s.ImportHash = o.ImportHash
	}
	if o.ImportLabel != nil {
		s.ImportLabel = o.ImportLabel
	}
	if o.IsAPEXReachable != nil {
		s.IsAPEXReachable = o.IsAPEXReachable
	}
	if o.IsAPEXTrusted != nil {
		s.IsAPEXTrusted = o.IsAPEXTrusted
	}
	if o.ManagedCAState != nil {
		s.ManagedCAState = o.ManagedCAState
	}
	if o.ManagedInterfaces != nil {
		s.ManagedInterfaces = o.ManagedInterfaces
	}
	if o.Namespace != nil {
		s.Namespace = o.Namespace
	}
	if o.Ping != nil {
		s.Ping = o.Ping
	}
	if o.Principal != nil {
		s.Principal = o.Principal
	}
	if o.Start != nil {
		s.Start = o.Start
	}
	if o.Status != nil {
		s.Status = o.Status
	}
	if o.SystemProxyManagementState != nil {
		s.SystemProxyManagementState = o.SystemProxyManagementState
	}
	if o.ZHash != nil {
		s.ZHash = o.ZHash
	}
	if o.Zone != nil {
		s.Zone = o.Zone
	}

	return s, nil
}

// SetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *SparseAgent) SetBSON(raw bson.Raw) error {

	if o == nil {
		return nil
	}

	s := &mongoAttributesSparseAgent{}
	if err := raw.Unmarshal(s); err != nil {
		return err
	}

	id := s.ID.Hex()
	o.ID = &id
	if s.AgentConfig != nil {
		o.AgentConfig = s.AgentConfig
	}
	if s.CurrentVersion != nil {
		o.CurrentVersion = s.CurrentVersion
	}
	if s.Hostname != nil {
		o.Hostname = s.Hostname
	}
	if s.ImportHash != nil {
		o.ImportHash = s.ImportHash
	}
	if s.ImportLabel != nil {
		o.ImportLabel = s.ImportLabel
	}
	if s.IsAPEXReachable != nil {
		o.IsAPEXReachable = s.IsAPEXReachable
	}
	if s.IsAPEXTrusted != nil {
		o.IsAPEXTrusted = s.IsAPEXTrusted
	}
	if s.ManagedCAState != nil {
		o.ManagedCAState = s.ManagedCAState
	}
	if s.ManagedInterfaces != nil {
		o.ManagedInterfaces = s.ManagedInterfaces
	}
	if s.Namespace != nil {
		o.Namespace = s.Namespace
	}
	if s.Ping != nil {
		o.Ping = s.Ping
	}
	if s.Principal != nil {
		o.Principal = s.Principal
	}
	if s.Start != nil {
		o.Start = s.Start
	}
	if s.Status != nil {
		o.Status = s.Status
	}
	if s.SystemProxyManagementState != nil {
		o.SystemProxyManagementState = s.SystemProxyManagementState
	}
	if s.ZHash != nil {
		o.ZHash = s.ZHash
	}
	if s.Zone != nil {
		o.Zone = s.Zone
	}

	return nil
}

// Version returns the hardcoded version of the model.
func (o *SparseAgent) Version() int {

	return 1
}

// ToPlain returns the plain version of the sparse model.
func (o *SparseAgent) ToPlain() elemental.PlainIdentifiable {

	out := NewAgent()
	if o.ID != nil {
		out.ID = *o.ID
	}
	if o.AgentConfig != nil {
		out.AgentConfig = o.AgentConfig
	}
	if o.CurrentVersion != nil {
		out.CurrentVersion = *o.CurrentVersion
	}
	if o.Hostname != nil {
		out.Hostname = *o.Hostname
	}
	if o.ImportHash != nil {
		out.ImportHash = *o.ImportHash
	}
	if o.ImportLabel != nil {
		out.ImportLabel = *o.ImportLabel
	}
	if o.IsAPEXReachable != nil {
		out.IsAPEXReachable = *o.IsAPEXReachable
	}
	if o.IsAPEXTrusted != nil {
		out.IsAPEXTrusted = *o.IsAPEXTrusted
	}
	if o.ManagedCAState != nil {
		out.ManagedCAState = *o.ManagedCAState
	}
	if o.ManagedInterfaces != nil {
		out.ManagedInterfaces = *o.ManagedInterfaces
	}
	if o.Namespace != nil {
		out.Namespace = *o.Namespace
	}
	if o.Ping != nil {
		out.Ping = *o.Ping
	}
	if o.Principal != nil {
		out.Principal = o.Principal
	}
	if o.Start != nil {
		out.Start = *o.Start
	}
	if o.Status != nil {
		out.Status = *o.Status
	}
	if o.SystemProxyManagementState != nil {
		out.SystemProxyManagementState = *o.SystemProxyManagementState
	}
	if o.ZHash != nil {
		out.ZHash = *o.ZHash
	}
	if o.Zone != nil {
		out.Zone = *o.Zone
	}

	return out
}

// GetImportHash returns the ImportHash of the receiver.
func (o *SparseAgent) GetImportHash() (out string) {

	if o.ImportHash == nil {
		return
	}

	return *o.ImportHash
}

// SetImportHash sets the property ImportHash of the receiver using the address of the given value.
func (o *SparseAgent) SetImportHash(importHash string) {

	o.ImportHash = &importHash
}

// GetImportLabel returns the ImportLabel of the receiver.
func (o *SparseAgent) GetImportLabel() (out string) {

	if o.ImportLabel == nil {
		return
	}

	return *o.ImportLabel
}

// SetImportLabel sets the property ImportLabel of the receiver using the address of the given value.
func (o *SparseAgent) SetImportLabel(importLabel string) {

	o.ImportLabel = &importLabel
}

// GetNamespace returns the Namespace of the receiver.
func (o *SparseAgent) GetNamespace() (out string) {

	if o.Namespace == nil {
		return
	}

	return *o.Namespace
}

// SetNamespace sets the property Namespace of the receiver using the address of the given value.
func (o *SparseAgent) SetNamespace(namespace string) {

	o.Namespace = &namespace
}

// DeepCopy returns a deep copy if the SparseAgent.
func (o *SparseAgent) DeepCopy() *SparseAgent {

	if o == nil {
		return nil
	}

	out := &SparseAgent{}
	o.DeepCopyInto(out)

	return out
}

// DeepCopyInto copies the receiver into the given *SparseAgent.
func (o *SparseAgent) DeepCopyInto(out *SparseAgent) {

	target, err := copystructure.Copy(o)
	if err != nil {
		panic(fmt.Sprintf("Unable to deepcopy SparseAgent: %s", err))
	}

	*out = *target.(*SparseAgent)
}

type mongoAttributesAgent struct {
	ID                         bson.ObjectId    `bson:"_id,omitempty"`
	AgentConfig                *AgentConfig     `bson:"agentconfig,omitempty"`
	CurrentVersion             string           `bson:"currentversion"`
	Hostname                   string           `bson:"hostname"`
	ImportHash                 string           `bson:"importhash,omitempty"`
	ImportLabel                string           `bson:"importlabel,omitempty"`
	IsAPEXReachable            bool             `bson:"isapexreachable"`
	IsAPEXTrusted              bool             `bson:"isapextrusted"`
	ManagedCAState             bool             `bson:"managedcastate"`
	ManagedInterfaces          []string         `bson:"managedinterfaces"`
	Namespace                  string           `bson:"namespace,omitempty"`
	Ping                       time.Time        `bson:"ping"`
	Principal                  *Principal       `bson:"principal"`
	Start                      time.Time        `bson:"start"`
	Status                     AgentStatusValue `bson:"status"`
	SystemProxyManagementState bool             `bson:"systemproxymanagementstate"`
	ZHash                      int              `bson:"zhash"`
	Zone                       int              `bson:"zone"`
}
type mongoAttributesSparseAgent struct {
	ID                         bson.ObjectId     `bson:"_id,omitempty"`
	AgentConfig                *AgentConfig      `bson:"agentconfig,omitempty"`
	CurrentVersion             *string           `bson:"currentversion,omitempty"`
	Hostname                   *string           `bson:"hostname,omitempty"`
	ImportHash                 *string           `bson:"importhash,omitempty"`
	ImportLabel                *string           `bson:"importlabel,omitempty"`
	IsAPEXReachable            *bool             `bson:"isapexreachable,omitempty"`
	IsAPEXTrusted              *bool             `bson:"isapextrusted,omitempty"`
	ManagedCAState             *bool             `bson:"managedcastate,omitempty"`
	ManagedInterfaces          *[]string         `bson:"managedinterfaces,omitempty"`
	Namespace                  *string           `bson:"namespace,omitempty"`
	Ping                       *time.Time        `bson:"ping,omitempty"`
	Principal                  *Principal        `bson:"principal,omitempty"`
	Start                      *time.Time        `bson:"start,omitempty"`
	Status                     *AgentStatusValue `bson:"status,omitempty"`
	SystemProxyManagementState *bool             `bson:"systemproxymanagementstate,omitempty"`
	ZHash                      *int              `bson:"zhash,omitempty"`
	Zone                       *int              `bson:"zone,omitempty"`
}
