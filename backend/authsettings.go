// Code generated by elegen. DO NOT EDIT.
// Source: go.acuvity.ai/elemental (templates/model.gotpl)

package api

import (
	"fmt"
	"slices"

	"github.com/globalsign/mgo/bson"
	"github.com/mitchellh/copystructure"
	"go.acuvity.ai/elemental"
)

// AuthSettingsSourceTypeValue represents the possible values for attribute "sourceType".
type AuthSettingsSourceTypeValue string

const (
	// AuthSettingsSourceTypeOAuth2 represents the value OAuth2.
	AuthSettingsSourceTypeOAuth2 AuthSettingsSourceTypeValue = "OAuth2"

	// AuthSettingsSourceTypeOIDC represents the value OIDC.
	AuthSettingsSourceTypeOIDC AuthSettingsSourceTypeValue = "OIDC"

	// AuthSettingsSourceTypeSAML represents the value SAML.
	AuthSettingsSourceTypeSAML AuthSettingsSourceTypeValue = "SAML"
)

// AuthSettingsIdentity represents the Identity of the object.
var AuthSettingsIdentity = elemental.Identity{
	Name:     "authsettings",
	Category: "authsettings",
	Package:  "lain",
	Private:  false,
}

// AuthSettingsList represents a list of AuthSettings
type AuthSettingsList []*AuthSettings

// Identity returns the identity of the objects in the list.
func (o AuthSettingsList) Identity() elemental.Identity {

	return AuthSettingsIdentity
}

// Copy returns a pointer to a copy the AuthSettingsList.
func (o AuthSettingsList) Copy() elemental.Identifiables {

	out := slices.Clone(o)
	return &out
}

// Append appends the objects to the a new copy of the AuthSettingsList.
func (o AuthSettingsList) Append(objects ...elemental.Identifiable) elemental.Identifiables {

	out := slices.Clone(o)
	for _, obj := range objects {
		out = append(out, obj.(*AuthSettings))
	}

	return out
}

// List converts the object to an elemental.IdentifiablesList.
func (o AuthSettingsList) List() elemental.IdentifiablesList {

	out := make(elemental.IdentifiablesList, len(o))
	for i := range len(o) {
		out[i] = o[i]
	}

	return out
}

// DefaultOrder returns the default ordering fields of the content.
func (o AuthSettingsList) DefaultOrder() []string {

	return []string{}
}

// ToSparse returns the AuthSettingsList converted to SparseAuthSettingsList.
// Objects in the list will only contain the given fields. No field means entire field set.
func (o AuthSettingsList) ToSparse(fields ...string) elemental.Identifiables {

	out := make(SparseAuthSettingsList, len(o))
	for i := range len(o) {
		out[i] = o[i].ToSparse(fields...).(*SparseAuthSettings)
	}

	return out
}

// Version returns the version of the content.
func (o AuthSettingsList) Version() int {

	return 1
}

// AuthSettings represents the model of a authsettings
type AuthSettings struct {
	// The name of the source.
	SourceName string `json:"sourceName" msgpack:"sourceName" bson:"-" mapstructure:"sourceName,omitempty"`

	// The type of source.
	SourceType AuthSettingsSourceTypeValue `json:"sourceType" msgpack:"sourceType" bson:"-" mapstructure:"sourceType,omitempty"`

	ModelVersion int `json:"-" msgpack:"-" bson:"_modelversion"`
}

// NewAuthSettings returns a new *AuthSettings
func NewAuthSettings() *AuthSettings {

	return &AuthSettings{
		ModelVersion: 1,
		SourceName:   "default",
	}
}

// Identity returns the Identity of the object.
func (o *AuthSettings) Identity() elemental.Identity {

	return AuthSettingsIdentity
}

// Identifier returns the value of the object's unique identifier.
func (o *AuthSettings) Identifier() string {

	return ""
}

// SetIdentifier sets the value of the object's unique identifier.
func (o *AuthSettings) SetIdentifier(id string) {

}

// GetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *AuthSettings) GetBSON() (any, error) {

	if o == nil {
		return nil, nil
	}

	s := &mongoAttributesAuthSettings{}

	return s, nil
}

// SetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *AuthSettings) SetBSON(raw bson.Raw) error {

	if o == nil {
		return nil
	}

	s := &mongoAttributesAuthSettings{}
	if err := raw.Unmarshal(s); err != nil {
		return err
	}

	return nil
}

// Version returns the hardcoded version of the model.
func (o *AuthSettings) Version() int {

	return 1
}

// BleveType implements the bleve.Classifier Interface.
func (o *AuthSettings) BleveType() string {

	return "authsettings"
}

// DefaultOrder returns the list of default ordering fields.
func (o *AuthSettings) DefaultOrder() []string {

	return []string{}
}

// Doc returns the documentation for the object
func (o *AuthSettings) Doc() string {

	return `Returns the authentication source names available for this organization.`
}

func (o *AuthSettings) String() string {

	return fmt.Sprintf("<%s:%s>", o.Identity().Name, o.Identifier())
}

// ToSparse returns the sparse version of the model.
// The returned object will only contain the given fields. No field means entire field set.
func (o *AuthSettings) ToSparse(fields ...string) elemental.SparseIdentifiable {

	if len(fields) == 0 {
		// nolint: goimports
		return &SparseAuthSettings{
			SourceName: &o.SourceName,
			SourceType: &o.SourceType,
		}
	}

	sp := &SparseAuthSettings{}
	for _, f := range fields {
		switch f {
		case "sourceName":
			sp.SourceName = &(o.SourceName)
		case "sourceType":
			sp.SourceType = &(o.SourceType)
		}
	}

	return sp
}

// Patch apply the non nil value of a *SparseAuthSettings to the object.
func (o *AuthSettings) Patch(sparse elemental.SparseIdentifiable) {
	if !sparse.Identity().IsEqual(o.Identity()) {
		panic("cannot patch from a parse with different identity")
	}

	so := sparse.(*SparseAuthSettings)
	if so.SourceName != nil {
		o.SourceName = *so.SourceName
	}
	if so.SourceType != nil {
		o.SourceType = *so.SourceType
	}
}

// DeepCopy returns a deep copy if the AuthSettings.
func (o *AuthSettings) DeepCopy() *AuthSettings {

	if o == nil {
		return nil
	}

	out := &AuthSettings{}
	o.DeepCopyInto(out)

	return out
}

// DeepCopyInto copies the receiver into the given *AuthSettings.
func (o *AuthSettings) DeepCopyInto(out *AuthSettings) {

	target, err := copystructure.Copy(o)
	if err != nil {
		panic(fmt.Sprintf("Unable to deepcopy AuthSettings: %s", err))
	}

	*out = *target.(*AuthSettings)
}

// Validate valides the current information stored into the structure.
func (o *AuthSettings) Validate() error {

	errors := elemental.Errors{}
	requiredErrors := elemental.Errors{}

	if err := elemental.ValidateStringInList("sourceType", string(o.SourceType), []string{"SAML", "OIDC", "OAuth2"}, false); err != nil {
		errors = errors.Append(err)
	}

	if len(requiredErrors) > 0 {
		return requiredErrors
	}

	if len(errors) > 0 {
		return errors
	}

	return nil
}

// SpecificationForAttribute returns the AttributeSpecification for the given attribute name key.
func (*AuthSettings) SpecificationForAttribute(name string) elemental.AttributeSpecification {

	if v, ok := AuthSettingsAttributesMap[name]; ok {
		return v
	}

	// We could not find it, so let's check on the lower case indexed spec map
	return AuthSettingsLowerCaseAttributesMap[name]
}

// AttributeSpecifications returns the full attribute specifications map.
func (*AuthSettings) AttributeSpecifications() map[string]elemental.AttributeSpecification {

	return AuthSettingsAttributesMap
}

// ValueForAttribute returns the value for the given attribute.
// This is a very advanced function that you should not need but in some
// very specific use cases.
func (o *AuthSettings) ValueForAttribute(name string) any {

	switch name {
	case "sourceName":
		return o.SourceName
	case "sourceType":
		return o.SourceType
	}

	return nil
}

// AuthSettingsAttributesMap represents the map of attribute for AuthSettings.
var AuthSettingsAttributesMap = map[string]elemental.AttributeSpecification{
	"SourceName": {
		AllowedChoices: []string{},
		ConvertedName:  "SourceName",
		DefaultValue:   "default",
		Description:    `The name of the source.`,
		Exposed:        true,
		Name:           "sourceName",
		Type:           "string",
	},
	"SourceType": {
		AllowedChoices: []string{"SAML", "OIDC", "OAuth2"},
		ConvertedName:  "SourceType",
		Description:    `The type of source.`,
		Exposed:        true,
		Name:           "sourceType",
		Type:           "enum",
	},
}

// AuthSettingsLowerCaseAttributesMap represents the map of attribute for AuthSettings.
var AuthSettingsLowerCaseAttributesMap = map[string]elemental.AttributeSpecification{
	"sourcename": {
		AllowedChoices: []string{},
		ConvertedName:  "SourceName",
		DefaultValue:   "default",
		Description:    `The name of the source.`,
		Exposed:        true,
		Name:           "sourceName",
		Type:           "string",
	},
	"sourcetype": {
		AllowedChoices: []string{"SAML", "OIDC", "OAuth2"},
		ConvertedName:  "SourceType",
		Description:    `The type of source.`,
		Exposed:        true,
		Name:           "sourceType",
		Type:           "enum",
	},
}

// SparseAuthSettingsList represents a list of SparseAuthSettings
type SparseAuthSettingsList []*SparseAuthSettings

// Identity returns the identity of the objects in the list.
func (o SparseAuthSettingsList) Identity() elemental.Identity {

	return AuthSettingsIdentity
}

// Copy returns a pointer to a copy the SparseAuthSettingsList.
func (o SparseAuthSettingsList) Copy() elemental.Identifiables {

	copy := slices.Clone(o)
	return &copy
}

// Append appends the objects to the a new copy of the SparseAuthSettingsList.
func (o SparseAuthSettingsList) Append(objects ...elemental.Identifiable) elemental.Identifiables {

	out := slices.Clone(o)
	for _, obj := range objects {
		out = append(out, obj.(*SparseAuthSettings))
	}

	return out
}

// List converts the object to an elemental.IdentifiablesList.
func (o SparseAuthSettingsList) List() elemental.IdentifiablesList {

	out := make(elemental.IdentifiablesList, len(o))
	for i := range len(o) {
		out[i] = o[i]
	}

	return out
}

// DefaultOrder returns the default ordering fields of the content.
func (o SparseAuthSettingsList) DefaultOrder() []string {

	return []string{}
}

// ToPlain returns the SparseAuthSettingsList converted to AuthSettingsList.
func (o SparseAuthSettingsList) ToPlain() elemental.IdentifiablesList {

	out := make(elemental.IdentifiablesList, len(o))
	for i := range len(o) {
		out[i] = o[i].ToPlain()
	}

	return out
}

// Version returns the version of the content.
func (o SparseAuthSettingsList) Version() int {

	return 1
}

// SparseAuthSettings represents the sparse version of a authsettings.
type SparseAuthSettings struct {
	// The name of the source.
	SourceName *string `json:"sourceName,omitempty" msgpack:"sourceName,omitempty" bson:"-" mapstructure:"sourceName,omitempty"`

	// The type of source.
	SourceType *AuthSettingsSourceTypeValue `json:"sourceType,omitempty" msgpack:"sourceType,omitempty" bson:"-" mapstructure:"sourceType,omitempty"`

	ModelVersion int `json:"-" msgpack:"-" bson:"_modelversion"`
}

// NewSparseAuthSettings returns a new  SparseAuthSettings.
func NewSparseAuthSettings() *SparseAuthSettings {
	return &SparseAuthSettings{}
}

// Identity returns the Identity of the sparse object.
func (o *SparseAuthSettings) Identity() elemental.Identity {

	return AuthSettingsIdentity
}

// Identifier returns the value of the sparse object's unique identifier.
func (o *SparseAuthSettings) Identifier() string {

	return ""
}

// SetIdentifier sets the value of the sparse object's unique identifier.
func (o *SparseAuthSettings) SetIdentifier(id string) {

}

// GetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *SparseAuthSettings) GetBSON() (any, error) {

	if o == nil {
		return nil, nil
	}

	s := &mongoAttributesSparseAuthSettings{}

	return s, nil
}

// SetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *SparseAuthSettings) SetBSON(raw bson.Raw) error {

	if o == nil {
		return nil
	}

	s := &mongoAttributesSparseAuthSettings{}
	if err := raw.Unmarshal(s); err != nil {
		return err
	}

	return nil
}

// Version returns the hardcoded version of the model.
func (o *SparseAuthSettings) Version() int {

	return 1
}

// ToPlain returns the plain version of the sparse model.
func (o *SparseAuthSettings) ToPlain() elemental.PlainIdentifiable {

	out := NewAuthSettings()
	if o.SourceName != nil {
		out.SourceName = *o.SourceName
	}
	if o.SourceType != nil {
		out.SourceType = *o.SourceType
	}

	return out
}

// DeepCopy returns a deep copy if the SparseAuthSettings.
func (o *SparseAuthSettings) DeepCopy() *SparseAuthSettings {

	if o == nil {
		return nil
	}

	out := &SparseAuthSettings{}
	o.DeepCopyInto(out)

	return out
}

// DeepCopyInto copies the receiver into the given *SparseAuthSettings.
func (o *SparseAuthSettings) DeepCopyInto(out *SparseAuthSettings) {

	target, err := copystructure.Copy(o)
	if err != nil {
		panic(fmt.Sprintf("Unable to deepcopy SparseAuthSettings: %s", err))
	}

	*out = *target.(*SparseAuthSettings)
}

type mongoAttributesAuthSettings struct {
}
type mongoAttributesSparseAuthSettings struct {
}
