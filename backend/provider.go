// Code generated by elegen. DO NOT EDIT.
// Source: go.acuvity.ai/elemental (templates/model.gotpl)

package api

import (
	"fmt"
	"time"

	"github.com/globalsign/mgo/bson"
	"github.com/mitchellh/copystructure"
	"go.acuvity.ai/elemental"
)

// ProviderCategoryValue represents the possible values for attribute "category".
type ProviderCategoryValue string

const (
	// ProviderCategoryApp represents the value App.
	ProviderCategoryApp ProviderCategoryValue = "App"

	// ProviderCategoryUser represents the value User.
	ProviderCategoryUser ProviderCategoryValue = "User"
)

// ProviderIdentity represents the Identity of the object.
var ProviderIdentity = elemental.Identity{
	Name:     "provider",
	Category: "providers",
	Package:  "lain",
	Private:  false,
}

// ProvidersList represents a list of Providers
type ProvidersList []*Provider

// Identity returns the identity of the objects in the list.
func (o ProvidersList) Identity() elemental.Identity {

	return ProviderIdentity
}

// Copy returns a pointer to a copy the ProvidersList.
func (o ProvidersList) Copy() elemental.Identifiables {

	out := append(ProvidersList{}, o...)
	return &out
}

// Append appends the objects to the a new copy of the ProvidersList.
func (o ProvidersList) Append(objects ...elemental.Identifiable) elemental.Identifiables {

	out := append(ProvidersList{}, o...)
	for _, obj := range objects {
		out = append(out, obj.(*Provider))
	}

	return out
}

// List converts the object to an elemental.IdentifiablesList.
func (o ProvidersList) List() elemental.IdentifiablesList {

	out := make(elemental.IdentifiablesList, len(o))
	for i := 0; i < len(o); i++ {
		out[i] = o[i]
	}

	return out
}

// DefaultOrder returns the default ordering fields of the content.
func (o ProvidersList) DefaultOrder() []string {

	return []string{}
}

// ToSparse returns the ProvidersList converted to SparseProvidersList.
// Objects in the list will only contain the given fields. No field means entire field set.
func (o ProvidersList) ToSparse(fields ...string) elemental.Identifiables {

	out := make(SparseProvidersList, len(o))
	for i := 0; i < len(o); i++ {
		out[i] = o[i].ToSparse(fields...).(*SparseProvider)
	}

	return out
}

// Version returns the version of the content.
func (o ProvidersList) Version() int {

	return 1
}

// Provider represents the model of a provider
type Provider struct {
	// ID is the identifier of the object.
	ID string `json:"ID,omitempty" msgpack:"ID,omitempty" bson:"-" mapstructure:"ID,omitempty"`

	// If enabled, run the analysis pipelines on the provider output. No policy will be
	// applied, but the response will be analyzed and classified.
	AnalyzeOutput bool `json:"analyzeOutput,omitempty" msgpack:"analyzeOutput,omitempty" bson:"analyzeoutput,omitempty" mapstructure:"analyzeOutput,omitempty"`

	// The category of the provider.
	Category ProviderCategoryValue `json:"category" msgpack:"category" bson:"category" mapstructure:"category,omitempty"`

	// Creation date of the object.
	CreateTime time.Time `json:"createTime" msgpack:"createTime" bson:"createtime" mapstructure:"createTime,omitempty"`

	// The description of the provider.
	Description string `json:"description" msgpack:"description" bson:"description" mapstructure:"description,omitempty"`

	// Use to transform an error before sending it back to the client.
	ErrorTransformer *ErrorTransformer `json:"errorTransformer" msgpack:"errorTransformer" bson:"errortransformer" mapstructure:"errorTransformer,omitempty"`

	// If true, consider this provider as experimental. It will require to use a custom
	// PAC Config to make it usable from the proxy.pac.
	Experimental bool `json:"experimental,omitempty" msgpack:"experimental,omitempty" bson:"experimental,omitempty" mapstructure:"experimental,omitempty"`

	// Friendly Name of the provider.
	FriendlyName string `json:"friendlyName" msgpack:"friendlyName" bson:"friendlyname" mapstructure:"friendlyName,omitempty"`

	// Hosts supported by the providers.
	Hosts []*Host `json:"hosts" msgpack:"hosts" bson:"hosts" mapstructure:"hosts,omitempty"`

	// The icon of the provider, base64 encoded.
	Icon string `json:"icon,omitempty" msgpack:"icon,omitempty" bson:"icon,omitempty" mapstructure:"icon,omitempty"`

	// The hash of the structure used to compare with new import version.
	ImportHash string `json:"importHash,omitempty" msgpack:"importHash,omitempty" bson:"importhash,omitempty" mapstructure:"importHash,omitempty"`

	// The user-defined import label that allows the system to group resources from the
	// same import operation.
	ImportLabel string `json:"importLabel,omitempty" msgpack:"importLabel,omitempty" bson:"importlabel,omitempty" mapstructure:"importLabel,omitempty"`

	// Defines injection point for javascript snippet.
	Injectors []*Injector `json:"injectors,omitempty" msgpack:"injectors,omitempty" bson:"injectors,omitempty" mapstructure:"injectors,omitempty"`

	// List of input extractors.
	InputExtractors []*Extractor `json:"inputExtractors,omitempty" msgpack:"inputExtractors,omitempty" bson:"inputextractors,omitempty" mapstructure:"inputExtractors,omitempty"`

	// List of user mappers.
	Mappers []*Mapper `json:"mappers,omitempty" msgpack:"mappers,omitempty" bson:"mappers,omitempty" mapstructure:"mappers,omitempty"`

	// Name of the provider.
	Name string `json:"name" msgpack:"name" bson:"name" mapstructure:"name,omitempty"`

	// The namespace of the object.
	Namespace string `json:"namespace,omitempty" msgpack:"namespace,omitempty" bson:"namespace,omitempty" mapstructure:"namespace,omitempty"`

	// List of output extractors.
	OutputExtractors []*Extractor `json:"outputExtractors,omitempty" msgpack:"outputExtractors,omitempty" bson:"outputextractors,omitempty" mapstructure:"outputExtractors,omitempty"`

	// Propagates the object to all child namespaces. This is always true.
	Propagate bool `json:"propagate" msgpack:"propagate" bson:"propagate" mapstructure:"propagate,omitempty"`

	// If true, consider the incoming calls to use an acuvity token and swap them using
	// registered providertokens.
	TokenSwap bool `json:"tokenSwap,omitempty" msgpack:"tokenSwap,omitempty" bson:"tokenswap,omitempty" mapstructure:"tokenSwap,omitempty"`

	// If set, additionally trust the Certificate Authorities from the PEM data. This
	// is useful when working on a custom provider using a self signed CA chain.
	TrustedCA string `json:"trustedCA,omitempty" msgpack:"trustedCA,omitempty" bson:"trustedca,omitempty" mapstructure:"trustedCA,omitempty"`

	// Last update date of the object.
	UpdateTime time.Time `json:"updateTime" msgpack:"updateTime" bson:"updatetime" mapstructure:"updateTime,omitempty"`

	// If enabled, force the ustream scheme to be HTTP instead of https. Mostly use for
	// dev purposes.
	UpstreamUnsecure bool `json:"upstreamUnsecure,omitempty" msgpack:"upstreamUnsecure,omitempty" bson:"upstreamunsecure,omitempty" mapstructure:"upstreamUnsecure,omitempty"`

	// Hash of the object used to shard the data.
	ZHash int `json:"-" msgpack:"-" bson:"zhash" mapstructure:"-,omitempty"`

	// Sharding zone.
	Zone int `json:"-" msgpack:"-" bson:"zone" mapstructure:"-,omitempty"`

	ModelVersion int `json:"-" msgpack:"-" bson:"_modelversion"`
}

// NewProvider returns a new *Provider
func NewProvider() *Provider {

	return &Provider{
		ModelVersion: 1,
		Hosts:        []*Host{},
		Propagate:    true,
	}
}

// Identity returns the Identity of the object.
func (o *Provider) Identity() elemental.Identity {

	return ProviderIdentity
}

// Identifier returns the value of the object's unique identifier.
func (o *Provider) Identifier() string {

	return o.ID
}

// SetIdentifier sets the value of the object's unique identifier.
func (o *Provider) SetIdentifier(id string) {

	o.ID = id
}

// GetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *Provider) GetBSON() (any, error) {

	if o == nil {
		return nil, nil
	}

	s := &mongoAttributesProvider{}

	if o.ID != "" {
		s.ID = bson.ObjectIdHex(o.ID)
	}
	s.AnalyzeOutput = o.AnalyzeOutput
	s.Category = o.Category
	s.CreateTime = o.CreateTime
	s.Description = o.Description
	s.ErrorTransformer = o.ErrorTransformer
	s.Experimental = o.Experimental
	s.FriendlyName = o.FriendlyName
	s.Hosts = o.Hosts
	s.Icon = o.Icon
	s.ImportHash = o.ImportHash
	s.ImportLabel = o.ImportLabel
	s.Injectors = o.Injectors
	s.InputExtractors = o.InputExtractors
	s.Mappers = o.Mappers
	s.Name = o.Name
	s.Namespace = o.Namespace
	s.OutputExtractors = o.OutputExtractors
	s.Propagate = o.Propagate
	s.TokenSwap = o.TokenSwap
	s.TrustedCA = o.TrustedCA
	s.UpdateTime = o.UpdateTime
	s.UpstreamUnsecure = o.UpstreamUnsecure
	s.ZHash = o.ZHash
	s.Zone = o.Zone

	return s, nil
}

// SetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *Provider) SetBSON(raw bson.Raw) error {

	if o == nil {
		return nil
	}

	s := &mongoAttributesProvider{}
	if err := raw.Unmarshal(s); err != nil {
		return err
	}

	o.ID = s.ID.Hex()
	o.AnalyzeOutput = s.AnalyzeOutput
	o.Category = s.Category
	o.CreateTime = s.CreateTime
	o.Description = s.Description
	o.ErrorTransformer = s.ErrorTransformer
	o.Experimental = s.Experimental
	o.FriendlyName = s.FriendlyName
	o.Hosts = s.Hosts
	o.Icon = s.Icon
	o.ImportHash = s.ImportHash
	o.ImportLabel = s.ImportLabel
	o.Injectors = s.Injectors
	o.InputExtractors = s.InputExtractors
	o.Mappers = s.Mappers
	o.Name = s.Name
	o.Namespace = s.Namespace
	o.OutputExtractors = s.OutputExtractors
	o.Propagate = s.Propagate
	o.TokenSwap = s.TokenSwap
	o.TrustedCA = s.TrustedCA
	o.UpdateTime = s.UpdateTime
	o.UpstreamUnsecure = s.UpstreamUnsecure
	o.ZHash = s.ZHash
	o.Zone = s.Zone

	return nil
}

// Version returns the hardcoded version of the model.
func (o *Provider) Version() int {

	return 1
}

// BleveType implements the bleve.Classifier Interface.
func (o *Provider) BleveType() string {

	return "provider"
}

// DefaultOrder returns the list of default ordering fields.
func (o *Provider) DefaultOrder() []string {

	return []string{}
}

// Doc returns the documentation for the object
func (o *Provider) Doc() string {

	return `Providers are services that can be accessed using the APEX. These can
both be external services as well as internal services built/deployed within the
organization.`
}

func (o *Provider) String() string {

	return fmt.Sprintf("<%s:%s>", o.Identity().Name, o.Identifier())
}

// GetCreateTime returns the CreateTime of the receiver.
func (o *Provider) GetCreateTime() time.Time {

	return o.CreateTime
}

// SetCreateTime sets the property CreateTime of the receiver using the given value.
func (o *Provider) SetCreateTime(createTime time.Time) {

	o.CreateTime = createTime
}

// GetImportHash returns the ImportHash of the receiver.
func (o *Provider) GetImportHash() string {

	return o.ImportHash
}

// SetImportHash sets the property ImportHash of the receiver using the given value.
func (o *Provider) SetImportHash(importHash string) {

	o.ImportHash = importHash
}

// GetImportLabel returns the ImportLabel of the receiver.
func (o *Provider) GetImportLabel() string {

	return o.ImportLabel
}

// SetImportLabel sets the property ImportLabel of the receiver using the given value.
func (o *Provider) SetImportLabel(importLabel string) {

	o.ImportLabel = importLabel
}

// GetNamespace returns the Namespace of the receiver.
func (o *Provider) GetNamespace() string {

	return o.Namespace
}

// SetNamespace sets the property Namespace of the receiver using the given value.
func (o *Provider) SetNamespace(namespace string) {

	o.Namespace = namespace
}

// GetPropagate returns the Propagate of the receiver.
func (o *Provider) GetPropagate() bool {

	return o.Propagate
}

// SetPropagate sets the property Propagate of the receiver using the given value.
func (o *Provider) SetPropagate(propagate bool) {

	o.Propagate = propagate
}

// GetUpdateTime returns the UpdateTime of the receiver.
func (o *Provider) GetUpdateTime() time.Time {

	return o.UpdateTime
}

// SetUpdateTime sets the property UpdateTime of the receiver using the given value.
func (o *Provider) SetUpdateTime(updateTime time.Time) {

	o.UpdateTime = updateTime
}

// GetZHash returns the ZHash of the receiver.
func (o *Provider) GetZHash() int {

	return o.ZHash
}

// SetZHash sets the property ZHash of the receiver using the given value.
func (o *Provider) SetZHash(zHash int) {

	o.ZHash = zHash
}

// GetZone returns the Zone of the receiver.
func (o *Provider) GetZone() int {

	return o.Zone
}

// SetZone sets the property Zone of the receiver using the given value.
func (o *Provider) SetZone(zone int) {

	o.Zone = zone
}

// ToSparse returns the sparse version of the model.
// The returned object will only contain the given fields. No field means entire field set.
func (o *Provider) ToSparse(fields ...string) elemental.SparseIdentifiable {

	if len(fields) == 0 {
		// nolint: goimports
		return &SparseProvider{
			ID:               &o.ID,
			AnalyzeOutput:    &o.AnalyzeOutput,
			Category:         &o.Category,
			CreateTime:       &o.CreateTime,
			Description:      &o.Description,
			ErrorTransformer: o.ErrorTransformer,
			Experimental:     &o.Experimental,
			FriendlyName:     &o.FriendlyName,
			Hosts:            &o.Hosts,
			Icon:             &o.Icon,
			ImportHash:       &o.ImportHash,
			ImportLabel:      &o.ImportLabel,
			Injectors:        &o.Injectors,
			InputExtractors:  &o.InputExtractors,
			Mappers:          &o.Mappers,
			Name:             &o.Name,
			Namespace:        &o.Namespace,
			OutputExtractors: &o.OutputExtractors,
			Propagate:        &o.Propagate,
			TokenSwap:        &o.TokenSwap,
			TrustedCA:        &o.TrustedCA,
			UpdateTime:       &o.UpdateTime,
			UpstreamUnsecure: &o.UpstreamUnsecure,
			ZHash:            &o.ZHash,
			Zone:             &o.Zone,
		}
	}

	sp := &SparseProvider{}
	for _, f := range fields {
		switch f {
		case "ID":
			sp.ID = &(o.ID)
		case "analyzeOutput":
			sp.AnalyzeOutput = &(o.AnalyzeOutput)
		case "category":
			sp.Category = &(o.Category)
		case "createTime":
			sp.CreateTime = &(o.CreateTime)
		case "description":
			sp.Description = &(o.Description)
		case "errorTransformer":
			sp.ErrorTransformer = o.ErrorTransformer
		case "experimental":
			sp.Experimental = &(o.Experimental)
		case "friendlyName":
			sp.FriendlyName = &(o.FriendlyName)
		case "hosts":
			sp.Hosts = &(o.Hosts)
		case "icon":
			sp.Icon = &(o.Icon)
		case "importHash":
			sp.ImportHash = &(o.ImportHash)
		case "importLabel":
			sp.ImportLabel = &(o.ImportLabel)
		case "injectors":
			sp.Injectors = &(o.Injectors)
		case "inputExtractors":
			sp.InputExtractors = &(o.InputExtractors)
		case "mappers":
			sp.Mappers = &(o.Mappers)
		case "name":
			sp.Name = &(o.Name)
		case "namespace":
			sp.Namespace = &(o.Namespace)
		case "outputExtractors":
			sp.OutputExtractors = &(o.OutputExtractors)
		case "propagate":
			sp.Propagate = &(o.Propagate)
		case "tokenSwap":
			sp.TokenSwap = &(o.TokenSwap)
		case "trustedCA":
			sp.TrustedCA = &(o.TrustedCA)
		case "updateTime":
			sp.UpdateTime = &(o.UpdateTime)
		case "upstreamUnsecure":
			sp.UpstreamUnsecure = &(o.UpstreamUnsecure)
		case "zHash":
			sp.ZHash = &(o.ZHash)
		case "zone":
			sp.Zone = &(o.Zone)
		}
	}

	return sp
}

// Patch apply the non nil value of a *SparseProvider to the object.
func (o *Provider) Patch(sparse elemental.SparseIdentifiable) {
	if !sparse.Identity().IsEqual(o.Identity()) {
		panic("cannot patch from a parse with different identity")
	}

	so := sparse.(*SparseProvider)
	if so.ID != nil {
		o.ID = *so.ID
	}
	if so.AnalyzeOutput != nil {
		o.AnalyzeOutput = *so.AnalyzeOutput
	}
	if so.Category != nil {
		o.Category = *so.Category
	}
	if so.CreateTime != nil {
		o.CreateTime = *so.CreateTime
	}
	if so.Description != nil {
		o.Description = *so.Description
	}
	if so.ErrorTransformer != nil {
		o.ErrorTransformer = so.ErrorTransformer
	}
	if so.Experimental != nil {
		o.Experimental = *so.Experimental
	}
	if so.FriendlyName != nil {
		o.FriendlyName = *so.FriendlyName
	}
	if so.Hosts != nil {
		o.Hosts = *so.Hosts
	}
	if so.Icon != nil {
		o.Icon = *so.Icon
	}
	if so.ImportHash != nil {
		o.ImportHash = *so.ImportHash
	}
	if so.ImportLabel != nil {
		o.ImportLabel = *so.ImportLabel
	}
	if so.Injectors != nil {
		o.Injectors = *so.Injectors
	}
	if so.InputExtractors != nil {
		o.InputExtractors = *so.InputExtractors
	}
	if so.Mappers != nil {
		o.Mappers = *so.Mappers
	}
	if so.Name != nil {
		o.Name = *so.Name
	}
	if so.Namespace != nil {
		o.Namespace = *so.Namespace
	}
	if so.OutputExtractors != nil {
		o.OutputExtractors = *so.OutputExtractors
	}
	if so.Propagate != nil {
		o.Propagate = *so.Propagate
	}
	if so.TokenSwap != nil {
		o.TokenSwap = *so.TokenSwap
	}
	if so.TrustedCA != nil {
		o.TrustedCA = *so.TrustedCA
	}
	if so.UpdateTime != nil {
		o.UpdateTime = *so.UpdateTime
	}
	if so.UpstreamUnsecure != nil {
		o.UpstreamUnsecure = *so.UpstreamUnsecure
	}
	if so.ZHash != nil {
		o.ZHash = *so.ZHash
	}
	if so.Zone != nil {
		o.Zone = *so.Zone
	}
}

// DeepCopy returns a deep copy if the Provider.
func (o *Provider) DeepCopy() *Provider {

	if o == nil {
		return nil
	}

	out := &Provider{}
	o.DeepCopyInto(out)

	return out
}

// DeepCopyInto copies the receiver into the given *Provider.
func (o *Provider) DeepCopyInto(out *Provider) {

	target, err := copystructure.Copy(o)
	if err != nil {
		panic(fmt.Sprintf("Unable to deepcopy Provider: %s", err))
	}

	*out = *target.(*Provider)
}

// Validate valides the current information stored into the structure.
func (o *Provider) Validate() error {

	errors := elemental.Errors{}
	requiredErrors := elemental.Errors{}

	if err := elemental.ValidateRequiredString("category", string(o.Category)); err != nil {
		requiredErrors = requiredErrors.Append(err)
	}

	if err := elemental.ValidateStringInList("category", string(o.Category), []string{"User", "App"}, false); err != nil {
		errors = errors.Append(err)
	}

	if o.ErrorTransformer != nil {
		elemental.ResetDefaultForZeroValues(o.ErrorTransformer)
		if err := o.ErrorTransformer.Validate(); err != nil {
			errors = errors.Append(err)
		}
	}

	if err := elemental.ValidateRequiredString("friendlyName", o.FriendlyName); err != nil {
		requiredErrors = requiredErrors.Append(err)
	}

	for _, sub := range o.Hosts {
		if sub == nil {
			continue
		}
		elemental.ResetDefaultForZeroValues(sub)
		if err := sub.Validate(); err != nil {
			errors = errors.Append(err)
		}
	}

	for _, sub := range o.Injectors {
		if sub == nil {
			continue
		}
		elemental.ResetDefaultForZeroValues(sub)
		if err := sub.Validate(); err != nil {
			errors = errors.Append(err)
		}
	}

	for _, sub := range o.InputExtractors {
		if sub == nil {
			continue
		}
		elemental.ResetDefaultForZeroValues(sub)
		if err := sub.Validate(); err != nil {
			errors = errors.Append(err)
		}
	}

	for _, sub := range o.Mappers {
		if sub == nil {
			continue
		}
		elemental.ResetDefaultForZeroValues(sub)
		if err := sub.Validate(); err != nil {
			errors = errors.Append(err)
		}
	}

	if err := elemental.ValidateRequiredString("name", o.Name); err != nil {
		requiredErrors = requiredErrors.Append(err)
	}

	for _, sub := range o.OutputExtractors {
		if sub == nil {
			continue
		}
		elemental.ResetDefaultForZeroValues(sub)
		if err := sub.Validate(); err != nil {
			errors = errors.Append(err)
		}
	}

	if err := ValidatePEM("trustedCA", o.TrustedCA); err != nil {
		errors = errors.Append(err)
	}

	// Custom object validation.
	if err := ValidateProvider(o); err != nil {
		errors = errors.Append(err)
	}

	if len(requiredErrors) > 0 {
		return requiredErrors
	}

	if len(errors) > 0 {
		return errors
	}

	return nil
}

// SpecificationForAttribute returns the AttributeSpecification for the given attribute name key.
func (*Provider) SpecificationForAttribute(name string) elemental.AttributeSpecification {

	if v, ok := ProviderAttributesMap[name]; ok {
		return v
	}

	// We could not find it, so let's check on the lower case indexed spec map
	return ProviderLowerCaseAttributesMap[name]
}

// AttributeSpecifications returns the full attribute specifications map.
func (*Provider) AttributeSpecifications() map[string]elemental.AttributeSpecification {

	return ProviderAttributesMap
}

// ValueForAttribute returns the value for the given attribute.
// This is a very advanced function that you should not need but in some
// very specific use cases.
func (o *Provider) ValueForAttribute(name string) any {

	switch name {
	case "ID":
		return o.ID
	case "analyzeOutput":
		return o.AnalyzeOutput
	case "category":
		return o.Category
	case "createTime":
		return o.CreateTime
	case "description":
		return o.Description
	case "errorTransformer":
		return o.ErrorTransformer
	case "experimental":
		return o.Experimental
	case "friendlyName":
		return o.FriendlyName
	case "hosts":
		return o.Hosts
	case "icon":
		return o.Icon
	case "importHash":
		return o.ImportHash
	case "importLabel":
		return o.ImportLabel
	case "injectors":
		return o.Injectors
	case "inputExtractors":
		return o.InputExtractors
	case "mappers":
		return o.Mappers
	case "name":
		return o.Name
	case "namespace":
		return o.Namespace
	case "outputExtractors":
		return o.OutputExtractors
	case "propagate":
		return o.Propagate
	case "tokenSwap":
		return o.TokenSwap
	case "trustedCA":
		return o.TrustedCA
	case "updateTime":
		return o.UpdateTime
	case "upstreamUnsecure":
		return o.UpstreamUnsecure
	case "zHash":
		return o.ZHash
	case "zone":
		return o.Zone
	}

	return nil
}

// ProviderAttributesMap represents the map of attribute for Provider.
var ProviderAttributesMap = map[string]elemental.AttributeSpecification{
	"ID": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "_id",
		ConvertedName:  "ID",
		Description:    `ID is the identifier of the object.`,
		Exposed:        true,
		Filterable:     true,
		Identifier:     true,
		Name:           "ID",
		Orderable:      true,
		ReadOnly:       true,
		Stored:         true,
		Type:           "string",
	},
	"AnalyzeOutput": {
		AllowedChoices: []string{},
		BSONFieldName:  "analyzeoutput",
		ConvertedName:  "AnalyzeOutput",
		Description: `If enabled, run the analysis pipelines on the provider output. No policy will be
applied, but the response will be analyzed and classified.`,
		Exposed: true,
		Name:    "analyzeOutput",
		Stored:  true,
		Type:    "boolean",
	},
	"Category": {
		AllowedChoices: []string{"User", "App"},
		BSONFieldName:  "category",
		ConvertedName:  "Category",
		Description:    `The category of the provider.`,
		Exposed:        true,
		Name:           "category",
		Required:       true,
		Stored:         true,
		SubType:        "string",
		Type:           "enum",
	},
	"CreateTime": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "createtime",
		ConvertedName:  "CreateTime",
		Description:    `Creation date of the object.`,
		Exposed:        true,
		Getter:         true,
		Name:           "createTime",
		Orderable:      true,
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Type:           "time",
	},
	"Description": {
		AllowedChoices: []string{},
		BSONFieldName:  "description",
		ConvertedName:  "Description",
		Description:    `The description of the provider.`,
		Exposed:        true,
		Name:           "description",
		Stored:         true,
		Type:           "string",
	},
	"ErrorTransformer": {
		AllowedChoices: []string{},
		BSONFieldName:  "errortransformer",
		ConvertedName:  "ErrorTransformer",
		Description:    `Use to transform an error before sending it back to the client.`,
		Exposed:        true,
		Name:           "errorTransformer",
		Stored:         true,
		SubType:        "errortransformer",
		Type:           "ref",
	},
	"Experimental": {
		AllowedChoices: []string{},
		BSONFieldName:  "experimental",
		ConvertedName:  "Experimental",
		Description: `If true, consider this provider as experimental. It will require to use a custom
PAC Config to make it usable from the proxy.pac.`,
		Exposed: true,
		Name:    "experimental",
		Stored:  true,
		Type:    "boolean",
	},
	"FriendlyName": {
		AllowedChoices: []string{},
		BSONFieldName:  "friendlyname",
		ConvertedName:  "FriendlyName",
		Description:    `Friendly Name of the provider.`,
		Exposed:        true,
		Name:           "friendlyName",
		Required:       true,
		Stored:         true,
		Type:           "string",
	},
	"Hosts": {
		AllowedChoices: []string{},
		BSONFieldName:  "hosts",
		ConvertedName:  "Hosts",
		Description:    `Hosts supported by the providers.`,
		Exposed:        true,
		Name:           "hosts",
		Stored:         true,
		SubType:        "host",
		Type:           "refList",
	},
	"Icon": {
		AllowedChoices: []string{},
		BSONFieldName:  "icon",
		ConvertedName:  "Icon",
		Description:    `The icon of the provider, base64 encoded.`,
		Exposed:        true,
		Name:           "icon",
		Stored:         true,
		Type:           "string",
	},
	"ImportHash": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "importhash",
		ConvertedName:  "ImportHash",
		CreationOnly:   true,
		Description:    `The hash of the structure used to compare with new import version.`,
		Exposed:        true,
		Getter:         true,
		Name:           "importHash",
		Setter:         true,
		Stored:         true,
		Type:           "string",
	},
	"ImportLabel": {
		AllowedChoices: []string{},
		BSONFieldName:  "importlabel",
		ConvertedName:  "ImportLabel",
		CreationOnly:   true,
		Description: `The user-defined import label that allows the system to group resources from the
same import operation.`,
		Exposed: true,
		Getter:  true,
		Name:    "importLabel",
		Setter:  true,
		Stored:  true,
		Type:    "string",
	},
	"Injectors": {
		AllowedChoices: []string{},
		BSONFieldName:  "injectors",
		ConvertedName:  "Injectors",
		Description:    `Defines injection point for javascript snippet.`,
		Exposed:        true,
		Name:           "injectors",
		Stored:         true,
		SubType:        "injector",
		Type:           "refList",
	},
	"InputExtractors": {
		AllowedChoices: []string{},
		BSONFieldName:  "inputextractors",
		ConvertedName:  "InputExtractors",
		Description:    `List of input extractors.`,
		Exposed:        true,
		Name:           "inputExtractors",
		Stored:         true,
		SubType:        "extractor",
		Type:           "refList",
	},
	"Mappers": {
		AllowedChoices: []string{},
		BSONFieldName:  "mappers",
		ConvertedName:  "Mappers",
		Description:    `List of user mappers.`,
		Exposed:        true,
		Name:           "mappers",
		Stored:         true,
		SubType:        "mapper",
		Type:           "refList",
	},
	"Name": {
		AllowedChoices: []string{},
		BSONFieldName:  "name",
		ConvertedName:  "Name",
		Description:    `Name of the provider.`,
		Exposed:        true,
		Name:           "name",
		Required:       true,
		Stored:         true,
		Type:           "string",
	},
	"Namespace": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "namespace",
		ConvertedName:  "Namespace",
		Description:    `The namespace of the object.`,
		Exposed:        true,
		Getter:         true,
		Name:           "namespace",
		Orderable:      true,
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Type:           "string",
	},
	"OutputExtractors": {
		AllowedChoices: []string{},
		BSONFieldName:  "outputextractors",
		ConvertedName:  "OutputExtractors",
		Description:    `List of output extractors.`,
		Exposed:        true,
		Name:           "outputExtractors",
		Stored:         true,
		SubType:        "extractor",
		Type:           "refList",
	},
	"Propagate": {
		AllowedChoices: []string{},
		BSONFieldName:  "propagate",
		ConvertedName:  "Propagate",
		DefaultValue:   true,
		Description:    `Propagates the object to all child namespaces. This is always true.`,
		Exposed:        true,
		Getter:         true,
		Name:           "propagate",
		Setter:         true,
		Stored:         true,
		Type:           "boolean",
	},
	"TokenSwap": {
		AllowedChoices: []string{},
		BSONFieldName:  "tokenswap",
		ConvertedName:  "TokenSwap",
		Description: `If true, consider the incoming calls to use an acuvity token and swap them using
registered providertokens.`,
		Exposed: true,
		Name:    "tokenSwap",
		Stored:  true,
		Type:    "boolean",
	},
	"TrustedCA": {
		AllowedChoices: []string{},
		BSONFieldName:  "trustedca",
		ConvertedName:  "TrustedCA",
		Description: `If set, additionally trust the Certificate Authorities from the PEM data. This
is useful when working on a custom provider using a self signed CA chain.`,
		Exposed: true,
		Name:    "trustedCA",
		Stored:  true,
		Type:    "string",
	},
	"UpdateTime": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "updatetime",
		ConvertedName:  "UpdateTime",
		Description:    `Last update date of the object.`,
		Exposed:        true,
		Getter:         true,
		Name:           "updateTime",
		Orderable:      true,
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Type:           "time",
	},
	"UpstreamUnsecure": {
		AllowedChoices: []string{},
		BSONFieldName:  "upstreamunsecure",
		ConvertedName:  "UpstreamUnsecure",
		Description: `If enabled, force the ustream scheme to be HTTP instead of https. Mostly use for
dev purposes.`,
		Exposed: true,
		Name:    "upstreamUnsecure",
		Stored:  true,
		Type:    "boolean",
	},
	"ZHash": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "zhash",
		ConvertedName:  "ZHash",
		Description:    `Hash of the object used to shard the data.`,
		Getter:         true,
		Name:           "zHash",
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Type:           "integer",
	},
	"Zone": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "zone",
		ConvertedName:  "Zone",
		Description:    `Sharding zone.`,
		Getter:         true,
		Name:           "zone",
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Transient:      true,
		Type:           "integer",
	},
}

// ProviderLowerCaseAttributesMap represents the map of attribute for Provider.
var ProviderLowerCaseAttributesMap = map[string]elemental.AttributeSpecification{
	"id": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "_id",
		ConvertedName:  "ID",
		Description:    `ID is the identifier of the object.`,
		Exposed:        true,
		Filterable:     true,
		Identifier:     true,
		Name:           "ID",
		Orderable:      true,
		ReadOnly:       true,
		Stored:         true,
		Type:           "string",
	},
	"analyzeoutput": {
		AllowedChoices: []string{},
		BSONFieldName:  "analyzeoutput",
		ConvertedName:  "AnalyzeOutput",
		Description: `If enabled, run the analysis pipelines on the provider output. No policy will be
applied, but the response will be analyzed and classified.`,
		Exposed: true,
		Name:    "analyzeOutput",
		Stored:  true,
		Type:    "boolean",
	},
	"category": {
		AllowedChoices: []string{"User", "App"},
		BSONFieldName:  "category",
		ConvertedName:  "Category",
		Description:    `The category of the provider.`,
		Exposed:        true,
		Name:           "category",
		Required:       true,
		Stored:         true,
		SubType:        "string",
		Type:           "enum",
	},
	"createtime": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "createtime",
		ConvertedName:  "CreateTime",
		Description:    `Creation date of the object.`,
		Exposed:        true,
		Getter:         true,
		Name:           "createTime",
		Orderable:      true,
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Type:           "time",
	},
	"description": {
		AllowedChoices: []string{},
		BSONFieldName:  "description",
		ConvertedName:  "Description",
		Description:    `The description of the provider.`,
		Exposed:        true,
		Name:           "description",
		Stored:         true,
		Type:           "string",
	},
	"errortransformer": {
		AllowedChoices: []string{},
		BSONFieldName:  "errortransformer",
		ConvertedName:  "ErrorTransformer",
		Description:    `Use to transform an error before sending it back to the client.`,
		Exposed:        true,
		Name:           "errorTransformer",
		Stored:         true,
		SubType:        "errortransformer",
		Type:           "ref",
	},
	"experimental": {
		AllowedChoices: []string{},
		BSONFieldName:  "experimental",
		ConvertedName:  "Experimental",
		Description: `If true, consider this provider as experimental. It will require to use a custom
PAC Config to make it usable from the proxy.pac.`,
		Exposed: true,
		Name:    "experimental",
		Stored:  true,
		Type:    "boolean",
	},
	"friendlyname": {
		AllowedChoices: []string{},
		BSONFieldName:  "friendlyname",
		ConvertedName:  "FriendlyName",
		Description:    `Friendly Name of the provider.`,
		Exposed:        true,
		Name:           "friendlyName",
		Required:       true,
		Stored:         true,
		Type:           "string",
	},
	"hosts": {
		AllowedChoices: []string{},
		BSONFieldName:  "hosts",
		ConvertedName:  "Hosts",
		Description:    `Hosts supported by the providers.`,
		Exposed:        true,
		Name:           "hosts",
		Stored:         true,
		SubType:        "host",
		Type:           "refList",
	},
	"icon": {
		AllowedChoices: []string{},
		BSONFieldName:  "icon",
		ConvertedName:  "Icon",
		Description:    `The icon of the provider, base64 encoded.`,
		Exposed:        true,
		Name:           "icon",
		Stored:         true,
		Type:           "string",
	},
	"importhash": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "importhash",
		ConvertedName:  "ImportHash",
		CreationOnly:   true,
		Description:    `The hash of the structure used to compare with new import version.`,
		Exposed:        true,
		Getter:         true,
		Name:           "importHash",
		Setter:         true,
		Stored:         true,
		Type:           "string",
	},
	"importlabel": {
		AllowedChoices: []string{},
		BSONFieldName:  "importlabel",
		ConvertedName:  "ImportLabel",
		CreationOnly:   true,
		Description: `The user-defined import label that allows the system to group resources from the
same import operation.`,
		Exposed: true,
		Getter:  true,
		Name:    "importLabel",
		Setter:  true,
		Stored:  true,
		Type:    "string",
	},
	"injectors": {
		AllowedChoices: []string{},
		BSONFieldName:  "injectors",
		ConvertedName:  "Injectors",
		Description:    `Defines injection point for javascript snippet.`,
		Exposed:        true,
		Name:           "injectors",
		Stored:         true,
		SubType:        "injector",
		Type:           "refList",
	},
	"inputextractors": {
		AllowedChoices: []string{},
		BSONFieldName:  "inputextractors",
		ConvertedName:  "InputExtractors",
		Description:    `List of input extractors.`,
		Exposed:        true,
		Name:           "inputExtractors",
		Stored:         true,
		SubType:        "extractor",
		Type:           "refList",
	},
	"mappers": {
		AllowedChoices: []string{},
		BSONFieldName:  "mappers",
		ConvertedName:  "Mappers",
		Description:    `List of user mappers.`,
		Exposed:        true,
		Name:           "mappers",
		Stored:         true,
		SubType:        "mapper",
		Type:           "refList",
	},
	"name": {
		AllowedChoices: []string{},
		BSONFieldName:  "name",
		ConvertedName:  "Name",
		Description:    `Name of the provider.`,
		Exposed:        true,
		Name:           "name",
		Required:       true,
		Stored:         true,
		Type:           "string",
	},
	"namespace": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "namespace",
		ConvertedName:  "Namespace",
		Description:    `The namespace of the object.`,
		Exposed:        true,
		Getter:         true,
		Name:           "namespace",
		Orderable:      true,
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Type:           "string",
	},
	"outputextractors": {
		AllowedChoices: []string{},
		BSONFieldName:  "outputextractors",
		ConvertedName:  "OutputExtractors",
		Description:    `List of output extractors.`,
		Exposed:        true,
		Name:           "outputExtractors",
		Stored:         true,
		SubType:        "extractor",
		Type:           "refList",
	},
	"propagate": {
		AllowedChoices: []string{},
		BSONFieldName:  "propagate",
		ConvertedName:  "Propagate",
		DefaultValue:   true,
		Description:    `Propagates the object to all child namespaces. This is always true.`,
		Exposed:        true,
		Getter:         true,
		Name:           "propagate",
		Setter:         true,
		Stored:         true,
		Type:           "boolean",
	},
	"tokenswap": {
		AllowedChoices: []string{},
		BSONFieldName:  "tokenswap",
		ConvertedName:  "TokenSwap",
		Description: `If true, consider the incoming calls to use an acuvity token and swap them using
registered providertokens.`,
		Exposed: true,
		Name:    "tokenSwap",
		Stored:  true,
		Type:    "boolean",
	},
	"trustedca": {
		AllowedChoices: []string{},
		BSONFieldName:  "trustedca",
		ConvertedName:  "TrustedCA",
		Description: `If set, additionally trust the Certificate Authorities from the PEM data. This
is useful when working on a custom provider using a self signed CA chain.`,
		Exposed: true,
		Name:    "trustedCA",
		Stored:  true,
		Type:    "string",
	},
	"updatetime": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "updatetime",
		ConvertedName:  "UpdateTime",
		Description:    `Last update date of the object.`,
		Exposed:        true,
		Getter:         true,
		Name:           "updateTime",
		Orderable:      true,
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Type:           "time",
	},
	"upstreamunsecure": {
		AllowedChoices: []string{},
		BSONFieldName:  "upstreamunsecure",
		ConvertedName:  "UpstreamUnsecure",
		Description: `If enabled, force the ustream scheme to be HTTP instead of https. Mostly use for
dev purposes.`,
		Exposed: true,
		Name:    "upstreamUnsecure",
		Stored:  true,
		Type:    "boolean",
	},
	"zhash": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "zhash",
		ConvertedName:  "ZHash",
		Description:    `Hash of the object used to shard the data.`,
		Getter:         true,
		Name:           "zHash",
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Type:           "integer",
	},
	"zone": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "zone",
		ConvertedName:  "Zone",
		Description:    `Sharding zone.`,
		Getter:         true,
		Name:           "zone",
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Transient:      true,
		Type:           "integer",
	},
}

// SparseProvidersList represents a list of SparseProviders
type SparseProvidersList []*SparseProvider

// Identity returns the identity of the objects in the list.
func (o SparseProvidersList) Identity() elemental.Identity {

	return ProviderIdentity
}

// Copy returns a pointer to a copy the SparseProvidersList.
func (o SparseProvidersList) Copy() elemental.Identifiables {

	copy := append(SparseProvidersList{}, o...)
	return &copy
}

// Append appends the objects to the a new copy of the SparseProvidersList.
func (o SparseProvidersList) Append(objects ...elemental.Identifiable) elemental.Identifiables {

	out := append(SparseProvidersList{}, o...)
	for _, obj := range objects {
		out = append(out, obj.(*SparseProvider))
	}

	return out
}

// List converts the object to an elemental.IdentifiablesList.
func (o SparseProvidersList) List() elemental.IdentifiablesList {

	out := make(elemental.IdentifiablesList, len(o))
	for i := 0; i < len(o); i++ {
		out[i] = o[i]
	}

	return out
}

// DefaultOrder returns the default ordering fields of the content.
func (o SparseProvidersList) DefaultOrder() []string {

	return []string{}
}

// ToPlain returns the SparseProvidersList converted to ProvidersList.
func (o SparseProvidersList) ToPlain() elemental.IdentifiablesList {

	out := make(elemental.IdentifiablesList, len(o))
	for i := 0; i < len(o); i++ {
		out[i] = o[i].ToPlain()
	}

	return out
}

// Version returns the version of the content.
func (o SparseProvidersList) Version() int {

	return 1
}

// SparseProvider represents the sparse version of a provider.
type SparseProvider struct {
	// ID is the identifier of the object.
	ID *string `json:"ID,omitempty" msgpack:"ID,omitempty" bson:"-" mapstructure:"ID,omitempty"`

	// If enabled, run the analysis pipelines on the provider output. No policy will be
	// applied, but the response will be analyzed and classified.
	AnalyzeOutput *bool `json:"analyzeOutput,omitempty" msgpack:"analyzeOutput,omitempty" bson:"analyzeoutput,omitempty" mapstructure:"analyzeOutput,omitempty"`

	// The category of the provider.
	Category *ProviderCategoryValue `json:"category,omitempty" msgpack:"category,omitempty" bson:"category,omitempty" mapstructure:"category,omitempty"`

	// Creation date of the object.
	CreateTime *time.Time `json:"createTime,omitempty" msgpack:"createTime,omitempty" bson:"createtime,omitempty" mapstructure:"createTime,omitempty"`

	// The description of the provider.
	Description *string `json:"description,omitempty" msgpack:"description,omitempty" bson:"description,omitempty" mapstructure:"description,omitempty"`

	// Use to transform an error before sending it back to the client.
	ErrorTransformer *ErrorTransformer `json:"errorTransformer,omitempty" msgpack:"errorTransformer,omitempty" bson:"errortransformer,omitempty" mapstructure:"errorTransformer,omitempty"`

	// If true, consider this provider as experimental. It will require to use a custom
	// PAC Config to make it usable from the proxy.pac.
	Experimental *bool `json:"experimental,omitempty" msgpack:"experimental,omitempty" bson:"experimental,omitempty" mapstructure:"experimental,omitempty"`

	// Friendly Name of the provider.
	FriendlyName *string `json:"friendlyName,omitempty" msgpack:"friendlyName,omitempty" bson:"friendlyname,omitempty" mapstructure:"friendlyName,omitempty"`

	// Hosts supported by the providers.
	Hosts *[]*Host `json:"hosts,omitempty" msgpack:"hosts,omitempty" bson:"hosts,omitempty" mapstructure:"hosts,omitempty"`

	// The icon of the provider, base64 encoded.
	Icon *string `json:"icon,omitempty" msgpack:"icon,omitempty" bson:"icon,omitempty" mapstructure:"icon,omitempty"`

	// The hash of the structure used to compare with new import version.
	ImportHash *string `json:"importHash,omitempty" msgpack:"importHash,omitempty" bson:"importhash,omitempty" mapstructure:"importHash,omitempty"`

	// The user-defined import label that allows the system to group resources from the
	// same import operation.
	ImportLabel *string `json:"importLabel,omitempty" msgpack:"importLabel,omitempty" bson:"importlabel,omitempty" mapstructure:"importLabel,omitempty"`

	// Defines injection point for javascript snippet.
	Injectors *[]*Injector `json:"injectors,omitempty" msgpack:"injectors,omitempty" bson:"injectors,omitempty" mapstructure:"injectors,omitempty"`

	// List of input extractors.
	InputExtractors *[]*Extractor `json:"inputExtractors,omitempty" msgpack:"inputExtractors,omitempty" bson:"inputextractors,omitempty" mapstructure:"inputExtractors,omitempty"`

	// List of user mappers.
	Mappers *[]*Mapper `json:"mappers,omitempty" msgpack:"mappers,omitempty" bson:"mappers,omitempty" mapstructure:"mappers,omitempty"`

	// Name of the provider.
	Name *string `json:"name,omitempty" msgpack:"name,omitempty" bson:"name,omitempty" mapstructure:"name,omitempty"`

	// The namespace of the object.
	Namespace *string `json:"namespace,omitempty" msgpack:"namespace,omitempty" bson:"namespace,omitempty" mapstructure:"namespace,omitempty"`

	// List of output extractors.
	OutputExtractors *[]*Extractor `json:"outputExtractors,omitempty" msgpack:"outputExtractors,omitempty" bson:"outputextractors,omitempty" mapstructure:"outputExtractors,omitempty"`

	// Propagates the object to all child namespaces. This is always true.
	Propagate *bool `json:"propagate,omitempty" msgpack:"propagate,omitempty" bson:"propagate,omitempty" mapstructure:"propagate,omitempty"`

	// If true, consider the incoming calls to use an acuvity token and swap them using
	// registered providertokens.
	TokenSwap *bool `json:"tokenSwap,omitempty" msgpack:"tokenSwap,omitempty" bson:"tokenswap,omitempty" mapstructure:"tokenSwap,omitempty"`

	// If set, additionally trust the Certificate Authorities from the PEM data. This
	// is useful when working on a custom provider using a self signed CA chain.
	TrustedCA *string `json:"trustedCA,omitempty" msgpack:"trustedCA,omitempty" bson:"trustedca,omitempty" mapstructure:"trustedCA,omitempty"`

	// Last update date of the object.
	UpdateTime *time.Time `json:"updateTime,omitempty" msgpack:"updateTime,omitempty" bson:"updatetime,omitempty" mapstructure:"updateTime,omitempty"`

	// If enabled, force the ustream scheme to be HTTP instead of https. Mostly use for
	// dev purposes.
	UpstreamUnsecure *bool `json:"upstreamUnsecure,omitempty" msgpack:"upstreamUnsecure,omitempty" bson:"upstreamunsecure,omitempty" mapstructure:"upstreamUnsecure,omitempty"`

	// Hash of the object used to shard the data.
	ZHash *int `json:"-" msgpack:"-" bson:"zhash,omitempty" mapstructure:"-,omitempty"`

	// Sharding zone.
	Zone *int `json:"-" msgpack:"-" bson:"zone,omitempty" mapstructure:"-,omitempty"`

	ModelVersion int `json:"-" msgpack:"-" bson:"_modelversion"`
}

// NewSparseProvider returns a new  SparseProvider.
func NewSparseProvider() *SparseProvider {
	return &SparseProvider{}
}

// Identity returns the Identity of the sparse object.
func (o *SparseProvider) Identity() elemental.Identity {

	return ProviderIdentity
}

// Identifier returns the value of the sparse object's unique identifier.
func (o *SparseProvider) Identifier() string {

	if o.ID == nil {
		return ""
	}
	return *o.ID
}

// SetIdentifier sets the value of the sparse object's unique identifier.
func (o *SparseProvider) SetIdentifier(id string) {

	if id != "" {
		o.ID = &id
	} else {
		o.ID = nil
	}
}

// GetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *SparseProvider) GetBSON() (any, error) {

	if o == nil {
		return nil, nil
	}

	s := &mongoAttributesSparseProvider{}

	if o.ID != nil {
		s.ID = bson.ObjectIdHex(*o.ID)
	}
	if o.AnalyzeOutput != nil {
		s.AnalyzeOutput = o.AnalyzeOutput
	}
	if o.Category != nil {
		s.Category = o.Category
	}
	if o.CreateTime != nil {
		s.CreateTime = o.CreateTime
	}
	if o.Description != nil {
		s.Description = o.Description
	}
	if o.ErrorTransformer != nil {
		s.ErrorTransformer = o.ErrorTransformer
	}
	if o.Experimental != nil {
		s.Experimental = o.Experimental
	}
	if o.FriendlyName != nil {
		s.FriendlyName = o.FriendlyName
	}
	if o.Hosts != nil {
		s.Hosts = o.Hosts
	}
	if o.Icon != nil {
		s.Icon = o.Icon
	}
	if o.ImportHash != nil {
		s.ImportHash = o.ImportHash
	}
	if o.ImportLabel != nil {
		s.ImportLabel = o.ImportLabel
	}
	if o.Injectors != nil {
		s.Injectors = o.Injectors
	}
	if o.InputExtractors != nil {
		s.InputExtractors = o.InputExtractors
	}
	if o.Mappers != nil {
		s.Mappers = o.Mappers
	}
	if o.Name != nil {
		s.Name = o.Name
	}
	if o.Namespace != nil {
		s.Namespace = o.Namespace
	}
	if o.OutputExtractors != nil {
		s.OutputExtractors = o.OutputExtractors
	}
	if o.Propagate != nil {
		s.Propagate = o.Propagate
	}
	if o.TokenSwap != nil {
		s.TokenSwap = o.TokenSwap
	}
	if o.TrustedCA != nil {
		s.TrustedCA = o.TrustedCA
	}
	if o.UpdateTime != nil {
		s.UpdateTime = o.UpdateTime
	}
	if o.UpstreamUnsecure != nil {
		s.UpstreamUnsecure = o.UpstreamUnsecure
	}
	if o.ZHash != nil {
		s.ZHash = o.ZHash
	}
	if o.Zone != nil {
		s.Zone = o.Zone
	}

	return s, nil
}

// SetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *SparseProvider) SetBSON(raw bson.Raw) error {

	if o == nil {
		return nil
	}

	s := &mongoAttributesSparseProvider{}
	if err := raw.Unmarshal(s); err != nil {
		return err
	}

	id := s.ID.Hex()
	o.ID = &id
	if s.AnalyzeOutput != nil {
		o.AnalyzeOutput = s.AnalyzeOutput
	}
	if s.Category != nil {
		o.Category = s.Category
	}
	if s.CreateTime != nil {
		o.CreateTime = s.CreateTime
	}
	if s.Description != nil {
		o.Description = s.Description
	}
	if s.ErrorTransformer != nil {
		o.ErrorTransformer = s.ErrorTransformer
	}
	if s.Experimental != nil {
		o.Experimental = s.Experimental
	}
	if s.FriendlyName != nil {
		o.FriendlyName = s.FriendlyName
	}
	if s.Hosts != nil {
		o.Hosts = s.Hosts
	}
	if s.Icon != nil {
		o.Icon = s.Icon
	}
	if s.ImportHash != nil {
		o.ImportHash = s.ImportHash
	}
	if s.ImportLabel != nil {
		o.ImportLabel = s.ImportLabel
	}
	if s.Injectors != nil {
		o.Injectors = s.Injectors
	}
	if s.InputExtractors != nil {
		o.InputExtractors = s.InputExtractors
	}
	if s.Mappers != nil {
		o.Mappers = s.Mappers
	}
	if s.Name != nil {
		o.Name = s.Name
	}
	if s.Namespace != nil {
		o.Namespace = s.Namespace
	}
	if s.OutputExtractors != nil {
		o.OutputExtractors = s.OutputExtractors
	}
	if s.Propagate != nil {
		o.Propagate = s.Propagate
	}
	if s.TokenSwap != nil {
		o.TokenSwap = s.TokenSwap
	}
	if s.TrustedCA != nil {
		o.TrustedCA = s.TrustedCA
	}
	if s.UpdateTime != nil {
		o.UpdateTime = s.UpdateTime
	}
	if s.UpstreamUnsecure != nil {
		o.UpstreamUnsecure = s.UpstreamUnsecure
	}
	if s.ZHash != nil {
		o.ZHash = s.ZHash
	}
	if s.Zone != nil {
		o.Zone = s.Zone
	}

	return nil
}

// Version returns the hardcoded version of the model.
func (o *SparseProvider) Version() int {

	return 1
}

// ToPlain returns the plain version of the sparse model.
func (o *SparseProvider) ToPlain() elemental.PlainIdentifiable {

	out := NewProvider()
	if o.ID != nil {
		out.ID = *o.ID
	}
	if o.AnalyzeOutput != nil {
		out.AnalyzeOutput = *o.AnalyzeOutput
	}
	if o.Category != nil {
		out.Category = *o.Category
	}
	if o.CreateTime != nil {
		out.CreateTime = *o.CreateTime
	}
	if o.Description != nil {
		out.Description = *o.Description
	}
	if o.ErrorTransformer != nil {
		out.ErrorTransformer = o.ErrorTransformer
	}
	if o.Experimental != nil {
		out.Experimental = *o.Experimental
	}
	if o.FriendlyName != nil {
		out.FriendlyName = *o.FriendlyName
	}
	if o.Hosts != nil {
		out.Hosts = *o.Hosts
	}
	if o.Icon != nil {
		out.Icon = *o.Icon
	}
	if o.ImportHash != nil {
		out.ImportHash = *o.ImportHash
	}
	if o.ImportLabel != nil {
		out.ImportLabel = *o.ImportLabel
	}
	if o.Injectors != nil {
		out.Injectors = *o.Injectors
	}
	if o.InputExtractors != nil {
		out.InputExtractors = *o.InputExtractors
	}
	if o.Mappers != nil {
		out.Mappers = *o.Mappers
	}
	if o.Name != nil {
		out.Name = *o.Name
	}
	if o.Namespace != nil {
		out.Namespace = *o.Namespace
	}
	if o.OutputExtractors != nil {
		out.OutputExtractors = *o.OutputExtractors
	}
	if o.Propagate != nil {
		out.Propagate = *o.Propagate
	}
	if o.TokenSwap != nil {
		out.TokenSwap = *o.TokenSwap
	}
	if o.TrustedCA != nil {
		out.TrustedCA = *o.TrustedCA
	}
	if o.UpdateTime != nil {
		out.UpdateTime = *o.UpdateTime
	}
	if o.UpstreamUnsecure != nil {
		out.UpstreamUnsecure = *o.UpstreamUnsecure
	}
	if o.ZHash != nil {
		out.ZHash = *o.ZHash
	}
	if o.Zone != nil {
		out.Zone = *o.Zone
	}

	return out
}

// GetCreateTime returns the CreateTime of the receiver.
func (o *SparseProvider) GetCreateTime() (out time.Time) {

	if o.CreateTime == nil {
		return
	}

	return *o.CreateTime
}

// SetCreateTime sets the property CreateTime of the receiver using the address of the given value.
func (o *SparseProvider) SetCreateTime(createTime time.Time) {

	o.CreateTime = &createTime
}

// GetImportHash returns the ImportHash of the receiver.
func (o *SparseProvider) GetImportHash() (out string) {

	if o.ImportHash == nil {
		return
	}

	return *o.ImportHash
}

// SetImportHash sets the property ImportHash of the receiver using the address of the given value.
func (o *SparseProvider) SetImportHash(importHash string) {

	o.ImportHash = &importHash
}

// GetImportLabel returns the ImportLabel of the receiver.
func (o *SparseProvider) GetImportLabel() (out string) {

	if o.ImportLabel == nil {
		return
	}

	return *o.ImportLabel
}

// SetImportLabel sets the property ImportLabel of the receiver using the address of the given value.
func (o *SparseProvider) SetImportLabel(importLabel string) {

	o.ImportLabel = &importLabel
}

// GetNamespace returns the Namespace of the receiver.
func (o *SparseProvider) GetNamespace() (out string) {

	if o.Namespace == nil {
		return
	}

	return *o.Namespace
}

// SetNamespace sets the property Namespace of the receiver using the address of the given value.
func (o *SparseProvider) SetNamespace(namespace string) {

	o.Namespace = &namespace
}

// GetPropagate returns the Propagate of the receiver.
func (o *SparseProvider) GetPropagate() (out bool) {

	if o.Propagate == nil {
		return
	}

	return *o.Propagate
}

// SetPropagate sets the property Propagate of the receiver using the address of the given value.
func (o *SparseProvider) SetPropagate(propagate bool) {

	o.Propagate = &propagate
}

// GetUpdateTime returns the UpdateTime of the receiver.
func (o *SparseProvider) GetUpdateTime() (out time.Time) {

	if o.UpdateTime == nil {
		return
	}

	return *o.UpdateTime
}

// SetUpdateTime sets the property UpdateTime of the receiver using the address of the given value.
func (o *SparseProvider) SetUpdateTime(updateTime time.Time) {

	o.UpdateTime = &updateTime
}

// GetZHash returns the ZHash of the receiver.
func (o *SparseProvider) GetZHash() (out int) {

	if o.ZHash == nil {
		return
	}

	return *o.ZHash
}

// SetZHash sets the property ZHash of the receiver using the address of the given value.
func (o *SparseProvider) SetZHash(zHash int) {

	o.ZHash = &zHash
}

// GetZone returns the Zone of the receiver.
func (o *SparseProvider) GetZone() (out int) {

	if o.Zone == nil {
		return
	}

	return *o.Zone
}

// SetZone sets the property Zone of the receiver using the address of the given value.
func (o *SparseProvider) SetZone(zone int) {

	o.Zone = &zone
}

// DeepCopy returns a deep copy if the SparseProvider.
func (o *SparseProvider) DeepCopy() *SparseProvider {

	if o == nil {
		return nil
	}

	out := &SparseProvider{}
	o.DeepCopyInto(out)

	return out
}

// DeepCopyInto copies the receiver into the given *SparseProvider.
func (o *SparseProvider) DeepCopyInto(out *SparseProvider) {

	target, err := copystructure.Copy(o)
	if err != nil {
		panic(fmt.Sprintf("Unable to deepcopy SparseProvider: %s", err))
	}

	*out = *target.(*SparseProvider)
}

type mongoAttributesProvider struct {
	ID               bson.ObjectId         `bson:"_id,omitempty"`
	AnalyzeOutput    bool                  `bson:"analyzeoutput,omitempty"`
	Category         ProviderCategoryValue `bson:"category"`
	CreateTime       time.Time             `bson:"createtime"`
	Description      string                `bson:"description"`
	ErrorTransformer *ErrorTransformer     `bson:"errortransformer"`
	Experimental     bool                  `bson:"experimental,omitempty"`
	FriendlyName     string                `bson:"friendlyname"`
	Hosts            []*Host               `bson:"hosts"`
	Icon             string                `bson:"icon,omitempty"`
	ImportHash       string                `bson:"importhash,omitempty"`
	ImportLabel      string                `bson:"importlabel,omitempty"`
	Injectors        []*Injector           `bson:"injectors,omitempty"`
	InputExtractors  []*Extractor          `bson:"inputextractors,omitempty"`
	Mappers          []*Mapper             `bson:"mappers,omitempty"`
	Name             string                `bson:"name"`
	Namespace        string                `bson:"namespace,omitempty"`
	OutputExtractors []*Extractor          `bson:"outputextractors,omitempty"`
	Propagate        bool                  `bson:"propagate"`
	TokenSwap        bool                  `bson:"tokenswap,omitempty"`
	TrustedCA        string                `bson:"trustedca,omitempty"`
	UpdateTime       time.Time             `bson:"updatetime"`
	UpstreamUnsecure bool                  `bson:"upstreamunsecure,omitempty"`
	ZHash            int                   `bson:"zhash"`
	Zone             int                   `bson:"zone"`
}
type mongoAttributesSparseProvider struct {
	ID               bson.ObjectId          `bson:"_id,omitempty"`
	AnalyzeOutput    *bool                  `bson:"analyzeoutput,omitempty"`
	Category         *ProviderCategoryValue `bson:"category,omitempty"`
	CreateTime       *time.Time             `bson:"createtime,omitempty"`
	Description      *string                `bson:"description,omitempty"`
	ErrorTransformer *ErrorTransformer      `bson:"errortransformer,omitempty"`
	Experimental     *bool                  `bson:"experimental,omitempty"`
	FriendlyName     *string                `bson:"friendlyname,omitempty"`
	Hosts            *[]*Host               `bson:"hosts,omitempty"`
	Icon             *string                `bson:"icon,omitempty"`
	ImportHash       *string                `bson:"importhash,omitempty"`
	ImportLabel      *string                `bson:"importlabel,omitempty"`
	Injectors        *[]*Injector           `bson:"injectors,omitempty"`
	InputExtractors  *[]*Extractor          `bson:"inputextractors,omitempty"`
	Mappers          *[]*Mapper             `bson:"mappers,omitempty"`
	Name             *string                `bson:"name,omitempty"`
	Namespace        *string                `bson:"namespace,omitempty"`
	OutputExtractors *[]*Extractor          `bson:"outputextractors,omitempty"`
	Propagate        *bool                  `bson:"propagate,omitempty"`
	TokenSwap        *bool                  `bson:"tokenswap,omitempty"`
	TrustedCA        *string                `bson:"trustedca,omitempty"`
	UpdateTime       *time.Time             `bson:"updatetime,omitempty"`
	UpstreamUnsecure *bool                  `bson:"upstreamunsecure,omitempty"`
	ZHash            *int                   `bson:"zhash,omitempty"`
	Zone             *int                   `bson:"zone,omitempty"`
}
