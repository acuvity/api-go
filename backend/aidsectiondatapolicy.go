// Code generated by elegen. DO NOT EDIT.
// Source: go.acuvity.ai/elemental (templates/model.gotpl)

package api

import (
	"fmt"

	"github.com/globalsign/mgo/bson"
	"github.com/mitchellh/copystructure"
	"go.acuvity.ai/elemental"
)

// AIDSectionDataPolicy represents the model of a aidsectiondatapolicy
type AIDSectionDataPolicy struct {
	// The citations used to compute the section.
	Citations []*AIDCitation `json:"citations,omitempty" msgpack:"citations,omitempty" bson:"citations,omitempty" mapstructure:"citations,omitempty"`

	// The description of the section.
	Description string `json:"description,omitempty" msgpack:"description,omitempty" bson:"description,omitempty" mapstructure:"description,omitempty"`

	// The name of the section.
	Name string `json:"name,omitempty" msgpack:"name,omitempty" bson:"name,omitempty" mapstructure:"name,omitempty"`

	// If true, the use data will be used to train models.
	Retention *AIDSection `json:"retention" msgpack:"retention" bson:"retention" mapstructure:"retention,omitempty"`

	// Data retention period in days.
	RetentionPeriod int `json:"retentionPeriod" msgpack:"retentionPeriod" bson:"retentionperiod" mapstructure:"retentionPeriod,omitempty"`

	// The risk associated to the section.
	Risk *AIDRisk `json:"risk,omitempty" msgpack:"risk,omitempty" bson:"risk,omitempty" mapstructure:"risk,omitempty"`

	// If true, the use data will be shared with 3rd-Party.
	Sharing *AIDSection `json:"sharing" msgpack:"sharing" bson:"sharing" mapstructure:"sharing,omitempty"`

	// If false, the provider shares data without user consent.
	SharingConsent bool `json:"sharingConsent" msgpack:"sharingConsent" bson:"sharingconsent" mapstructure:"sharingConsent,omitempty"`

	// If true, the use data will be used to train models.
	Training *AIDSection `json:"training" msgpack:"training" bson:"training" mapstructure:"training,omitempty"`

	// If false, the provider shares data without user consent.
	TrainingConsent bool `json:"trainingConsent" msgpack:"trainingConsent" bson:"trainingconsent" mapstructure:"trainingConsent,omitempty"`

	ModelVersion int `json:"-" msgpack:"-" bson:"_modelversion"`
}

// NewAIDSectionDataPolicy returns a new *AIDSectionDataPolicy
func NewAIDSectionDataPolicy() *AIDSectionDataPolicy {

	return &AIDSectionDataPolicy{
		ModelVersion: 1,
	}
}

// GetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *AIDSectionDataPolicy) GetBSON() (any, error) {

	if o == nil {
		return nil, nil
	}

	s := &mongoAttributesAIDSectionDataPolicy{}

	s.Citations = o.Citations
	s.Description = o.Description
	s.Name = o.Name
	s.Retention = o.Retention
	s.RetentionPeriod = o.RetentionPeriod
	s.Risk = o.Risk
	s.Sharing = o.Sharing
	s.SharingConsent = o.SharingConsent
	s.Training = o.Training
	s.TrainingConsent = o.TrainingConsent

	return s, nil
}

// SetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *AIDSectionDataPolicy) SetBSON(raw bson.Raw) error {

	if o == nil || raw.Kind == bson.ElementNil {
		return bson.ErrSetZero
	}

	s := &mongoAttributesAIDSectionDataPolicy{}
	if err := raw.Unmarshal(s); err != nil {
		return err
	}

	o.Citations = s.Citations
	o.Description = s.Description
	o.Name = s.Name
	o.Retention = s.Retention
	o.RetentionPeriod = s.RetentionPeriod
	o.Risk = s.Risk
	o.Sharing = s.Sharing
	o.SharingConsent = s.SharingConsent
	o.Training = s.Training
	o.TrainingConsent = s.TrainingConsent

	return nil
}

// BleveType implements the bleve.Classifier Interface.
func (o *AIDSectionDataPolicy) BleveType() string {

	return "aidsectiondatapolicy"
}

// DeepCopy returns a deep copy if the AIDSectionDataPolicy.
func (o *AIDSectionDataPolicy) DeepCopy() *AIDSectionDataPolicy {

	if o == nil {
		return nil
	}

	out := &AIDSectionDataPolicy{}
	o.DeepCopyInto(out)

	return out
}

// DeepCopyInto copies the receiver into the given *AIDSectionDataPolicy.
func (o *AIDSectionDataPolicy) DeepCopyInto(out *AIDSectionDataPolicy) {

	target, err := copystructure.Copy(o)
	if err != nil {
		panic(fmt.Sprintf("Unable to deepcopy AIDSectionDataPolicy: %s", err))
	}

	*out = *target.(*AIDSectionDataPolicy)
}

// Validate valides the current information stored into the structure.
func (o *AIDSectionDataPolicy) Validate() error {

	errors := elemental.Errors{}
	requiredErrors := elemental.Errors{}

	for _, sub := range o.Citations {
		if sub == nil {
			continue
		}
		elemental.ResetDefaultForZeroValues(sub)
		if err := sub.Validate(); err != nil {
			errors = errors.Append(err)
		}
	}

	if err := elemental.ValidateRequiredString("name", o.Name); err != nil {
		requiredErrors = requiredErrors.Append(err)
	}

	if o.Retention != nil {
		elemental.ResetDefaultForZeroValues(o.Retention)
		if err := o.Retention.Validate(); err != nil {
			errors = errors.Append(err)
		}
	}

	if o.Risk != nil {
		elemental.ResetDefaultForZeroValues(o.Risk)
		if err := o.Risk.Validate(); err != nil {
			errors = errors.Append(err)
		}
	}

	if o.Sharing != nil {
		elemental.ResetDefaultForZeroValues(o.Sharing)
		if err := o.Sharing.Validate(); err != nil {
			errors = errors.Append(err)
		}
	}

	if o.Training != nil {
		elemental.ResetDefaultForZeroValues(o.Training)
		if err := o.Training.Validate(); err != nil {
			errors = errors.Append(err)
		}
	}

	if len(requiredErrors) > 0 {
		return requiredErrors
	}

	if len(errors) > 0 {
		return errors
	}

	return nil
}

// SpecificationForAttribute returns the AttributeSpecification for the given attribute name key.
func (*AIDSectionDataPolicy) SpecificationForAttribute(name string) elemental.AttributeSpecification {

	if v, ok := AIDSectionDataPolicyAttributesMap[name]; ok {
		return v
	}

	// We could not find it, so let's check on the lower case indexed spec map
	return AIDSectionDataPolicyLowerCaseAttributesMap[name]
}

// AttributeSpecifications returns the full attribute specifications map.
func (*AIDSectionDataPolicy) AttributeSpecifications() map[string]elemental.AttributeSpecification {

	return AIDSectionDataPolicyAttributesMap
}

// ValueForAttribute returns the value for the given attribute.
// This is a very advanced function that you should not need but in some
// very specific use cases.
func (o *AIDSectionDataPolicy) ValueForAttribute(name string) any {

	switch name {
	case "citations":
		return o.Citations
	case "description":
		return o.Description
	case "name":
		return o.Name
	case "retention":
		return o.Retention
	case "retentionPeriod":
		return o.RetentionPeriod
	case "risk":
		return o.Risk
	case "sharing":
		return o.Sharing
	case "sharingConsent":
		return o.SharingConsent
	case "training":
		return o.Training
	case "trainingConsent":
		return o.TrainingConsent
	}

	return nil
}

// AIDSectionDataPolicyAttributesMap represents the map of attribute for AIDSectionDataPolicy.
var AIDSectionDataPolicyAttributesMap = map[string]elemental.AttributeSpecification{
	"Citations": {
		AllowedChoices: []string{},
		BSONFieldName:  "citations",
		ConvertedName:  "Citations",
		Description:    `The citations used to compute the section.`,
		Exposed:        true,
		Name:           "citations",
		Stored:         true,
		SubType:        "aidcitation",
		Type:           "refList",
	},
	"Description": {
		AllowedChoices: []string{},
		BSONFieldName:  "description",
		ConvertedName:  "Description",
		Description:    `The description of the section.`,
		Exposed:        true,
		Name:           "description",
		Stored:         true,
		Type:           "string",
	},
	"Name": {
		AllowedChoices: []string{},
		BSONFieldName:  "name",
		ConvertedName:  "Name",
		Description:    `The name of the section.`,
		Exposed:        true,
		Name:           "name",
		Required:       true,
		Stored:         true,
		Type:           "string",
	},
	"Retention": {
		AllowedChoices: []string{},
		BSONFieldName:  "retention",
		ConvertedName:  "Retention",
		Description:    `If true, the use data will be used to train models.`,
		Exposed:        true,
		Name:           "retention",
		Stored:         true,
		SubType:        "aidsection",
		Type:           "ref",
	},
	"RetentionPeriod": {
		AllowedChoices: []string{},
		BSONFieldName:  "retentionperiod",
		ConvertedName:  "RetentionPeriod",
		Description:    `Data retention period in days.`,
		Exposed:        true,
		Name:           "retentionPeriod",
		Stored:         true,
		Type:           "integer",
	},
	"Risk": {
		AllowedChoices: []string{},
		BSONFieldName:  "risk",
		ConvertedName:  "Risk",
		Description:    `The risk associated to the section.`,
		Exposed:        true,
		Name:           "risk",
		Stored:         true,
		SubType:        "aidrisk",
		Type:           "ref",
	},
	"Sharing": {
		AllowedChoices: []string{},
		BSONFieldName:  "sharing",
		ConvertedName:  "Sharing",
		Description:    `If true, the use data will be shared with 3rd-Party.`,
		Exposed:        true,
		Name:           "sharing",
		Stored:         true,
		SubType:        "aidsection",
		Type:           "ref",
	},
	"SharingConsent": {
		AllowedChoices: []string{},
		BSONFieldName:  "sharingconsent",
		ConvertedName:  "SharingConsent",
		Description:    `If false, the provider shares data without user consent.`,
		Exposed:        true,
		Name:           "sharingConsent",
		Stored:         true,
		Type:           "boolean",
	},
	"Training": {
		AllowedChoices: []string{},
		BSONFieldName:  "training",
		ConvertedName:  "Training",
		Description:    `If true, the use data will be used to train models.`,
		Exposed:        true,
		Name:           "training",
		Stored:         true,
		SubType:        "aidsection",
		Type:           "ref",
	},
	"TrainingConsent": {
		AllowedChoices: []string{},
		BSONFieldName:  "trainingconsent",
		ConvertedName:  "TrainingConsent",
		Description:    `If false, the provider shares data without user consent.`,
		Exposed:        true,
		Name:           "trainingConsent",
		Stored:         true,
		Type:           "boolean",
	},
}

// AIDSectionDataPolicyLowerCaseAttributesMap represents the map of attribute for AIDSectionDataPolicy.
var AIDSectionDataPolicyLowerCaseAttributesMap = map[string]elemental.AttributeSpecification{
	"citations": {
		AllowedChoices: []string{},
		BSONFieldName:  "citations",
		ConvertedName:  "Citations",
		Description:    `The citations used to compute the section.`,
		Exposed:        true,
		Name:           "citations",
		Stored:         true,
		SubType:        "aidcitation",
		Type:           "refList",
	},
	"description": {
		AllowedChoices: []string{},
		BSONFieldName:  "description",
		ConvertedName:  "Description",
		Description:    `The description of the section.`,
		Exposed:        true,
		Name:           "description",
		Stored:         true,
		Type:           "string",
	},
	"name": {
		AllowedChoices: []string{},
		BSONFieldName:  "name",
		ConvertedName:  "Name",
		Description:    `The name of the section.`,
		Exposed:        true,
		Name:           "name",
		Required:       true,
		Stored:         true,
		Type:           "string",
	},
	"retention": {
		AllowedChoices: []string{},
		BSONFieldName:  "retention",
		ConvertedName:  "Retention",
		Description:    `If true, the use data will be used to train models.`,
		Exposed:        true,
		Name:           "retention",
		Stored:         true,
		SubType:        "aidsection",
		Type:           "ref",
	},
	"retentionperiod": {
		AllowedChoices: []string{},
		BSONFieldName:  "retentionperiod",
		ConvertedName:  "RetentionPeriod",
		Description:    `Data retention period in days.`,
		Exposed:        true,
		Name:           "retentionPeriod",
		Stored:         true,
		Type:           "integer",
	},
	"risk": {
		AllowedChoices: []string{},
		BSONFieldName:  "risk",
		ConvertedName:  "Risk",
		Description:    `The risk associated to the section.`,
		Exposed:        true,
		Name:           "risk",
		Stored:         true,
		SubType:        "aidrisk",
		Type:           "ref",
	},
	"sharing": {
		AllowedChoices: []string{},
		BSONFieldName:  "sharing",
		ConvertedName:  "Sharing",
		Description:    `If true, the use data will be shared with 3rd-Party.`,
		Exposed:        true,
		Name:           "sharing",
		Stored:         true,
		SubType:        "aidsection",
		Type:           "ref",
	},
	"sharingconsent": {
		AllowedChoices: []string{},
		BSONFieldName:  "sharingconsent",
		ConvertedName:  "SharingConsent",
		Description:    `If false, the provider shares data without user consent.`,
		Exposed:        true,
		Name:           "sharingConsent",
		Stored:         true,
		Type:           "boolean",
	},
	"training": {
		AllowedChoices: []string{},
		BSONFieldName:  "training",
		ConvertedName:  "Training",
		Description:    `If true, the use data will be used to train models.`,
		Exposed:        true,
		Name:           "training",
		Stored:         true,
		SubType:        "aidsection",
		Type:           "ref",
	},
	"trainingconsent": {
		AllowedChoices: []string{},
		BSONFieldName:  "trainingconsent",
		ConvertedName:  "TrainingConsent",
		Description:    `If false, the provider shares data without user consent.`,
		Exposed:        true,
		Name:           "trainingConsent",
		Stored:         true,
		Type:           "boolean",
	},
}

type mongoAttributesAIDSectionDataPolicy struct {
	Citations       []*AIDCitation `bson:"citations,omitempty"`
	Description     string         `bson:"description,omitempty"`
	Name            string         `bson:"name,omitempty"`
	Retention       *AIDSection    `bson:"retention"`
	RetentionPeriod int            `bson:"retentionperiod"`
	Risk            *AIDRisk       `bson:"risk,omitempty"`
	Sharing         *AIDSection    `bson:"sharing"`
	SharingConsent  bool           `bson:"sharingconsent"`
	Training        *AIDSection    `bson:"training"`
	TrainingConsent bool           `bson:"trainingconsent"`
}
