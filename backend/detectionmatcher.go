// Code generated by elegen. DO NOT EDIT.
// Source: go.acuvity.ai/elemental (templates/model.gotpl)

package api

import (
	"fmt"

	"github.com/globalsign/mgo/bson"
	"github.com/mitchellh/copystructure"
	"go.acuvity.ai/elemental"
)

// DetectionMatcherConfidenceValue represents the possible values for attribute "confidence".
type DetectionMatcherConfidenceValue string

const (
	// DetectionMatcherConfidenceHigh represents the value High.
	DetectionMatcherConfidenceHigh DetectionMatcherConfidenceValue = "High"

	// DetectionMatcherConfidenceLow represents the value Low.
	DetectionMatcherConfidenceLow DetectionMatcherConfidenceValue = "Low"

	// DetectionMatcherConfidenceMedium represents the value Medium.
	DetectionMatcherConfidenceMedium DetectionMatcherConfidenceValue = "Medium"

	// DetectionMatcherConfidenceUnlikely represents the value Unlikely.
	DetectionMatcherConfidenceUnlikely DetectionMatcherConfidenceValue = "Unlikely"
)

// DetectionMatcherOperatorValue represents the possible values for attribute "operator".
type DetectionMatcherOperatorValue string

const (
	// DetectionMatcherOperatorIs represents the value Is.
	DetectionMatcherOperatorIs DetectionMatcherOperatorValue = "Is"

	// DetectionMatcherOperatorMax represents the value Max.
	DetectionMatcherOperatorMax DetectionMatcherOperatorValue = "Max"

	// DetectionMatcherOperatorMin represents the value Min.
	DetectionMatcherOperatorMin DetectionMatcherOperatorValue = "Min"
)

// DetectionMatcher represents the model of a detectionmatcher
type DetectionMatcher struct {
	// The detection confidence level to operate on.
	Confidence DetectionMatcherConfidenceValue `json:"confidence" msgpack:"confidence" bson:"-" mapstructure:"confidence,omitempty"`

	// The description of the detection matcher.
	Description string `json:"description" msgpack:"description" bson:"-" mapstructure:"description,omitempty"`

	// The group pattern used to match detection group. Supports glob-style wildcards
	// (e.g. 'Text*' matches 'Text', 'Text_'). Default value is '*' meaning matching
	// any
	// detection group.
	Group string `json:"group" msgpack:"group" bson:"-" mapstructure:"group,omitempty"`

	// The label pattern used to match detection label. Supports glob-style wildcards
	// (e.g. 'txt*' matches 'txt', 'txtuf8'). Default value is '*' meaning matching any
	// detection label.
	Label string `json:"label,omitempty" msgpack:"label,omitempty" bson:"-" mapstructure:"label,omitempty"`

	// The name pattern used to match detection name. Supports glob-style wildcards
	// (e.g. 'txt*' matches 'txt', 'txtuf8'). Default value is '*' meaning matching any
	// detection name.
	Name string `json:"name" msgpack:"name" bson:"-" mapstructure:"name,omitempty"`

	// Specifies how to compare the detection's confidence value against the matcher's
	// threshold:
	// - 'Is': All Detections confidence must exactly match the threshold
	// - 'Min': At least one detection confidence must be greater than or equal to the
	// threshold
	// - 'Max': At least one detection confidence must be less than the threshold
	// The default value is 'Min'.
	Operator DetectionMatcherOperatorValue `json:"operator" msgpack:"operator" bson:"-" mapstructure:"operator,omitempty"`

	ModelVersion int `json:"-" msgpack:"-" bson:"_modelversion"`
}

// NewDetectionMatcher returns a new *DetectionMatcher
func NewDetectionMatcher() *DetectionMatcher {

	return &DetectionMatcher{
		ModelVersion: 1,
		Confidence:   DetectionMatcherConfidenceLow,
		Group:        "*",
		Label:        "*",
		Name:         "*",
		Operator:     DetectionMatcherOperatorMin,
	}
}

// GetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *DetectionMatcher) GetBSON() (any, error) {

	if o == nil {
		return nil, nil
	}

	s := &mongoAttributesDetectionMatcher{}

	return s, nil
}

// SetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *DetectionMatcher) SetBSON(raw bson.Raw) error {

	if o == nil {
		return nil
	}

	s := &mongoAttributesDetectionMatcher{}
	if err := raw.Unmarshal(s); err != nil {
		return err
	}

	return nil
}

// BleveType implements the bleve.Classifier Interface.
func (o *DetectionMatcher) BleveType() string {

	return "detectionmatcher"
}

// DeepCopy returns a deep copy if the DetectionMatcher.
func (o *DetectionMatcher) DeepCopy() *DetectionMatcher {

	if o == nil {
		return nil
	}

	out := &DetectionMatcher{}
	o.DeepCopyInto(out)

	return out
}

// DeepCopyInto copies the receiver into the given *DetectionMatcher.
func (o *DetectionMatcher) DeepCopyInto(out *DetectionMatcher) {

	target, err := copystructure.Copy(o)
	if err != nil {
		panic(fmt.Sprintf("Unable to deepcopy DetectionMatcher: %s", err))
	}

	*out = *target.(*DetectionMatcher)
}

// Validate valides the current information stored into the structure.
func (o *DetectionMatcher) Validate() error {

	errors := elemental.Errors{}
	requiredErrors := elemental.Errors{}

	if err := elemental.ValidateStringInList("confidence", string(o.Confidence), []string{"Unlikely", "Low", "Medium", "High"}, false); err != nil {
		errors = errors.Append(err)
	}

	if err := elemental.ValidateStringInList("operator", string(o.Operator), []string{"Is", "Min", "Max"}, false); err != nil {
		errors = errors.Append(err)
	}

	if len(requiredErrors) > 0 {
		return requiredErrors
	}

	if len(errors) > 0 {
		return errors
	}

	return nil
}

// SpecificationForAttribute returns the AttributeSpecification for the given attribute name key.
func (*DetectionMatcher) SpecificationForAttribute(name string) elemental.AttributeSpecification {

	if v, ok := DetectionMatcherAttributesMap[name]; ok {
		return v
	}

	// We could not find it, so let's check on the lower case indexed spec map
	return DetectionMatcherLowerCaseAttributesMap[name]
}

// AttributeSpecifications returns the full attribute specifications map.
func (*DetectionMatcher) AttributeSpecifications() map[string]elemental.AttributeSpecification {

	return DetectionMatcherAttributesMap
}

// ValueForAttribute returns the value for the given attribute.
// This is a very advanced function that you should not need but in some
// very specific use cases.
func (o *DetectionMatcher) ValueForAttribute(name string) any {

	switch name {
	case "confidence":
		return o.Confidence
	case "description":
		return o.Description
	case "group":
		return o.Group
	case "label":
		return o.Label
	case "name":
		return o.Name
	case "operator":
		return o.Operator
	}

	return nil
}

// DetectionMatcherAttributesMap represents the map of attribute for DetectionMatcher.
var DetectionMatcherAttributesMap = map[string]elemental.AttributeSpecification{
	"Confidence": {
		AllowedChoices: []string{"Unlikely", "Low", "Medium", "High"},
		ConvertedName:  "Confidence",
		DefaultValue:   DetectionMatcherConfidenceLow,
		Description:    `The detection confidence level to operate on.`,
		Exposed:        true,
		Name:           "confidence",
		Type:           "enum",
	},
	"Description": {
		AllowedChoices: []string{},
		ConvertedName:  "Description",
		Description:    `The description of the detection matcher.`,
		Exposed:        true,
		Name:           "description",
		Type:           "string",
	},
	"Group": {
		AllowedChoices: []string{},
		ConvertedName:  "Group",
		DefaultValue:   "*",
		Description: `The group pattern used to match detection group. Supports glob-style wildcards
(e.g. 'Text*' matches 'Text', 'Text_'). Default value is '*' meaning matching
any
detection group.`,
		Exposed: true,
		Name:    "group",
		Type:    "string",
	},
	"Label": {
		AllowedChoices: []string{},
		ConvertedName:  "Label",
		DefaultValue:   "*",
		Description: `The label pattern used to match detection label. Supports glob-style wildcards
(e.g. 'txt*' matches 'txt', 'txtuf8'). Default value is '*' meaning matching any
detection label.`,
		Exposed: true,
		Name:    "label",
		Type:    "string",
	},
	"Name": {
		AllowedChoices: []string{},
		ConvertedName:  "Name",
		DefaultValue:   "*",
		Description: `The name pattern used to match detection name. Supports glob-style wildcards
(e.g. 'txt*' matches 'txt', 'txtuf8'). Default value is '*' meaning matching any
detection name.`,
		Exposed: true,
		Name:    "name",
		Type:    "string",
	},
	"Operator": {
		AllowedChoices: []string{"Is", "Min", "Max"},
		ConvertedName:  "Operator",
		DefaultValue:   DetectionMatcherOperatorMin,
		Description: `Specifies how to compare the detection's confidence value against the matcher's
threshold:
- 'Is': All Detections confidence must exactly match the threshold
- 'Min': At least one detection confidence must be greater than or equal to the
threshold
- 'Max': At least one detection confidence must be less than the threshold
The default value is 'Min'.`,
		Exposed: true,
		Name:    "operator",
		Type:    "enum",
	},
}

// DetectionMatcherLowerCaseAttributesMap represents the map of attribute for DetectionMatcher.
var DetectionMatcherLowerCaseAttributesMap = map[string]elemental.AttributeSpecification{
	"confidence": {
		AllowedChoices: []string{"Unlikely", "Low", "Medium", "High"},
		ConvertedName:  "Confidence",
		DefaultValue:   DetectionMatcherConfidenceLow,
		Description:    `The detection confidence level to operate on.`,
		Exposed:        true,
		Name:           "confidence",
		Type:           "enum",
	},
	"description": {
		AllowedChoices: []string{},
		ConvertedName:  "Description",
		Description:    `The description of the detection matcher.`,
		Exposed:        true,
		Name:           "description",
		Type:           "string",
	},
	"group": {
		AllowedChoices: []string{},
		ConvertedName:  "Group",
		DefaultValue:   "*",
		Description: `The group pattern used to match detection group. Supports glob-style wildcards
(e.g. 'Text*' matches 'Text', 'Text_'). Default value is '*' meaning matching
any
detection group.`,
		Exposed: true,
		Name:    "group",
		Type:    "string",
	},
	"label": {
		AllowedChoices: []string{},
		ConvertedName:  "Label",
		DefaultValue:   "*",
		Description: `The label pattern used to match detection label. Supports glob-style wildcards
(e.g. 'txt*' matches 'txt', 'txtuf8'). Default value is '*' meaning matching any
detection label.`,
		Exposed: true,
		Name:    "label",
		Type:    "string",
	},
	"name": {
		AllowedChoices: []string{},
		ConvertedName:  "Name",
		DefaultValue:   "*",
		Description: `The name pattern used to match detection name. Supports glob-style wildcards
(e.g. 'txt*' matches 'txt', 'txtuf8'). Default value is '*' meaning matching any
detection name.`,
		Exposed: true,
		Name:    "name",
		Type:    "string",
	},
	"operator": {
		AllowedChoices: []string{"Is", "Min", "Max"},
		ConvertedName:  "Operator",
		DefaultValue:   DetectionMatcherOperatorMin,
		Description: `Specifies how to compare the detection's confidence value against the matcher's
threshold:
- 'Is': All Detections confidence must exactly match the threshold
- 'Min': At least one detection confidence must be greater than or equal to the
threshold
- 'Max': At least one detection confidence must be less than the threshold
The default value is 'Min'.`,
		Exposed: true,
		Name:    "operator",
		Type:    "enum",
	},
}

type mongoAttributesDetectionMatcher struct {
}
