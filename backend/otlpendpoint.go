// Code generated by elegen. DO NOT EDIT.
// Source: go.acuvity.ai/elemental (templates/model.gotpl)

package api

import (
	"fmt"

	"github.com/globalsign/mgo/bson"
	"github.com/mitchellh/copystructure"
	"go.acuvity.ai/elemental"
)

// OTLPEndpointProtocolValue represents the possible values for attribute "protocol".
type OTLPEndpointProtocolValue string

const (
	// OTLPEndpointProtocolGRPC represents the value GRPC.
	OTLPEndpointProtocolGRPC OTLPEndpointProtocolValue = "GRPC"

	// OTLPEndpointProtocolHTTPJSON represents the value HTTPJSON.
	OTLPEndpointProtocolHTTPJSON OTLPEndpointProtocolValue = "HTTPJSON"

	// OTLPEndpointProtocolHTTPProtobuf represents the value HTTPProtobuf.
	OTLPEndpointProtocolHTTPProtobuf OTLPEndpointProtocolValue = "HTTPProtobuf"
)

// OTLPEndpoint represents the model of a otlpendpoint
type OTLPEndpoint struct {
	// Endpoint URL for trace data, with an optionally-specified port number. Typically
	// ends with v1/traces when using OTLP/HTTP.
	Endpoint string `json:"endpoint" msgpack:"endpoint" bson:"endpoint" mapstructure:"endpoint,omitempty"`

	// A list of headers to apply to all outgoing traces.
	Headers map[string]string `json:"headers,omitempty" msgpack:"headers,omitempty" bson:"headers,omitempty" mapstructure:"headers,omitempty"`

	// Specifies the OTLP transport protocol to be used for trace data. Note that this
	// depends on the OTLP receiver being used.
	Protocol OTLPEndpointProtocolValue `json:"protocol" msgpack:"protocol" bson:"protocol" mapstructure:"protocol,omitempty"`

	// The timeout value for all outgoing traces in milliseconds.
	Timeout int `json:"timeout" msgpack:"timeout" bson:"timeout" mapstructure:"timeout,omitempty"`

	// If set, additionally trust the Certificate Authorities from the PEM data when
	// connecting to the endpoint over https.
	TrustedCA string `json:"trustedCA,omitempty" msgpack:"trustedCA,omitempty" bson:"trustedca,omitempty" mapstructure:"trustedCA,omitempty"`

	ModelVersion int `json:"-" msgpack:"-" bson:"_modelversion"`
}

// NewOTLPEndpoint returns a new *OTLPEndpoint
func NewOTLPEndpoint() *OTLPEndpoint {

	return &OTLPEndpoint{
		ModelVersion: 1,
		Headers:      map[string]string{},
		Timeout:      10000,
	}
}

// GetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *OTLPEndpoint) GetBSON() (any, error) {

	if o == nil {
		return nil, nil
	}

	s := &mongoAttributesOTLPEndpoint{}

	s.Endpoint = o.Endpoint
	s.Headers = o.Headers
	s.Protocol = o.Protocol
	s.Timeout = o.Timeout
	s.TrustedCA = o.TrustedCA

	return s, nil
}

// SetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *OTLPEndpoint) SetBSON(raw bson.Raw) error {

	if o == nil || raw.Kind == bson.ElementNil {
		return bson.ErrSetZero
	}

	s := &mongoAttributesOTLPEndpoint{}
	if err := raw.Unmarshal(s); err != nil {
		return err
	}

	o.Endpoint = s.Endpoint
	o.Headers = s.Headers
	o.Protocol = s.Protocol
	o.Timeout = s.Timeout
	o.TrustedCA = s.TrustedCA

	return nil
}

// BleveType implements the bleve.Classifier Interface.
func (o *OTLPEndpoint) BleveType() string {

	return "otlpendpoint"
}

// DeepCopy returns a deep copy if the OTLPEndpoint.
func (o *OTLPEndpoint) DeepCopy() *OTLPEndpoint {

	if o == nil {
		return nil
	}

	out := &OTLPEndpoint{}
	o.DeepCopyInto(out)

	return out
}

// DeepCopyInto copies the receiver into the given *OTLPEndpoint.
func (o *OTLPEndpoint) DeepCopyInto(out *OTLPEndpoint) {

	target, err := copystructure.Copy(o)
	if err != nil {
		panic(fmt.Sprintf("Unable to deepcopy OTLPEndpoint: %s", err))
	}

	*out = *target.(*OTLPEndpoint)
}

// Validate valides the current information stored into the structure.
func (o *OTLPEndpoint) Validate() error {

	errors := elemental.Errors{}
	requiredErrors := elemental.Errors{}

	if err := elemental.ValidateRequiredString("endpoint", o.Endpoint); err != nil {
		requiredErrors = requiredErrors.Append(err)
	}

	if err := ValidateURL("endpoint", o.Endpoint); err != nil {
		errors = errors.Append(err)
	}

	if err := elemental.ValidateRequiredString("protocol", string(o.Protocol)); err != nil {
		requiredErrors = requiredErrors.Append(err)
	}

	if err := elemental.ValidateStringInList("protocol", string(o.Protocol), []string{"GRPC", "HTTPProtobuf", "HTTPJSON"}, false); err != nil {
		errors = errors.Append(err)
	}

	if err := elemental.ValidateMaximumInt("timeout", o.Timeout, int(60000), false); err != nil {
		errors = errors.Append(err)
	}

	if err := elemental.ValidateMinimumInt("timeout", o.Timeout, int(10), false); err != nil {
		errors = errors.Append(err)
	}

	if err := ValidatePEM("trustedCA", o.TrustedCA); err != nil {
		errors = errors.Append(err)
	}

	if len(requiredErrors) > 0 {
		return requiredErrors
	}

	if len(errors) > 0 {
		return errors
	}

	return nil
}

// SpecificationForAttribute returns the AttributeSpecification for the given attribute name key.
func (*OTLPEndpoint) SpecificationForAttribute(name string) elemental.AttributeSpecification {

	if v, ok := OTLPEndpointAttributesMap[name]; ok {
		return v
	}

	// We could not find it, so let's check on the lower case indexed spec map
	return OTLPEndpointLowerCaseAttributesMap[name]
}

// AttributeSpecifications returns the full attribute specifications map.
func (*OTLPEndpoint) AttributeSpecifications() map[string]elemental.AttributeSpecification {

	return OTLPEndpointAttributesMap
}

// ValueForAttribute returns the value for the given attribute.
// This is a very advanced function that you should not need but in some
// very specific use cases.
func (o *OTLPEndpoint) ValueForAttribute(name string) any {

	switch name {
	case "endpoint":
		return o.Endpoint
	case "headers":
		return o.Headers
	case "protocol":
		return o.Protocol
	case "timeout":
		return o.Timeout
	case "trustedCA":
		return o.TrustedCA
	}

	return nil
}

// OTLPEndpointAttributesMap represents the map of attribute for OTLPEndpoint.
var OTLPEndpointAttributesMap = map[string]elemental.AttributeSpecification{
	"Endpoint": {
		AllowedChoices: []string{},
		BSONFieldName:  "endpoint",
		ConvertedName:  "Endpoint",
		Description: `Endpoint URL for trace data, with an optionally-specified port number. Typically
ends with v1/traces when using OTLP/HTTP.`,
		Exposed:  true,
		Name:     "endpoint",
		Required: true,
		Stored:   true,
		Type:     "string",
	},
	"Headers": {
		AllowedChoices: []string{},
		BSONFieldName:  "headers",
		ConvertedName:  "Headers",
		Description:    `A list of headers to apply to all outgoing traces.`,
		Exposed:        true,
		Name:           "headers",
		Stored:         true,
		SubType:        "map[string]string",
		Type:           "external",
	},
	"Protocol": {
		AllowedChoices: []string{"GRPC", "HTTPProtobuf", "HTTPJSON"},
		BSONFieldName:  "protocol",
		ConvertedName:  "Protocol",
		Description: `Specifies the OTLP transport protocol to be used for trace data. Note that this
depends on the OTLP receiver being used.`,
		Exposed:  true,
		Name:     "protocol",
		Required: true,
		Stored:   true,
		Type:     "enum",
	},
	"Timeout": {
		AllowedChoices: []string{},
		BSONFieldName:  "timeout",
		ConvertedName:  "Timeout",
		DefaultValue:   10000,
		Description:    `The timeout value for all outgoing traces in milliseconds.`,
		Exposed:        true,
		MaxValue:       60000,
		MinValue:       10,
		Name:           "timeout",
		Stored:         true,
		Type:           "integer",
	},
	"TrustedCA": {
		AllowedChoices: []string{},
		BSONFieldName:  "trustedca",
		ConvertedName:  "TrustedCA",
		Description: `If set, additionally trust the Certificate Authorities from the PEM data when
connecting to the endpoint over https.`,
		Exposed: true,
		Name:    "trustedCA",
		Stored:  true,
		Type:    "string",
	},
}

// OTLPEndpointLowerCaseAttributesMap represents the map of attribute for OTLPEndpoint.
var OTLPEndpointLowerCaseAttributesMap = map[string]elemental.AttributeSpecification{
	"endpoint": {
		AllowedChoices: []string{},
		BSONFieldName:  "endpoint",
		ConvertedName:  "Endpoint",
		Description: `Endpoint URL for trace data, with an optionally-specified port number. Typically
ends with v1/traces when using OTLP/HTTP.`,
		Exposed:  true,
		Name:     "endpoint",
		Required: true,
		Stored:   true,
		Type:     "string",
	},
	"headers": {
		AllowedChoices: []string{},
		BSONFieldName:  "headers",
		ConvertedName:  "Headers",
		Description:    `A list of headers to apply to all outgoing traces.`,
		Exposed:        true,
		Name:           "headers",
		Stored:         true,
		SubType:        "map[string]string",
		Type:           "external",
	},
	"protocol": {
		AllowedChoices: []string{"GRPC", "HTTPProtobuf", "HTTPJSON"},
		BSONFieldName:  "protocol",
		ConvertedName:  "Protocol",
		Description: `Specifies the OTLP transport protocol to be used for trace data. Note that this
depends on the OTLP receiver being used.`,
		Exposed:  true,
		Name:     "protocol",
		Required: true,
		Stored:   true,
		Type:     "enum",
	},
	"timeout": {
		AllowedChoices: []string{},
		BSONFieldName:  "timeout",
		ConvertedName:  "Timeout",
		DefaultValue:   10000,
		Description:    `The timeout value for all outgoing traces in milliseconds.`,
		Exposed:        true,
		MaxValue:       60000,
		MinValue:       10,
		Name:           "timeout",
		Stored:         true,
		Type:           "integer",
	},
	"trustedca": {
		AllowedChoices: []string{},
		BSONFieldName:  "trustedca",
		ConvertedName:  "TrustedCA",
		Description: `If set, additionally trust the Certificate Authorities from the PEM data when
connecting to the endpoint over https.`,
		Exposed: true,
		Name:    "trustedCA",
		Stored:  true,
		Type:    "string",
	},
}

type mongoAttributesOTLPEndpoint struct {
	Endpoint  string                    `bson:"endpoint"`
	Headers   map[string]string         `bson:"headers,omitempty"`
	Protocol  OTLPEndpointProtocolValue `bson:"protocol"`
	Timeout   int                       `bson:"timeout"`
	TrustedCA string                    `bson:"trustedca,omitempty"`
}
