// Code generated by elegen. DO NOT EDIT.
// Source: go.acuvity.ai/elemental (templates/model.gotpl)

package api

import (
	"fmt"
	"slices"

	"github.com/globalsign/mgo/bson"
	"github.com/mitchellh/copystructure"
	"go.acuvity.ai/elemental"
)

// TraceTagKeysScopeValue represents the possible values for attribute "scope".
type TraceTagKeysScopeValue string

const (
	// TraceTagKeysScopeAll represents the value All.
	TraceTagKeysScopeAll TraceTagKeysScopeValue = "All"

	// TraceTagKeysScopeIntrinsic represents the value Intrinsic.
	TraceTagKeysScopeIntrinsic TraceTagKeysScopeValue = "Intrinsic"

	// TraceTagKeysScopeResource represents the value Resource.
	TraceTagKeysScopeResource TraceTagKeysScopeValue = "Resource"

	// TraceTagKeysScopeSpan represents the value Span.
	TraceTagKeysScopeSpan TraceTagKeysScopeValue = "Span"
)

// TraceTagKeysIdentity represents the Identity of the object.
var TraceTagKeysIdentity = elemental.Identity{
	Name:     "tracetagkeys",
	Category: "tracetagkeys",
	Package:  "snitch",
	Private:  false,
}

// TraceTagKeysList represents a list of TraceTagKeys
type TraceTagKeysList []*TraceTagKeys

// Identity returns the identity of the objects in the list.
func (o TraceTagKeysList) Identity() elemental.Identity {

	return TraceTagKeysIdentity
}

// Copy returns a pointer to a copy the TraceTagKeysList.
func (o TraceTagKeysList) Copy() elemental.Identifiables {

	out := slices.Clone(o)
	return &out
}

// Append appends the objects to the a new copy of the TraceTagKeysList.
func (o TraceTagKeysList) Append(objects ...elemental.Identifiable) elemental.Identifiables {

	out := slices.Clone(o)
	for _, obj := range objects {
		out = append(out, obj.(*TraceTagKeys))
	}

	return out
}

// List converts the object to an elemental.IdentifiablesList.
func (o TraceTagKeysList) List() elemental.IdentifiablesList {

	out := make(elemental.IdentifiablesList, len(o))
	for i := range len(o) {
		out[i] = o[i]
	}

	return out
}

// DefaultOrder returns the default ordering fields of the content.
func (o TraceTagKeysList) DefaultOrder() []string {

	return []string{}
}

// ToSparse returns the TraceTagKeysList converted to SparseTraceTagKeysList.
// Objects in the list will only contain the given fields. No field means entire field set.
func (o TraceTagKeysList) ToSparse(fields ...string) elemental.Identifiables {

	out := make(SparseTraceTagKeysList, len(o))
	for i := range len(o) {
		out[i] = o[i].ToSparse(fields...).(*SparseTraceTagKeys)
	}

	return out
}

// Version returns the version of the content.
func (o TraceTagKeysList) Version() int {

	return 1
}

// TraceTagKeys represents the model of a tracetagkeys
type TraceTagKeys struct {
	// ID is the identifier of the object.
	ID string `json:"ID,omitempty" msgpack:"ID,omitempty" bson:"-" mapstructure:"ID,omitempty"`

	// The end of the time window in any format supported by
	// https://github.com/araddon/dateparse.
	End string `json:"end,omitempty" msgpack:"end,omitempty" bson:"-" mapstructure:"end,omitempty"`

	// The relative end of the time window as time.Duration.
	EndRelative string `json:"endRelative,omitempty" msgpack:"endRelative,omitempty" bson:"-" mapstructure:"endRelative,omitempty"`

	// Limit the number of search result.
	Limit int `json:"limit,omitempty" msgpack:"limit,omitempty" bson:"-" mapstructure:"limit,omitempty"`

	// Limits the search for tag values. The search stops if the number of stale
	// (already known) values reaches or exceeds this limit.
	MaxStaleValues int `json:"maxStaleValues" msgpack:"maxStaleValues" bson:"-" mapstructure:"maxStaleValues,omitempty"`

	// The namespace of the object.
	Namespace string `json:"namespace,omitempty" msgpack:"namespace,omitempty" bson:"namespace,omitempty" mapstructure:"namespace,omitempty"`

	// The query in TraceQL format.
	Query string `json:"query" msgpack:"query" bson:"-" mapstructure:"query,omitempty"`

	// The result of the request.
	Result []any `json:"result" msgpack:"result" bson:"-" mapstructure:"result,omitempty"`

	// Specifies the scope of the tags.
	Scope TraceTagKeysScopeValue `json:"scope" msgpack:"scope" bson:"-" mapstructure:"scope,omitempty"`

	// The start of the time window in any format supported by
	// https://github.com/araddon/dateparse.
	Start string `json:"start,omitempty" msgpack:"start,omitempty" bson:"-" mapstructure:"start,omitempty"`

	// The relative start of the time window as time.Duration.
	StartRelative string `json:"startRelative,omitempty" msgpack:"startRelative,omitempty" bson:"-" mapstructure:"startRelative,omitempty"`

	ModelVersion int `json:"-" msgpack:"-" bson:"_modelversion"`
}

// NewTraceTagKeys returns a new *TraceTagKeys
func NewTraceTagKeys() *TraceTagKeys {

	return &TraceTagKeys{
		ModelVersion: 1,
		Result:       []any{},
		Scope:        TraceTagKeysScopeAll,
	}
}

// Identity returns the Identity of the object.
func (o *TraceTagKeys) Identity() elemental.Identity {

	return TraceTagKeysIdentity
}

// Identifier returns the value of the object's unique identifier.
func (o *TraceTagKeys) Identifier() string {

	return o.ID
}

// SetIdentifier sets the value of the object's unique identifier.
func (o *TraceTagKeys) SetIdentifier(id string) {

	o.ID = id
}

// GetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *TraceTagKeys) GetBSON() (any, error) {

	if o == nil {
		return nil, nil
	}

	s := &mongoAttributesTraceTagKeys{}

	if o.ID != "" {
		s.ID = bson.ObjectIdHex(o.ID)
	}
	s.Namespace = o.Namespace

	return s, nil
}

// SetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *TraceTagKeys) SetBSON(raw bson.Raw) error {

	if o == nil || raw.Kind == bson.ElementNil {
		return bson.ErrSetZero
	}

	s := &mongoAttributesTraceTagKeys{}
	if err := raw.Unmarshal(s); err != nil {
		return err
	}

	o.ID = s.ID.Hex()
	o.Namespace = s.Namespace

	return nil
}

// Version returns the hardcoded version of the model.
func (o *TraceTagKeys) Version() int {

	return 1
}

// BleveType implements the bleve.Classifier Interface.
func (o *TraceTagKeys) BleveType() string {

	return "tracetagkeys"
}

// DefaultOrder returns the list of default ordering fields.
func (o *TraceTagKeys) DefaultOrder() []string {

	return []string{}
}

// Doc returns the documentation for the object
func (o *TraceTagKeys) Doc() string {

	return `This is a OTEL TraceQL query wrapper for searching tags keys.`
}

func (o *TraceTagKeys) String() string {

	return fmt.Sprintf("<%s:%s>", o.Identity().Name, o.Identifier())
}

// GetEnd returns the End of the receiver.
func (o *TraceTagKeys) GetEnd() string {

	return o.End
}

// SetEnd sets the property End of the receiver using the given value.
func (o *TraceTagKeys) SetEnd(end string) {

	o.End = end
}

// GetEndRelative returns the EndRelative of the receiver.
func (o *TraceTagKeys) GetEndRelative() string {

	return o.EndRelative
}

// GetNamespace returns the Namespace of the receiver.
func (o *TraceTagKeys) GetNamespace() string {

	return o.Namespace
}

// SetNamespace sets the property Namespace of the receiver using the given value.
func (o *TraceTagKeys) SetNamespace(namespace string) {

	o.Namespace = namespace
}

// GetStart returns the Start of the receiver.
func (o *TraceTagKeys) GetStart() string {

	return o.Start
}

// SetStart sets the property Start of the receiver using the given value.
func (o *TraceTagKeys) SetStart(start string) {

	o.Start = start
}

// GetStartRelative returns the StartRelative of the receiver.
func (o *TraceTagKeys) GetStartRelative() string {

	return o.StartRelative
}

// ToSparse returns the sparse version of the model.
// The returned object will only contain the given fields. No field means entire field set.
func (o *TraceTagKeys) ToSparse(fields ...string) elemental.SparseIdentifiable {

	if len(fields) == 0 {
		// nolint: goimports
		return &SparseTraceTagKeys{
			ID:             &o.ID,
			End:            &o.End,
			EndRelative:    &o.EndRelative,
			Limit:          &o.Limit,
			MaxStaleValues: &o.MaxStaleValues,
			Namespace:      &o.Namespace,
			Query:          &o.Query,
			Result:         &o.Result,
			Scope:          &o.Scope,
			Start:          &o.Start,
			StartRelative:  &o.StartRelative,
		}
	}

	sp := &SparseTraceTagKeys{}
	for _, f := range fields {
		switch f {
		case "ID":
			sp.ID = &(o.ID)
		case "end":
			sp.End = &(o.End)
		case "endRelative":
			sp.EndRelative = &(o.EndRelative)
		case "limit":
			sp.Limit = &(o.Limit)
		case "maxStaleValues":
			sp.MaxStaleValues = &(o.MaxStaleValues)
		case "namespace":
			sp.Namespace = &(o.Namespace)
		case "query":
			sp.Query = &(o.Query)
		case "result":
			sp.Result = &(o.Result)
		case "scope":
			sp.Scope = &(o.Scope)
		case "start":
			sp.Start = &(o.Start)
		case "startRelative":
			sp.StartRelative = &(o.StartRelative)
		}
	}

	return sp
}

// Patch apply the non nil value of a *SparseTraceTagKeys to the object.
func (o *TraceTagKeys) Patch(sparse elemental.SparseIdentifiable) {
	if !sparse.Identity().IsEqual(o.Identity()) {
		panic("cannot patch from a parse with different identity")
	}

	so := sparse.(*SparseTraceTagKeys)
	if so.ID != nil {
		o.ID = *so.ID
	}
	if so.End != nil {
		o.End = *so.End
	}
	if so.EndRelative != nil {
		o.EndRelative = *so.EndRelative
	}
	if so.Limit != nil {
		o.Limit = *so.Limit
	}
	if so.MaxStaleValues != nil {
		o.MaxStaleValues = *so.MaxStaleValues
	}
	if so.Namespace != nil {
		o.Namespace = *so.Namespace
	}
	if so.Query != nil {
		o.Query = *so.Query
	}
	if so.Result != nil {
		o.Result = *so.Result
	}
	if so.Scope != nil {
		o.Scope = *so.Scope
	}
	if so.Start != nil {
		o.Start = *so.Start
	}
	if so.StartRelative != nil {
		o.StartRelative = *so.StartRelative
	}
}

// DeepCopy returns a deep copy if the TraceTagKeys.
func (o *TraceTagKeys) DeepCopy() *TraceTagKeys {

	if o == nil {
		return nil
	}

	out := &TraceTagKeys{}
	o.DeepCopyInto(out)

	return out
}

// DeepCopyInto copies the receiver into the given *TraceTagKeys.
func (o *TraceTagKeys) DeepCopyInto(out *TraceTagKeys) {

	target, err := copystructure.Copy(o)
	if err != nil {
		panic(fmt.Sprintf("Unable to deepcopy TraceTagKeys: %s", err))
	}

	*out = *target.(*TraceTagKeys)
}

// Validate valides the current information stored into the structure.
func (o *TraceTagKeys) Validate() error {

	errors := elemental.Errors{}
	requiredErrors := elemental.Errors{}

	if err := ValidateDuration("endRelative", o.EndRelative); err != nil {
		errors = errors.Append(err)
	}

	if err := elemental.ValidateStringInList("scope", string(o.Scope), []string{"All", "Resource", "Span", "Intrinsic"}, false); err != nil {
		errors = errors.Append(err)
	}

	if err := ValidateDuration("startRelative", o.StartRelative); err != nil {
		errors = errors.Append(err)
	}

	if len(requiredErrors) > 0 {
		return requiredErrors
	}

	if len(errors) > 0 {
		return errors
	}

	return nil
}

// SpecificationForAttribute returns the AttributeSpecification for the given attribute name key.
func (*TraceTagKeys) SpecificationForAttribute(name string) elemental.AttributeSpecification {

	if v, ok := TraceTagKeysAttributesMap[name]; ok {
		return v
	}

	// We could not find it, so let's check on the lower case indexed spec map
	return TraceTagKeysLowerCaseAttributesMap[name]
}

// AttributeSpecifications returns the full attribute specifications map.
func (*TraceTagKeys) AttributeSpecifications() map[string]elemental.AttributeSpecification {

	return TraceTagKeysAttributesMap
}

// ValueForAttribute returns the value for the given attribute.
// This is a very advanced function that you should not need but in some
// very specific use cases.
func (o *TraceTagKeys) ValueForAttribute(name string) any {

	switch name {
	case "ID":
		return o.ID
	case "end":
		return o.End
	case "endRelative":
		return o.EndRelative
	case "limit":
		return o.Limit
	case "maxStaleValues":
		return o.MaxStaleValues
	case "namespace":
		return o.Namespace
	case "query":
		return o.Query
	case "result":
		return o.Result
	case "scope":
		return o.Scope
	case "start":
		return o.Start
	case "startRelative":
		return o.StartRelative
	}

	return nil
}

// TraceTagKeysAttributesMap represents the map of attribute for TraceTagKeys.
var TraceTagKeysAttributesMap = map[string]elemental.AttributeSpecification{
	"ID": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "_id",
		ConvertedName:  "ID",
		Description:    `ID is the identifier of the object.`,
		Exposed:        true,
		Filterable:     true,
		Identifier:     true,
		Name:           "ID",
		Orderable:      true,
		ReadOnly:       true,
		Stored:         true,
		Type:           "string",
	},
	"End": {
		AllowedChoices: []string{},
		ConvertedName:  "End",
		Description: `The end of the time window in any format supported by
https://github.com/araddon/dateparse.`,
		Exposed: true,
		Getter:  true,
		Name:    "end",
		Setter:  true,
		Type:    "string",
	},
	"EndRelative": {
		AllowedChoices: []string{},
		ConvertedName:  "EndRelative",
		Description:    `The relative end of the time window as time.Duration.`,
		Exposed:        true,
		Getter:         true,
		Name:           "endRelative",
		Type:           "string",
	},
	"Limit": {
		AllowedChoices: []string{},
		ConvertedName:  "Limit",
		Description:    `Limit the number of search result.`,
		Exposed:        true,
		Name:           "limit",
		Type:           "integer",
	},
	"MaxStaleValues": {
		AllowedChoices: []string{},
		ConvertedName:  "MaxStaleValues",
		Description: `Limits the search for tag values. The search stops if the number of stale
(already known) values reaches or exceeds this limit.`,
		Exposed: true,
		Name:    "maxStaleValues",
		Type:    "integer",
	},
	"Namespace": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "namespace",
		ConvertedName:  "Namespace",
		Description:    `The namespace of the object.`,
		Exposed:        true,
		Getter:         true,
		Name:           "namespace",
		Orderable:      true,
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Type:           "string",
	},
	"Query": {
		AllowedChoices: []string{},
		ConvertedName:  "Query",
		Description:    `The query in TraceQL format.`,
		Exposed:        true,
		Name:           "query",
		Type:           "string",
	},
	"Result": {
		AllowedChoices: []string{},
		ConvertedName:  "Result",
		Description:    `The result of the request.`,
		Exposed:        true,
		Name:           "result",
		SubType:        "[]any",
		Type:           "external",
	},
	"Scope": {
		AllowedChoices: []string{"All", "Resource", "Span", "Intrinsic"},
		ConvertedName:  "Scope",
		DefaultValue:   TraceTagKeysScopeAll,
		Description:    `Specifies the scope of the tags.`,
		Exposed:        true,
		Name:           "scope",
		Type:           "enum",
	},
	"Start": {
		AllowedChoices: []string{},
		ConvertedName:  "Start",
		Description: `The start of the time window in any format supported by
https://github.com/araddon/dateparse.`,
		Exposed: true,
		Getter:  true,
		Name:    "start",
		Setter:  true,
		Type:    "string",
	},
	"StartRelative": {
		AllowedChoices: []string{},
		ConvertedName:  "StartRelative",
		Description:    `The relative start of the time window as time.Duration.`,
		Exposed:        true,
		Getter:         true,
		Name:           "startRelative",
		Type:           "string",
	},
}

// TraceTagKeysLowerCaseAttributesMap represents the map of attribute for TraceTagKeys.
var TraceTagKeysLowerCaseAttributesMap = map[string]elemental.AttributeSpecification{
	"id": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "_id",
		ConvertedName:  "ID",
		Description:    `ID is the identifier of the object.`,
		Exposed:        true,
		Filterable:     true,
		Identifier:     true,
		Name:           "ID",
		Orderable:      true,
		ReadOnly:       true,
		Stored:         true,
		Type:           "string",
	},
	"end": {
		AllowedChoices: []string{},
		ConvertedName:  "End",
		Description: `The end of the time window in any format supported by
https://github.com/araddon/dateparse.`,
		Exposed: true,
		Getter:  true,
		Name:    "end",
		Setter:  true,
		Type:    "string",
	},
	"endrelative": {
		AllowedChoices: []string{},
		ConvertedName:  "EndRelative",
		Description:    `The relative end of the time window as time.Duration.`,
		Exposed:        true,
		Getter:         true,
		Name:           "endRelative",
		Type:           "string",
	},
	"limit": {
		AllowedChoices: []string{},
		ConvertedName:  "Limit",
		Description:    `Limit the number of search result.`,
		Exposed:        true,
		Name:           "limit",
		Type:           "integer",
	},
	"maxstalevalues": {
		AllowedChoices: []string{},
		ConvertedName:  "MaxStaleValues",
		Description: `Limits the search for tag values. The search stops if the number of stale
(already known) values reaches or exceeds this limit.`,
		Exposed: true,
		Name:    "maxStaleValues",
		Type:    "integer",
	},
	"namespace": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "namespace",
		ConvertedName:  "Namespace",
		Description:    `The namespace of the object.`,
		Exposed:        true,
		Getter:         true,
		Name:           "namespace",
		Orderable:      true,
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Type:           "string",
	},
	"query": {
		AllowedChoices: []string{},
		ConvertedName:  "Query",
		Description:    `The query in TraceQL format.`,
		Exposed:        true,
		Name:           "query",
		Type:           "string",
	},
	"result": {
		AllowedChoices: []string{},
		ConvertedName:  "Result",
		Description:    `The result of the request.`,
		Exposed:        true,
		Name:           "result",
		SubType:        "[]any",
		Type:           "external",
	},
	"scope": {
		AllowedChoices: []string{"All", "Resource", "Span", "Intrinsic"},
		ConvertedName:  "Scope",
		DefaultValue:   TraceTagKeysScopeAll,
		Description:    `Specifies the scope of the tags.`,
		Exposed:        true,
		Name:           "scope",
		Type:           "enum",
	},
	"start": {
		AllowedChoices: []string{},
		ConvertedName:  "Start",
		Description: `The start of the time window in any format supported by
https://github.com/araddon/dateparse.`,
		Exposed: true,
		Getter:  true,
		Name:    "start",
		Setter:  true,
		Type:    "string",
	},
	"startrelative": {
		AllowedChoices: []string{},
		ConvertedName:  "StartRelative",
		Description:    `The relative start of the time window as time.Duration.`,
		Exposed:        true,
		Getter:         true,
		Name:           "startRelative",
		Type:           "string",
	},
}

// SparseTraceTagKeysList represents a list of SparseTraceTagKeys
type SparseTraceTagKeysList []*SparseTraceTagKeys

// Identity returns the identity of the objects in the list.
func (o SparseTraceTagKeysList) Identity() elemental.Identity {

	return TraceTagKeysIdentity
}

// Copy returns a pointer to a copy the SparseTraceTagKeysList.
func (o SparseTraceTagKeysList) Copy() elemental.Identifiables {

	copy := slices.Clone(o)
	return &copy
}

// Append appends the objects to the a new copy of the SparseTraceTagKeysList.
func (o SparseTraceTagKeysList) Append(objects ...elemental.Identifiable) elemental.Identifiables {

	out := slices.Clone(o)
	for _, obj := range objects {
		out = append(out, obj.(*SparseTraceTagKeys))
	}

	return out
}

// List converts the object to an elemental.IdentifiablesList.
func (o SparseTraceTagKeysList) List() elemental.IdentifiablesList {

	out := make(elemental.IdentifiablesList, len(o))
	for i := range len(o) {
		out[i] = o[i]
	}

	return out
}

// DefaultOrder returns the default ordering fields of the content.
func (o SparseTraceTagKeysList) DefaultOrder() []string {

	return []string{}
}

// ToPlain returns the SparseTraceTagKeysList converted to TraceTagKeysList.
func (o SparseTraceTagKeysList) ToPlain() elemental.IdentifiablesList {

	out := make(elemental.IdentifiablesList, len(o))
	for i := range len(o) {
		out[i] = o[i].ToPlain()
	}

	return out
}

// Version returns the version of the content.
func (o SparseTraceTagKeysList) Version() int {

	return 1
}

// SparseTraceTagKeys represents the sparse version of a tracetagkeys.
type SparseTraceTagKeys struct {
	// ID is the identifier of the object.
	ID *string `json:"ID,omitempty" msgpack:"ID,omitempty" bson:"-" mapstructure:"ID,omitempty"`

	// The end of the time window in any format supported by
	// https://github.com/araddon/dateparse.
	End *string `json:"end,omitempty" msgpack:"end,omitempty" bson:"-" mapstructure:"end,omitempty"`

	// The relative end of the time window as time.Duration.
	EndRelative *string `json:"endRelative,omitempty" msgpack:"endRelative,omitempty" bson:"-" mapstructure:"endRelative,omitempty"`

	// Limit the number of search result.
	Limit *int `json:"limit,omitempty" msgpack:"limit,omitempty" bson:"-" mapstructure:"limit,omitempty"`

	// Limits the search for tag values. The search stops if the number of stale
	// (already known) values reaches or exceeds this limit.
	MaxStaleValues *int `json:"maxStaleValues,omitempty" msgpack:"maxStaleValues,omitempty" bson:"-" mapstructure:"maxStaleValues,omitempty"`

	// The namespace of the object.
	Namespace *string `json:"namespace,omitempty" msgpack:"namespace,omitempty" bson:"namespace,omitempty" mapstructure:"namespace,omitempty"`

	// The query in TraceQL format.
	Query *string `json:"query,omitempty" msgpack:"query,omitempty" bson:"-" mapstructure:"query,omitempty"`

	// The result of the request.
	Result *[]any `json:"result,omitempty" msgpack:"result,omitempty" bson:"-" mapstructure:"result,omitempty"`

	// Specifies the scope of the tags.
	Scope *TraceTagKeysScopeValue `json:"scope,omitempty" msgpack:"scope,omitempty" bson:"-" mapstructure:"scope,omitempty"`

	// The start of the time window in any format supported by
	// https://github.com/araddon/dateparse.
	Start *string `json:"start,omitempty" msgpack:"start,omitempty" bson:"-" mapstructure:"start,omitempty"`

	// The relative start of the time window as time.Duration.
	StartRelative *string `json:"startRelative,omitempty" msgpack:"startRelative,omitempty" bson:"-" mapstructure:"startRelative,omitempty"`

	ModelVersion int `json:"-" msgpack:"-" bson:"_modelversion"`
}

// NewSparseTraceTagKeys returns a new  SparseTraceTagKeys.
func NewSparseTraceTagKeys() *SparseTraceTagKeys {
	return &SparseTraceTagKeys{}
}

// Identity returns the Identity of the sparse object.
func (o *SparseTraceTagKeys) Identity() elemental.Identity {

	return TraceTagKeysIdentity
}

// Identifier returns the value of the sparse object's unique identifier.
func (o *SparseTraceTagKeys) Identifier() string {

	if o.ID == nil {
		return ""
	}
	return *o.ID
}

// SetIdentifier sets the value of the sparse object's unique identifier.
func (o *SparseTraceTagKeys) SetIdentifier(id string) {

	if id != "" {
		o.ID = &id
	} else {
		o.ID = nil
	}
}

// GetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *SparseTraceTagKeys) GetBSON() (any, error) {

	if o == nil {
		return nil, nil
	}

	s := &mongoAttributesSparseTraceTagKeys{}

	if o.ID != nil {
		s.ID = bson.ObjectIdHex(*o.ID)
	}
	if o.Namespace != nil {
		s.Namespace = o.Namespace
	}

	return s, nil
}

// SetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *SparseTraceTagKeys) SetBSON(raw bson.Raw) error {

	if o == nil {
		return nil
	}

	s := &mongoAttributesSparseTraceTagKeys{}
	if err := raw.Unmarshal(s); err != nil {
		return err
	}

	id := s.ID.Hex()
	o.ID = &id
	if s.Namespace != nil {
		o.Namespace = s.Namespace
	}

	return nil
}

// Version returns the hardcoded version of the model.
func (o *SparseTraceTagKeys) Version() int {

	return 1
}

// ToPlain returns the plain version of the sparse model.
func (o *SparseTraceTagKeys) ToPlain() elemental.PlainIdentifiable {

	out := NewTraceTagKeys()
	if o.ID != nil {
		out.ID = *o.ID
	}
	if o.End != nil {
		out.End = *o.End
	}
	if o.EndRelative != nil {
		out.EndRelative = *o.EndRelative
	}
	if o.Limit != nil {
		out.Limit = *o.Limit
	}
	if o.MaxStaleValues != nil {
		out.MaxStaleValues = *o.MaxStaleValues
	}
	if o.Namespace != nil {
		out.Namespace = *o.Namespace
	}
	if o.Query != nil {
		out.Query = *o.Query
	}
	if o.Result != nil {
		out.Result = *o.Result
	}
	if o.Scope != nil {
		out.Scope = *o.Scope
	}
	if o.Start != nil {
		out.Start = *o.Start
	}
	if o.StartRelative != nil {
		out.StartRelative = *o.StartRelative
	}

	return out
}

// GetEnd returns the End of the receiver.
func (o *SparseTraceTagKeys) GetEnd() (out string) {

	if o.End == nil {
		return
	}

	return *o.End
}

// SetEnd sets the property End of the receiver using the address of the given value.
func (o *SparseTraceTagKeys) SetEnd(end string) {

	o.End = &end
}

// GetEndRelative returns the EndRelative of the receiver.
func (o *SparseTraceTagKeys) GetEndRelative() (out string) {

	if o.EndRelative == nil {
		return
	}

	return *o.EndRelative
}

// GetNamespace returns the Namespace of the receiver.
func (o *SparseTraceTagKeys) GetNamespace() (out string) {

	if o.Namespace == nil {
		return
	}

	return *o.Namespace
}

// SetNamespace sets the property Namespace of the receiver using the address of the given value.
func (o *SparseTraceTagKeys) SetNamespace(namespace string) {

	o.Namespace = &namespace
}

// GetStart returns the Start of the receiver.
func (o *SparseTraceTagKeys) GetStart() (out string) {

	if o.Start == nil {
		return
	}

	return *o.Start
}

// SetStart sets the property Start of the receiver using the address of the given value.
func (o *SparseTraceTagKeys) SetStart(start string) {

	o.Start = &start
}

// GetStartRelative returns the StartRelative of the receiver.
func (o *SparseTraceTagKeys) GetStartRelative() (out string) {

	if o.StartRelative == nil {
		return
	}

	return *o.StartRelative
}

// DeepCopy returns a deep copy if the SparseTraceTagKeys.
func (o *SparseTraceTagKeys) DeepCopy() *SparseTraceTagKeys {

	if o == nil {
		return nil
	}

	out := &SparseTraceTagKeys{}
	o.DeepCopyInto(out)

	return out
}

// DeepCopyInto copies the receiver into the given *SparseTraceTagKeys.
func (o *SparseTraceTagKeys) DeepCopyInto(out *SparseTraceTagKeys) {

	target, err := copystructure.Copy(o)
	if err != nil {
		panic(fmt.Sprintf("Unable to deepcopy SparseTraceTagKeys: %s", err))
	}

	*out = *target.(*SparseTraceTagKeys)
}

type mongoAttributesTraceTagKeys struct {
	ID        bson.ObjectId `bson:"_id,omitempty"`
	Namespace string        `bson:"namespace,omitempty"`
}
type mongoAttributesSparseTraceTagKeys struct {
	ID        bson.ObjectId `bson:"_id,omitempty"`
	Namespace *string       `bson:"namespace,omitempty"`
}
