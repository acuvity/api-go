// Code generated by elegen. DO NOT EDIT.
// Source: go.acuvity.ai/elemental (templates/model.gotpl)

package api

import (
	"fmt"

	"github.com/globalsign/mgo/bson"
	"github.com/mitchellh/copystructure"
	"go.acuvity.ai/elemental"
)

// ProxyConfIdentity represents the Identity of the object.
var ProxyConfIdentity = elemental.Identity{
	Name:     "proxyconf",
	Category: "proxyconfs",
	Package:  "lain",
	Private:  false,
}

// ProxyConfsList represents a list of ProxyConfs
type ProxyConfsList []*ProxyConf

// Identity returns the identity of the objects in the list.
func (o ProxyConfsList) Identity() elemental.Identity {

	return ProxyConfIdentity
}

// Copy returns a pointer to a copy the ProxyConfsList.
func (o ProxyConfsList) Copy() elemental.Identifiables {

	out := append(ProxyConfsList{}, o...)
	return &out
}

// Append appends the objects to the a new copy of the ProxyConfsList.
func (o ProxyConfsList) Append(objects ...elemental.Identifiable) elemental.Identifiables {

	out := append(ProxyConfsList{}, o...)
	for _, obj := range objects {
		out = append(out, obj.(*ProxyConf))
	}

	return out
}

// List converts the object to an elemental.IdentifiablesList.
func (o ProxyConfsList) List() elemental.IdentifiablesList {

	out := make(elemental.IdentifiablesList, len(o))
	for i := 0; i < len(o); i++ {
		out[i] = o[i]
	}

	return out
}

// DefaultOrder returns the default ordering fields of the content.
func (o ProxyConfsList) DefaultOrder() []string {

	return []string{}
}

// ToSparse returns the ProxyConfsList converted to SparseProxyConfsList.
// Objects in the list will only contain the given fields. No field means entire field set.
func (o ProxyConfsList) ToSparse(fields ...string) elemental.Identifiables {

	out := make(SparseProxyConfsList, len(o))
	for i := 0; i < len(o); i++ {
		out[i] = o[i].ToSparse(fields...).(*SparseProxyConf)
	}

	return out
}

// Version returns the version of the content.
func (o ProxyConfsList) Version() int {

	return 1
}

// ProxyConf represents the model of a proxyconf
type ProxyConf struct {
	// ID is the identifier of the object.
	ID string `json:"ID,omitempty" msgpack:"ID,omitempty" bson:"-" mapstructure:"ID,omitempty"`

	// The PAC configurations of the organizations.
	PACConfigs PACConfigsList `json:"PACConfigs,omitempty" msgpack:"PACConfigs,omitempty" bson:"-" mapstructure:"PACConfigs,omitempty"`

	// The computed access policy.
	AccessPolicy string `json:"accessPolicy,omitempty" msgpack:"accessPolicy,omitempty" bson:"-" mapstructure:"accessPolicy,omitempty"`

	// The agent configuration.
	AgentConfig *AgentConfig `json:"agentConfig,omitempty" msgpack:"agentConfig,omitempty" bson:"-" mapstructure:"agentConfig,omitempty"`

	// The computed assign policy.
	AssignPolicy string `json:"assignPolicy,omitempty" msgpack:"assignPolicy,omitempty" bson:"-" mapstructure:"assignPolicy,omitempty"`

	// The computed content policy.
	ContentPolicy string `json:"contentPolicy,omitempty" msgpack:"contentPolicy,omitempty" bson:"-" mapstructure:"contentPolicy,omitempty"`

	// List of custom data types.
	CustomDataTypes CustomDataTypesList `json:"customDataTypes,omitempty" msgpack:"customDataTypes,omitempty" bson:"-" mapstructure:"customDataTypes,omitempty"`

	// The extractors of the organization.
	Extractors ExtractorsList `json:"extractors,omitempty" msgpack:"extractors,omitempty" bson:"-" mapstructure:"extractors,omitempty"`

	// The namespace of the object.
	Namespace string `json:"namespace,omitempty" msgpack:"namespace,omitempty" bson:"namespace,omitempty" mapstructure:"namespace,omitempty"`

	// The organization settings.
	OrgSettings *OrgSettings `json:"orgSettings" msgpack:"orgSettings" bson:"-" mapstructure:"orgSettings,omitempty"`

	// The list of available provider.
	Providers ProvidersList `json:"providers" msgpack:"providers" bson:"-" mapstructure:"providers,omitempty"`

	// Tokens pool to authenticate with the provider.
	Tokens map[string][]string `json:"tokens,omitempty" msgpack:"tokens,omitempty" bson:"-" mapstructure:"tokens,omitempty"`

	// The web extension configuration.
	WebExtensionConfig *WebExtensionConfig `json:"webExtensionConfig,omitempty" msgpack:"webExtensionConfig,omitempty" bson:"-" mapstructure:"webExtensionConfig,omitempty"`

	ModelVersion int `json:"-" msgpack:"-" bson:"_modelversion"`
}

// NewProxyConf returns a new *ProxyConf
func NewProxyConf() *ProxyConf {

	return &ProxyConf{
		ModelVersion: 1,
		Providers:    ProvidersList{},
		Tokens:       map[string][]string{},
	}
}

// Identity returns the Identity of the object.
func (o *ProxyConf) Identity() elemental.Identity {

	return ProxyConfIdentity
}

// Identifier returns the value of the object's unique identifier.
func (o *ProxyConf) Identifier() string {

	return o.ID
}

// SetIdentifier sets the value of the object's unique identifier.
func (o *ProxyConf) SetIdentifier(id string) {

	o.ID = id
}

// GetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *ProxyConf) GetBSON() (any, error) {

	if o == nil {
		return nil, nil
	}

	s := &mongoAttributesProxyConf{}

	if o.ID != "" {
		s.ID = bson.ObjectIdHex(o.ID)
	}
	s.Namespace = o.Namespace

	return s, nil
}

// SetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *ProxyConf) SetBSON(raw bson.Raw) error {

	if o == nil {
		return nil
	}

	s := &mongoAttributesProxyConf{}
	if err := raw.Unmarshal(s); err != nil {
		return err
	}

	o.ID = s.ID.Hex()
	o.Namespace = s.Namespace

	return nil
}

// Version returns the hardcoded version of the model.
func (o *ProxyConf) Version() int {

	return 1
}

// BleveType implements the bleve.Classifier Interface.
func (o *ProxyConf) BleveType() string {

	return "proxyconf"
}

// DefaultOrder returns the list of default ordering fields.
func (o *ProxyConf) DefaultOrder() []string {

	return []string{}
}

// Doc returns the documentation for the object
func (o *ProxyConf) Doc() string {

	return `ProxyConf is an API for proxy.`
}

func (o *ProxyConf) String() string {

	return fmt.Sprintf("<%s:%s>", o.Identity().Name, o.Identifier())
}

// GetNamespace returns the Namespace of the receiver.
func (o *ProxyConf) GetNamespace() string {

	return o.Namespace
}

// SetNamespace sets the property Namespace of the receiver using the given value.
func (o *ProxyConf) SetNamespace(namespace string) {

	o.Namespace = namespace
}

// ToSparse returns the sparse version of the model.
// The returned object will only contain the given fields. No field means entire field set.
func (o *ProxyConf) ToSparse(fields ...string) elemental.SparseIdentifiable {

	if len(fields) == 0 {
		// nolint: goimports
		return &SparseProxyConf{
			ID:                 &o.ID,
			PACConfigs:         &o.PACConfigs,
			AccessPolicy:       &o.AccessPolicy,
			AgentConfig:        o.AgentConfig,
			AssignPolicy:       &o.AssignPolicy,
			ContentPolicy:      &o.ContentPolicy,
			CustomDataTypes:    &o.CustomDataTypes,
			Extractors:         &o.Extractors,
			Namespace:          &o.Namespace,
			OrgSettings:        o.OrgSettings,
			Providers:          &o.Providers,
			Tokens:             &o.Tokens,
			WebExtensionConfig: o.WebExtensionConfig,
		}
	}

	sp := &SparseProxyConf{}
	for _, f := range fields {
		switch f {
		case "ID":
			sp.ID = &(o.ID)
		case "PACConfigs":
			sp.PACConfigs = &(o.PACConfigs)
		case "accessPolicy":
			sp.AccessPolicy = &(o.AccessPolicy)
		case "agentConfig":
			sp.AgentConfig = o.AgentConfig
		case "assignPolicy":
			sp.AssignPolicy = &(o.AssignPolicy)
		case "contentPolicy":
			sp.ContentPolicy = &(o.ContentPolicy)
		case "customDataTypes":
			sp.CustomDataTypes = &(o.CustomDataTypes)
		case "extractors":
			sp.Extractors = &(o.Extractors)
		case "namespace":
			sp.Namespace = &(o.Namespace)
		case "orgSettings":
			sp.OrgSettings = o.OrgSettings
		case "providers":
			sp.Providers = &(o.Providers)
		case "tokens":
			sp.Tokens = &(o.Tokens)
		case "webExtensionConfig":
			sp.WebExtensionConfig = o.WebExtensionConfig
		}
	}

	return sp
}

// Patch apply the non nil value of a *SparseProxyConf to the object.
func (o *ProxyConf) Patch(sparse elemental.SparseIdentifiable) {
	if !sparse.Identity().IsEqual(o.Identity()) {
		panic("cannot patch from a parse with different identity")
	}

	so := sparse.(*SparseProxyConf)
	if so.ID != nil {
		o.ID = *so.ID
	}
	if so.PACConfigs != nil {
		o.PACConfigs = *so.PACConfigs
	}
	if so.AccessPolicy != nil {
		o.AccessPolicy = *so.AccessPolicy
	}
	if so.AgentConfig != nil {
		o.AgentConfig = so.AgentConfig
	}
	if so.AssignPolicy != nil {
		o.AssignPolicy = *so.AssignPolicy
	}
	if so.ContentPolicy != nil {
		o.ContentPolicy = *so.ContentPolicy
	}
	if so.CustomDataTypes != nil {
		o.CustomDataTypes = *so.CustomDataTypes
	}
	if so.Extractors != nil {
		o.Extractors = *so.Extractors
	}
	if so.Namespace != nil {
		o.Namespace = *so.Namespace
	}
	if so.OrgSettings != nil {
		o.OrgSettings = so.OrgSettings
	}
	if so.Providers != nil {
		o.Providers = *so.Providers
	}
	if so.Tokens != nil {
		o.Tokens = *so.Tokens
	}
	if so.WebExtensionConfig != nil {
		o.WebExtensionConfig = so.WebExtensionConfig
	}
}

// DeepCopy returns a deep copy if the ProxyConf.
func (o *ProxyConf) DeepCopy() *ProxyConf {

	if o == nil {
		return nil
	}

	out := &ProxyConf{}
	o.DeepCopyInto(out)

	return out
}

// DeepCopyInto copies the receiver into the given *ProxyConf.
func (o *ProxyConf) DeepCopyInto(out *ProxyConf) {

	target, err := copystructure.Copy(o)
	if err != nil {
		panic(fmt.Sprintf("Unable to deepcopy ProxyConf: %s", err))
	}

	*out = *target.(*ProxyConf)
}

// Validate valides the current information stored into the structure.
func (o *ProxyConf) Validate() error {

	errors := elemental.Errors{}
	requiredErrors := elemental.Errors{}

	for _, sub := range o.PACConfigs {
		if sub == nil {
			continue
		}
		elemental.ResetDefaultForZeroValues(sub)
		if err := sub.Validate(); err != nil {
			errors = errors.Append(err)
		}
	}

	if o.AgentConfig != nil {
		elemental.ResetDefaultForZeroValues(o.AgentConfig)
		if err := o.AgentConfig.Validate(); err != nil {
			errors = errors.Append(err)
		}
	}

	for _, sub := range o.CustomDataTypes {
		if sub == nil {
			continue
		}
		elemental.ResetDefaultForZeroValues(sub)
		if err := sub.Validate(); err != nil {
			errors = errors.Append(err)
		}
	}

	for _, sub := range o.Extractors {
		if sub == nil {
			continue
		}
		elemental.ResetDefaultForZeroValues(sub)
		if err := sub.Validate(); err != nil {
			errors = errors.Append(err)
		}
	}

	if o.OrgSettings != nil {
		elemental.ResetDefaultForZeroValues(o.OrgSettings)
		if err := o.OrgSettings.Validate(); err != nil {
			errors = errors.Append(err)
		}
	}

	for _, sub := range o.Providers {
		if sub == nil {
			continue
		}
		elemental.ResetDefaultForZeroValues(sub)
		if err := sub.Validate(); err != nil {
			errors = errors.Append(err)
		}
	}

	if o.WebExtensionConfig != nil {
		elemental.ResetDefaultForZeroValues(o.WebExtensionConfig)
		if err := o.WebExtensionConfig.Validate(); err != nil {
			errors = errors.Append(err)
		}
	}

	if len(requiredErrors) > 0 {
		return requiredErrors
	}

	if len(errors) > 0 {
		return errors
	}

	return nil
}

// SpecificationForAttribute returns the AttributeSpecification for the given attribute name key.
func (*ProxyConf) SpecificationForAttribute(name string) elemental.AttributeSpecification {

	if v, ok := ProxyConfAttributesMap[name]; ok {
		return v
	}

	// We could not find it, so let's check on the lower case indexed spec map
	return ProxyConfLowerCaseAttributesMap[name]
}

// AttributeSpecifications returns the full attribute specifications map.
func (*ProxyConf) AttributeSpecifications() map[string]elemental.AttributeSpecification {

	return ProxyConfAttributesMap
}

// ValueForAttribute returns the value for the given attribute.
// This is a very advanced function that you should not need but in some
// very specific use cases.
func (o *ProxyConf) ValueForAttribute(name string) any {

	switch name {
	case "ID":
		return o.ID
	case "PACConfigs":
		return o.PACConfigs
	case "accessPolicy":
		return o.AccessPolicy
	case "agentConfig":
		return o.AgentConfig
	case "assignPolicy":
		return o.AssignPolicy
	case "contentPolicy":
		return o.ContentPolicy
	case "customDataTypes":
		return o.CustomDataTypes
	case "extractors":
		return o.Extractors
	case "namespace":
		return o.Namespace
	case "orgSettings":
		return o.OrgSettings
	case "providers":
		return o.Providers
	case "tokens":
		return o.Tokens
	case "webExtensionConfig":
		return o.WebExtensionConfig
	}

	return nil
}

// ProxyConfAttributesMap represents the map of attribute for ProxyConf.
var ProxyConfAttributesMap = map[string]elemental.AttributeSpecification{
	"ID": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "_id",
		ConvertedName:  "ID",
		Description:    `ID is the identifier of the object.`,
		Exposed:        true,
		Filterable:     true,
		Identifier:     true,
		Name:           "ID",
		Orderable:      true,
		ReadOnly:       true,
		Stored:         true,
		Type:           "string",
	},
	"PACConfigs": {
		AllowedChoices: []string{},
		ConvertedName:  "PACConfigs",
		Description:    `The PAC configurations of the organizations.`,
		Exposed:        true,
		Name:           "PACConfigs",
		SubType:        "pacconfig",
		Type:           "refList",
	},
	"AccessPolicy": {
		AllowedChoices: []string{},
		ConvertedName:  "AccessPolicy",
		Description:    `The computed access policy.`,
		Exposed:        true,
		Name:           "accessPolicy",
		Type:           "string",
	},
	"AgentConfig": {
		AllowedChoices: []string{},
		ConvertedName:  "AgentConfig",
		Description:    `The agent configuration.`,
		Exposed:        true,
		Name:           "agentConfig",
		SubType:        "agentconfig",
		Type:           "ref",
	},
	"AssignPolicy": {
		AllowedChoices: []string{},
		ConvertedName:  "AssignPolicy",
		Description:    `The computed assign policy.`,
		Exposed:        true,
		Name:           "assignPolicy",
		Type:           "string",
	},
	"ContentPolicy": {
		AllowedChoices: []string{},
		ConvertedName:  "ContentPolicy",
		Description:    `The computed content policy.`,
		Exposed:        true,
		Name:           "contentPolicy",
		Type:           "string",
	},
	"CustomDataTypes": {
		AllowedChoices: []string{},
		ConvertedName:  "CustomDataTypes",
		Description:    `List of custom data types.`,
		Exposed:        true,
		Name:           "customDataTypes",
		SubType:        "customdatatype",
		Type:           "refList",
	},
	"Extractors": {
		AllowedChoices: []string{},
		ConvertedName:  "Extractors",
		Description:    `The extractors of the organization.`,
		Exposed:        true,
		Name:           "extractors",
		SubType:        "extractor",
		Type:           "refList",
	},
	"Namespace": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "namespace",
		ConvertedName:  "Namespace",
		Description:    `The namespace of the object.`,
		Exposed:        true,
		Getter:         true,
		Name:           "namespace",
		Orderable:      true,
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Type:           "string",
	},
	"OrgSettings": {
		AllowedChoices: []string{},
		ConvertedName:  "OrgSettings",
		Description:    `The organization settings.`,
		Exposed:        true,
		Name:           "orgSettings",
		SubType:        "orgsettings",
		Type:           "ref",
	},
	"Providers": {
		AllowedChoices: []string{},
		ConvertedName:  "Providers",
		Description:    `The list of available provider.`,
		Exposed:        true,
		Name:           "providers",
		SubType:        "provider",
		Type:           "refList",
	},
	"Tokens": {
		AllowedChoices: []string{},
		ConvertedName:  "Tokens",
		Description:    `Tokens pool to authenticate with the provider.`,
		Exposed:        true,
		Name:           "tokens",
		SubType:        "map[string][]string",
		Type:           "external",
	},
	"WebExtensionConfig": {
		AllowedChoices: []string{},
		ConvertedName:  "WebExtensionConfig",
		Description:    `The web extension configuration.`,
		Exposed:        true,
		Name:           "webExtensionConfig",
		SubType:        "webextensionconfig",
		Type:           "ref",
	},
}

// ProxyConfLowerCaseAttributesMap represents the map of attribute for ProxyConf.
var ProxyConfLowerCaseAttributesMap = map[string]elemental.AttributeSpecification{
	"id": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "_id",
		ConvertedName:  "ID",
		Description:    `ID is the identifier of the object.`,
		Exposed:        true,
		Filterable:     true,
		Identifier:     true,
		Name:           "ID",
		Orderable:      true,
		ReadOnly:       true,
		Stored:         true,
		Type:           "string",
	},
	"pacconfigs": {
		AllowedChoices: []string{},
		ConvertedName:  "PACConfigs",
		Description:    `The PAC configurations of the organizations.`,
		Exposed:        true,
		Name:           "PACConfigs",
		SubType:        "pacconfig",
		Type:           "refList",
	},
	"accesspolicy": {
		AllowedChoices: []string{},
		ConvertedName:  "AccessPolicy",
		Description:    `The computed access policy.`,
		Exposed:        true,
		Name:           "accessPolicy",
		Type:           "string",
	},
	"agentconfig": {
		AllowedChoices: []string{},
		ConvertedName:  "AgentConfig",
		Description:    `The agent configuration.`,
		Exposed:        true,
		Name:           "agentConfig",
		SubType:        "agentconfig",
		Type:           "ref",
	},
	"assignpolicy": {
		AllowedChoices: []string{},
		ConvertedName:  "AssignPolicy",
		Description:    `The computed assign policy.`,
		Exposed:        true,
		Name:           "assignPolicy",
		Type:           "string",
	},
	"contentpolicy": {
		AllowedChoices: []string{},
		ConvertedName:  "ContentPolicy",
		Description:    `The computed content policy.`,
		Exposed:        true,
		Name:           "contentPolicy",
		Type:           "string",
	},
	"customdatatypes": {
		AllowedChoices: []string{},
		ConvertedName:  "CustomDataTypes",
		Description:    `List of custom data types.`,
		Exposed:        true,
		Name:           "customDataTypes",
		SubType:        "customdatatype",
		Type:           "refList",
	},
	"extractors": {
		AllowedChoices: []string{},
		ConvertedName:  "Extractors",
		Description:    `The extractors of the organization.`,
		Exposed:        true,
		Name:           "extractors",
		SubType:        "extractor",
		Type:           "refList",
	},
	"namespace": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "namespace",
		ConvertedName:  "Namespace",
		Description:    `The namespace of the object.`,
		Exposed:        true,
		Getter:         true,
		Name:           "namespace",
		Orderable:      true,
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Type:           "string",
	},
	"orgsettings": {
		AllowedChoices: []string{},
		ConvertedName:  "OrgSettings",
		Description:    `The organization settings.`,
		Exposed:        true,
		Name:           "orgSettings",
		SubType:        "orgsettings",
		Type:           "ref",
	},
	"providers": {
		AllowedChoices: []string{},
		ConvertedName:  "Providers",
		Description:    `The list of available provider.`,
		Exposed:        true,
		Name:           "providers",
		SubType:        "provider",
		Type:           "refList",
	},
	"tokens": {
		AllowedChoices: []string{},
		ConvertedName:  "Tokens",
		Description:    `Tokens pool to authenticate with the provider.`,
		Exposed:        true,
		Name:           "tokens",
		SubType:        "map[string][]string",
		Type:           "external",
	},
	"webextensionconfig": {
		AllowedChoices: []string{},
		ConvertedName:  "WebExtensionConfig",
		Description:    `The web extension configuration.`,
		Exposed:        true,
		Name:           "webExtensionConfig",
		SubType:        "webextensionconfig",
		Type:           "ref",
	},
}

// SparseProxyConfsList represents a list of SparseProxyConfs
type SparseProxyConfsList []*SparseProxyConf

// Identity returns the identity of the objects in the list.
func (o SparseProxyConfsList) Identity() elemental.Identity {

	return ProxyConfIdentity
}

// Copy returns a pointer to a copy the SparseProxyConfsList.
func (o SparseProxyConfsList) Copy() elemental.Identifiables {

	copy := append(SparseProxyConfsList{}, o...)
	return &copy
}

// Append appends the objects to the a new copy of the SparseProxyConfsList.
func (o SparseProxyConfsList) Append(objects ...elemental.Identifiable) elemental.Identifiables {

	out := append(SparseProxyConfsList{}, o...)
	for _, obj := range objects {
		out = append(out, obj.(*SparseProxyConf))
	}

	return out
}

// List converts the object to an elemental.IdentifiablesList.
func (o SparseProxyConfsList) List() elemental.IdentifiablesList {

	out := make(elemental.IdentifiablesList, len(o))
	for i := 0; i < len(o); i++ {
		out[i] = o[i]
	}

	return out
}

// DefaultOrder returns the default ordering fields of the content.
func (o SparseProxyConfsList) DefaultOrder() []string {

	return []string{}
}

// ToPlain returns the SparseProxyConfsList converted to ProxyConfsList.
func (o SparseProxyConfsList) ToPlain() elemental.IdentifiablesList {

	out := make(elemental.IdentifiablesList, len(o))
	for i := 0; i < len(o); i++ {
		out[i] = o[i].ToPlain()
	}

	return out
}

// Version returns the version of the content.
func (o SparseProxyConfsList) Version() int {

	return 1
}

// SparseProxyConf represents the sparse version of a proxyconf.
type SparseProxyConf struct {
	// ID is the identifier of the object.
	ID *string `json:"ID,omitempty" msgpack:"ID,omitempty" bson:"-" mapstructure:"ID,omitempty"`

	// The PAC configurations of the organizations.
	PACConfigs *PACConfigsList `json:"PACConfigs,omitempty" msgpack:"PACConfigs,omitempty" bson:"-" mapstructure:"PACConfigs,omitempty"`

	// The computed access policy.
	AccessPolicy *string `json:"accessPolicy,omitempty" msgpack:"accessPolicy,omitempty" bson:"-" mapstructure:"accessPolicy,omitempty"`

	// The agent configuration.
	AgentConfig *AgentConfig `json:"agentConfig,omitempty" msgpack:"agentConfig,omitempty" bson:"-" mapstructure:"agentConfig,omitempty"`

	// The computed assign policy.
	AssignPolicy *string `json:"assignPolicy,omitempty" msgpack:"assignPolicy,omitempty" bson:"-" mapstructure:"assignPolicy,omitempty"`

	// The computed content policy.
	ContentPolicy *string `json:"contentPolicy,omitempty" msgpack:"contentPolicy,omitempty" bson:"-" mapstructure:"contentPolicy,omitempty"`

	// List of custom data types.
	CustomDataTypes *CustomDataTypesList `json:"customDataTypes,omitempty" msgpack:"customDataTypes,omitempty" bson:"-" mapstructure:"customDataTypes,omitempty"`

	// The extractors of the organization.
	Extractors *ExtractorsList `json:"extractors,omitempty" msgpack:"extractors,omitempty" bson:"-" mapstructure:"extractors,omitempty"`

	// The namespace of the object.
	Namespace *string `json:"namespace,omitempty" msgpack:"namespace,omitempty" bson:"namespace,omitempty" mapstructure:"namespace,omitempty"`

	// The organization settings.
	OrgSettings *OrgSettings `json:"orgSettings,omitempty" msgpack:"orgSettings,omitempty" bson:"-" mapstructure:"orgSettings,omitempty"`

	// The list of available provider.
	Providers *ProvidersList `json:"providers,omitempty" msgpack:"providers,omitempty" bson:"-" mapstructure:"providers,omitempty"`

	// Tokens pool to authenticate with the provider.
	Tokens *map[string][]string `json:"tokens,omitempty" msgpack:"tokens,omitempty" bson:"-" mapstructure:"tokens,omitempty"`

	// The web extension configuration.
	WebExtensionConfig *WebExtensionConfig `json:"webExtensionConfig,omitempty" msgpack:"webExtensionConfig,omitempty" bson:"-" mapstructure:"webExtensionConfig,omitempty"`

	ModelVersion int `json:"-" msgpack:"-" bson:"_modelversion"`
}

// NewSparseProxyConf returns a new  SparseProxyConf.
func NewSparseProxyConf() *SparseProxyConf {
	return &SparseProxyConf{}
}

// Identity returns the Identity of the sparse object.
func (o *SparseProxyConf) Identity() elemental.Identity {

	return ProxyConfIdentity
}

// Identifier returns the value of the sparse object's unique identifier.
func (o *SparseProxyConf) Identifier() string {

	if o.ID == nil {
		return ""
	}
	return *o.ID
}

// SetIdentifier sets the value of the sparse object's unique identifier.
func (o *SparseProxyConf) SetIdentifier(id string) {

	if id != "" {
		o.ID = &id
	} else {
		o.ID = nil
	}
}

// GetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *SparseProxyConf) GetBSON() (any, error) {

	if o == nil {
		return nil, nil
	}

	s := &mongoAttributesSparseProxyConf{}

	if o.ID != nil {
		s.ID = bson.ObjectIdHex(*o.ID)
	}
	if o.Namespace != nil {
		s.Namespace = o.Namespace
	}

	return s, nil
}

// SetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *SparseProxyConf) SetBSON(raw bson.Raw) error {

	if o == nil {
		return nil
	}

	s := &mongoAttributesSparseProxyConf{}
	if err := raw.Unmarshal(s); err != nil {
		return err
	}

	id := s.ID.Hex()
	o.ID = &id
	if s.Namespace != nil {
		o.Namespace = s.Namespace
	}

	return nil
}

// Version returns the hardcoded version of the model.
func (o *SparseProxyConf) Version() int {

	return 1
}

// ToPlain returns the plain version of the sparse model.
func (o *SparseProxyConf) ToPlain() elemental.PlainIdentifiable {

	out := NewProxyConf()
	if o.ID != nil {
		out.ID = *o.ID
	}
	if o.PACConfigs != nil {
		out.PACConfigs = *o.PACConfigs
	}
	if o.AccessPolicy != nil {
		out.AccessPolicy = *o.AccessPolicy
	}
	if o.AgentConfig != nil {
		out.AgentConfig = o.AgentConfig
	}
	if o.AssignPolicy != nil {
		out.AssignPolicy = *o.AssignPolicy
	}
	if o.ContentPolicy != nil {
		out.ContentPolicy = *o.ContentPolicy
	}
	if o.CustomDataTypes != nil {
		out.CustomDataTypes = *o.CustomDataTypes
	}
	if o.Extractors != nil {
		out.Extractors = *o.Extractors
	}
	if o.Namespace != nil {
		out.Namespace = *o.Namespace
	}
	if o.OrgSettings != nil {
		out.OrgSettings = o.OrgSettings
	}
	if o.Providers != nil {
		out.Providers = *o.Providers
	}
	if o.Tokens != nil {
		out.Tokens = *o.Tokens
	}
	if o.WebExtensionConfig != nil {
		out.WebExtensionConfig = o.WebExtensionConfig
	}

	return out
}

// GetNamespace returns the Namespace of the receiver.
func (o *SparseProxyConf) GetNamespace() (out string) {

	if o.Namespace == nil {
		return
	}

	return *o.Namespace
}

// SetNamespace sets the property Namespace of the receiver using the address of the given value.
func (o *SparseProxyConf) SetNamespace(namespace string) {

	o.Namespace = &namespace
}

// DeepCopy returns a deep copy if the SparseProxyConf.
func (o *SparseProxyConf) DeepCopy() *SparseProxyConf {

	if o == nil {
		return nil
	}

	out := &SparseProxyConf{}
	o.DeepCopyInto(out)

	return out
}

// DeepCopyInto copies the receiver into the given *SparseProxyConf.
func (o *SparseProxyConf) DeepCopyInto(out *SparseProxyConf) {

	target, err := copystructure.Copy(o)
	if err != nil {
		panic(fmt.Sprintf("Unable to deepcopy SparseProxyConf: %s", err))
	}

	*out = *target.(*SparseProxyConf)
}

type mongoAttributesProxyConf struct {
	ID        bson.ObjectId `bson:"_id,omitempty"`
	Namespace string        `bson:"namespace,omitempty"`
}
type mongoAttributesSparseProxyConf struct {
	ID        bson.ObjectId `bson:"_id,omitempty"`
	Namespace *string       `bson:"namespace,omitempty"`
}
