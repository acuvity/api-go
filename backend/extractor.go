// Code generated by elegen. DO NOT EDIT.
// Source: go.acuvity.ai/elemental (templates/model.gotpl)

package api

import (
	"fmt"

	"github.com/globalsign/mgo/bson"
	"github.com/mitchellh/copystructure"
	"go.acuvity.ai/elemental"
)

// ExtractorAnonymizationValue represents the possible values for attribute "anonymization".
type ExtractorAnonymizationValue string

const (
	// ExtractorAnonymizationFixedSize represents the value FixedSize.
	ExtractorAnonymizationFixedSize ExtractorAnonymizationValue = "FixedSize"

	// ExtractorAnonymizationVariableSize represents the value VariableSize.
	ExtractorAnonymizationVariableSize ExtractorAnonymizationValue = "VariableSize"
)

// ExtractorBehaviorValue represents the possible values for attribute "behavior".
type ExtractorBehaviorValue string

const (
	// ExtractorBehaviorIgnore represents the value Ignore.
	ExtractorBehaviorIgnore ExtractorBehaviorValue = "Ignore"

	// ExtractorBehaviorPopup represents the value Popup.
	ExtractorBehaviorPopup ExtractorBehaviorValue = "Popup"

	// ExtractorBehaviorThrow represents the value Throw.
	ExtractorBehaviorThrow ExtractorBehaviorValue = "Throw"
)

// ExtractorBlockValue represents the possible values for attribute "block".
type ExtractorBlockValue string

const (
	// ExtractorBlockAfter represents the value After.
	ExtractorBlockAfter ExtractorBlockValue = "After"

	// ExtractorBlockAllow represents the value Allow.
	ExtractorBlockAllow ExtractorBlockValue = "Allow"

	// ExtractorBlockBefore represents the value Before.
	ExtractorBlockBefore ExtractorBlockValue = "Before"
)

// ExtractorCancelBehaviorValue represents the possible values for attribute "cancelBehavior".
type ExtractorCancelBehaviorValue string

const (
	// ExtractorCancelBehaviorBlock represents the value Block.
	ExtractorCancelBehaviorBlock ExtractorCancelBehaviorValue = "Block"

	// ExtractorCancelBehaviorSendRedacted represents the value SendRedacted.
	ExtractorCancelBehaviorSendRedacted ExtractorCancelBehaviorValue = "SendRedacted"
)

// ExtractorMethodValue represents the possible values for attribute "method".
type ExtractorMethodValue string

const (
	// ExtractorMethodDelete represents the value Delete.
	ExtractorMethodDelete ExtractorMethodValue = "Delete"

	// ExtractorMethodGet represents the value Get.
	ExtractorMethodGet ExtractorMethodValue = "Get"

	// ExtractorMethodHead represents the value Head.
	ExtractorMethodHead ExtractorMethodValue = "Head"

	// ExtractorMethodOptions represents the value Options.
	ExtractorMethodOptions ExtractorMethodValue = "Options"

	// ExtractorMethodPatch represents the value Patch.
	ExtractorMethodPatch ExtractorMethodValue = "Patch"

	// ExtractorMethodPost represents the value Post.
	ExtractorMethodPost ExtractorMethodValue = "Post"

	// ExtractorMethodPut represents the value Put.
	ExtractorMethodPut ExtractorMethodValue = "Put"
)

// Extractor represents the model of a extractor
type Extractor struct {
	// The analyzers parameter allows for customizing which analyzers should be used,
	// overriding the default selection. Each analyzer entry can optionally include a
	// prefix to modify its behavior:
	//
	//   - No prefix: Runs only the specified analyzers and any dependencies required
	// for deeper analyzis (slower but more acurate).
	//   - '+' (enable): Activates an analyzer that is disabled by default.
	//   - '-' (disable): Disables an analyzer that is enabled by default.
	//   - '@' (direct execution): Runs the analyzer immediately, bypassing the deeper
	// analyzis (faster but less acurate).
	//
	// An analyzers entry can be specified using:
	//   - The analyzer name (e.g., 'Toxicity detector')
	//   - The analyzer ID (e.g., 'en-text-toxicity-detector')
	//   - The analyzer group (e.g., 'Detectors')
	//   - A detector name (e.g., 'toxic')
	//   - A detector label (e.g., 'insult')
	//   - A detector group (e.g., 'Malcontents')
	//
	// If left empty, all default analyzers will be executed.
	Analyzers []string `json:"analyzers,omitempty" msgpack:"analyzers,omitempty" bson:"analyzers,omitempty" mapstructure:"analyzers,omitempty"`

	// How to anonymize the data. If deanonymize is true, then VariablSize is required.
	Anonymization ExtractorAnonymizationValue `json:"anonymization" msgpack:"anonymization" bson:"anonymization" mapstructure:"anonymization,omitempty"`

	// Defines how to handle error in the case of a webpage. If set to Popup, the error
	// will be shown in a popup. If throw, a javascript error will be returned.
	Behavior ExtractorBehaviorValue `json:"behavior,omitempty" msgpack:"behavior,omitempty" bson:"behavior,omitempty" mapstructure:"behavior,omitempty"`

	// Block the request to the provider if not Allow. If Before, the data will be
	// blocked before running any extraction or analyzis. If After block the request
	// after analysizis.
	Block ExtractorBlockValue `json:"block" msgpack:"block" bson:"block" mapstructure:"block,omitempty"`

	// The behavior to take when cancel is chosen from the popup.
	CancelBehavior ExtractorCancelBehaviorValue `json:"cancelBehavior" msgpack:"cancelBehavior" bson:"cancelbehavior" mapstructure:"cancelBehavior,omitempty"`

	// If true, deanonymize the redacted data. This has no effects on streaming output.
	Deanonymize bool `json:"deanonymize" msgpack:"deanonymize" bson:"deanonymize" mapstructure:"deanonymize,omitempty"`

	// Optional hosts to match. This is useful in case the provider has multiple hosts
	// to discriminate which logger to use.
	Hosts []string `json:"hosts,omitempty" msgpack:"hosts,omitempty" bson:"hosts,omitempty" mapstructure:"hosts,omitempty"`

	// If true, the analysis will run, but nothing will be logged.
	Ignore bool `json:"ignore,omitempty" msgpack:"ignore,omitempty" bson:"ignore,omitempty" mapstructure:"ignore,omitempty"`

	// A regular expression to match an URL to log.
	Match string `json:"match" msgpack:"match" bson:"match" mapstructure:"match,omitempty"`

	// The method to match.
	Method ExtractorMethodValue `json:"method" msgpack:"method" bson:"method" mapstructure:"method,omitempty"`

	// The name of the extractor. It will be used to identify which extractor was used
	// during an extraction.
	Name string `json:"name,omitempty" msgpack:"name,omitempty" bson:"name,omitempty" mapstructure:"name,omitempty"`

	// If not empty, use this lua code to run the extraction.
	Script string `json:"script,omitempty" msgpack:"script,omitempty" bson:"script,omitempty" mapstructure:"script,omitempty"`

	ModelVersion int `json:"-" msgpack:"-" bson:"_modelversion"`
}

// NewExtractor returns a new *Extractor
func NewExtractor() *Extractor {

	return &Extractor{
		ModelVersion:   1,
		Analyzers:      []string{},
		Anonymization:  ExtractorAnonymizationFixedSize,
		Behavior:       ExtractorBehaviorPopup,
		Block:          ExtractorBlockAllow,
		CancelBehavior: ExtractorCancelBehaviorBlock,
		Hosts:          []string{},
	}
}

// GetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *Extractor) GetBSON() (any, error) {

	if o == nil {
		return nil, nil
	}

	s := &mongoAttributesExtractor{}

	s.Analyzers = o.Analyzers
	s.Anonymization = o.Anonymization
	s.Behavior = o.Behavior
	s.Block = o.Block
	s.CancelBehavior = o.CancelBehavior
	s.Deanonymize = o.Deanonymize
	s.Hosts = o.Hosts
	s.Ignore = o.Ignore
	s.Match = o.Match
	s.Method = o.Method
	s.Name = o.Name
	s.Script = o.Script

	return s, nil
}

// SetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *Extractor) SetBSON(raw bson.Raw) error {

	if o == nil {
		return nil
	}

	s := &mongoAttributesExtractor{}
	if err := raw.Unmarshal(s); err != nil {
		return err
	}

	o.Analyzers = s.Analyzers
	o.Anonymization = s.Anonymization
	o.Behavior = s.Behavior
	o.Block = s.Block
	o.CancelBehavior = s.CancelBehavior
	o.Deanonymize = s.Deanonymize
	o.Hosts = s.Hosts
	o.Ignore = s.Ignore
	o.Match = s.Match
	o.Method = s.Method
	o.Name = s.Name
	o.Script = s.Script

	return nil
}

// BleveType implements the bleve.Classifier Interface.
func (o *Extractor) BleveType() string {

	return "extractor"
}

// GetMatch returns the Match of the receiver.
func (o *Extractor) GetMatch() string {

	return o.Match
}

// DeepCopy returns a deep copy if the Extractor.
func (o *Extractor) DeepCopy() *Extractor {

	if o == nil {
		return nil
	}

	out := &Extractor{}
	o.DeepCopyInto(out)

	return out
}

// DeepCopyInto copies the receiver into the given *Extractor.
func (o *Extractor) DeepCopyInto(out *Extractor) {

	target, err := copystructure.Copy(o)
	if err != nil {
		panic(fmt.Sprintf("Unable to deepcopy Extractor: %s", err))
	}

	*out = *target.(*Extractor)
}

// Validate valides the current information stored into the structure.
func (o *Extractor) Validate() error {

	errors := elemental.Errors{}
	requiredErrors := elemental.Errors{}

	if err := elemental.ValidateStringInList("anonymization", string(o.Anonymization), []string{"FixedSize", "VariableSize"}, false); err != nil {
		errors = errors.Append(err)
	}

	if err := elemental.ValidateStringInList("behavior", string(o.Behavior), []string{"Popup", "Throw", "Ignore"}, false); err != nil {
		errors = errors.Append(err)
	}

	if err := elemental.ValidateStringInList("block", string(o.Block), []string{"Allow", "Before", "After"}, false); err != nil {
		errors = errors.Append(err)
	}

	if err := elemental.ValidateStringInList("cancelBehavior", string(o.CancelBehavior), []string{"Block", "SendRedacted"}, false); err != nil {
		errors = errors.Append(err)
	}

	if err := elemental.ValidateRequiredString("match", o.Match); err != nil {
		requiredErrors = requiredErrors.Append(err)
	}

	if err := elemental.ValidateRequiredString("method", string(o.Method)); err != nil {
		requiredErrors = requiredErrors.Append(err)
	}

	if err := elemental.ValidateStringInList("method", string(o.Method), []string{"Post", "Put", "Patch", "Get", "Delete", "Options", "Head"}, false); err != nil {
		errors = errors.Append(err)
	}

	if err := ValidateLua("script", o.Script); err != nil {
		errors = errors.Append(err)
	}

	// Custom object validation.
	if err := ValidateExtractor(o); err != nil {
		errors = errors.Append(err)
	}

	if len(requiredErrors) > 0 {
		return requiredErrors
	}

	if len(errors) > 0 {
		return errors
	}

	return nil
}

// SpecificationForAttribute returns the AttributeSpecification for the given attribute name key.
func (*Extractor) SpecificationForAttribute(name string) elemental.AttributeSpecification {

	if v, ok := ExtractorAttributesMap[name]; ok {
		return v
	}

	// We could not find it, so let's check on the lower case indexed spec map
	return ExtractorLowerCaseAttributesMap[name]
}

// AttributeSpecifications returns the full attribute specifications map.
func (*Extractor) AttributeSpecifications() map[string]elemental.AttributeSpecification {

	return ExtractorAttributesMap
}

// ValueForAttribute returns the value for the given attribute.
// This is a very advanced function that you should not need but in some
// very specific use cases.
func (o *Extractor) ValueForAttribute(name string) any {

	switch name {
	case "analyzers":
		return o.Analyzers
	case "anonymization":
		return o.Anonymization
	case "behavior":
		return o.Behavior
	case "block":
		return o.Block
	case "cancelBehavior":
		return o.CancelBehavior
	case "deanonymize":
		return o.Deanonymize
	case "hosts":
		return o.Hosts
	case "ignore":
		return o.Ignore
	case "match":
		return o.Match
	case "method":
		return o.Method
	case "name":
		return o.Name
	case "script":
		return o.Script
	}

	return nil
}

// ExtractorAttributesMap represents the map of attribute for Extractor.
var ExtractorAttributesMap = map[string]elemental.AttributeSpecification{
	"Analyzers": {
		AllowedChoices: []string{},
		BSONFieldName:  "analyzers",
		ConvertedName:  "Analyzers",
		Description: `The analyzers parameter allows for customizing which analyzers should be used,
overriding the default selection. Each analyzer entry can optionally include a
prefix to modify its behavior:

  - No prefix: Runs only the specified analyzers and any dependencies required
for deeper analyzis (slower but more acurate).
  - '+' (enable): Activates an analyzer that is disabled by default.
  - '-' (disable): Disables an analyzer that is enabled by default.
  - '@' (direct execution): Runs the analyzer immediately, bypassing the deeper
analyzis (faster but less acurate).

An analyzers entry can be specified using:
  - The analyzer name (e.g., 'Toxicity detector')
  - The analyzer ID (e.g., 'en-text-toxicity-detector')
  - The analyzer group (e.g., 'Detectors')
  - A detector name (e.g., 'toxic')
  - A detector label (e.g., 'insult')
  - A detector group (e.g., 'Malcontents')

If left empty, all default analyzers will be executed.`,
		Exposed: true,
		Name:    "analyzers",
		Stored:  true,
		SubType: "string",
		Type:    "list",
	},
	"Anonymization": {
		AllowedChoices: []string{"FixedSize", "VariableSize"},
		BSONFieldName:  "anonymization",
		ConvertedName:  "Anonymization",
		DefaultValue:   ExtractorAnonymizationFixedSize,
		Description:    `How to anonymize the data. If deanonymize is true, then VariablSize is required.`,
		Exposed:        true,
		Name:           "anonymization",
		Stored:         true,
		Type:           "enum",
	},
	"Behavior": {
		AllowedChoices: []string{"Popup", "Throw", "Ignore"},
		BSONFieldName:  "behavior",
		ConvertedName:  "Behavior",
		DefaultValue:   ExtractorBehaviorPopup,
		Description: `Defines how to handle error in the case of a webpage. If set to Popup, the error
will be shown in a popup. If throw, a javascript error will be returned.`,
		Exposed: true,
		Name:    "behavior",
		Stored:  true,
		Type:    "enum",
	},
	"Block": {
		AllowedChoices: []string{"Allow", "Before", "After"},
		BSONFieldName:  "block",
		ConvertedName:  "Block",
		DefaultValue:   ExtractorBlockAllow,
		Description: `Block the request to the provider if not Allow. If Before, the data will be
blocked before running any extraction or analyzis. If After block the request
after analysizis.`,
		Exposed: true,
		Name:    "block",
		Stored:  true,
		Type:    "enum",
	},
	"CancelBehavior": {
		AllowedChoices: []string{"Block", "SendRedacted"},
		BSONFieldName:  "cancelbehavior",
		ConvertedName:  "CancelBehavior",
		DefaultValue:   ExtractorCancelBehaviorBlock,
		Description:    `The behavior to take when cancel is chosen from the popup.`,
		Exposed:        true,
		Name:           "cancelBehavior",
		Stored:         true,
		Type:           "enum",
	},
	"Deanonymize": {
		AllowedChoices: []string{},
		BSONFieldName:  "deanonymize",
		ConvertedName:  "Deanonymize",
		Description:    `If true, deanonymize the redacted data. This has no effects on streaming output.`,
		Exposed:        true,
		Name:           "deanonymize",
		Stored:         true,
		Type:           "boolean",
	},
	"Hosts": {
		AllowedChoices: []string{},
		BSONFieldName:  "hosts",
		ConvertedName:  "Hosts",
		Description: `Optional hosts to match. This is useful in case the provider has multiple hosts
to discriminate which logger to use.`,
		Exposed: true,
		Name:    "hosts",
		Stored:  true,
		SubType: "string",
		Type:    "list",
	},
	"Ignore": {
		AllowedChoices: []string{},
		BSONFieldName:  "ignore",
		ConvertedName:  "Ignore",
		Description:    `If true, the analysis will run, but nothing will be logged.`,
		Exposed:        true,
		Name:           "ignore",
		Stored:         true,
		Type:           "boolean",
	},
	"Match": {
		AllowedChoices: []string{},
		BSONFieldName:  "match",
		ConvertedName:  "Match",
		Description:    `A regular expression to match an URL to log.`,
		Exposed:        true,
		Getter:         true,
		Name:           "match",
		Required:       true,
		Stored:         true,
		Type:           "string",
	},
	"Method": {
		AllowedChoices: []string{"Post", "Put", "Patch", "Get", "Delete", "Options", "Head"},
		BSONFieldName:  "method",
		ConvertedName:  "Method",
		Description:    `The method to match.`,
		Exposed:        true,
		Name:           "method",
		Required:       true,
		Stored:         true,
		SubType:        "string",
		Type:           "enum",
	},
	"Name": {
		AllowedChoices: []string{},
		BSONFieldName:  "name",
		ConvertedName:  "Name",
		Description: `The name of the extractor. It will be used to identify which extractor was used
during an extraction.`,
		Exposed: true,
		Name:    "name",
		Stored:  true,
		Type:    "string",
	},
	"Script": {
		AllowedChoices: []string{},
		BSONFieldName:  "script",
		ConvertedName:  "Script",
		Description:    `If not empty, use this lua code to run the extraction.`,
		Exposed:        true,
		Name:           "script",
		Stored:         true,
		Type:           "string",
	},
}

// ExtractorLowerCaseAttributesMap represents the map of attribute for Extractor.
var ExtractorLowerCaseAttributesMap = map[string]elemental.AttributeSpecification{
	"analyzers": {
		AllowedChoices: []string{},
		BSONFieldName:  "analyzers",
		ConvertedName:  "Analyzers",
		Description: `The analyzers parameter allows for customizing which analyzers should be used,
overriding the default selection. Each analyzer entry can optionally include a
prefix to modify its behavior:

  - No prefix: Runs only the specified analyzers and any dependencies required
for deeper analyzis (slower but more acurate).
  - '+' (enable): Activates an analyzer that is disabled by default.
  - '-' (disable): Disables an analyzer that is enabled by default.
  - '@' (direct execution): Runs the analyzer immediately, bypassing the deeper
analyzis (faster but less acurate).

An analyzers entry can be specified using:
  - The analyzer name (e.g., 'Toxicity detector')
  - The analyzer ID (e.g., 'en-text-toxicity-detector')
  - The analyzer group (e.g., 'Detectors')
  - A detector name (e.g., 'toxic')
  - A detector label (e.g., 'insult')
  - A detector group (e.g., 'Malcontents')

If left empty, all default analyzers will be executed.`,
		Exposed: true,
		Name:    "analyzers",
		Stored:  true,
		SubType: "string",
		Type:    "list",
	},
	"anonymization": {
		AllowedChoices: []string{"FixedSize", "VariableSize"},
		BSONFieldName:  "anonymization",
		ConvertedName:  "Anonymization",
		DefaultValue:   ExtractorAnonymizationFixedSize,
		Description:    `How to anonymize the data. If deanonymize is true, then VariablSize is required.`,
		Exposed:        true,
		Name:           "anonymization",
		Stored:         true,
		Type:           "enum",
	},
	"behavior": {
		AllowedChoices: []string{"Popup", "Throw", "Ignore"},
		BSONFieldName:  "behavior",
		ConvertedName:  "Behavior",
		DefaultValue:   ExtractorBehaviorPopup,
		Description: `Defines how to handle error in the case of a webpage. If set to Popup, the error
will be shown in a popup. If throw, a javascript error will be returned.`,
		Exposed: true,
		Name:    "behavior",
		Stored:  true,
		Type:    "enum",
	},
	"block": {
		AllowedChoices: []string{"Allow", "Before", "After"},
		BSONFieldName:  "block",
		ConvertedName:  "Block",
		DefaultValue:   ExtractorBlockAllow,
		Description: `Block the request to the provider if not Allow. If Before, the data will be
blocked before running any extraction or analyzis. If After block the request
after analysizis.`,
		Exposed: true,
		Name:    "block",
		Stored:  true,
		Type:    "enum",
	},
	"cancelbehavior": {
		AllowedChoices: []string{"Block", "SendRedacted"},
		BSONFieldName:  "cancelbehavior",
		ConvertedName:  "CancelBehavior",
		DefaultValue:   ExtractorCancelBehaviorBlock,
		Description:    `The behavior to take when cancel is chosen from the popup.`,
		Exposed:        true,
		Name:           "cancelBehavior",
		Stored:         true,
		Type:           "enum",
	},
	"deanonymize": {
		AllowedChoices: []string{},
		BSONFieldName:  "deanonymize",
		ConvertedName:  "Deanonymize",
		Description:    `If true, deanonymize the redacted data. This has no effects on streaming output.`,
		Exposed:        true,
		Name:           "deanonymize",
		Stored:         true,
		Type:           "boolean",
	},
	"hosts": {
		AllowedChoices: []string{},
		BSONFieldName:  "hosts",
		ConvertedName:  "Hosts",
		Description: `Optional hosts to match. This is useful in case the provider has multiple hosts
to discriminate which logger to use.`,
		Exposed: true,
		Name:    "hosts",
		Stored:  true,
		SubType: "string",
		Type:    "list",
	},
	"ignore": {
		AllowedChoices: []string{},
		BSONFieldName:  "ignore",
		ConvertedName:  "Ignore",
		Description:    `If true, the analysis will run, but nothing will be logged.`,
		Exposed:        true,
		Name:           "ignore",
		Stored:         true,
		Type:           "boolean",
	},
	"match": {
		AllowedChoices: []string{},
		BSONFieldName:  "match",
		ConvertedName:  "Match",
		Description:    `A regular expression to match an URL to log.`,
		Exposed:        true,
		Getter:         true,
		Name:           "match",
		Required:       true,
		Stored:         true,
		Type:           "string",
	},
	"method": {
		AllowedChoices: []string{"Post", "Put", "Patch", "Get", "Delete", "Options", "Head"},
		BSONFieldName:  "method",
		ConvertedName:  "Method",
		Description:    `The method to match.`,
		Exposed:        true,
		Name:           "method",
		Required:       true,
		Stored:         true,
		SubType:        "string",
		Type:           "enum",
	},
	"name": {
		AllowedChoices: []string{},
		BSONFieldName:  "name",
		ConvertedName:  "Name",
		Description: `The name of the extractor. It will be used to identify which extractor was used
during an extraction.`,
		Exposed: true,
		Name:    "name",
		Stored:  true,
		Type:    "string",
	},
	"script": {
		AllowedChoices: []string{},
		BSONFieldName:  "script",
		ConvertedName:  "Script",
		Description:    `If not empty, use this lua code to run the extraction.`,
		Exposed:        true,
		Name:           "script",
		Stored:         true,
		Type:           "string",
	},
}

type mongoAttributesExtractor struct {
	Analyzers      []string                     `bson:"analyzers,omitempty"`
	Anonymization  ExtractorAnonymizationValue  `bson:"anonymization"`
	Behavior       ExtractorBehaviorValue       `bson:"behavior,omitempty"`
	Block          ExtractorBlockValue          `bson:"block"`
	CancelBehavior ExtractorCancelBehaviorValue `bson:"cancelbehavior"`
	Deanonymize    bool                         `bson:"deanonymize"`
	Hosts          []string                     `bson:"hosts,omitempty"`
	Ignore         bool                         `bson:"ignore,omitempty"`
	Match          string                       `bson:"match"`
	Method         ExtractorMethodValue         `bson:"method"`
	Name           string                       `bson:"name,omitempty"`
	Script         string                       `bson:"script,omitempty"`
}
