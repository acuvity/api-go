// Code generated by elegen. DO NOT EDIT.
// Source: go.acuvity.ai/elemental (templates/model.gotpl)

package api

import (
	"fmt"

	"github.com/globalsign/mgo/bson"
	"github.com/mitchellh/copystructure"
	"go.acuvity.ai/elemental"
)

// DomainHits represents the model of a domainhits
type DomainHits struct {
	// The name of the application that the domain belongs to.
	App string `json:"app,omitempty" msgpack:"app,omitempty" bson:"app,omitempty" mapstructure:"app,omitempty"`

	// The component of the application that the domain belongs to.
	Component string `json:"component,omitempty" msgpack:"component,omitempty" bson:"component,omitempty" mapstructure:"component,omitempty"`

	// Domain that has been visited.
	Domain string `json:"domain" msgpack:"domain" bson:"-" mapstructure:"domain,omitempty"`

	// The number of hits for this report.
	Hits int `json:"hits" msgpack:"hits" bson:"-" mapstructure:"hits,omitempty"`

	// Suspicious is true if the service might be a Shadow AI.
	Suspicious bool `json:"suspicious" msgpack:"suspicious" bson:"-" mapstructure:"suspicious,omitempty"`

	ModelVersion int `json:"-" msgpack:"-" bson:"_modelversion"`
}

// NewDomainHits returns a new *DomainHits
func NewDomainHits() *DomainHits {

	return &DomainHits{
		ModelVersion: 1,
	}
}

// GetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *DomainHits) GetBSON() (any, error) {

	if o == nil {
		return nil, nil
	}

	s := &mongoAttributesDomainHits{}

	s.App = o.App
	s.Component = o.Component

	return s, nil
}

// SetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *DomainHits) SetBSON(raw bson.Raw) error {

	if o == nil {
		return nil
	}

	s := &mongoAttributesDomainHits{}
	if err := raw.Unmarshal(s); err != nil {
		return err
	}

	o.App = s.App
	o.Component = s.Component

	return nil
}

// BleveType implements the bleve.Classifier Interface.
func (o *DomainHits) BleveType() string {

	return "domainhits"
}

// DeepCopy returns a deep copy if the DomainHits.
func (o *DomainHits) DeepCopy() *DomainHits {

	if o == nil {
		return nil
	}

	out := &DomainHits{}
	o.DeepCopyInto(out)

	return out
}

// DeepCopyInto copies the receiver into the given *DomainHits.
func (o *DomainHits) DeepCopyInto(out *DomainHits) {

	target, err := copystructure.Copy(o)
	if err != nil {
		panic(fmt.Sprintf("Unable to deepcopy DomainHits: %s", err))
	}

	*out = *target.(*DomainHits)
}

// Validate valides the current information stored into the structure.
func (o *DomainHits) Validate() error {

	errors := elemental.Errors{}
	requiredErrors := elemental.Errors{}

	if err := elemental.ValidateRequiredString("domain", o.Domain); err != nil {
		requiredErrors = requiredErrors.Append(err)
	}

	if err := elemental.ValidateRequiredInt("hits", o.Hits); err != nil {
		requiredErrors = requiredErrors.Append(err)
	}

	if err := elemental.ValidateMinimumInt("hits", o.Hits, int(1), false); err != nil {
		errors = errors.Append(err)
	}

	if len(requiredErrors) > 0 {
		return requiredErrors
	}

	if len(errors) > 0 {
		return errors
	}

	return nil
}

// SpecificationForAttribute returns the AttributeSpecification for the given attribute name key.
func (*DomainHits) SpecificationForAttribute(name string) elemental.AttributeSpecification {

	if v, ok := DomainHitsAttributesMap[name]; ok {
		return v
	}

	// We could not find it, so let's check on the lower case indexed spec map
	return DomainHitsLowerCaseAttributesMap[name]
}

// AttributeSpecifications returns the full attribute specifications map.
func (*DomainHits) AttributeSpecifications() map[string]elemental.AttributeSpecification {

	return DomainHitsAttributesMap
}

// ValueForAttribute returns the value for the given attribute.
// This is a very advanced function that you should not need but in some
// very specific use cases.
func (o *DomainHits) ValueForAttribute(name string) any {

	switch name {
	case "app":
		return o.App
	case "component":
		return o.Component
	case "domain":
		return o.Domain
	case "hits":
		return o.Hits
	case "suspicious":
		return o.Suspicious
	}

	return nil
}

// DomainHitsAttributesMap represents the map of attribute for DomainHits.
var DomainHitsAttributesMap = map[string]elemental.AttributeSpecification{
	"App": {
		AllowedChoices: []string{},
		BSONFieldName:  "app",
		ConvertedName:  "App",
		Description:    `The name of the application that the domain belongs to.`,
		Exposed:        true,
		Name:           "app",
		Stored:         true,
		Type:           "string",
	},
	"Component": {
		AllowedChoices: []string{},
		BSONFieldName:  "component",
		ConvertedName:  "Component",
		Description:    `The component of the application that the domain belongs to.`,
		Exposed:        true,
		Name:           "component",
		Stored:         true,
		Type:           "string",
	},
	"Domain": {
		AllowedChoices: []string{},
		ConvertedName:  "Domain",
		Description:    `Domain that has been visited.`,
		Exposed:        true,
		Name:           "domain",
		Required:       true,
		Type:           "string",
	},
	"Hits": {
		AllowedChoices: []string{},
		ConvertedName:  "Hits",
		Description:    `The number of hits for this report.`,
		Exposed:        true,
		MinValue:       1,
		Name:           "hits",
		Required:       true,
		Type:           "integer",
	},
	"Suspicious": {
		AllowedChoices: []string{},
		ConvertedName:  "Suspicious",
		Description:    `Suspicious is true if the service might be a Shadow AI.`,
		Exposed:        true,
		Name:           "suspicious",
		Type:           "boolean",
	},
}

// DomainHitsLowerCaseAttributesMap represents the map of attribute for DomainHits.
var DomainHitsLowerCaseAttributesMap = map[string]elemental.AttributeSpecification{
	"app": {
		AllowedChoices: []string{},
		BSONFieldName:  "app",
		ConvertedName:  "App",
		Description:    `The name of the application that the domain belongs to.`,
		Exposed:        true,
		Name:           "app",
		Stored:         true,
		Type:           "string",
	},
	"component": {
		AllowedChoices: []string{},
		BSONFieldName:  "component",
		ConvertedName:  "Component",
		Description:    `The component of the application that the domain belongs to.`,
		Exposed:        true,
		Name:           "component",
		Stored:         true,
		Type:           "string",
	},
	"domain": {
		AllowedChoices: []string{},
		ConvertedName:  "Domain",
		Description:    `Domain that has been visited.`,
		Exposed:        true,
		Name:           "domain",
		Required:       true,
		Type:           "string",
	},
	"hits": {
		AllowedChoices: []string{},
		ConvertedName:  "Hits",
		Description:    `The number of hits for this report.`,
		Exposed:        true,
		MinValue:       1,
		Name:           "hits",
		Required:       true,
		Type:           "integer",
	},
	"suspicious": {
		AllowedChoices: []string{},
		ConvertedName:  "Suspicious",
		Description:    `Suspicious is true if the service might be a Shadow AI.`,
		Exposed:        true,
		Name:           "suspicious",
		Type:           "boolean",
	},
}

type mongoAttributesDomainHits struct {
	App       string `bson:"app,omitempty"`
	Component string `bson:"component,omitempty"`
}
