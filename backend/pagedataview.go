// Code generated by elegen. DO NOT EDIT.
// Source: go.acuvity.ai/elemental (templates/model.gotpl)

package api

import (
	"fmt"
	"slices"
	"time"

	"github.com/globalsign/mgo/bson"
	"github.com/mitchellh/copystructure"
	"go.acuvity.ai/elemental"
)

// PageDataViewIdentity represents the Identity of the object.
var PageDataViewIdentity = elemental.Identity{
	Name:     "pagedataview",
	Category: "pagedataviews",
	Package:  "lain",
	Private:  false,
}

// PageDataViewsList represents a list of PageDataViews
type PageDataViewsList []*PageDataView

// Identity returns the identity of the objects in the list.
func (o PageDataViewsList) Identity() elemental.Identity {

	return PageDataViewIdentity
}

// Copy returns a pointer to a copy the PageDataViewsList.
func (o PageDataViewsList) Copy() elemental.Identifiables {

	out := slices.Clone(o)
	return &out
}

// Append appends the objects to the a new copy of the PageDataViewsList.
func (o PageDataViewsList) Append(objects ...elemental.Identifiable) elemental.Identifiables {

	out := slices.Clone(o)
	for _, obj := range objects {
		out = append(out, obj.(*PageDataView))
	}

	return out
}

// List converts the object to an elemental.IdentifiablesList.
func (o PageDataViewsList) List() elemental.IdentifiablesList {

	out := make(elemental.IdentifiablesList, len(o))
	for i := range len(o) {
		out[i] = o[i]
	}

	return out
}

// DefaultOrder returns the default ordering fields of the content.
func (o PageDataViewsList) DefaultOrder() []string {

	return []string{}
}

// ToSparse returns the PageDataViewsList converted to SparsePageDataViewsList.
// Objects in the list will only contain the given fields. No field means entire field set.
func (o PageDataViewsList) ToSparse(fields ...string) elemental.Identifiables {

	out := make(SparsePageDataViewsList, len(o))
	for i := range len(o) {
		out[i] = o[i].ToSparse(fields...).(*SparsePageDataView)
	}

	return out
}

// Version returns the version of the content.
func (o PageDataViewsList) Version() int {

	return 1
}

// PageDataView represents the model of a pagedataview
type PageDataView struct {
	// ID is the identifier of the object.
	ID string `json:"ID,omitempty" msgpack:"ID,omitempty" bson:"-" mapstructure:"ID,omitempty"`

	// Creation date of the object.
	CreateTime time.Time `json:"createTime" msgpack:"createTime" bson:"createtime" mapstructure:"createTime,omitempty"`

	// The name of the page data view.
	Name string `json:"name" msgpack:"name" bson:"name" mapstructure:"name,omitempty"`

	// The namespace of the object.
	Namespace string `json:"namespace,omitempty" msgpack:"namespace,omitempty" bson:"namespace,omitempty" mapstructure:"namespace,omitempty"`

	// The name of the page.
	PageID string `json:"pageID" msgpack:"pageID" bson:"pageid" mapstructure:"pageID,omitempty"`

	// The match criteria used to make a query.
	Predicates []*PageDataViewPredicate `json:"predicates" msgpack:"predicates" bson:"predicates" mapstructure:"predicates,omitempty"`

	// Last update date of the object.
	UpdateTime time.Time `json:"updateTime" msgpack:"updateTime" bson:"updatetime" mapstructure:"updateTime,omitempty"`

	// Hash of the object used to shard the data.
	ZHash int `json:"-" msgpack:"-" bson:"zhash" mapstructure:"-,omitempty"`

	// Sharding zone.
	Zone int `json:"-" msgpack:"-" bson:"zone" mapstructure:"-,omitempty"`

	ModelVersion int `json:"-" msgpack:"-" bson:"_modelversion"`
}

// NewPageDataView returns a new *PageDataView
func NewPageDataView() *PageDataView {

	return &PageDataView{
		ModelVersion: 1,
	}
}

// Identity returns the Identity of the object.
func (o *PageDataView) Identity() elemental.Identity {

	return PageDataViewIdentity
}

// Identifier returns the value of the object's unique identifier.
func (o *PageDataView) Identifier() string {

	return o.ID
}

// SetIdentifier sets the value of the object's unique identifier.
func (o *PageDataView) SetIdentifier(id string) {

	o.ID = id
}

// GetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *PageDataView) GetBSON() (any, error) {

	if o == nil {
		return nil, nil
	}

	s := &mongoAttributesPageDataView{}

	if o.ID != "" {
		s.ID = bson.ObjectIdHex(o.ID)
	}
	s.CreateTime = o.CreateTime
	s.Name = o.Name
	s.Namespace = o.Namespace
	s.PageID = o.PageID
	s.Predicates = o.Predicates
	s.UpdateTime = o.UpdateTime
	s.ZHash = o.ZHash
	s.Zone = o.Zone

	return s, nil
}

// SetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *PageDataView) SetBSON(raw bson.Raw) error {

	if o == nil || raw.Kind == bson.ElementNil {
		return bson.ErrSetZero
	}

	s := &mongoAttributesPageDataView{}
	if err := raw.Unmarshal(s); err != nil {
		return err
	}

	o.ID = s.ID.Hex()
	o.CreateTime = s.CreateTime
	o.Name = s.Name
	o.Namespace = s.Namespace
	o.PageID = s.PageID
	o.Predicates = s.Predicates
	o.UpdateTime = s.UpdateTime
	o.ZHash = s.ZHash
	o.Zone = s.Zone

	return nil
}

// Version returns the hardcoded version of the model.
func (o *PageDataView) Version() int {

	return 1
}

// BleveType implements the bleve.Classifier Interface.
func (o *PageDataView) BleveType() string {

	return "pagedataview"
}

// DefaultOrder returns the list of default ordering fields.
func (o *PageDataView) DefaultOrder() []string {

	return []string{}
}

// Doc returns the documentation for the object
func (o *PageDataView) Doc() string {

	return `Represents a page data view.`
}

func (o *PageDataView) String() string {

	return fmt.Sprintf("<%s:%s>", o.Identity().Name, o.Identifier())
}

// GetCreateTime returns the CreateTime of the receiver.
func (o *PageDataView) GetCreateTime() time.Time {

	return o.CreateTime
}

// SetCreateTime sets the property CreateTime of the receiver using the given value.
func (o *PageDataView) SetCreateTime(createTime time.Time) {

	o.CreateTime = createTime
}

// GetNamespace returns the Namespace of the receiver.
func (o *PageDataView) GetNamespace() string {

	return o.Namespace
}

// SetNamespace sets the property Namespace of the receiver using the given value.
func (o *PageDataView) SetNamespace(namespace string) {

	o.Namespace = namespace
}

// GetUpdateTime returns the UpdateTime of the receiver.
func (o *PageDataView) GetUpdateTime() time.Time {

	return o.UpdateTime
}

// SetUpdateTime sets the property UpdateTime of the receiver using the given value.
func (o *PageDataView) SetUpdateTime(updateTime time.Time) {

	o.UpdateTime = updateTime
}

// ToSparse returns the sparse version of the model.
// The returned object will only contain the given fields. No field means entire field set.
func (o *PageDataView) ToSparse(fields ...string) elemental.SparseIdentifiable {

	if len(fields) == 0 {
		// nolint: goimports
		return &SparsePageDataView{
			ID:         &o.ID,
			CreateTime: &o.CreateTime,
			Name:       &o.Name,
			Namespace:  &o.Namespace,
			PageID:     &o.PageID,
			Predicates: &o.Predicates,
			UpdateTime: &o.UpdateTime,
			ZHash:      &o.ZHash,
			Zone:       &o.Zone,
		}
	}

	sp := &SparsePageDataView{}
	for _, f := range fields {
		switch f {
		case "ID":
			sp.ID = &(o.ID)
		case "createTime":
			sp.CreateTime = &(o.CreateTime)
		case "name":
			sp.Name = &(o.Name)
		case "namespace":
			sp.Namespace = &(o.Namespace)
		case "pageID":
			sp.PageID = &(o.PageID)
		case "predicates":
			sp.Predicates = &(o.Predicates)
		case "updateTime":
			sp.UpdateTime = &(o.UpdateTime)
		case "zHash":
			sp.ZHash = &(o.ZHash)
		case "zone":
			sp.Zone = &(o.Zone)
		}
	}

	return sp
}

// Patch apply the non nil value of a *SparsePageDataView to the object.
func (o *PageDataView) Patch(sparse elemental.SparseIdentifiable) {
	if !sparse.Identity().IsEqual(o.Identity()) {
		panic("cannot patch from a parse with different identity")
	}

	so := sparse.(*SparsePageDataView)
	if so.ID != nil {
		o.ID = *so.ID
	}
	if so.CreateTime != nil {
		o.CreateTime = *so.CreateTime
	}
	if so.Name != nil {
		o.Name = *so.Name
	}
	if so.Namespace != nil {
		o.Namespace = *so.Namespace
	}
	if so.PageID != nil {
		o.PageID = *so.PageID
	}
	if so.Predicates != nil {
		o.Predicates = *so.Predicates
	}
	if so.UpdateTime != nil {
		o.UpdateTime = *so.UpdateTime
	}
	if so.ZHash != nil {
		o.ZHash = *so.ZHash
	}
	if so.Zone != nil {
		o.Zone = *so.Zone
	}
}

// DeepCopy returns a deep copy if the PageDataView.
func (o *PageDataView) DeepCopy() *PageDataView {

	if o == nil {
		return nil
	}

	out := &PageDataView{}
	o.DeepCopyInto(out)

	return out
}

// DeepCopyInto copies the receiver into the given *PageDataView.
func (o *PageDataView) DeepCopyInto(out *PageDataView) {

	target, err := copystructure.Copy(o)
	if err != nil {
		panic(fmt.Sprintf("Unable to deepcopy PageDataView: %s", err))
	}

	*out = *target.(*PageDataView)
}

// Validate valides the current information stored into the structure.
func (o *PageDataView) Validate() error {

	errors := elemental.Errors{}
	requiredErrors := elemental.Errors{}

	if err := elemental.ValidateRequiredString("name", o.Name); err != nil {
		requiredErrors = requiredErrors.Append(err)
	}

	if err := elemental.ValidateRequiredString("pageID", o.PageID); err != nil {
		requiredErrors = requiredErrors.Append(err)
	}

	for _, sub := range o.Predicates {
		if sub == nil {
			continue
		}
		elemental.ResetDefaultForZeroValues(sub)
		if err := sub.Validate(); err != nil {
			errors = errors.Append(err)
		}
	}

	if len(requiredErrors) > 0 {
		return requiredErrors
	}

	if len(errors) > 0 {
		return errors
	}

	return nil
}

// SpecificationForAttribute returns the AttributeSpecification for the given attribute name key.
func (*PageDataView) SpecificationForAttribute(name string) elemental.AttributeSpecification {

	if v, ok := PageDataViewAttributesMap[name]; ok {
		return v
	}

	// We could not find it, so let's check on the lower case indexed spec map
	return PageDataViewLowerCaseAttributesMap[name]
}

// AttributeSpecifications returns the full attribute specifications map.
func (*PageDataView) AttributeSpecifications() map[string]elemental.AttributeSpecification {

	return PageDataViewAttributesMap
}

// ValueForAttribute returns the value for the given attribute.
// This is a very advanced function that you should not need but in some
// very specific use cases.
func (o *PageDataView) ValueForAttribute(name string) any {

	switch name {
	case "ID":
		return o.ID
	case "createTime":
		return o.CreateTime
	case "name":
		return o.Name
	case "namespace":
		return o.Namespace
	case "pageID":
		return o.PageID
	case "predicates":
		return o.Predicates
	case "updateTime":
		return o.UpdateTime
	case "zHash":
		return o.ZHash
	case "zone":
		return o.Zone
	}

	return nil
}

// PageDataViewAttributesMap represents the map of attribute for PageDataView.
var PageDataViewAttributesMap = map[string]elemental.AttributeSpecification{
	"ID": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "_id",
		ConvertedName:  "ID",
		Description:    `ID is the identifier of the object.`,
		Exposed:        true,
		Filterable:     true,
		Identifier:     true,
		Name:           "ID",
		Orderable:      true,
		ReadOnly:       true,
		Stored:         true,
		Type:           "string",
	},
	"CreateTime": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "createtime",
		ConvertedName:  "CreateTime",
		Description:    `Creation date of the object.`,
		Exposed:        true,
		Getter:         true,
		Name:           "createTime",
		Orderable:      true,
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Type:           "time",
	},
	"Name": {
		AllowedChoices: []string{},
		BSONFieldName:  "name",
		ConvertedName:  "Name",
		Description:    `The name of the page data view.`,
		Exposed:        true,
		Name:           "name",
		Required:       true,
		Stored:         true,
		Type:           "string",
	},
	"Namespace": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "namespace",
		ConvertedName:  "Namespace",
		Description:    `The namespace of the object.`,
		Exposed:        true,
		Getter:         true,
		Name:           "namespace",
		Orderable:      true,
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Type:           "string",
	},
	"PageID": {
		AllowedChoices: []string{},
		BSONFieldName:  "pageid",
		ConvertedName:  "PageID",
		Description:    `The name of the page.`,
		Exposed:        true,
		Name:           "pageID",
		Required:       true,
		Stored:         true,
		Type:           "string",
	},
	"Predicates": {
		AllowedChoices: []string{},
		BSONFieldName:  "predicates",
		ConvertedName:  "Predicates",
		Description:    `The match criteria used to make a query.`,
		Exposed:        true,
		Name:           "predicates",
		Stored:         true,
		SubType:        "pagedataviewpredicate",
		Type:           "refList",
	},
	"UpdateTime": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "updatetime",
		ConvertedName:  "UpdateTime",
		Description:    `Last update date of the object.`,
		Exposed:        true,
		Getter:         true,
		Name:           "updateTime",
		Orderable:      true,
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Type:           "time",
	},
}

// PageDataViewLowerCaseAttributesMap represents the map of attribute for PageDataView.
var PageDataViewLowerCaseAttributesMap = map[string]elemental.AttributeSpecification{
	"id": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "_id",
		ConvertedName:  "ID",
		Description:    `ID is the identifier of the object.`,
		Exposed:        true,
		Filterable:     true,
		Identifier:     true,
		Name:           "ID",
		Orderable:      true,
		ReadOnly:       true,
		Stored:         true,
		Type:           "string",
	},
	"createtime": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "createtime",
		ConvertedName:  "CreateTime",
		Description:    `Creation date of the object.`,
		Exposed:        true,
		Getter:         true,
		Name:           "createTime",
		Orderable:      true,
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Type:           "time",
	},
	"name": {
		AllowedChoices: []string{},
		BSONFieldName:  "name",
		ConvertedName:  "Name",
		Description:    `The name of the page data view.`,
		Exposed:        true,
		Name:           "name",
		Required:       true,
		Stored:         true,
		Type:           "string",
	},
	"namespace": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "namespace",
		ConvertedName:  "Namespace",
		Description:    `The namespace of the object.`,
		Exposed:        true,
		Getter:         true,
		Name:           "namespace",
		Orderable:      true,
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Type:           "string",
	},
	"pageid": {
		AllowedChoices: []string{},
		BSONFieldName:  "pageid",
		ConvertedName:  "PageID",
		Description:    `The name of the page.`,
		Exposed:        true,
		Name:           "pageID",
		Required:       true,
		Stored:         true,
		Type:           "string",
	},
	"predicates": {
		AllowedChoices: []string{},
		BSONFieldName:  "predicates",
		ConvertedName:  "Predicates",
		Description:    `The match criteria used to make a query.`,
		Exposed:        true,
		Name:           "predicates",
		Stored:         true,
		SubType:        "pagedataviewpredicate",
		Type:           "refList",
	},
	"updatetime": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "updatetime",
		ConvertedName:  "UpdateTime",
		Description:    `Last update date of the object.`,
		Exposed:        true,
		Getter:         true,
		Name:           "updateTime",
		Orderable:      true,
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Type:           "time",
	},
}

// SparsePageDataViewsList represents a list of SparsePageDataViews
type SparsePageDataViewsList []*SparsePageDataView

// Identity returns the identity of the objects in the list.
func (o SparsePageDataViewsList) Identity() elemental.Identity {

	return PageDataViewIdentity
}

// Copy returns a pointer to a copy the SparsePageDataViewsList.
func (o SparsePageDataViewsList) Copy() elemental.Identifiables {

	copy := slices.Clone(o)
	return &copy
}

// Append appends the objects to the a new copy of the SparsePageDataViewsList.
func (o SparsePageDataViewsList) Append(objects ...elemental.Identifiable) elemental.Identifiables {

	out := slices.Clone(o)
	for _, obj := range objects {
		out = append(out, obj.(*SparsePageDataView))
	}

	return out
}

// List converts the object to an elemental.IdentifiablesList.
func (o SparsePageDataViewsList) List() elemental.IdentifiablesList {

	out := make(elemental.IdentifiablesList, len(o))
	for i := range len(o) {
		out[i] = o[i]
	}

	return out
}

// DefaultOrder returns the default ordering fields of the content.
func (o SparsePageDataViewsList) DefaultOrder() []string {

	return []string{}
}

// ToPlain returns the SparsePageDataViewsList converted to PageDataViewsList.
func (o SparsePageDataViewsList) ToPlain() elemental.IdentifiablesList {

	out := make(elemental.IdentifiablesList, len(o))
	for i := range len(o) {
		out[i] = o[i].ToPlain()
	}

	return out
}

// Version returns the version of the content.
func (o SparsePageDataViewsList) Version() int {

	return 1
}

// SparsePageDataView represents the sparse version of a pagedataview.
type SparsePageDataView struct {
	// ID is the identifier of the object.
	ID *string `json:"ID,omitempty" msgpack:"ID,omitempty" bson:"-" mapstructure:"ID,omitempty"`

	// Creation date of the object.
	CreateTime *time.Time `json:"createTime,omitempty" msgpack:"createTime,omitempty" bson:"createtime,omitempty" mapstructure:"createTime,omitempty"`

	// The name of the page data view.
	Name *string `json:"name,omitempty" msgpack:"name,omitempty" bson:"name,omitempty" mapstructure:"name,omitempty"`

	// The namespace of the object.
	Namespace *string `json:"namespace,omitempty" msgpack:"namespace,omitempty" bson:"namespace,omitempty" mapstructure:"namespace,omitempty"`

	// The name of the page.
	PageID *string `json:"pageID,omitempty" msgpack:"pageID,omitempty" bson:"pageid,omitempty" mapstructure:"pageID,omitempty"`

	// The match criteria used to make a query.
	Predicates *[]*PageDataViewPredicate `json:"predicates,omitempty" msgpack:"predicates,omitempty" bson:"predicates,omitempty" mapstructure:"predicates,omitempty"`

	// Last update date of the object.
	UpdateTime *time.Time `json:"updateTime,omitempty" msgpack:"updateTime,omitempty" bson:"updatetime,omitempty" mapstructure:"updateTime,omitempty"`

	// Hash of the object used to shard the data.
	ZHash *int `json:"-" msgpack:"-" bson:"zhash,omitempty" mapstructure:"-,omitempty"`

	// Sharding zone.
	Zone *int `json:"-" msgpack:"-" bson:"zone,omitempty" mapstructure:"-,omitempty"`

	ModelVersion int `json:"-" msgpack:"-" bson:"_modelversion"`
}

// NewSparsePageDataView returns a new  SparsePageDataView.
func NewSparsePageDataView() *SparsePageDataView {
	return &SparsePageDataView{}
}

// Identity returns the Identity of the sparse object.
func (o *SparsePageDataView) Identity() elemental.Identity {

	return PageDataViewIdentity
}

// Identifier returns the value of the sparse object's unique identifier.
func (o *SparsePageDataView) Identifier() string {

	if o.ID == nil {
		return ""
	}
	return *o.ID
}

// SetIdentifier sets the value of the sparse object's unique identifier.
func (o *SparsePageDataView) SetIdentifier(id string) {

	if id != "" {
		o.ID = &id
	} else {
		o.ID = nil
	}
}

// GetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *SparsePageDataView) GetBSON() (any, error) {

	if o == nil {
		return nil, nil
	}

	s := &mongoAttributesSparsePageDataView{}

	if o.ID != nil {
		s.ID = bson.ObjectIdHex(*o.ID)
	}
	if o.CreateTime != nil {
		s.CreateTime = o.CreateTime
	}
	if o.Name != nil {
		s.Name = o.Name
	}
	if o.Namespace != nil {
		s.Namespace = o.Namespace
	}
	if o.PageID != nil {
		s.PageID = o.PageID
	}
	if o.Predicates != nil {
		s.Predicates = o.Predicates
	}
	if o.UpdateTime != nil {
		s.UpdateTime = o.UpdateTime
	}
	if o.ZHash != nil {
		s.ZHash = o.ZHash
	}
	if o.Zone != nil {
		s.Zone = o.Zone
	}

	return s, nil
}

// SetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *SparsePageDataView) SetBSON(raw bson.Raw) error {

	if o == nil {
		return nil
	}

	s := &mongoAttributesSparsePageDataView{}
	if err := raw.Unmarshal(s); err != nil {
		return err
	}

	id := s.ID.Hex()
	o.ID = &id
	if s.CreateTime != nil {
		o.CreateTime = s.CreateTime
	}
	if s.Name != nil {
		o.Name = s.Name
	}
	if s.Namespace != nil {
		o.Namespace = s.Namespace
	}
	if s.PageID != nil {
		o.PageID = s.PageID
	}
	if s.Predicates != nil {
		o.Predicates = s.Predicates
	}
	if s.UpdateTime != nil {
		o.UpdateTime = s.UpdateTime
	}
	if s.ZHash != nil {
		o.ZHash = s.ZHash
	}
	if s.Zone != nil {
		o.Zone = s.Zone
	}

	return nil
}

// Version returns the hardcoded version of the model.
func (o *SparsePageDataView) Version() int {

	return 1
}

// ToPlain returns the plain version of the sparse model.
func (o *SparsePageDataView) ToPlain() elemental.PlainIdentifiable {

	out := NewPageDataView()
	if o.ID != nil {
		out.ID = *o.ID
	}
	if o.CreateTime != nil {
		out.CreateTime = *o.CreateTime
	}
	if o.Name != nil {
		out.Name = *o.Name
	}
	if o.Namespace != nil {
		out.Namespace = *o.Namespace
	}
	if o.PageID != nil {
		out.PageID = *o.PageID
	}
	if o.Predicates != nil {
		out.Predicates = *o.Predicates
	}
	if o.UpdateTime != nil {
		out.UpdateTime = *o.UpdateTime
	}
	if o.ZHash != nil {
		out.ZHash = *o.ZHash
	}
	if o.Zone != nil {
		out.Zone = *o.Zone
	}

	return out
}

// GetCreateTime returns the CreateTime of the receiver.
func (o *SparsePageDataView) GetCreateTime() (out time.Time) {

	if o.CreateTime == nil {
		return
	}

	return *o.CreateTime
}

// SetCreateTime sets the property CreateTime of the receiver using the address of the given value.
func (o *SparsePageDataView) SetCreateTime(createTime time.Time) {

	o.CreateTime = &createTime
}

// GetNamespace returns the Namespace of the receiver.
func (o *SparsePageDataView) GetNamespace() (out string) {

	if o.Namespace == nil {
		return
	}

	return *o.Namespace
}

// SetNamespace sets the property Namespace of the receiver using the address of the given value.
func (o *SparsePageDataView) SetNamespace(namespace string) {

	o.Namespace = &namespace
}

// GetUpdateTime returns the UpdateTime of the receiver.
func (o *SparsePageDataView) GetUpdateTime() (out time.Time) {

	if o.UpdateTime == nil {
		return
	}

	return *o.UpdateTime
}

// SetUpdateTime sets the property UpdateTime of the receiver using the address of the given value.
func (o *SparsePageDataView) SetUpdateTime(updateTime time.Time) {

	o.UpdateTime = &updateTime
}

// DeepCopy returns a deep copy if the SparsePageDataView.
func (o *SparsePageDataView) DeepCopy() *SparsePageDataView {

	if o == nil {
		return nil
	}

	out := &SparsePageDataView{}
	o.DeepCopyInto(out)

	return out
}

// DeepCopyInto copies the receiver into the given *SparsePageDataView.
func (o *SparsePageDataView) DeepCopyInto(out *SparsePageDataView) {

	target, err := copystructure.Copy(o)
	if err != nil {
		panic(fmt.Sprintf("Unable to deepcopy SparsePageDataView: %s", err))
	}

	*out = *target.(*SparsePageDataView)
}

type mongoAttributesPageDataView struct {
	ID         bson.ObjectId            `bson:"_id,omitempty"`
	CreateTime time.Time                `bson:"createtime"`
	Name       string                   `bson:"name"`
	Namespace  string                   `bson:"namespace,omitempty"`
	PageID     string                   `bson:"pageid"`
	Predicates []*PageDataViewPredicate `bson:"predicates"`
	UpdateTime time.Time                `bson:"updatetime"`
	ZHash      int                      `bson:"zhash"`
	Zone       int                      `bson:"zone"`
}
type mongoAttributesSparsePageDataView struct {
	ID         bson.ObjectId             `bson:"_id,omitempty"`
	CreateTime *time.Time                `bson:"createtime,omitempty"`
	Name       *string                   `bson:"name,omitempty"`
	Namespace  *string                   `bson:"namespace,omitempty"`
	PageID     *string                   `bson:"pageid,omitempty"`
	Predicates *[]*PageDataViewPredicate `bson:"predicates,omitempty"`
	UpdateTime *time.Time                `bson:"updatetime,omitempty"`
	ZHash      *int                      `bson:"zhash,omitempty"`
	Zone       *int                      `bson:"zone,omitempty"`
}
