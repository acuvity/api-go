// Code generated by elegen. DO NOT EDIT.
// Source: go.acuvity.ai/elemental (templates/model.gotpl)

package api

import (
	"fmt"
	"slices"

	"github.com/globalsign/mgo/bson"
	"github.com/mitchellh/copystructure"
	"go.acuvity.ai/elemental"
)

// AnalyzerIdentity represents the Identity of the object.
var AnalyzerIdentity = elemental.Identity{
	Name:     "analyzer",
	Category: "analyzers",
	Package:  "proxy",
	Private:  false,
}

// AnalyzersList represents a list of Analyzers
type AnalyzersList []*Analyzer

// Identity returns the identity of the objects in the list.
func (o AnalyzersList) Identity() elemental.Identity {

	return AnalyzerIdentity
}

// Copy returns a pointer to a copy the AnalyzersList.
func (o AnalyzersList) Copy() elemental.Identifiables {

	out := slices.Clone(o)
	return &out
}

// Append appends the objects to the a new copy of the AnalyzersList.
func (o AnalyzersList) Append(objects ...elemental.Identifiable) elemental.Identifiables {

	out := slices.Clone(o)
	for _, obj := range objects {
		out = append(out, obj.(*Analyzer))
	}

	return out
}

// List converts the object to an elemental.IdentifiablesList.
func (o AnalyzersList) List() elemental.IdentifiablesList {

	out := make(elemental.IdentifiablesList, len(o))
	for i := range len(o) {
		out[i] = o[i]
	}

	return out
}

// DefaultOrder returns the default ordering fields of the content.
func (o AnalyzersList) DefaultOrder() []string {

	return []string{}
}

// ToSparse returns the AnalyzersList converted to SparseAnalyzersList.
// Objects in the list will only contain the given fields. No field means entire field set.
func (o AnalyzersList) ToSparse(fields ...string) elemental.Identifiables {

	out := make(SparseAnalyzersList, len(o))
	for i := range len(o) {
		out[i] = o[i].ToSparse(fields...).(*SparseAnalyzer)
	}

	return out
}

// Version returns the version of the content.
func (o AnalyzersList) Version() int {

	return 1
}

// Analyzer represents the model of a analyzer
type Analyzer struct {
	// ID is the identifier of the object.
	ID string `json:"ID,omitempty" msgpack:"ID,omitempty" bson:"-" mapstructure:"ID,omitempty"`

	// The description of the analyzer.
	Description string `json:"description" msgpack:"description" bson:"-" mapstructure:"description,omitempty"`

	// A list of detection matcher that will trigger the analyzer.
	DetectionMatchers [][]DetectionMatcher `json:"detectionMatchers,omitempty" msgpack:"detectionMatchers,omitempty" bson:"-" mapstructure:"detectionMatchers,omitempty"`

	// The detectors the analyzer can use.
	Detectors []*Detector `json:"detectors,omitempty" msgpack:"detectors,omitempty" bson:"-" mapstructure:"detectors,omitempty"`

	// Tell if the analyzer is enabled by default.
	Enabled bool `json:"enabled" msgpack:"enabled" bson:"-" mapstructure:"enabled,omitempty"`

	// The group the analyzer belongs to.
	Group string `json:"group" msgpack:"group" bson:"-" mapstructure:"group,omitempty"`

	// The models used by the analyzer.
	Models []*AnalyzerModel `json:"models,omitempty" msgpack:"models,omitempty" bson:"-" mapstructure:"models,omitempty"`

	// The name of the analyzer.
	Name string `json:"name" msgpack:"name" bson:"-" mapstructure:"name,omitempty"`

	// The namespace of the object.
	Namespace string `json:"namespace,omitempty" msgpack:"namespace,omitempty" bson:"namespace,omitempty" mapstructure:"namespace,omitempty"`

	ModelVersion int `json:"-" msgpack:"-" bson:"_modelversion"`
}

// NewAnalyzer returns a new *Analyzer
func NewAnalyzer() *Analyzer {

	return &Analyzer{
		ModelVersion: 1,
	}
}

// Identity returns the Identity of the object.
func (o *Analyzer) Identity() elemental.Identity {

	return AnalyzerIdentity
}

// Identifier returns the value of the object's unique identifier.
func (o *Analyzer) Identifier() string {

	return o.ID
}

// SetIdentifier sets the value of the object's unique identifier.
func (o *Analyzer) SetIdentifier(id string) {

	o.ID = id
}

// GetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *Analyzer) GetBSON() (any, error) {

	if o == nil {
		return nil, nil
	}

	s := &mongoAttributesAnalyzer{}

	if o.ID != "" {
		s.ID = bson.ObjectIdHex(o.ID)
	}
	s.Namespace = o.Namespace

	return s, nil
}

// SetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *Analyzer) SetBSON(raw bson.Raw) error {

	if o == nil || raw.Kind == bson.ElementNil {
		return bson.ErrSetZero
	}

	s := &mongoAttributesAnalyzer{}
	if err := raw.Unmarshal(s); err != nil {
		return err
	}

	o.ID = s.ID.Hex()
	o.Namespace = s.Namespace

	return nil
}

// Version returns the hardcoded version of the model.
func (o *Analyzer) Version() int {

	return 1
}

// BleveType implements the bleve.Classifier Interface.
func (o *Analyzer) BleveType() string {

	return "analyzer"
}

// DefaultOrder returns the list of default ordering fields.
func (o *Analyzer) DefaultOrder() []string {

	return []string{}
}

// Doc returns the documentation for the object
func (o *Analyzer) Doc() string {

	return `Represents an analyzer.`
}

func (o *Analyzer) String() string {

	return fmt.Sprintf("<%s:%s>", o.Identity().Name, o.Identifier())
}

// GetNamespace returns the Namespace of the receiver.
func (o *Analyzer) GetNamespace() string {

	return o.Namespace
}

// SetNamespace sets the property Namespace of the receiver using the given value.
func (o *Analyzer) SetNamespace(namespace string) {

	o.Namespace = namespace
}

// ToSparse returns the sparse version of the model.
// The returned object will only contain the given fields. No field means entire field set.
func (o *Analyzer) ToSparse(fields ...string) elemental.SparseIdentifiable {

	if len(fields) == 0 {
		// nolint: goimports
		return &SparseAnalyzer{
			ID:                &o.ID,
			Description:       &o.Description,
			DetectionMatchers: &o.DetectionMatchers,
			Detectors:         &o.Detectors,
			Enabled:           &o.Enabled,
			Group:             &o.Group,
			Models:            &o.Models,
			Name:              &o.Name,
			Namespace:         &o.Namespace,
		}
	}

	sp := &SparseAnalyzer{}
	for _, f := range fields {
		switch f {
		case "ID":
			sp.ID = &(o.ID)
		case "description":
			sp.Description = &(o.Description)
		case "detectionMatchers":
			sp.DetectionMatchers = &(o.DetectionMatchers)
		case "detectors":
			sp.Detectors = &(o.Detectors)
		case "enabled":
			sp.Enabled = &(o.Enabled)
		case "group":
			sp.Group = &(o.Group)
		case "models":
			sp.Models = &(o.Models)
		case "name":
			sp.Name = &(o.Name)
		case "namespace":
			sp.Namespace = &(o.Namespace)
		}
	}

	return sp
}

// Patch apply the non nil value of a *SparseAnalyzer to the object.
func (o *Analyzer) Patch(sparse elemental.SparseIdentifiable) {
	if !sparse.Identity().IsEqual(o.Identity()) {
		panic("cannot patch from a parse with different identity")
	}

	so := sparse.(*SparseAnalyzer)
	if so.ID != nil {
		o.ID = *so.ID
	}
	if so.Description != nil {
		o.Description = *so.Description
	}
	if so.DetectionMatchers != nil {
		o.DetectionMatchers = *so.DetectionMatchers
	}
	if so.Detectors != nil {
		o.Detectors = *so.Detectors
	}
	if so.Enabled != nil {
		o.Enabled = *so.Enabled
	}
	if so.Group != nil {
		o.Group = *so.Group
	}
	if so.Models != nil {
		o.Models = *so.Models
	}
	if so.Name != nil {
		o.Name = *so.Name
	}
	if so.Namespace != nil {
		o.Namespace = *so.Namespace
	}
}

// DeepCopy returns a deep copy if the Analyzer.
func (o *Analyzer) DeepCopy() *Analyzer {

	if o == nil {
		return nil
	}

	out := &Analyzer{}
	o.DeepCopyInto(out)

	return out
}

// DeepCopyInto copies the receiver into the given *Analyzer.
func (o *Analyzer) DeepCopyInto(out *Analyzer) {

	target, err := copystructure.Copy(o)
	if err != nil {
		panic(fmt.Sprintf("Unable to deepcopy Analyzer: %s", err))
	}

	*out = *target.(*Analyzer)
}

// Validate valides the current information stored into the structure.
func (o *Analyzer) Validate() error {

	errors := elemental.Errors{}
	requiredErrors := elemental.Errors{}

	for _, sub := range o.Detectors {
		if sub == nil {
			continue
		}
		elemental.ResetDefaultForZeroValues(sub)
		if err := sub.Validate(); err != nil {
			errors = errors.Append(err)
		}
	}

	for _, sub := range o.Models {
		if sub == nil {
			continue
		}
		elemental.ResetDefaultForZeroValues(sub)
		if err := sub.Validate(); err != nil {
			errors = errors.Append(err)
		}
	}

	if len(requiredErrors) > 0 {
		return requiredErrors
	}

	if len(errors) > 0 {
		return errors
	}

	return nil
}

// SpecificationForAttribute returns the AttributeSpecification for the given attribute name key.
func (*Analyzer) SpecificationForAttribute(name string) elemental.AttributeSpecification {

	if v, ok := AnalyzerAttributesMap[name]; ok {
		return v
	}

	// We could not find it, so let's check on the lower case indexed spec map
	return AnalyzerLowerCaseAttributesMap[name]
}

// AttributeSpecifications returns the full attribute specifications map.
func (*Analyzer) AttributeSpecifications() map[string]elemental.AttributeSpecification {

	return AnalyzerAttributesMap
}

// ValueForAttribute returns the value for the given attribute.
// This is a very advanced function that you should not need but in some
// very specific use cases.
func (o *Analyzer) ValueForAttribute(name string) any {

	switch name {
	case "ID":
		return o.ID
	case "description":
		return o.Description
	case "detectionMatchers":
		return o.DetectionMatchers
	case "detectors":
		return o.Detectors
	case "enabled":
		return o.Enabled
	case "group":
		return o.Group
	case "models":
		return o.Models
	case "name":
		return o.Name
	case "namespace":
		return o.Namespace
	}

	return nil
}

// AnalyzerAttributesMap represents the map of attribute for Analyzer.
var AnalyzerAttributesMap = map[string]elemental.AttributeSpecification{
	"ID": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "_id",
		ConvertedName:  "ID",
		Description:    `ID is the identifier of the object.`,
		Exposed:        true,
		Filterable:     true,
		Identifier:     true,
		Name:           "ID",
		Orderable:      true,
		ReadOnly:       true,
		Stored:         true,
		Type:           "string",
	},
	"Description": {
		AllowedChoices: []string{},
		ConvertedName:  "Description",
		Description:    `The description of the analyzer.`,
		Exposed:        true,
		Name:           "description",
		Type:           "string",
	},
	"DetectionMatchers": {
		AllowedChoices: []string{},
		ConvertedName:  "DetectionMatchers",
		Description:    `A list of detection matcher that will trigger the analyzer.`,
		Exposed:        true,
		Name:           "detectionMatchers",
		SubType:        "[][]detectionmatcher",
		Type:           "external",
	},
	"Detectors": {
		AllowedChoices: []string{},
		ConvertedName:  "Detectors",
		Description:    `The detectors the analyzer can use.`,
		Exposed:        true,
		Name:           "detectors",
		SubType:        "detector",
		Type:           "refList",
	},
	"Enabled": {
		AllowedChoices: []string{},
		ConvertedName:  "Enabled",
		Description:    `Tell if the analyzer is enabled by default.`,
		Exposed:        true,
		Name:           "enabled",
		Type:           "boolean",
	},
	"Group": {
		AllowedChoices: []string{},
		ConvertedName:  "Group",
		Description:    `The group the analyzer belongs to.`,
		Exposed:        true,
		Name:           "group",
		Type:           "string",
	},
	"Models": {
		AllowedChoices: []string{},
		ConvertedName:  "Models",
		Description:    `The models used by the analyzer.`,
		Exposed:        true,
		Name:           "models",
		SubType:        "analyzermodel",
		Type:           "refList",
	},
	"Name": {
		AllowedChoices: []string{},
		ConvertedName:  "Name",
		Description:    `The name of the analyzer.`,
		Exposed:        true,
		Name:           "name",
		Type:           "string",
	},
	"Namespace": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "namespace",
		ConvertedName:  "Namespace",
		Description:    `The namespace of the object.`,
		Exposed:        true,
		Getter:         true,
		Name:           "namespace",
		Orderable:      true,
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Type:           "string",
	},
}

// AnalyzerLowerCaseAttributesMap represents the map of attribute for Analyzer.
var AnalyzerLowerCaseAttributesMap = map[string]elemental.AttributeSpecification{
	"id": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "_id",
		ConvertedName:  "ID",
		Description:    `ID is the identifier of the object.`,
		Exposed:        true,
		Filterable:     true,
		Identifier:     true,
		Name:           "ID",
		Orderable:      true,
		ReadOnly:       true,
		Stored:         true,
		Type:           "string",
	},
	"description": {
		AllowedChoices: []string{},
		ConvertedName:  "Description",
		Description:    `The description of the analyzer.`,
		Exposed:        true,
		Name:           "description",
		Type:           "string",
	},
	"detectionmatchers": {
		AllowedChoices: []string{},
		ConvertedName:  "DetectionMatchers",
		Description:    `A list of detection matcher that will trigger the analyzer.`,
		Exposed:        true,
		Name:           "detectionMatchers",
		SubType:        "[][]detectionmatcher",
		Type:           "external",
	},
	"detectors": {
		AllowedChoices: []string{},
		ConvertedName:  "Detectors",
		Description:    `The detectors the analyzer can use.`,
		Exposed:        true,
		Name:           "detectors",
		SubType:        "detector",
		Type:           "refList",
	},
	"enabled": {
		AllowedChoices: []string{},
		ConvertedName:  "Enabled",
		Description:    `Tell if the analyzer is enabled by default.`,
		Exposed:        true,
		Name:           "enabled",
		Type:           "boolean",
	},
	"group": {
		AllowedChoices: []string{},
		ConvertedName:  "Group",
		Description:    `The group the analyzer belongs to.`,
		Exposed:        true,
		Name:           "group",
		Type:           "string",
	},
	"models": {
		AllowedChoices: []string{},
		ConvertedName:  "Models",
		Description:    `The models used by the analyzer.`,
		Exposed:        true,
		Name:           "models",
		SubType:        "analyzermodel",
		Type:           "refList",
	},
	"name": {
		AllowedChoices: []string{},
		ConvertedName:  "Name",
		Description:    `The name of the analyzer.`,
		Exposed:        true,
		Name:           "name",
		Type:           "string",
	},
	"namespace": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "namespace",
		ConvertedName:  "Namespace",
		Description:    `The namespace of the object.`,
		Exposed:        true,
		Getter:         true,
		Name:           "namespace",
		Orderable:      true,
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Type:           "string",
	},
}

// SparseAnalyzersList represents a list of SparseAnalyzers
type SparseAnalyzersList []*SparseAnalyzer

// Identity returns the identity of the objects in the list.
func (o SparseAnalyzersList) Identity() elemental.Identity {

	return AnalyzerIdentity
}

// Copy returns a pointer to a copy the SparseAnalyzersList.
func (o SparseAnalyzersList) Copy() elemental.Identifiables {

	copy := slices.Clone(o)
	return &copy
}

// Append appends the objects to the a new copy of the SparseAnalyzersList.
func (o SparseAnalyzersList) Append(objects ...elemental.Identifiable) elemental.Identifiables {

	out := slices.Clone(o)
	for _, obj := range objects {
		out = append(out, obj.(*SparseAnalyzer))
	}

	return out
}

// List converts the object to an elemental.IdentifiablesList.
func (o SparseAnalyzersList) List() elemental.IdentifiablesList {

	out := make(elemental.IdentifiablesList, len(o))
	for i := range len(o) {
		out[i] = o[i]
	}

	return out
}

// DefaultOrder returns the default ordering fields of the content.
func (o SparseAnalyzersList) DefaultOrder() []string {

	return []string{}
}

// ToPlain returns the SparseAnalyzersList converted to AnalyzersList.
func (o SparseAnalyzersList) ToPlain() elemental.IdentifiablesList {

	out := make(elemental.IdentifiablesList, len(o))
	for i := range len(o) {
		out[i] = o[i].ToPlain()
	}

	return out
}

// Version returns the version of the content.
func (o SparseAnalyzersList) Version() int {

	return 1
}

// SparseAnalyzer represents the sparse version of a analyzer.
type SparseAnalyzer struct {
	// ID is the identifier of the object.
	ID *string `json:"ID,omitempty" msgpack:"ID,omitempty" bson:"-" mapstructure:"ID,omitempty"`

	// The description of the analyzer.
	Description *string `json:"description,omitempty" msgpack:"description,omitempty" bson:"-" mapstructure:"description,omitempty"`

	// A list of detection matcher that will trigger the analyzer.
	DetectionMatchers *[][]DetectionMatcher `json:"detectionMatchers,omitempty" msgpack:"detectionMatchers,omitempty" bson:"-" mapstructure:"detectionMatchers,omitempty"`

	// The detectors the analyzer can use.
	Detectors *[]*Detector `json:"detectors,omitempty" msgpack:"detectors,omitempty" bson:"-" mapstructure:"detectors,omitempty"`

	// Tell if the analyzer is enabled by default.
	Enabled *bool `json:"enabled,omitempty" msgpack:"enabled,omitempty" bson:"-" mapstructure:"enabled,omitempty"`

	// The group the analyzer belongs to.
	Group *string `json:"group,omitempty" msgpack:"group,omitempty" bson:"-" mapstructure:"group,omitempty"`

	// The models used by the analyzer.
	Models *[]*AnalyzerModel `json:"models,omitempty" msgpack:"models,omitempty" bson:"-" mapstructure:"models,omitempty"`

	// The name of the analyzer.
	Name *string `json:"name,omitempty" msgpack:"name,omitempty" bson:"-" mapstructure:"name,omitempty"`

	// The namespace of the object.
	Namespace *string `json:"namespace,omitempty" msgpack:"namespace,omitempty" bson:"namespace,omitempty" mapstructure:"namespace,omitempty"`

	ModelVersion int `json:"-" msgpack:"-" bson:"_modelversion"`
}

// NewSparseAnalyzer returns a new  SparseAnalyzer.
func NewSparseAnalyzer() *SparseAnalyzer {
	return &SparseAnalyzer{}
}

// Identity returns the Identity of the sparse object.
func (o *SparseAnalyzer) Identity() elemental.Identity {

	return AnalyzerIdentity
}

// Identifier returns the value of the sparse object's unique identifier.
func (o *SparseAnalyzer) Identifier() string {

	if o.ID == nil {
		return ""
	}
	return *o.ID
}

// SetIdentifier sets the value of the sparse object's unique identifier.
func (o *SparseAnalyzer) SetIdentifier(id string) {

	if id != "" {
		o.ID = &id
	} else {
		o.ID = nil
	}
}

// GetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *SparseAnalyzer) GetBSON() (any, error) {

	if o == nil {
		return nil, nil
	}

	s := &mongoAttributesSparseAnalyzer{}

	if o.ID != nil {
		s.ID = bson.ObjectIdHex(*o.ID)
	}
	if o.Namespace != nil {
		s.Namespace = o.Namespace
	}

	return s, nil
}

// SetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *SparseAnalyzer) SetBSON(raw bson.Raw) error {

	if o == nil {
		return nil
	}

	s := &mongoAttributesSparseAnalyzer{}
	if err := raw.Unmarshal(s); err != nil {
		return err
	}

	id := s.ID.Hex()
	o.ID = &id
	if s.Namespace != nil {
		o.Namespace = s.Namespace
	}

	return nil
}

// Version returns the hardcoded version of the model.
func (o *SparseAnalyzer) Version() int {

	return 1
}

// ToPlain returns the plain version of the sparse model.
func (o *SparseAnalyzer) ToPlain() elemental.PlainIdentifiable {

	out := NewAnalyzer()
	if o.ID != nil {
		out.ID = *o.ID
	}
	if o.Description != nil {
		out.Description = *o.Description
	}
	if o.DetectionMatchers != nil {
		out.DetectionMatchers = *o.DetectionMatchers
	}
	if o.Detectors != nil {
		out.Detectors = *o.Detectors
	}
	if o.Enabled != nil {
		out.Enabled = *o.Enabled
	}
	if o.Group != nil {
		out.Group = *o.Group
	}
	if o.Models != nil {
		out.Models = *o.Models
	}
	if o.Name != nil {
		out.Name = *o.Name
	}
	if o.Namespace != nil {
		out.Namespace = *o.Namespace
	}

	return out
}

// GetNamespace returns the Namespace of the receiver.
func (o *SparseAnalyzer) GetNamespace() (out string) {

	if o.Namespace == nil {
		return
	}

	return *o.Namespace
}

// SetNamespace sets the property Namespace of the receiver using the address of the given value.
func (o *SparseAnalyzer) SetNamespace(namespace string) {

	o.Namespace = &namespace
}

// DeepCopy returns a deep copy if the SparseAnalyzer.
func (o *SparseAnalyzer) DeepCopy() *SparseAnalyzer {

	if o == nil {
		return nil
	}

	out := &SparseAnalyzer{}
	o.DeepCopyInto(out)

	return out
}

// DeepCopyInto copies the receiver into the given *SparseAnalyzer.
func (o *SparseAnalyzer) DeepCopyInto(out *SparseAnalyzer) {

	target, err := copystructure.Copy(o)
	if err != nil {
		panic(fmt.Sprintf("Unable to deepcopy SparseAnalyzer: %s", err))
	}

	*out = *target.(*SparseAnalyzer)
}

type mongoAttributesAnalyzer struct {
	ID        bson.ObjectId `bson:"_id,omitempty"`
	Namespace string        `bson:"namespace,omitempty"`
}
type mongoAttributesSparseAnalyzer struct {
	ID        bson.ObjectId `bson:"_id,omitempty"`
	Namespace *string       `bson:"namespace,omitempty"`
}
