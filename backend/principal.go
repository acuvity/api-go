// Code generated by elegen. DO NOT EDIT.
// Source: go.acuvity.ai/elemental (templates/model.gotpl)

package api

import (
	"fmt"
	"slices"

	"github.com/globalsign/mgo/bson"
	"github.com/mitchellh/copystructure"
	"go.acuvity.ai/elemental"
)

// PrincipalAuthTypeValue represents the possible values for attribute "authType".
type PrincipalAuthTypeValue string

const (
	// PrincipalAuthTypeAppToken represents the value AppToken.
	PrincipalAuthTypeAppToken PrincipalAuthTypeValue = "AppToken"

	// PrincipalAuthTypeCertificate represents the value Certificate.
	PrincipalAuthTypeCertificate PrincipalAuthTypeValue = "Certificate"

	// PrincipalAuthTypeComponentToken represents the value ComponentToken.
	PrincipalAuthTypeComponentToken PrincipalAuthTypeValue = "ComponentToken"

	// PrincipalAuthTypeExternal represents the value External.
	PrincipalAuthTypeExternal PrincipalAuthTypeValue = "External"

	// PrincipalAuthTypeHostname represents the value Hostname.
	PrincipalAuthTypeHostname PrincipalAuthTypeValue = "Hostname"

	// PrincipalAuthTypeToken represents the value Token.
	PrincipalAuthTypeToken PrincipalAuthTypeValue = "Token"

	// PrincipalAuthTypeUserToken represents the value UserToken.
	PrincipalAuthTypeUserToken PrincipalAuthTypeValue = "UserToken"
)

// PrincipalTypeValue represents the possible values for attribute "type".
type PrincipalTypeValue string

const (
	// PrincipalTypeApp represents the value App.
	PrincipalTypeApp PrincipalTypeValue = "App"

	// PrincipalTypeExternal represents the value External.
	PrincipalTypeExternal PrincipalTypeValue = "External"

	// PrincipalTypeUser represents the value User.
	PrincipalTypeUser PrincipalTypeValue = "User"
)

// PrincipalIdentity represents the Identity of the object.
var PrincipalIdentity = elemental.Identity{
	Name:     "principal",
	Category: "principals",
	Package:  "colektor",
	Private:  false,
}

// PrincipalsList represents a list of Principals
type PrincipalsList []*Principal

// Identity returns the identity of the objects in the list.
func (o PrincipalsList) Identity() elemental.Identity {

	return PrincipalIdentity
}

// Copy returns a pointer to a copy the PrincipalsList.
func (o PrincipalsList) Copy() elemental.Identifiables {

	out := slices.Clone(o)
	return &out
}

// Append appends the objects to the a new copy of the PrincipalsList.
func (o PrincipalsList) Append(objects ...elemental.Identifiable) elemental.Identifiables {

	out := slices.Clone(o)
	for _, obj := range objects {
		out = append(out, obj.(*Principal))
	}

	return out
}

// List converts the object to an elemental.IdentifiablesList.
func (o PrincipalsList) List() elemental.IdentifiablesList {

	out := make(elemental.IdentifiablesList, len(o))
	for i := range len(o) {
		out[i] = o[i]
	}

	return out
}

// DefaultOrder returns the default ordering fields of the content.
func (o PrincipalsList) DefaultOrder() []string {

	return []string{}
}

// ToSparse returns the PrincipalsList converted to SparsePrincipalsList.
// Objects in the list will only contain the given fields. No field means entire field set.
func (o PrincipalsList) ToSparse(fields ...string) elemental.Identifiables {

	out := make(SparsePrincipalsList, len(o))
	for i := range len(o) {
		out[i] = o[i].ToSparse(fields...).(*SparsePrincipal)
	}

	return out
}

// Version returns the version of the content.
func (o PrincipalsList) Version() int {

	return 1
}

// Principal represents the model of a principal
type Principal struct {
	// The source IP address of the request.
	IP string `json:"IP,omitempty" msgpack:"IP,omitempty" bson:"ip,omitempty" mapstructure:"IP,omitempty"`

	// The application principal information if type is App.
	App *PrincipalApp `json:"app,omitempty" msgpack:"app,omitempty" bson:"app,omitempty" mapstructure:"app,omitempty"`

	// The type of authentication.
	AuthType PrincipalAuthTypeValue `json:"authType" msgpack:"authType" bson:"authtype" mapstructure:"authType,omitempty"`

	// List of claims extracted from the user query.
	Claims []string `json:"claims,omitempty" msgpack:"claims,omitempty" bson:"claims,omitempty" mapstructure:"claims,omitempty"`

	// The external principal information if type is External.
	External *PrincipalExternal `json:"external,omitempty" msgpack:"external,omitempty" bson:"external,omitempty" mapstructure:"external,omitempty"`

	// The teams that were used to authorize the request.
	Teams []string `json:"teams,omitempty" msgpack:"teams,omitempty" bson:"teams,omitempty" mapstructure:"teams,omitempty"`

	// The name of the token, if any.
	TokenName string `json:"tokenName" msgpack:"tokenName" bson:"tokenname" mapstructure:"tokenName,omitempty"`

	// The type of principal.
	Type PrincipalTypeValue `json:"type" msgpack:"type" bson:"type" mapstructure:"type,omitempty"`

	// The user principal information if type is User.
	User *PrincipalUser `json:"user,omitempty" msgpack:"user,omitempty" bson:"user,omitempty" mapstructure:"user,omitempty"`

	ModelVersion int `json:"-" msgpack:"-" bson:"_modelversion"`
}

// NewPrincipal returns a new *Principal
func NewPrincipal() *Principal {

	return &Principal{
		ModelVersion: 1,
		Claims:       []string{},
		Teams:        []string{},
	}
}

// Identity returns the Identity of the object.
func (o *Principal) Identity() elemental.Identity {

	return PrincipalIdentity
}

// Identifier returns the value of the object's unique identifier.
func (o *Principal) Identifier() string {

	return ""
}

// SetIdentifier sets the value of the object's unique identifier.
func (o *Principal) SetIdentifier(id string) {

}

// GetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *Principal) GetBSON() (any, error) {

	if o == nil {
		return nil, nil
	}

	s := &mongoAttributesPrincipal{}

	s.IP = o.IP
	s.App = o.App
	s.AuthType = o.AuthType
	s.Claims = o.Claims
	s.External = o.External
	s.Teams = o.Teams
	s.TokenName = o.TokenName
	s.Type = o.Type
	s.User = o.User

	return s, nil
}

// SetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *Principal) SetBSON(raw bson.Raw) error {

	if o == nil || raw.Kind == bson.ElementNil {
		return bson.ErrSetZero
	}

	s := &mongoAttributesPrincipal{}
	if err := raw.Unmarshal(s); err != nil {
		return err
	}

	o.IP = s.IP
	o.App = s.App
	o.AuthType = s.AuthType
	o.Claims = s.Claims
	o.External = s.External
	o.Teams = s.Teams
	o.TokenName = s.TokenName
	o.Type = s.Type
	o.User = s.User

	return nil
}

// Version returns the hardcoded version of the model.
func (o *Principal) Version() int {

	return 1
}

// BleveType implements the bleve.Classifier Interface.
func (o *Principal) BleveType() string {

	return "principal"
}

// DefaultOrder returns the list of default ordering fields.
func (o *Principal) DefaultOrder() []string {

	return []string{}
}

// Doc returns the documentation for the object
func (o *Principal) Doc() string {

	return `Describe the principal.`
}

func (o *Principal) String() string {

	return fmt.Sprintf("<%s:%s>", o.Identity().Name, o.Identifier())
}

// ToSparse returns the sparse version of the model.
// The returned object will only contain the given fields. No field means entire field set.
func (o *Principal) ToSparse(fields ...string) elemental.SparseIdentifiable {

	if len(fields) == 0 {
		// nolint: goimports
		return &SparsePrincipal{
			IP:        &o.IP,
			App:       o.App,
			AuthType:  &o.AuthType,
			Claims:    &o.Claims,
			External:  o.External,
			Teams:     &o.Teams,
			TokenName: &o.TokenName,
			Type:      &o.Type,
			User:      o.User,
		}
	}

	sp := &SparsePrincipal{}
	for _, f := range fields {
		switch f {
		case "IP":
			sp.IP = &(o.IP)
		case "app":
			sp.App = o.App
		case "authType":
			sp.AuthType = &(o.AuthType)
		case "claims":
			sp.Claims = &(o.Claims)
		case "external":
			sp.External = o.External
		case "teams":
			sp.Teams = &(o.Teams)
		case "tokenName":
			sp.TokenName = &(o.TokenName)
		case "type":
			sp.Type = &(o.Type)
		case "user":
			sp.User = o.User
		}
	}

	return sp
}

// Patch apply the non nil value of a *SparsePrincipal to the object.
func (o *Principal) Patch(sparse elemental.SparseIdentifiable) {
	if !sparse.Identity().IsEqual(o.Identity()) {
		panic("cannot patch from a parse with different identity")
	}

	so := sparse.(*SparsePrincipal)
	if so.IP != nil {
		o.IP = *so.IP
	}
	if so.App != nil {
		o.App = so.App
	}
	if so.AuthType != nil {
		o.AuthType = *so.AuthType
	}
	if so.Claims != nil {
		o.Claims = *so.Claims
	}
	if so.External != nil {
		o.External = so.External
	}
	if so.Teams != nil {
		o.Teams = *so.Teams
	}
	if so.TokenName != nil {
		o.TokenName = *so.TokenName
	}
	if so.Type != nil {
		o.Type = *so.Type
	}
	if so.User != nil {
		o.User = so.User
	}
}

// DeepCopy returns a deep copy if the Principal.
func (o *Principal) DeepCopy() *Principal {

	if o == nil {
		return nil
	}

	out := &Principal{}
	o.DeepCopyInto(out)

	return out
}

// DeepCopyInto copies the receiver into the given *Principal.
func (o *Principal) DeepCopyInto(out *Principal) {

	target, err := copystructure.Copy(o)
	if err != nil {
		panic(fmt.Sprintf("Unable to deepcopy Principal: %s", err))
	}

	*out = *target.(*Principal)
}

// Validate valides the current information stored into the structure.
func (o *Principal) Validate() error {

	errors := elemental.Errors{}
	requiredErrors := elemental.Errors{}

	if o.App != nil {
		elemental.ResetDefaultForZeroValues(o.App)
		if err := o.App.Validate(); err != nil {
			errors = errors.Append(err)
		}
	}

	if err := elemental.ValidateStringInList("authType", string(o.AuthType), []string{"Certificate", "UserToken", "AppToken", "Hostname", "Token", "ComponentToken", "External"}, false); err != nil {
		errors = errors.Append(err)
	}

	if o.External != nil {
		elemental.ResetDefaultForZeroValues(o.External)
		if err := o.External.Validate(); err != nil {
			errors = errors.Append(err)
		}
	}

	if err := elemental.ValidateRequiredString("type", string(o.Type)); err != nil {
		requiredErrors = requiredErrors.Append(err)
	}

	if err := elemental.ValidateStringInList("type", string(o.Type), []string{"User", "App", "External"}, false); err != nil {
		errors = errors.Append(err)
	}

	if o.User != nil {
		elemental.ResetDefaultForZeroValues(o.User)
		if err := o.User.Validate(); err != nil {
			errors = errors.Append(err)
		}
	}

	// Custom object validation.
	if err := ValidatePrincipal(o); err != nil {
		errors = errors.Append(err)
	}

	if len(requiredErrors) > 0 {
		return requiredErrors
	}

	if len(errors) > 0 {
		return errors
	}

	return nil
}

// SpecificationForAttribute returns the AttributeSpecification for the given attribute name key.
func (*Principal) SpecificationForAttribute(name string) elemental.AttributeSpecification {

	if v, ok := PrincipalAttributesMap[name]; ok {
		return v
	}

	// We could not find it, so let's check on the lower case indexed spec map
	return PrincipalLowerCaseAttributesMap[name]
}

// AttributeSpecifications returns the full attribute specifications map.
func (*Principal) AttributeSpecifications() map[string]elemental.AttributeSpecification {

	return PrincipalAttributesMap
}

// ValueForAttribute returns the value for the given attribute.
// This is a very advanced function that you should not need but in some
// very specific use cases.
func (o *Principal) ValueForAttribute(name string) any {

	switch name {
	case "IP":
		return o.IP
	case "app":
		return o.App
	case "authType":
		return o.AuthType
	case "claims":
		return o.Claims
	case "external":
		return o.External
	case "teams":
		return o.Teams
	case "tokenName":
		return o.TokenName
	case "type":
		return o.Type
	case "user":
		return o.User
	}

	return nil
}

// PrincipalAttributesMap represents the map of attribute for Principal.
var PrincipalAttributesMap = map[string]elemental.AttributeSpecification{
	"IP": {
		AllowedChoices: []string{},
		BSONFieldName:  "ip",
		ConvertedName:  "IP",
		Description:    `The source IP address of the request.`,
		Exposed:        true,
		Name:           "IP",
		Stored:         true,
		Type:           "string",
	},
	"App": {
		AllowedChoices: []string{},
		BSONFieldName:  "app",
		ConvertedName:  "App",
		Description:    `The application principal information if type is App.`,
		Exposed:        true,
		Name:           "app",
		Stored:         true,
		SubType:        "principalapp",
		Type:           "ref",
	},
	"AuthType": {
		AllowedChoices: []string{"Certificate", "UserToken", "AppToken", "Hostname", "Token", "ComponentToken", "External"},
		BSONFieldName:  "authtype",
		ConvertedName:  "AuthType",
		Description:    `The type of authentication.`,
		Exposed:        true,
		Name:           "authType",
		Stored:         true,
		Type:           "enum",
	},
	"Claims": {
		AllowedChoices: []string{},
		BSONFieldName:  "claims",
		ConvertedName:  "Claims",
		Description:    `List of claims extracted from the user query.`,
		Exposed:        true,
		Name:           "claims",
		Stored:         true,
		SubType:        "string",
		Type:           "list",
	},
	"External": {
		AllowedChoices: []string{},
		BSONFieldName:  "external",
		ConvertedName:  "External",
		Description:    `The external principal information if type is External.`,
		Exposed:        true,
		Name:           "external",
		Stored:         true,
		SubType:        "principalexternal",
		Type:           "ref",
	},
	"Teams": {
		AllowedChoices: []string{},
		BSONFieldName:  "teams",
		ConvertedName:  "Teams",
		Description:    `The teams that were used to authorize the request.`,
		Exposed:        true,
		Name:           "teams",
		Stored:         true,
		SubType:        "string",
		Type:           "list",
	},
	"TokenName": {
		AllowedChoices: []string{},
		BSONFieldName:  "tokenname",
		ConvertedName:  "TokenName",
		Description:    `The name of the token, if any.`,
		Exposed:        true,
		Name:           "tokenName",
		Stored:         true,
		Type:           "string",
	},
	"Type": {
		AllowedChoices: []string{"User", "App", "External"},
		BSONFieldName:  "type",
		ConvertedName:  "Type",
		Description:    `The type of principal.`,
		Exposed:        true,
		Name:           "type",
		Required:       true,
		Stored:         true,
		Type:           "enum",
	},
	"User": {
		AllowedChoices: []string{},
		BSONFieldName:  "user",
		ConvertedName:  "User",
		Description:    `The user principal information if type is User.`,
		Exposed:        true,
		Name:           "user",
		Stored:         true,
		SubType:        "principaluser",
		Type:           "ref",
	},
}

// PrincipalLowerCaseAttributesMap represents the map of attribute for Principal.
var PrincipalLowerCaseAttributesMap = map[string]elemental.AttributeSpecification{
	"ip": {
		AllowedChoices: []string{},
		BSONFieldName:  "ip",
		ConvertedName:  "IP",
		Description:    `The source IP address of the request.`,
		Exposed:        true,
		Name:           "IP",
		Stored:         true,
		Type:           "string",
	},
	"app": {
		AllowedChoices: []string{},
		BSONFieldName:  "app",
		ConvertedName:  "App",
		Description:    `The application principal information if type is App.`,
		Exposed:        true,
		Name:           "app",
		Stored:         true,
		SubType:        "principalapp",
		Type:           "ref",
	},
	"authtype": {
		AllowedChoices: []string{"Certificate", "UserToken", "AppToken", "Hostname", "Token", "ComponentToken", "External"},
		BSONFieldName:  "authtype",
		ConvertedName:  "AuthType",
		Description:    `The type of authentication.`,
		Exposed:        true,
		Name:           "authType",
		Stored:         true,
		Type:           "enum",
	},
	"claims": {
		AllowedChoices: []string{},
		BSONFieldName:  "claims",
		ConvertedName:  "Claims",
		Description:    `List of claims extracted from the user query.`,
		Exposed:        true,
		Name:           "claims",
		Stored:         true,
		SubType:        "string",
		Type:           "list",
	},
	"external": {
		AllowedChoices: []string{},
		BSONFieldName:  "external",
		ConvertedName:  "External",
		Description:    `The external principal information if type is External.`,
		Exposed:        true,
		Name:           "external",
		Stored:         true,
		SubType:        "principalexternal",
		Type:           "ref",
	},
	"teams": {
		AllowedChoices: []string{},
		BSONFieldName:  "teams",
		ConvertedName:  "Teams",
		Description:    `The teams that were used to authorize the request.`,
		Exposed:        true,
		Name:           "teams",
		Stored:         true,
		SubType:        "string",
		Type:           "list",
	},
	"tokenname": {
		AllowedChoices: []string{},
		BSONFieldName:  "tokenname",
		ConvertedName:  "TokenName",
		Description:    `The name of the token, if any.`,
		Exposed:        true,
		Name:           "tokenName",
		Stored:         true,
		Type:           "string",
	},
	"type": {
		AllowedChoices: []string{"User", "App", "External"},
		BSONFieldName:  "type",
		ConvertedName:  "Type",
		Description:    `The type of principal.`,
		Exposed:        true,
		Name:           "type",
		Required:       true,
		Stored:         true,
		Type:           "enum",
	},
	"user": {
		AllowedChoices: []string{},
		BSONFieldName:  "user",
		ConvertedName:  "User",
		Description:    `The user principal information if type is User.`,
		Exposed:        true,
		Name:           "user",
		Stored:         true,
		SubType:        "principaluser",
		Type:           "ref",
	},
}

// SparsePrincipalsList represents a list of SparsePrincipals
type SparsePrincipalsList []*SparsePrincipal

// Identity returns the identity of the objects in the list.
func (o SparsePrincipalsList) Identity() elemental.Identity {

	return PrincipalIdentity
}

// Copy returns a pointer to a copy the SparsePrincipalsList.
func (o SparsePrincipalsList) Copy() elemental.Identifiables {

	copy := slices.Clone(o)
	return &copy
}

// Append appends the objects to the a new copy of the SparsePrincipalsList.
func (o SparsePrincipalsList) Append(objects ...elemental.Identifiable) elemental.Identifiables {

	out := slices.Clone(o)
	for _, obj := range objects {
		out = append(out, obj.(*SparsePrincipal))
	}

	return out
}

// List converts the object to an elemental.IdentifiablesList.
func (o SparsePrincipalsList) List() elemental.IdentifiablesList {

	out := make(elemental.IdentifiablesList, len(o))
	for i := range len(o) {
		out[i] = o[i]
	}

	return out
}

// DefaultOrder returns the default ordering fields of the content.
func (o SparsePrincipalsList) DefaultOrder() []string {

	return []string{}
}

// ToPlain returns the SparsePrincipalsList converted to PrincipalsList.
func (o SparsePrincipalsList) ToPlain() elemental.IdentifiablesList {

	out := make(elemental.IdentifiablesList, len(o))
	for i := range len(o) {
		out[i] = o[i].ToPlain()
	}

	return out
}

// Version returns the version of the content.
func (o SparsePrincipalsList) Version() int {

	return 1
}

// SparsePrincipal represents the sparse version of a principal.
type SparsePrincipal struct {
	// The source IP address of the request.
	IP *string `json:"IP,omitempty" msgpack:"IP,omitempty" bson:"ip,omitempty" mapstructure:"IP,omitempty"`

	// The application principal information if type is App.
	App *PrincipalApp `json:"app,omitempty" msgpack:"app,omitempty" bson:"app,omitempty" mapstructure:"app,omitempty"`

	// The type of authentication.
	AuthType *PrincipalAuthTypeValue `json:"authType,omitempty" msgpack:"authType,omitempty" bson:"authtype,omitempty" mapstructure:"authType,omitempty"`

	// List of claims extracted from the user query.
	Claims *[]string `json:"claims,omitempty" msgpack:"claims,omitempty" bson:"claims,omitempty" mapstructure:"claims,omitempty"`

	// The external principal information if type is External.
	External *PrincipalExternal `json:"external,omitempty" msgpack:"external,omitempty" bson:"external,omitempty" mapstructure:"external,omitempty"`

	// The teams that were used to authorize the request.
	Teams *[]string `json:"teams,omitempty" msgpack:"teams,omitempty" bson:"teams,omitempty" mapstructure:"teams,omitempty"`

	// The name of the token, if any.
	TokenName *string `json:"tokenName,omitempty" msgpack:"tokenName,omitempty" bson:"tokenname,omitempty" mapstructure:"tokenName,omitempty"`

	// The type of principal.
	Type *PrincipalTypeValue `json:"type,omitempty" msgpack:"type,omitempty" bson:"type,omitempty" mapstructure:"type,omitempty"`

	// The user principal information if type is User.
	User *PrincipalUser `json:"user,omitempty" msgpack:"user,omitempty" bson:"user,omitempty" mapstructure:"user,omitempty"`

	ModelVersion int `json:"-" msgpack:"-" bson:"_modelversion"`
}

// NewSparsePrincipal returns a new  SparsePrincipal.
func NewSparsePrincipal() *SparsePrincipal {
	return &SparsePrincipal{}
}

// Identity returns the Identity of the sparse object.
func (o *SparsePrincipal) Identity() elemental.Identity {

	return PrincipalIdentity
}

// Identifier returns the value of the sparse object's unique identifier.
func (o *SparsePrincipal) Identifier() string {

	return ""
}

// SetIdentifier sets the value of the sparse object's unique identifier.
func (o *SparsePrincipal) SetIdentifier(id string) {

}

// GetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *SparsePrincipal) GetBSON() (any, error) {

	if o == nil {
		return nil, nil
	}

	s := &mongoAttributesSparsePrincipal{}

	if o.IP != nil {
		s.IP = o.IP
	}
	if o.App != nil {
		s.App = o.App
	}
	if o.AuthType != nil {
		s.AuthType = o.AuthType
	}
	if o.Claims != nil {
		s.Claims = o.Claims
	}
	if o.External != nil {
		s.External = o.External
	}
	if o.Teams != nil {
		s.Teams = o.Teams
	}
	if o.TokenName != nil {
		s.TokenName = o.TokenName
	}
	if o.Type != nil {
		s.Type = o.Type
	}
	if o.User != nil {
		s.User = o.User
	}

	return s, nil
}

// SetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *SparsePrincipal) SetBSON(raw bson.Raw) error {

	if o == nil {
		return nil
	}

	s := &mongoAttributesSparsePrincipal{}
	if err := raw.Unmarshal(s); err != nil {
		return err
	}

	if s.IP != nil {
		o.IP = s.IP
	}
	if s.App != nil {
		o.App = s.App
	}
	if s.AuthType != nil {
		o.AuthType = s.AuthType
	}
	if s.Claims != nil {
		o.Claims = s.Claims
	}
	if s.External != nil {
		o.External = s.External
	}
	if s.Teams != nil {
		o.Teams = s.Teams
	}
	if s.TokenName != nil {
		o.TokenName = s.TokenName
	}
	if s.Type != nil {
		o.Type = s.Type
	}
	if s.User != nil {
		o.User = s.User
	}

	return nil
}

// Version returns the hardcoded version of the model.
func (o *SparsePrincipal) Version() int {

	return 1
}

// ToPlain returns the plain version of the sparse model.
func (o *SparsePrincipal) ToPlain() elemental.PlainIdentifiable {

	out := NewPrincipal()
	if o.IP != nil {
		out.IP = *o.IP
	}
	if o.App != nil {
		out.App = o.App
	}
	if o.AuthType != nil {
		out.AuthType = *o.AuthType
	}
	if o.Claims != nil {
		out.Claims = *o.Claims
	}
	if o.External != nil {
		out.External = o.External
	}
	if o.Teams != nil {
		out.Teams = *o.Teams
	}
	if o.TokenName != nil {
		out.TokenName = *o.TokenName
	}
	if o.Type != nil {
		out.Type = *o.Type
	}
	if o.User != nil {
		out.User = o.User
	}

	return out
}

// DeepCopy returns a deep copy if the SparsePrincipal.
func (o *SparsePrincipal) DeepCopy() *SparsePrincipal {

	if o == nil {
		return nil
	}

	out := &SparsePrincipal{}
	o.DeepCopyInto(out)

	return out
}

// DeepCopyInto copies the receiver into the given *SparsePrincipal.
func (o *SparsePrincipal) DeepCopyInto(out *SparsePrincipal) {

	target, err := copystructure.Copy(o)
	if err != nil {
		panic(fmt.Sprintf("Unable to deepcopy SparsePrincipal: %s", err))
	}

	*out = *target.(*SparsePrincipal)
}

type mongoAttributesPrincipal struct {
	IP        string                 `bson:"ip,omitempty"`
	App       *PrincipalApp          `bson:"app,omitempty"`
	AuthType  PrincipalAuthTypeValue `bson:"authtype"`
	Claims    []string               `bson:"claims,omitempty"`
	External  *PrincipalExternal     `bson:"external,omitempty"`
	Teams     []string               `bson:"teams,omitempty"`
	TokenName string                 `bson:"tokenname"`
	Type      PrincipalTypeValue     `bson:"type"`
	User      *PrincipalUser         `bson:"user,omitempty"`
}
type mongoAttributesSparsePrincipal struct {
	IP        *string                 `bson:"ip,omitempty"`
	App       *PrincipalApp           `bson:"app,omitempty"`
	AuthType  *PrincipalAuthTypeValue `bson:"authtype,omitempty"`
	Claims    *[]string               `bson:"claims,omitempty"`
	External  *PrincipalExternal      `bson:"external,omitempty"`
	Teams     *[]string               `bson:"teams,omitempty"`
	TokenName *string                 `bson:"tokenname,omitempty"`
	Type      *PrincipalTypeValue     `bson:"type,omitempty"`
	User      *PrincipalUser          `bson:"user,omitempty"`
}
