// Code generated by elegen. DO NOT EDIT.
// Source: go.acuvity.ai/elemental (templates/model.gotpl)

package api

import (
	"fmt"

	"github.com/globalsign/mgo/bson"
	"github.com/mitchellh/copystructure"
	"go.acuvity.ai/elemental"
)

// ScanResultHTTPStatusValue represents the possible values for attribute "status".
type ScanResultHTTPStatusValue string

const (
	// ScanResultHTTPStatusFailed represents the value Failed.
	ScanResultHTTPStatusFailed ScanResultHTTPStatusValue = "Failed"

	// ScanResultHTTPStatusPass represents the value Pass.
	ScanResultHTTPStatusPass ScanResultHTTPStatusValue = "Pass"

	// ScanResultHTTPStatusSkipped represents the value Skipped.
	ScanResultHTTPStatusSkipped ScanResultHTTPStatusValue = "Skipped"
)

// ScanResultHTTP represents the model of a scanresulthttp
type ScanResultHTTP struct {
	// If true, the domain seems to be protected by a bot detection system.
	BotProtectionDetected bool `json:"botProtectionDetected" msgpack:"botProtectionDetected" bson:"botprotectiondetected" mapstructure:"botProtectionDetected,omitempty"`

	// Human readable reasons on why Bot Protection has been detected.
	BotProtectionHints []string `json:"botProtectionHints" msgpack:"botProtectionHints" bson:"botprotectionhints" mapstructure:"botProtectionHints,omitempty"`

	// The HTTP code.
	Code int `json:"code" msgpack:"code" bson:"code" mapstructure:"code,omitempty"`

	// The description of the scan.
	Description string `json:"description" msgpack:"description" bson:"description" mapstructure:"description,omitempty"`

	// If the status is 'Failed', holds the user facing error.
	Error string `json:"error" msgpack:"error" bson:"error" mapstructure:"error,omitempty"`

	// The list of HTTP headers received.
	Headers map[string]string `json:"headers" msgpack:"headers" bson:"headers" mapstructure:"headers,omitempty"`

	// The name of the scan.
	Name string `json:"name" msgpack:"name" bson:"name" mapstructure:"name,omitempty"`

	// Status of the scan.
	Status ScanResultHTTPStatusValue `json:"status" msgpack:"status" bson:"status" mapstructure:"status,omitempty"`

	ModelVersion int `json:"-" msgpack:"-" bson:"_modelversion"`
}

// NewScanResultHTTP returns a new *ScanResultHTTP
func NewScanResultHTTP() *ScanResultHTTP {

	return &ScanResultHTTP{
		ModelVersion:       1,
		BotProtectionHints: []string{},
	}
}

// GetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *ScanResultHTTP) GetBSON() (any, error) {

	if o == nil {
		return nil, nil
	}

	s := &mongoAttributesScanResultHTTP{}

	s.BotProtectionDetected = o.BotProtectionDetected
	s.BotProtectionHints = o.BotProtectionHints
	s.Code = o.Code
	s.Description = o.Description
	s.Error = o.Error
	s.Headers = o.Headers
	s.Name = o.Name
	s.Status = o.Status

	return s, nil
}

// SetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *ScanResultHTTP) SetBSON(raw bson.Raw) error {

	if o == nil || raw.Kind == bson.ElementNil {
		return bson.ErrSetZero
	}

	s := &mongoAttributesScanResultHTTP{}
	if err := raw.Unmarshal(s); err != nil {
		return err
	}

	o.BotProtectionDetected = s.BotProtectionDetected
	o.BotProtectionHints = s.BotProtectionHints
	o.Code = s.Code
	o.Description = s.Description
	o.Error = s.Error
	o.Headers = s.Headers
	o.Name = s.Name
	o.Status = s.Status

	return nil
}

// BleveType implements the bleve.Classifier Interface.
func (o *ScanResultHTTP) BleveType() string {

	return "scanresulthttp"
}

// DeepCopy returns a deep copy if the ScanResultHTTP.
func (o *ScanResultHTTP) DeepCopy() *ScanResultHTTP {

	if o == nil {
		return nil
	}

	out := &ScanResultHTTP{}
	o.DeepCopyInto(out)

	return out
}

// DeepCopyInto copies the receiver into the given *ScanResultHTTP.
func (o *ScanResultHTTP) DeepCopyInto(out *ScanResultHTTP) {

	target, err := copystructure.Copy(o)
	if err != nil {
		panic(fmt.Sprintf("Unable to deepcopy ScanResultHTTP: %s", err))
	}

	*out = *target.(*ScanResultHTTP)
}

// Validate valides the current information stored into the structure.
func (o *ScanResultHTTP) Validate() error {

	errors := elemental.Errors{}
	requiredErrors := elemental.Errors{}

	if err := elemental.ValidateRequiredString("description", o.Description); err != nil {
		requiredErrors = requiredErrors.Append(err)
	}

	if err := elemental.ValidateRequiredString("name", o.Name); err != nil {
		requiredErrors = requiredErrors.Append(err)
	}

	if err := elemental.ValidateRequiredString("status", string(o.Status)); err != nil {
		requiredErrors = requiredErrors.Append(err)
	}

	if err := elemental.ValidateStringInList("status", string(o.Status), []string{"Pass", "Failed", "Skipped"}, false); err != nil {
		errors = errors.Append(err)
	}

	if len(requiredErrors) > 0 {
		return requiredErrors
	}

	if len(errors) > 0 {
		return errors
	}

	return nil
}

// SpecificationForAttribute returns the AttributeSpecification for the given attribute name key.
func (*ScanResultHTTP) SpecificationForAttribute(name string) elemental.AttributeSpecification {

	if v, ok := ScanResultHTTPAttributesMap[name]; ok {
		return v
	}

	// We could not find it, so let's check on the lower case indexed spec map
	return ScanResultHTTPLowerCaseAttributesMap[name]
}

// AttributeSpecifications returns the full attribute specifications map.
func (*ScanResultHTTP) AttributeSpecifications() map[string]elemental.AttributeSpecification {

	return ScanResultHTTPAttributesMap
}

// ValueForAttribute returns the value for the given attribute.
// This is a very advanced function that you should not need but in some
// very specific use cases.
func (o *ScanResultHTTP) ValueForAttribute(name string) any {

	switch name {
	case "botProtectionDetected":
		return o.BotProtectionDetected
	case "botProtectionHints":
		return o.BotProtectionHints
	case "code":
		return o.Code
	case "description":
		return o.Description
	case "error":
		return o.Error
	case "headers":
		return o.Headers
	case "name":
		return o.Name
	case "status":
		return o.Status
	}

	return nil
}

// ScanResultHTTPAttributesMap represents the map of attribute for ScanResultHTTP.
var ScanResultHTTPAttributesMap = map[string]elemental.AttributeSpecification{
	"BotProtectionDetected": {
		AllowedChoices: []string{},
		BSONFieldName:  "botprotectiondetected",
		ConvertedName:  "BotProtectionDetected",
		Description:    `If true, the domain seems to be protected by a bot detection system.`,
		Exposed:        true,
		Name:           "botProtectionDetected",
		Stored:         true,
		Type:           "boolean",
	},
	"BotProtectionHints": {
		AllowedChoices: []string{},
		BSONFieldName:  "botprotectionhints",
		ConvertedName:  "BotProtectionHints",
		Description:    `Human readable reasons on why Bot Protection has been detected.`,
		Exposed:        true,
		Name:           "botProtectionHints",
		Stored:         true,
		SubType:        "string",
		Type:           "list",
	},
	"Code": {
		AllowedChoices: []string{},
		BSONFieldName:  "code",
		ConvertedName:  "Code",
		Description:    `The HTTP code.`,
		Exposed:        true,
		Name:           "code",
		Stored:         true,
		Type:           "integer",
	},
	"Description": {
		AllowedChoices: []string{},
		BSONFieldName:  "description",
		ConvertedName:  "Description",
		Description:    `The description of the scan.`,
		Exposed:        true,
		Name:           "description",
		Required:       true,
		Stored:         true,
		Type:           "string",
	},
	"Error": {
		AllowedChoices: []string{},
		BSONFieldName:  "error",
		ConvertedName:  "Error",
		Description:    `If the status is 'Failed', holds the user facing error.`,
		Exposed:        true,
		Name:           "error",
		Stored:         true,
		Type:           "string",
	},
	"Headers": {
		AllowedChoices: []string{},
		BSONFieldName:  "headers",
		ConvertedName:  "Headers",
		Description:    `The list of HTTP headers received.`,
		Exposed:        true,
		Name:           "headers",
		Stored:         true,
		SubType:        "map[string]string",
		Type:           "external",
	},
	"Name": {
		AllowedChoices: []string{},
		BSONFieldName:  "name",
		ConvertedName:  "Name",
		Description:    `The name of the scan.`,
		Exposed:        true,
		Name:           "name",
		Required:       true,
		Stored:         true,
		Type:           "string",
	},
	"Status": {
		AllowedChoices: []string{"Pass", "Failed", "Skipped"},
		BSONFieldName:  "status",
		ConvertedName:  "Status",
		Description:    `Status of the scan.`,
		Exposed:        true,
		Name:           "status",
		Required:       true,
		Stored:         true,
		Type:           "enum",
	},
}

// ScanResultHTTPLowerCaseAttributesMap represents the map of attribute for ScanResultHTTP.
var ScanResultHTTPLowerCaseAttributesMap = map[string]elemental.AttributeSpecification{
	"botprotectiondetected": {
		AllowedChoices: []string{},
		BSONFieldName:  "botprotectiondetected",
		ConvertedName:  "BotProtectionDetected",
		Description:    `If true, the domain seems to be protected by a bot detection system.`,
		Exposed:        true,
		Name:           "botProtectionDetected",
		Stored:         true,
		Type:           "boolean",
	},
	"botprotectionhints": {
		AllowedChoices: []string{},
		BSONFieldName:  "botprotectionhints",
		ConvertedName:  "BotProtectionHints",
		Description:    `Human readable reasons on why Bot Protection has been detected.`,
		Exposed:        true,
		Name:           "botProtectionHints",
		Stored:         true,
		SubType:        "string",
		Type:           "list",
	},
	"code": {
		AllowedChoices: []string{},
		BSONFieldName:  "code",
		ConvertedName:  "Code",
		Description:    `The HTTP code.`,
		Exposed:        true,
		Name:           "code",
		Stored:         true,
		Type:           "integer",
	},
	"description": {
		AllowedChoices: []string{},
		BSONFieldName:  "description",
		ConvertedName:  "Description",
		Description:    `The description of the scan.`,
		Exposed:        true,
		Name:           "description",
		Required:       true,
		Stored:         true,
		Type:           "string",
	},
	"error": {
		AllowedChoices: []string{},
		BSONFieldName:  "error",
		ConvertedName:  "Error",
		Description:    `If the status is 'Failed', holds the user facing error.`,
		Exposed:        true,
		Name:           "error",
		Stored:         true,
		Type:           "string",
	},
	"headers": {
		AllowedChoices: []string{},
		BSONFieldName:  "headers",
		ConvertedName:  "Headers",
		Description:    `The list of HTTP headers received.`,
		Exposed:        true,
		Name:           "headers",
		Stored:         true,
		SubType:        "map[string]string",
		Type:           "external",
	},
	"name": {
		AllowedChoices: []string{},
		BSONFieldName:  "name",
		ConvertedName:  "Name",
		Description:    `The name of the scan.`,
		Exposed:        true,
		Name:           "name",
		Required:       true,
		Stored:         true,
		Type:           "string",
	},
	"status": {
		AllowedChoices: []string{"Pass", "Failed", "Skipped"},
		BSONFieldName:  "status",
		ConvertedName:  "Status",
		Description:    `Status of the scan.`,
		Exposed:        true,
		Name:           "status",
		Required:       true,
		Stored:         true,
		Type:           "enum",
	},
}

type mongoAttributesScanResultHTTP struct {
	BotProtectionDetected bool                      `bson:"botprotectiondetected"`
	BotProtectionHints    []string                  `bson:"botprotectionhints"`
	Code                  int                       `bson:"code"`
	Description           string                    `bson:"description"`
	Error                 string                    `bson:"error"`
	Headers               map[string]string         `bson:"headers"`
	Name                  string                    `bson:"name"`
	Status                ScanResultHTTPStatusValue `bson:"status"`
}
