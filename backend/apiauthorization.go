// Code generated by elegen. DO NOT EDIT.
// Source: go.acuvity.ai/elemental (templates/model.gotpl)

package api

import (
	"fmt"
	"slices"
	"time"

	"github.com/globalsign/mgo/bson"
	"github.com/mitchellh/copystructure"
	"go.acuvity.ai/elemental"
)

// APIAuthorizationRoleValue represents the possible values for attribute "role".
type APIAuthorizationRoleValue string

const (
	// APIAuthorizationRoleAdministrator represents the value Administrator.
	APIAuthorizationRoleAdministrator APIAuthorizationRoleValue = "Administrator"

	// APIAuthorizationRoleApplication represents the value Application.
	APIAuthorizationRoleApplication APIAuthorizationRoleValue = "Application"

	// APIAuthorizationRoleCustom represents the value Custom.
	APIAuthorizationRoleCustom APIAuthorizationRoleValue = "Custom"

	// APIAuthorizationRoleEmployee represents the value Employee.
	APIAuthorizationRoleEmployee APIAuthorizationRoleValue = "Employee"

	// APIAuthorizationRoleOpenTelemetryCollector represents the value OpenTelemetryCollector.
	APIAuthorizationRoleOpenTelemetryCollector APIAuthorizationRoleValue = "OpenTelemetryCollector"

	// APIAuthorizationRoleOwner represents the value Owner.
	APIAuthorizationRoleOwner APIAuthorizationRoleValue = "Owner"

	// APIAuthorizationRoleProxy represents the value Proxy.
	APIAuthorizationRoleProxy APIAuthorizationRoleValue = "Proxy"

	// APIAuthorizationRoleTrial represents the value Trial.
	APIAuthorizationRoleTrial APIAuthorizationRoleValue = "Trial"

	// APIAuthorizationRoleViewer represents the value Viewer.
	APIAuthorizationRoleViewer APIAuthorizationRoleValue = "Viewer"
)

// APIAuthorizationIdentity represents the Identity of the object.
var APIAuthorizationIdentity = elemental.Identity{
	Name:     "apiauthorization",
	Category: "apiauthorizations",
	Package:  "lain",
	Private:  false,
}

// APIAuthorizationsList represents a list of APIAuthorizations
type APIAuthorizationsList []*APIAuthorization

// Identity returns the identity of the objects in the list.
func (o APIAuthorizationsList) Identity() elemental.Identity {

	return APIAuthorizationIdentity
}

// Copy returns a pointer to a copy the APIAuthorizationsList.
func (o APIAuthorizationsList) Copy() elemental.Identifiables {

	out := slices.Clone(o)
	return &out
}

// Append appends the objects to the a new copy of the APIAuthorizationsList.
func (o APIAuthorizationsList) Append(objects ...elemental.Identifiable) elemental.Identifiables {

	out := slices.Clone(o)
	for _, obj := range objects {
		out = append(out, obj.(*APIAuthorization))
	}

	return out
}

// List converts the object to an elemental.IdentifiablesList.
func (o APIAuthorizationsList) List() elemental.IdentifiablesList {

	out := make(elemental.IdentifiablesList, len(o))
	for i := range len(o) {
		out[i] = o[i]
	}

	return out
}

// DefaultOrder returns the default ordering fields of the content.
func (o APIAuthorizationsList) DefaultOrder() []string {

	return []string{}
}

// ToSparse returns the APIAuthorizationsList converted to SparseAPIAuthorizationsList.
// Objects in the list will only contain the given fields. No field means entire field set.
func (o APIAuthorizationsList) ToSparse(fields ...string) elemental.Identifiables {

	out := make(SparseAPIAuthorizationsList, len(o))
	for i := range len(o) {
		out[i] = o[i].ToSparse(fields...).(*SparseAPIAuthorization)
	}

	return out
}

// Version returns the version of the content.
func (o APIAuthorizationsList) Version() int {

	return 1
}

// APIAuthorization represents the model of a apiauthorization
type APIAuthorization struct {
	// ID is the identifier of the object.
	ID string `json:"ID,omitempty" msgpack:"ID,omitempty" bson:"-" mapstructure:"ID,omitempty"`

	// Creation date of the object.
	CreateTime time.Time `json:"createTime" msgpack:"createTime" bson:"createtime" mapstructure:"createTime,omitempty"`

	// Description of the authorization rule.
	Description string `json:"description" msgpack:"description" bson:"description" mapstructure:"description,omitempty"`

	// When disabled, an API Authorization has no effect.
	Disabled bool `json:"disabled" msgpack:"disabled" bson:"disabled" mapstructure:"disabled,omitempty"`

	// The hash of the structure used to compare with new import version.
	ImportHash string `json:"importHash,omitempty" msgpack:"importHash,omitempty" bson:"importhash,omitempty" mapstructure:"importHash,omitempty"`

	// The user-defined import label that allows the system to group resources from the
	// same import operation.
	ImportLabel string `json:"importLabel,omitempty" msgpack:"importLabel,omitempty" bson:"importlabel,omitempty" mapstructure:"importLabel,omitempty"`

	// The name of the authorization rule.
	Name string `json:"name" msgpack:"name" bson:"name" mapstructure:"name,omitempty"`

	// The namespace of the object.
	Namespace string `json:"namespace,omitempty" msgpack:"namespace,omitempty" bson:"namespace,omitempty" mapstructure:"namespace,omitempty"`

	// The individual permissions. Only works if role is Custom.
	Permissions []string `json:"permissions,omitempty" msgpack:"permissions,omitempty" bson:"permissions,omitempty" mapstructure:"permissions,omitempty"`

	// The role for the subjects.
	Role APIAuthorizationRoleValue `json:"role" msgpack:"role" bson:"role" mapstructure:"role,omitempty"`

	// A tag expression that identifies the authorized user(s).
	Subject [][]string `json:"subject" msgpack:"subject" bson:"subject" mapstructure:"subject,omitempty"`

	// Defines the namespace or namespaces in which the permission for subject should
	// apply. If empty, the object's namespace will be used.
	TargetNamespaces []string `json:"targetNamespaces" msgpack:"targetNamespaces" bson:"targetnamespaces" mapstructure:"targetNamespaces,omitempty"`

	// Last update date of the object.
	UpdateTime time.Time `json:"updateTime" msgpack:"updateTime" bson:"updatetime" mapstructure:"updateTime,omitempty"`

	// Hash of the object used to shard the data.
	ZHash int `json:"-" msgpack:"-" bson:"zhash" mapstructure:"-,omitempty"`

	// Sharding zone.
	Zone int `json:"-" msgpack:"-" bson:"zone" mapstructure:"-,omitempty"`

	ModelVersion int `json:"-" msgpack:"-" bson:"_modelversion"`
}

// NewAPIAuthorization returns a new *APIAuthorization
func NewAPIAuthorization() *APIAuthorization {

	return &APIAuthorization{
		ModelVersion:     1,
		Permissions:      []string{},
		Subject:          [][]string{},
		TargetNamespaces: []string{},
	}
}

// Identity returns the Identity of the object.
func (o *APIAuthorization) Identity() elemental.Identity {

	return APIAuthorizationIdentity
}

// Identifier returns the value of the object's unique identifier.
func (o *APIAuthorization) Identifier() string {

	return o.ID
}

// SetIdentifier sets the value of the object's unique identifier.
func (o *APIAuthorization) SetIdentifier(id string) {

	o.ID = id
}

// GetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *APIAuthorization) GetBSON() (any, error) {

	if o == nil {
		return nil, nil
	}

	s := &mongoAttributesAPIAuthorization{}

	if o.ID != "" {
		s.ID = bson.ObjectIdHex(o.ID)
	}
	s.CreateTime = o.CreateTime
	s.Description = o.Description
	s.Disabled = o.Disabled
	s.ImportHash = o.ImportHash
	s.ImportLabel = o.ImportLabel
	s.Name = o.Name
	s.Namespace = o.Namespace
	s.Permissions = o.Permissions
	s.Role = o.Role
	s.Subject = o.Subject
	s.TargetNamespaces = o.TargetNamespaces
	s.UpdateTime = o.UpdateTime
	s.ZHash = o.ZHash
	s.Zone = o.Zone

	return s, nil
}

// SetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *APIAuthorization) SetBSON(raw bson.Raw) error {

	if o == nil || raw.Kind == bson.ElementNil {
		return bson.ErrSetZero
	}

	s := &mongoAttributesAPIAuthorization{}
	if err := raw.Unmarshal(s); err != nil {
		return err
	}

	o.ID = s.ID.Hex()
	o.CreateTime = s.CreateTime
	o.Description = s.Description
	o.Disabled = s.Disabled
	o.ImportHash = s.ImportHash
	o.ImportLabel = s.ImportLabel
	o.Name = s.Name
	o.Namespace = s.Namespace
	o.Permissions = s.Permissions
	o.Role = s.Role
	o.Subject = s.Subject
	o.TargetNamespaces = s.TargetNamespaces
	o.UpdateTime = s.UpdateTime
	o.ZHash = s.ZHash
	o.Zone = s.Zone

	return nil
}

// Version returns the hardcoded version of the model.
func (o *APIAuthorization) Version() int {

	return 1
}

// BleveType implements the bleve.Classifier Interface.
func (o *APIAuthorization) BleveType() string {

	return "apiauthorization"
}

// DefaultOrder returns the list of default ordering fields.
func (o *APIAuthorization) DefaultOrder() []string {

	return []string{}
}

// Doc returns the documentation for the object
func (o *APIAuthorization) Doc() string {

	return `Define API Authorizations to define who can access the Acuvity console.`
}

func (o *APIAuthorization) String() string {

	return fmt.Sprintf("<%s:%s>", o.Identity().Name, o.Identifier())
}

// GetCreateTime returns the CreateTime of the receiver.
func (o *APIAuthorization) GetCreateTime() time.Time {

	return o.CreateTime
}

// SetCreateTime sets the property CreateTime of the receiver using the given value.
func (o *APIAuthorization) SetCreateTime(createTime time.Time) {

	o.CreateTime = createTime
}

// GetImportHash returns the ImportHash of the receiver.
func (o *APIAuthorization) GetImportHash() string {

	return o.ImportHash
}

// SetImportHash sets the property ImportHash of the receiver using the given value.
func (o *APIAuthorization) SetImportHash(importHash string) {

	o.ImportHash = importHash
}

// GetImportLabel returns the ImportLabel of the receiver.
func (o *APIAuthorization) GetImportLabel() string {

	return o.ImportLabel
}

// SetImportLabel sets the property ImportLabel of the receiver using the given value.
func (o *APIAuthorization) SetImportLabel(importLabel string) {

	o.ImportLabel = importLabel
}

// GetNamespace returns the Namespace of the receiver.
func (o *APIAuthorization) GetNamespace() string {

	return o.Namespace
}

// SetNamespace sets the property Namespace of the receiver using the given value.
func (o *APIAuthorization) SetNamespace(namespace string) {

	o.Namespace = namespace
}

// GetUpdateTime returns the UpdateTime of the receiver.
func (o *APIAuthorization) GetUpdateTime() time.Time {

	return o.UpdateTime
}

// SetUpdateTime sets the property UpdateTime of the receiver using the given value.
func (o *APIAuthorization) SetUpdateTime(updateTime time.Time) {

	o.UpdateTime = updateTime
}

// ToSparse returns the sparse version of the model.
// The returned object will only contain the given fields. No field means entire field set.
func (o *APIAuthorization) ToSparse(fields ...string) elemental.SparseIdentifiable {

	if len(fields) == 0 {
		// nolint: goimports
		return &SparseAPIAuthorization{
			ID:               &o.ID,
			CreateTime:       &o.CreateTime,
			Description:      &o.Description,
			Disabled:         &o.Disabled,
			ImportHash:       &o.ImportHash,
			ImportLabel:      &o.ImportLabel,
			Name:             &o.Name,
			Namespace:        &o.Namespace,
			Permissions:      &o.Permissions,
			Role:             &o.Role,
			Subject:          &o.Subject,
			TargetNamespaces: &o.TargetNamespaces,
			UpdateTime:       &o.UpdateTime,
			ZHash:            &o.ZHash,
			Zone:             &o.Zone,
		}
	}

	sp := &SparseAPIAuthorization{}
	for _, f := range fields {
		switch f {
		case "ID":
			sp.ID = &(o.ID)
		case "createTime":
			sp.CreateTime = &(o.CreateTime)
		case "description":
			sp.Description = &(o.Description)
		case "disabled":
			sp.Disabled = &(o.Disabled)
		case "importHash":
			sp.ImportHash = &(o.ImportHash)
		case "importLabel":
			sp.ImportLabel = &(o.ImportLabel)
		case "name":
			sp.Name = &(o.Name)
		case "namespace":
			sp.Namespace = &(o.Namespace)
		case "permissions":
			sp.Permissions = &(o.Permissions)
		case "role":
			sp.Role = &(o.Role)
		case "subject":
			sp.Subject = &(o.Subject)
		case "targetNamespaces":
			sp.TargetNamespaces = &(o.TargetNamespaces)
		case "updateTime":
			sp.UpdateTime = &(o.UpdateTime)
		case "zHash":
			sp.ZHash = &(o.ZHash)
		case "zone":
			sp.Zone = &(o.Zone)
		}
	}

	return sp
}

// Patch apply the non nil value of a *SparseAPIAuthorization to the object.
func (o *APIAuthorization) Patch(sparse elemental.SparseIdentifiable) {
	if !sparse.Identity().IsEqual(o.Identity()) {
		panic("cannot patch from a parse with different identity")
	}

	so := sparse.(*SparseAPIAuthorization)
	if so.ID != nil {
		o.ID = *so.ID
	}
	if so.CreateTime != nil {
		o.CreateTime = *so.CreateTime
	}
	if so.Description != nil {
		o.Description = *so.Description
	}
	if so.Disabled != nil {
		o.Disabled = *so.Disabled
	}
	if so.ImportHash != nil {
		o.ImportHash = *so.ImportHash
	}
	if so.ImportLabel != nil {
		o.ImportLabel = *so.ImportLabel
	}
	if so.Name != nil {
		o.Name = *so.Name
	}
	if so.Namespace != nil {
		o.Namespace = *so.Namespace
	}
	if so.Permissions != nil {
		o.Permissions = *so.Permissions
	}
	if so.Role != nil {
		o.Role = *so.Role
	}
	if so.Subject != nil {
		o.Subject = *so.Subject
	}
	if so.TargetNamespaces != nil {
		o.TargetNamespaces = *so.TargetNamespaces
	}
	if so.UpdateTime != nil {
		o.UpdateTime = *so.UpdateTime
	}
	if so.ZHash != nil {
		o.ZHash = *so.ZHash
	}
	if so.Zone != nil {
		o.Zone = *so.Zone
	}
}

// DeepCopy returns a deep copy if the APIAuthorization.
func (o *APIAuthorization) DeepCopy() *APIAuthorization {

	if o == nil {
		return nil
	}

	out := &APIAuthorization{}
	o.DeepCopyInto(out)

	return out
}

// DeepCopyInto copies the receiver into the given *APIAuthorization.
func (o *APIAuthorization) DeepCopyInto(out *APIAuthorization) {

	target, err := copystructure.Copy(o)
	if err != nil {
		panic(fmt.Sprintf("Unable to deepcopy APIAuthorization: %s", err))
	}

	*out = *target.(*APIAuthorization)
}

// Validate valides the current information stored into the structure.
func (o *APIAuthorization) Validate() error {

	errors := elemental.Errors{}
	requiredErrors := elemental.Errors{}

	if err := elemental.ValidateRequiredString("name", o.Name); err != nil {
		requiredErrors = requiredErrors.Append(err)
	}

	if err := elemental.ValidateRequiredString("role", string(o.Role)); err != nil {
		requiredErrors = requiredErrors.Append(err)
	}

	if err := elemental.ValidateStringInList("role", string(o.Role), []string{"Administrator", "Application", "Custom", "Employee", "OpenTelemetryCollector", "Owner", "Proxy", "Trial", "Viewer"}, false); err != nil {
		errors = errors.Append(err)
	}

	if err := ValidateTagsExpression("subject", o.Subject); err != nil {
		errors = errors.Append(err)
	}

	if len(requiredErrors) > 0 {
		return requiredErrors
	}

	if len(errors) > 0 {
		return errors
	}

	return nil
}

// SpecificationForAttribute returns the AttributeSpecification for the given attribute name key.
func (*APIAuthorization) SpecificationForAttribute(name string) elemental.AttributeSpecification {

	if v, ok := APIAuthorizationAttributesMap[name]; ok {
		return v
	}

	// We could not find it, so let's check on the lower case indexed spec map
	return APIAuthorizationLowerCaseAttributesMap[name]
}

// AttributeSpecifications returns the full attribute specifications map.
func (*APIAuthorization) AttributeSpecifications() map[string]elemental.AttributeSpecification {

	return APIAuthorizationAttributesMap
}

// ValueForAttribute returns the value for the given attribute.
// This is a very advanced function that you should not need but in some
// very specific use cases.
func (o *APIAuthorization) ValueForAttribute(name string) any {

	switch name {
	case "ID":
		return o.ID
	case "createTime":
		return o.CreateTime
	case "description":
		return o.Description
	case "disabled":
		return o.Disabled
	case "importHash":
		return o.ImportHash
	case "importLabel":
		return o.ImportLabel
	case "name":
		return o.Name
	case "namespace":
		return o.Namespace
	case "permissions":
		return o.Permissions
	case "role":
		return o.Role
	case "subject":
		return o.Subject
	case "targetNamespaces":
		return o.TargetNamespaces
	case "updateTime":
		return o.UpdateTime
	case "zHash":
		return o.ZHash
	case "zone":
		return o.Zone
	}

	return nil
}

// APIAuthorizationAttributesMap represents the map of attribute for APIAuthorization.
var APIAuthorizationAttributesMap = map[string]elemental.AttributeSpecification{
	"ID": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "_id",
		ConvertedName:  "ID",
		Description:    `ID is the identifier of the object.`,
		Exposed:        true,
		Filterable:     true,
		Identifier:     true,
		Name:           "ID",
		Orderable:      true,
		ReadOnly:       true,
		Stored:         true,
		Type:           "string",
	},
	"CreateTime": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "createtime",
		ConvertedName:  "CreateTime",
		Description:    `Creation date of the object.`,
		Exposed:        true,
		Getter:         true,
		Name:           "createTime",
		Orderable:      true,
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Type:           "time",
	},
	"Description": {
		AllowedChoices: []string{},
		BSONFieldName:  "description",
		ConvertedName:  "Description",
		Description:    `Description of the authorization rule.`,
		Exposed:        true,
		Name:           "description",
		Stored:         true,
		Type:           "string",
	},
	"Disabled": {
		AllowedChoices: []string{},
		BSONFieldName:  "disabled",
		ConvertedName:  "Disabled",
		Description:    `When disabled, an API Authorization has no effect.`,
		Exposed:        true,
		Name:           "disabled",
		Stored:         true,
		Type:           "boolean",
	},
	"ImportHash": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "importhash",
		ConvertedName:  "ImportHash",
		CreationOnly:   true,
		Description:    `The hash of the structure used to compare with new import version.`,
		Exposed:        true,
		Getter:         true,
		Name:           "importHash",
		Setter:         true,
		Stored:         true,
		Type:           "string",
	},
	"ImportLabel": {
		AllowedChoices: []string{},
		BSONFieldName:  "importlabel",
		ConvertedName:  "ImportLabel",
		CreationOnly:   true,
		Description: `The user-defined import label that allows the system to group resources from the
same import operation.`,
		Exposed: true,
		Getter:  true,
		Name:    "importLabel",
		Setter:  true,
		Stored:  true,
		Type:    "string",
	},
	"Name": {
		AllowedChoices: []string{},
		BSONFieldName:  "name",
		ConvertedName:  "Name",
		Description:    `The name of the authorization rule.`,
		Exposed:        true,
		Name:           "name",
		Required:       true,
		Stored:         true,
		Type:           "string",
	},
	"Namespace": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "namespace",
		ConvertedName:  "Namespace",
		Description:    `The namespace of the object.`,
		Exposed:        true,
		Getter:         true,
		Name:           "namespace",
		Orderable:      true,
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Type:           "string",
	},
	"Permissions": {
		AllowedChoices: []string{},
		BSONFieldName:  "permissions",
		ConvertedName:  "Permissions",
		Description:    `The individual permissions. Only works if role is Custom.`,
		Exposed:        true,
		Name:           "permissions",
		Stored:         true,
		SubType:        "string",
		Type:           "list",
	},
	"Role": {
		AllowedChoices: []string{"Administrator", "Application", "Custom", "Employee", "OpenTelemetryCollector", "Owner", "Proxy", "Trial", "Viewer"},
		BSONFieldName:  "role",
		ConvertedName:  "Role",
		Description:    `The role for the subjects.`,
		Exposed:        true,
		Name:           "role",
		Required:       true,
		Stored:         true,
		Type:           "enum",
	},
	"Subject": {
		AllowedChoices: []string{},
		BSONFieldName:  "subject",
		ConvertedName:  "Subject",
		Description:    `A tag expression that identifies the authorized user(s).`,
		Exposed:        true,
		Name:           "subject",
		Orderable:      true,
		Stored:         true,
		SubType:        "[][]string",
		Type:           "external",
	},
	"TargetNamespaces": {
		AllowedChoices: []string{},
		BSONFieldName:  "targetnamespaces",
		ConvertedName:  "TargetNamespaces",
		Description: `Defines the namespace or namespaces in which the permission for subject should
apply. If empty, the object's namespace will be used.`,
		Exposed: true,
		Name:    "targetNamespaces",
		Stored:  true,
		SubType: "string",
		Type:    "list",
	},
	"UpdateTime": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "updatetime",
		ConvertedName:  "UpdateTime",
		Description:    `Last update date of the object.`,
		Exposed:        true,
		Getter:         true,
		Name:           "updateTime",
		Orderable:      true,
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Type:           "time",
	},
}

// APIAuthorizationLowerCaseAttributesMap represents the map of attribute for APIAuthorization.
var APIAuthorizationLowerCaseAttributesMap = map[string]elemental.AttributeSpecification{
	"id": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "_id",
		ConvertedName:  "ID",
		Description:    `ID is the identifier of the object.`,
		Exposed:        true,
		Filterable:     true,
		Identifier:     true,
		Name:           "ID",
		Orderable:      true,
		ReadOnly:       true,
		Stored:         true,
		Type:           "string",
	},
	"createtime": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "createtime",
		ConvertedName:  "CreateTime",
		Description:    `Creation date of the object.`,
		Exposed:        true,
		Getter:         true,
		Name:           "createTime",
		Orderable:      true,
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Type:           "time",
	},
	"description": {
		AllowedChoices: []string{},
		BSONFieldName:  "description",
		ConvertedName:  "Description",
		Description:    `Description of the authorization rule.`,
		Exposed:        true,
		Name:           "description",
		Stored:         true,
		Type:           "string",
	},
	"disabled": {
		AllowedChoices: []string{},
		BSONFieldName:  "disabled",
		ConvertedName:  "Disabled",
		Description:    `When disabled, an API Authorization has no effect.`,
		Exposed:        true,
		Name:           "disabled",
		Stored:         true,
		Type:           "boolean",
	},
	"importhash": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "importhash",
		ConvertedName:  "ImportHash",
		CreationOnly:   true,
		Description:    `The hash of the structure used to compare with new import version.`,
		Exposed:        true,
		Getter:         true,
		Name:           "importHash",
		Setter:         true,
		Stored:         true,
		Type:           "string",
	},
	"importlabel": {
		AllowedChoices: []string{},
		BSONFieldName:  "importlabel",
		ConvertedName:  "ImportLabel",
		CreationOnly:   true,
		Description: `The user-defined import label that allows the system to group resources from the
same import operation.`,
		Exposed: true,
		Getter:  true,
		Name:    "importLabel",
		Setter:  true,
		Stored:  true,
		Type:    "string",
	},
	"name": {
		AllowedChoices: []string{},
		BSONFieldName:  "name",
		ConvertedName:  "Name",
		Description:    `The name of the authorization rule.`,
		Exposed:        true,
		Name:           "name",
		Required:       true,
		Stored:         true,
		Type:           "string",
	},
	"namespace": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "namespace",
		ConvertedName:  "Namespace",
		Description:    `The namespace of the object.`,
		Exposed:        true,
		Getter:         true,
		Name:           "namespace",
		Orderable:      true,
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Type:           "string",
	},
	"permissions": {
		AllowedChoices: []string{},
		BSONFieldName:  "permissions",
		ConvertedName:  "Permissions",
		Description:    `The individual permissions. Only works if role is Custom.`,
		Exposed:        true,
		Name:           "permissions",
		Stored:         true,
		SubType:        "string",
		Type:           "list",
	},
	"role": {
		AllowedChoices: []string{"Administrator", "Application", "Custom", "Employee", "OpenTelemetryCollector", "Owner", "Proxy", "Trial", "Viewer"},
		BSONFieldName:  "role",
		ConvertedName:  "Role",
		Description:    `The role for the subjects.`,
		Exposed:        true,
		Name:           "role",
		Required:       true,
		Stored:         true,
		Type:           "enum",
	},
	"subject": {
		AllowedChoices: []string{},
		BSONFieldName:  "subject",
		ConvertedName:  "Subject",
		Description:    `A tag expression that identifies the authorized user(s).`,
		Exposed:        true,
		Name:           "subject",
		Orderable:      true,
		Stored:         true,
		SubType:        "[][]string",
		Type:           "external",
	},
	"targetnamespaces": {
		AllowedChoices: []string{},
		BSONFieldName:  "targetnamespaces",
		ConvertedName:  "TargetNamespaces",
		Description: `Defines the namespace or namespaces in which the permission for subject should
apply. If empty, the object's namespace will be used.`,
		Exposed: true,
		Name:    "targetNamespaces",
		Stored:  true,
		SubType: "string",
		Type:    "list",
	},
	"updatetime": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "updatetime",
		ConvertedName:  "UpdateTime",
		Description:    `Last update date of the object.`,
		Exposed:        true,
		Getter:         true,
		Name:           "updateTime",
		Orderable:      true,
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Type:           "time",
	},
}

// SparseAPIAuthorizationsList represents a list of SparseAPIAuthorizations
type SparseAPIAuthorizationsList []*SparseAPIAuthorization

// Identity returns the identity of the objects in the list.
func (o SparseAPIAuthorizationsList) Identity() elemental.Identity {

	return APIAuthorizationIdentity
}

// Copy returns a pointer to a copy the SparseAPIAuthorizationsList.
func (o SparseAPIAuthorizationsList) Copy() elemental.Identifiables {

	copy := slices.Clone(o)
	return &copy
}

// Append appends the objects to the a new copy of the SparseAPIAuthorizationsList.
func (o SparseAPIAuthorizationsList) Append(objects ...elemental.Identifiable) elemental.Identifiables {

	out := slices.Clone(o)
	for _, obj := range objects {
		out = append(out, obj.(*SparseAPIAuthorization))
	}

	return out
}

// List converts the object to an elemental.IdentifiablesList.
func (o SparseAPIAuthorizationsList) List() elemental.IdentifiablesList {

	out := make(elemental.IdentifiablesList, len(o))
	for i := range len(o) {
		out[i] = o[i]
	}

	return out
}

// DefaultOrder returns the default ordering fields of the content.
func (o SparseAPIAuthorizationsList) DefaultOrder() []string {

	return []string{}
}

// ToPlain returns the SparseAPIAuthorizationsList converted to APIAuthorizationsList.
func (o SparseAPIAuthorizationsList) ToPlain() elemental.IdentifiablesList {

	out := make(elemental.IdentifiablesList, len(o))
	for i := range len(o) {
		out[i] = o[i].ToPlain()
	}

	return out
}

// Version returns the version of the content.
func (o SparseAPIAuthorizationsList) Version() int {

	return 1
}

// SparseAPIAuthorization represents the sparse version of a apiauthorization.
type SparseAPIAuthorization struct {
	// ID is the identifier of the object.
	ID *string `json:"ID,omitempty" msgpack:"ID,omitempty" bson:"-" mapstructure:"ID,omitempty"`

	// Creation date of the object.
	CreateTime *time.Time `json:"createTime,omitempty" msgpack:"createTime,omitempty" bson:"createtime,omitempty" mapstructure:"createTime,omitempty"`

	// Description of the authorization rule.
	Description *string `json:"description,omitempty" msgpack:"description,omitempty" bson:"description,omitempty" mapstructure:"description,omitempty"`

	// When disabled, an API Authorization has no effect.
	Disabled *bool `json:"disabled,omitempty" msgpack:"disabled,omitempty" bson:"disabled,omitempty" mapstructure:"disabled,omitempty"`

	// The hash of the structure used to compare with new import version.
	ImportHash *string `json:"importHash,omitempty" msgpack:"importHash,omitempty" bson:"importhash,omitempty" mapstructure:"importHash,omitempty"`

	// The user-defined import label that allows the system to group resources from the
	// same import operation.
	ImportLabel *string `json:"importLabel,omitempty" msgpack:"importLabel,omitempty" bson:"importlabel,omitempty" mapstructure:"importLabel,omitempty"`

	// The name of the authorization rule.
	Name *string `json:"name,omitempty" msgpack:"name,omitempty" bson:"name,omitempty" mapstructure:"name,omitempty"`

	// The namespace of the object.
	Namespace *string `json:"namespace,omitempty" msgpack:"namespace,omitempty" bson:"namespace,omitempty" mapstructure:"namespace,omitempty"`

	// The individual permissions. Only works if role is Custom.
	Permissions *[]string `json:"permissions,omitempty" msgpack:"permissions,omitempty" bson:"permissions,omitempty" mapstructure:"permissions,omitempty"`

	// The role for the subjects.
	Role *APIAuthorizationRoleValue `json:"role,omitempty" msgpack:"role,omitempty" bson:"role,omitempty" mapstructure:"role,omitempty"`

	// A tag expression that identifies the authorized user(s).
	Subject *[][]string `json:"subject,omitempty" msgpack:"subject,omitempty" bson:"subject,omitempty" mapstructure:"subject,omitempty"`

	// Defines the namespace or namespaces in which the permission for subject should
	// apply. If empty, the object's namespace will be used.
	TargetNamespaces *[]string `json:"targetNamespaces,omitempty" msgpack:"targetNamespaces,omitempty" bson:"targetnamespaces,omitempty" mapstructure:"targetNamespaces,omitempty"`

	// Last update date of the object.
	UpdateTime *time.Time `json:"updateTime,omitempty" msgpack:"updateTime,omitempty" bson:"updatetime,omitempty" mapstructure:"updateTime,omitempty"`

	// Hash of the object used to shard the data.
	ZHash *int `json:"-" msgpack:"-" bson:"zhash,omitempty" mapstructure:"-,omitempty"`

	// Sharding zone.
	Zone *int `json:"-" msgpack:"-" bson:"zone,omitempty" mapstructure:"-,omitempty"`

	ModelVersion int `json:"-" msgpack:"-" bson:"_modelversion"`
}

// NewSparseAPIAuthorization returns a new  SparseAPIAuthorization.
func NewSparseAPIAuthorization() *SparseAPIAuthorization {
	return &SparseAPIAuthorization{}
}

// Identity returns the Identity of the sparse object.
func (o *SparseAPIAuthorization) Identity() elemental.Identity {

	return APIAuthorizationIdentity
}

// Identifier returns the value of the sparse object's unique identifier.
func (o *SparseAPIAuthorization) Identifier() string {

	if o.ID == nil {
		return ""
	}
	return *o.ID
}

// SetIdentifier sets the value of the sparse object's unique identifier.
func (o *SparseAPIAuthorization) SetIdentifier(id string) {

	if id != "" {
		o.ID = &id
	} else {
		o.ID = nil
	}
}

// GetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *SparseAPIAuthorization) GetBSON() (any, error) {

	if o == nil {
		return nil, nil
	}

	s := &mongoAttributesSparseAPIAuthorization{}

	if o.ID != nil {
		s.ID = bson.ObjectIdHex(*o.ID)
	}
	if o.CreateTime != nil {
		s.CreateTime = o.CreateTime
	}
	if o.Description != nil {
		s.Description = o.Description
	}
	if o.Disabled != nil {
		s.Disabled = o.Disabled
	}
	if o.ImportHash != nil {
		s.ImportHash = o.ImportHash
	}
	if o.ImportLabel != nil {
		s.ImportLabel = o.ImportLabel
	}
	if o.Name != nil {
		s.Name = o.Name
	}
	if o.Namespace != nil {
		s.Namespace = o.Namespace
	}
	if o.Permissions != nil {
		s.Permissions = o.Permissions
	}
	if o.Role != nil {
		s.Role = o.Role
	}
	if o.Subject != nil {
		s.Subject = o.Subject
	}
	if o.TargetNamespaces != nil {
		s.TargetNamespaces = o.TargetNamespaces
	}
	if o.UpdateTime != nil {
		s.UpdateTime = o.UpdateTime
	}
	if o.ZHash != nil {
		s.ZHash = o.ZHash
	}
	if o.Zone != nil {
		s.Zone = o.Zone
	}

	return s, nil
}

// SetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *SparseAPIAuthorization) SetBSON(raw bson.Raw) error {

	if o == nil {
		return nil
	}

	s := &mongoAttributesSparseAPIAuthorization{}
	if err := raw.Unmarshal(s); err != nil {
		return err
	}

	id := s.ID.Hex()
	o.ID = &id
	if s.CreateTime != nil {
		o.CreateTime = s.CreateTime
	}
	if s.Description != nil {
		o.Description = s.Description
	}
	if s.Disabled != nil {
		o.Disabled = s.Disabled
	}
	if s.ImportHash != nil {
		o.ImportHash = s.ImportHash
	}
	if s.ImportLabel != nil {
		o.ImportLabel = s.ImportLabel
	}
	if s.Name != nil {
		o.Name = s.Name
	}
	if s.Namespace != nil {
		o.Namespace = s.Namespace
	}
	if s.Permissions != nil {
		o.Permissions = s.Permissions
	}
	if s.Role != nil {
		o.Role = s.Role
	}
	if s.Subject != nil {
		o.Subject = s.Subject
	}
	if s.TargetNamespaces != nil {
		o.TargetNamespaces = s.TargetNamespaces
	}
	if s.UpdateTime != nil {
		o.UpdateTime = s.UpdateTime
	}
	if s.ZHash != nil {
		o.ZHash = s.ZHash
	}
	if s.Zone != nil {
		o.Zone = s.Zone
	}

	return nil
}

// Version returns the hardcoded version of the model.
func (o *SparseAPIAuthorization) Version() int {

	return 1
}

// ToPlain returns the plain version of the sparse model.
func (o *SparseAPIAuthorization) ToPlain() elemental.PlainIdentifiable {

	out := NewAPIAuthorization()
	if o.ID != nil {
		out.ID = *o.ID
	}
	if o.CreateTime != nil {
		out.CreateTime = *o.CreateTime
	}
	if o.Description != nil {
		out.Description = *o.Description
	}
	if o.Disabled != nil {
		out.Disabled = *o.Disabled
	}
	if o.ImportHash != nil {
		out.ImportHash = *o.ImportHash
	}
	if o.ImportLabel != nil {
		out.ImportLabel = *o.ImportLabel
	}
	if o.Name != nil {
		out.Name = *o.Name
	}
	if o.Namespace != nil {
		out.Namespace = *o.Namespace
	}
	if o.Permissions != nil {
		out.Permissions = *o.Permissions
	}
	if o.Role != nil {
		out.Role = *o.Role
	}
	if o.Subject != nil {
		out.Subject = *o.Subject
	}
	if o.TargetNamespaces != nil {
		out.TargetNamespaces = *o.TargetNamespaces
	}
	if o.UpdateTime != nil {
		out.UpdateTime = *o.UpdateTime
	}
	if o.ZHash != nil {
		out.ZHash = *o.ZHash
	}
	if o.Zone != nil {
		out.Zone = *o.Zone
	}

	return out
}

// GetCreateTime returns the CreateTime of the receiver.
func (o *SparseAPIAuthorization) GetCreateTime() (out time.Time) {

	if o.CreateTime == nil {
		return
	}

	return *o.CreateTime
}

// SetCreateTime sets the property CreateTime of the receiver using the address of the given value.
func (o *SparseAPIAuthorization) SetCreateTime(createTime time.Time) {

	o.CreateTime = &createTime
}

// GetImportHash returns the ImportHash of the receiver.
func (o *SparseAPIAuthorization) GetImportHash() (out string) {

	if o.ImportHash == nil {
		return
	}

	return *o.ImportHash
}

// SetImportHash sets the property ImportHash of the receiver using the address of the given value.
func (o *SparseAPIAuthorization) SetImportHash(importHash string) {

	o.ImportHash = &importHash
}

// GetImportLabel returns the ImportLabel of the receiver.
func (o *SparseAPIAuthorization) GetImportLabel() (out string) {

	if o.ImportLabel == nil {
		return
	}

	return *o.ImportLabel
}

// SetImportLabel sets the property ImportLabel of the receiver using the address of the given value.
func (o *SparseAPIAuthorization) SetImportLabel(importLabel string) {

	o.ImportLabel = &importLabel
}

// GetNamespace returns the Namespace of the receiver.
func (o *SparseAPIAuthorization) GetNamespace() (out string) {

	if o.Namespace == nil {
		return
	}

	return *o.Namespace
}

// SetNamespace sets the property Namespace of the receiver using the address of the given value.
func (o *SparseAPIAuthorization) SetNamespace(namespace string) {

	o.Namespace = &namespace
}

// GetUpdateTime returns the UpdateTime of the receiver.
func (o *SparseAPIAuthorization) GetUpdateTime() (out time.Time) {

	if o.UpdateTime == nil {
		return
	}

	return *o.UpdateTime
}

// SetUpdateTime sets the property UpdateTime of the receiver using the address of the given value.
func (o *SparseAPIAuthorization) SetUpdateTime(updateTime time.Time) {

	o.UpdateTime = &updateTime
}

// DeepCopy returns a deep copy if the SparseAPIAuthorization.
func (o *SparseAPIAuthorization) DeepCopy() *SparseAPIAuthorization {

	if o == nil {
		return nil
	}

	out := &SparseAPIAuthorization{}
	o.DeepCopyInto(out)

	return out
}

// DeepCopyInto copies the receiver into the given *SparseAPIAuthorization.
func (o *SparseAPIAuthorization) DeepCopyInto(out *SparseAPIAuthorization) {

	target, err := copystructure.Copy(o)
	if err != nil {
		panic(fmt.Sprintf("Unable to deepcopy SparseAPIAuthorization: %s", err))
	}

	*out = *target.(*SparseAPIAuthorization)
}

type mongoAttributesAPIAuthorization struct {
	ID               bson.ObjectId             `bson:"_id,omitempty"`
	CreateTime       time.Time                 `bson:"createtime"`
	Description      string                    `bson:"description"`
	Disabled         bool                      `bson:"disabled"`
	ImportHash       string                    `bson:"importhash,omitempty"`
	ImportLabel      string                    `bson:"importlabel,omitempty"`
	Name             string                    `bson:"name"`
	Namespace        string                    `bson:"namespace,omitempty"`
	Permissions      []string                  `bson:"permissions,omitempty"`
	Role             APIAuthorizationRoleValue `bson:"role"`
	Subject          [][]string                `bson:"subject"`
	TargetNamespaces []string                  `bson:"targetnamespaces"`
	UpdateTime       time.Time                 `bson:"updatetime"`
	ZHash            int                       `bson:"zhash"`
	Zone             int                       `bson:"zone"`
}
type mongoAttributesSparseAPIAuthorization struct {
	ID               bson.ObjectId              `bson:"_id,omitempty"`
	CreateTime       *time.Time                 `bson:"createtime,omitempty"`
	Description      *string                    `bson:"description,omitempty"`
	Disabled         *bool                      `bson:"disabled,omitempty"`
	ImportHash       *string                    `bson:"importhash,omitempty"`
	ImportLabel      *string                    `bson:"importlabel,omitempty"`
	Name             *string                    `bson:"name,omitempty"`
	Namespace        *string                    `bson:"namespace,omitempty"`
	Permissions      *[]string                  `bson:"permissions,omitempty"`
	Role             *APIAuthorizationRoleValue `bson:"role,omitempty"`
	Subject          *[][]string                `bson:"subject,omitempty"`
	TargetNamespaces *[]string                  `bson:"targetnamespaces,omitempty"`
	UpdateTime       *time.Time                 `bson:"updatetime,omitempty"`
	ZHash            *int                       `bson:"zhash,omitempty"`
	Zone             *int                       `bson:"zone,omitempty"`
}
