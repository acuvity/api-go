// Code generated by elegen. DO NOT EDIT.
// Source: go.acuvity.ai/elemental (templates/model.gotpl)

package api

import (
	"fmt"

	"github.com/globalsign/mgo/bson"
	"github.com/mitchellh/copystructure"
	"go.acuvity.ai/elemental"
)

// ScanDomain represents the model of a scandomain
type ScanDomain struct {
	// Holds the results of the HTTP Scan.
	HTTPScanResult *ScanResultHTTP `json:"HTTPScanResult" msgpack:"HTTPScanResult" bson:"httpscanresult" mapstructure:"HTTPScanResult,omitempty"`

	// Holds the results of the Ping Scan.
	PingScanResult *ScanResultPing `json:"PingScanResult" msgpack:"PingScanResult" bson:"pingscanresult" mapstructure:"PingScanResult,omitempty"`

	// Holds the results of the HTTP Scan.
	TLSScanResult *ScanResultTLS `json:"TLSScanResult" msgpack:"TLSScanResult" bson:"tlsscanresult" mapstructure:"TLSScanResult,omitempty"`

	// Holds the results of additional scans.
	AdvancedScanResults map[string]*ScanResultAdvanced `json:"advancedScanResults" msgpack:"advancedScanResults" bson:"advancedscanresults" mapstructure:"advancedScanResults,omitempty"`

	// Reference to the AI domain ID.
	DomainID string `json:"domainID" msgpack:"domainID" bson:"domainid" mapstructure:"domainID,omitempty"`

	// Reference to the AI domain namespace.
	DomainNamespace string `json:"domainNamespace" msgpack:"domainNamespace" bson:"domainnamespace" mapstructure:"domainNamespace,omitempty"`

	// The name of the domain.
	Name string `json:"name" msgpack:"name" bson:"name" mapstructure:"name,omitempty"`

	// The Risk Score.
	RiskScore float64 `json:"riskScore" msgpack:"riskScore" bson:"riskscore" mapstructure:"riskScore,omitempty"`

	// The user information.
	Users []*ScanUser `json:"users" msgpack:"users" bson:"users" mapstructure:"users,omitempty"`

	ModelVersion int `json:"-" msgpack:"-" bson:"_modelversion"`
}

// NewScanDomain returns a new *ScanDomain
func NewScanDomain() *ScanDomain {

	return &ScanDomain{
		ModelVersion:        1,
		HTTPScanResult:      NewScanResultHTTP(),
		PingScanResult:      NewScanResultPing(),
		TLSScanResult:       NewScanResultTLS(),
		AdvancedScanResults: map[string]*ScanResultAdvanced{},
	}
}

// GetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *ScanDomain) GetBSON() (any, error) {

	if o == nil {
		return nil, nil
	}

	s := &mongoAttributesScanDomain{}

	s.HTTPScanResult = o.HTTPScanResult
	s.PingScanResult = o.PingScanResult
	s.TLSScanResult = o.TLSScanResult
	s.AdvancedScanResults = o.AdvancedScanResults
	s.DomainID = o.DomainID
	s.DomainNamespace = o.DomainNamespace
	s.Name = o.Name
	s.RiskScore = o.RiskScore
	s.Users = o.Users

	return s, nil
}

// SetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *ScanDomain) SetBSON(raw bson.Raw) error {

	if o == nil || raw.Kind == bson.ElementNil {
		return bson.ErrSetZero
	}

	s := &mongoAttributesScanDomain{}
	if err := raw.Unmarshal(s); err != nil {
		return err
	}

	o.HTTPScanResult = s.HTTPScanResult
	o.PingScanResult = s.PingScanResult
	o.TLSScanResult = s.TLSScanResult
	o.AdvancedScanResults = s.AdvancedScanResults
	o.DomainID = s.DomainID
	o.DomainNamespace = s.DomainNamespace
	o.Name = s.Name
	o.RiskScore = s.RiskScore
	o.Users = s.Users

	return nil
}

// BleveType implements the bleve.Classifier Interface.
func (o *ScanDomain) BleveType() string {

	return "scandomain"
}

// DeepCopy returns a deep copy if the ScanDomain.
func (o *ScanDomain) DeepCopy() *ScanDomain {

	if o == nil {
		return nil
	}

	out := &ScanDomain{}
	o.DeepCopyInto(out)

	return out
}

// DeepCopyInto copies the receiver into the given *ScanDomain.
func (o *ScanDomain) DeepCopyInto(out *ScanDomain) {

	target, err := copystructure.Copy(o)
	if err != nil {
		panic(fmt.Sprintf("Unable to deepcopy ScanDomain: %s", err))
	}

	*out = *target.(*ScanDomain)
}

// Validate valides the current information stored into the structure.
func (o *ScanDomain) Validate() error {

	errors := elemental.Errors{}
	requiredErrors := elemental.Errors{}

	if o.HTTPScanResult != nil {
		elemental.ResetDefaultForZeroValues(o.HTTPScanResult)
		if err := o.HTTPScanResult.Validate(); err != nil {
			errors = errors.Append(err)
		}
	}

	if o.PingScanResult != nil {
		elemental.ResetDefaultForZeroValues(o.PingScanResult)
		if err := o.PingScanResult.Validate(); err != nil {
			errors = errors.Append(err)
		}
	}

	if o.TLSScanResult != nil {
		elemental.ResetDefaultForZeroValues(o.TLSScanResult)
		if err := o.TLSScanResult.Validate(); err != nil {
			errors = errors.Append(err)
		}
	}

	for _, sub := range o.AdvancedScanResults {
		if sub == nil {
			continue
		}
		elemental.ResetDefaultForZeroValues(sub)
		if err := sub.Validate(); err != nil {
			errors = errors.Append(err)
		}
	}

	if err := elemental.ValidateRequiredString("domainID", o.DomainID); err != nil {
		requiredErrors = requiredErrors.Append(err)
	}

	if err := elemental.ValidateRequiredString("domainNamespace", o.DomainNamespace); err != nil {
		requiredErrors = requiredErrors.Append(err)
	}

	if err := elemental.ValidateRequiredString("name", o.Name); err != nil {
		requiredErrors = requiredErrors.Append(err)
	}

	if err := elemental.ValidateRequiredFloat("riskScore", o.RiskScore); err != nil {
		requiredErrors = requiredErrors.Append(err)
	}

	for _, sub := range o.Users {
		if sub == nil {
			continue
		}
		elemental.ResetDefaultForZeroValues(sub)
		if err := sub.Validate(); err != nil {
			errors = errors.Append(err)
		}
	}

	if len(requiredErrors) > 0 {
		return requiredErrors
	}

	if len(errors) > 0 {
		return errors
	}

	return nil
}

// SpecificationForAttribute returns the AttributeSpecification for the given attribute name key.
func (*ScanDomain) SpecificationForAttribute(name string) elemental.AttributeSpecification {

	if v, ok := ScanDomainAttributesMap[name]; ok {
		return v
	}

	// We could not find it, so let's check on the lower case indexed spec map
	return ScanDomainLowerCaseAttributesMap[name]
}

// AttributeSpecifications returns the full attribute specifications map.
func (*ScanDomain) AttributeSpecifications() map[string]elemental.AttributeSpecification {

	return ScanDomainAttributesMap
}

// ValueForAttribute returns the value for the given attribute.
// This is a very advanced function that you should not need but in some
// very specific use cases.
func (o *ScanDomain) ValueForAttribute(name string) any {

	switch name {
	case "HTTPScanResult":
		return o.HTTPScanResult
	case "PingScanResult":
		return o.PingScanResult
	case "TLSScanResult":
		return o.TLSScanResult
	case "advancedScanResults":
		return o.AdvancedScanResults
	case "domainID":
		return o.DomainID
	case "domainNamespace":
		return o.DomainNamespace
	case "name":
		return o.Name
	case "riskScore":
		return o.RiskScore
	case "users":
		return o.Users
	}

	return nil
}

// ScanDomainAttributesMap represents the map of attribute for ScanDomain.
var ScanDomainAttributesMap = map[string]elemental.AttributeSpecification{
	"HTTPScanResult": {
		AllowedChoices: []string{},
		BSONFieldName:  "httpscanresult",
		ConvertedName:  "HTTPScanResult",
		Description:    `Holds the results of the HTTP Scan.`,
		Exposed:        true,
		Name:           "HTTPScanResult",
		Stored:         true,
		SubType:        "scanresulthttp",
		Type:           "ref",
	},
	"PingScanResult": {
		AllowedChoices: []string{},
		BSONFieldName:  "pingscanresult",
		ConvertedName:  "PingScanResult",
		Description:    `Holds the results of the Ping Scan.`,
		Exposed:        true,
		Name:           "PingScanResult",
		Stored:         true,
		SubType:        "scanresultping",
		Type:           "ref",
	},
	"TLSScanResult": {
		AllowedChoices: []string{},
		BSONFieldName:  "tlsscanresult",
		ConvertedName:  "TLSScanResult",
		Description:    `Holds the results of the HTTP Scan.`,
		Exposed:        true,
		Name:           "TLSScanResult",
		Stored:         true,
		SubType:        "scanresulttls",
		Type:           "ref",
	},
	"AdvancedScanResults": {
		AllowedChoices: []string{},
		BSONFieldName:  "advancedscanresults",
		ConvertedName:  "AdvancedScanResults",
		Description:    `Holds the results of additional scans.`,
		Exposed:        true,
		Name:           "advancedScanResults",
		Stored:         true,
		SubType:        "scanresultadvanced",
		Type:           "refMap",
	},
	"DomainID": {
		AllowedChoices: []string{},
		BSONFieldName:  "domainid",
		ConvertedName:  "DomainID",
		Description:    `Reference to the AI domain ID.`,
		Exposed:        true,
		Name:           "domainID",
		Required:       true,
		Stored:         true,
		Type:           "string",
	},
	"DomainNamespace": {
		AllowedChoices: []string{},
		BSONFieldName:  "domainnamespace",
		ConvertedName:  "DomainNamespace",
		Description:    `Reference to the AI domain namespace.`,
		Exposed:        true,
		Name:           "domainNamespace",
		Required:       true,
		Stored:         true,
		Type:           "string",
	},
	"Name": {
		AllowedChoices: []string{},
		BSONFieldName:  "name",
		ConvertedName:  "Name",
		Description:    `The name of the domain.`,
		Exposed:        true,
		Name:           "name",
		Required:       true,
		Stored:         true,
		Type:           "string",
	},
	"RiskScore": {
		AllowedChoices: []string{},
		BSONFieldName:  "riskscore",
		ConvertedName:  "RiskScore",
		Description:    `The Risk Score.`,
		Exposed:        true,
		Name:           "riskScore",
		Required:       true,
		Stored:         true,
		Type:           "float",
	},
	"Users": {
		AllowedChoices: []string{},
		BSONFieldName:  "users",
		ConvertedName:  "Users",
		Description:    `The user information.`,
		Exposed:        true,
		Name:           "users",
		Stored:         true,
		SubType:        "scanuser",
		Type:           "refList",
	},
}

// ScanDomainLowerCaseAttributesMap represents the map of attribute for ScanDomain.
var ScanDomainLowerCaseAttributesMap = map[string]elemental.AttributeSpecification{
	"httpscanresult": {
		AllowedChoices: []string{},
		BSONFieldName:  "httpscanresult",
		ConvertedName:  "HTTPScanResult",
		Description:    `Holds the results of the HTTP Scan.`,
		Exposed:        true,
		Name:           "HTTPScanResult",
		Stored:         true,
		SubType:        "scanresulthttp",
		Type:           "ref",
	},
	"pingscanresult": {
		AllowedChoices: []string{},
		BSONFieldName:  "pingscanresult",
		ConvertedName:  "PingScanResult",
		Description:    `Holds the results of the Ping Scan.`,
		Exposed:        true,
		Name:           "PingScanResult",
		Stored:         true,
		SubType:        "scanresultping",
		Type:           "ref",
	},
	"tlsscanresult": {
		AllowedChoices: []string{},
		BSONFieldName:  "tlsscanresult",
		ConvertedName:  "TLSScanResult",
		Description:    `Holds the results of the HTTP Scan.`,
		Exposed:        true,
		Name:           "TLSScanResult",
		Stored:         true,
		SubType:        "scanresulttls",
		Type:           "ref",
	},
	"advancedscanresults": {
		AllowedChoices: []string{},
		BSONFieldName:  "advancedscanresults",
		ConvertedName:  "AdvancedScanResults",
		Description:    `Holds the results of additional scans.`,
		Exposed:        true,
		Name:           "advancedScanResults",
		Stored:         true,
		SubType:        "scanresultadvanced",
		Type:           "refMap",
	},
	"domainid": {
		AllowedChoices: []string{},
		BSONFieldName:  "domainid",
		ConvertedName:  "DomainID",
		Description:    `Reference to the AI domain ID.`,
		Exposed:        true,
		Name:           "domainID",
		Required:       true,
		Stored:         true,
		Type:           "string",
	},
	"domainnamespace": {
		AllowedChoices: []string{},
		BSONFieldName:  "domainnamespace",
		ConvertedName:  "DomainNamespace",
		Description:    `Reference to the AI domain namespace.`,
		Exposed:        true,
		Name:           "domainNamespace",
		Required:       true,
		Stored:         true,
		Type:           "string",
	},
	"name": {
		AllowedChoices: []string{},
		BSONFieldName:  "name",
		ConvertedName:  "Name",
		Description:    `The name of the domain.`,
		Exposed:        true,
		Name:           "name",
		Required:       true,
		Stored:         true,
		Type:           "string",
	},
	"riskscore": {
		AllowedChoices: []string{},
		BSONFieldName:  "riskscore",
		ConvertedName:  "RiskScore",
		Description:    `The Risk Score.`,
		Exposed:        true,
		Name:           "riskScore",
		Required:       true,
		Stored:         true,
		Type:           "float",
	},
	"users": {
		AllowedChoices: []string{},
		BSONFieldName:  "users",
		ConvertedName:  "Users",
		Description:    `The user information.`,
		Exposed:        true,
		Name:           "users",
		Stored:         true,
		SubType:        "scanuser",
		Type:           "refList",
	},
}

type mongoAttributesScanDomain struct {
	HTTPScanResult      *ScanResultHTTP                `bson:"httpscanresult"`
	PingScanResult      *ScanResultPing                `bson:"pingscanresult"`
	TLSScanResult       *ScanResultTLS                 `bson:"tlsscanresult"`
	AdvancedScanResults map[string]*ScanResultAdvanced `bson:"advancedscanresults"`
	DomainID            string                         `bson:"domainid"`
	DomainNamespace     string                         `bson:"domainnamespace"`
	Name                string                         `bson:"name"`
	RiskScore           float64                        `bson:"riskscore"`
	Users               []*ScanUser                    `bson:"users"`
}
