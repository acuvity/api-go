// Code generated by elegen. DO NOT EDIT.
// Source: go.acuvity.ai/elemental (templates/model.gotpl)

package api

import (
	"fmt"

	"github.com/globalsign/mgo/bson"
	"github.com/mitchellh/copystructure"
	"go.acuvity.ai/elemental"
)

// TunnelProxyAuth represents the model of a tunnelproxyauth
type TunnelProxyAuth struct {
	// If set, the proxy will use basic authentication with the provided username and
	// password.
	Basic *TunnelProxyAuthBasic `json:"basic" msgpack:"basic" bson:"basic" mapstructure:"basic,omitempty"`

	ModelVersion int `json:"-" msgpack:"-" bson:"_modelversion"`
}

// NewTunnelProxyAuth returns a new *TunnelProxyAuth
func NewTunnelProxyAuth() *TunnelProxyAuth {

	return &TunnelProxyAuth{
		ModelVersion: 1,
	}
}

// GetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *TunnelProxyAuth) GetBSON() (any, error) {

	if o == nil {
		return nil, nil
	}

	s := &mongoAttributesTunnelProxyAuth{}

	s.Basic = o.Basic

	return s, nil
}

// SetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *TunnelProxyAuth) SetBSON(raw bson.Raw) error {

	if o == nil || raw.Kind == bson.ElementNil {
		return bson.ErrSetZero
	}

	s := &mongoAttributesTunnelProxyAuth{}
	if err := raw.Unmarshal(s); err != nil {
		return err
	}

	o.Basic = s.Basic

	return nil
}

// BleveType implements the bleve.Classifier Interface.
func (o *TunnelProxyAuth) BleveType() string {

	return "tunnelproxyauth"
}

// DeepCopy returns a deep copy if the TunnelProxyAuth.
func (o *TunnelProxyAuth) DeepCopy() *TunnelProxyAuth {

	if o == nil {
		return nil
	}

	out := &TunnelProxyAuth{}
	o.DeepCopyInto(out)

	return out
}

// DeepCopyInto copies the receiver into the given *TunnelProxyAuth.
func (o *TunnelProxyAuth) DeepCopyInto(out *TunnelProxyAuth) {

	target, err := copystructure.Copy(o)
	if err != nil {
		panic(fmt.Sprintf("Unable to deepcopy TunnelProxyAuth: %s", err))
	}

	*out = *target.(*TunnelProxyAuth)
}

// Validate valides the current information stored into the structure.
func (o *TunnelProxyAuth) Validate() error {

	errors := elemental.Errors{}
	requiredErrors := elemental.Errors{}

	if o.Basic != nil {
		elemental.ResetDefaultForZeroValues(o.Basic)
		if err := o.Basic.Validate(); err != nil {
			errors = errors.Append(err)
		}
	}

	if len(requiredErrors) > 0 {
		return requiredErrors
	}

	if len(errors) > 0 {
		return errors
	}

	return nil
}

// SpecificationForAttribute returns the AttributeSpecification for the given attribute name key.
func (*TunnelProxyAuth) SpecificationForAttribute(name string) elemental.AttributeSpecification {

	if v, ok := TunnelProxyAuthAttributesMap[name]; ok {
		return v
	}

	// We could not find it, so let's check on the lower case indexed spec map
	return TunnelProxyAuthLowerCaseAttributesMap[name]
}

// AttributeSpecifications returns the full attribute specifications map.
func (*TunnelProxyAuth) AttributeSpecifications() map[string]elemental.AttributeSpecification {

	return TunnelProxyAuthAttributesMap
}

// ValueForAttribute returns the value for the given attribute.
// This is a very advanced function that you should not need but in some
// very specific use cases.
func (o *TunnelProxyAuth) ValueForAttribute(name string) any {

	switch name {
	case "basic":
		return o.Basic
	}

	return nil
}

// TunnelProxyAuthAttributesMap represents the map of attribute for TunnelProxyAuth.
var TunnelProxyAuthAttributesMap = map[string]elemental.AttributeSpecification{
	"Basic": {
		AllowedChoices: []string{},
		BSONFieldName:  "basic",
		ConvertedName:  "Basic",
		Description: `If set, the proxy will use basic authentication with the provided username and
password.`,
		Exposed: true,
		Name:    "basic",
		Stored:  true,
		SubType: "tunnelproxyauthbasic",
		Type:    "ref",
	},
}

// TunnelProxyAuthLowerCaseAttributesMap represents the map of attribute for TunnelProxyAuth.
var TunnelProxyAuthLowerCaseAttributesMap = map[string]elemental.AttributeSpecification{
	"basic": {
		AllowedChoices: []string{},
		BSONFieldName:  "basic",
		ConvertedName:  "Basic",
		Description: `If set, the proxy will use basic authentication with the provided username and
password.`,
		Exposed: true,
		Name:    "basic",
		Stored:  true,
		SubType: "tunnelproxyauthbasic",
		Type:    "ref",
	},
}

type mongoAttributesTunnelProxyAuth struct {
	Basic *TunnelProxyAuthBasic `bson:"basic"`
}
