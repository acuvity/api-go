// Code generated by elegen. DO NOT EDIT.
// Source: go.acuvity.ai/elemental (templates/model.gotpl)

package api

import (
	"fmt"
	"slices"

	"github.com/globalsign/mgo/bson"
	"github.com/mitchellh/copystructure"
	"go.acuvity.ai/elemental"
)

// TraceIdentity represents the Identity of the object.
var TraceIdentity = elemental.Identity{
	Name:     "trace",
	Category: "traces",
	Package:  "snitch",
	Private:  false,
}

// TracesList represents a list of Traces
type TracesList []*Trace

// Identity returns the identity of the objects in the list.
func (o TracesList) Identity() elemental.Identity {

	return TraceIdentity
}

// Copy returns a pointer to a copy the TracesList.
func (o TracesList) Copy() elemental.Identifiables {

	out := slices.Clone(o)
	return &out
}

// Append appends the objects to the a new copy of the TracesList.
func (o TracesList) Append(objects ...elemental.Identifiable) elemental.Identifiables {

	out := slices.Clone(o)
	for _, obj := range objects {
		out = append(out, obj.(*Trace))
	}

	return out
}

// List converts the object to an elemental.IdentifiablesList.
func (o TracesList) List() elemental.IdentifiablesList {

	out := make(elemental.IdentifiablesList, len(o))
	for i := range len(o) {
		out[i] = o[i]
	}

	return out
}

// DefaultOrder returns the default ordering fields of the content.
func (o TracesList) DefaultOrder() []string {

	return []string{}
}

// ToSparse returns the TracesList converted to SparseTracesList.
// Objects in the list will only contain the given fields. No field means entire field set.
func (o TracesList) ToSparse(fields ...string) elemental.Identifiables {

	out := make(SparseTracesList, len(o))
	for i := range len(o) {
		out[i] = o[i].ToSparse(fields...).(*SparseTrace)
	}

	return out
}

// Version returns the version of the content.
func (o TracesList) Version() int {

	return 1
}

// Trace represents the model of a trace
type Trace struct {
	// ID is the identifier of the object.
	ID string `json:"ID,omitempty" msgpack:"ID,omitempty" bson:"-" mapstructure:"ID,omitempty"`

	// The end of the time window in any format supported by
	// https://github.com/araddon/dateparse.
	End string `json:"end,omitempty" msgpack:"end,omitempty" bson:"-" mapstructure:"end,omitempty"`

	// The relative end of the time window as time.Duration.
	EndRelative string `json:"endRelative,omitempty" msgpack:"endRelative,omitempty" bson:"-" mapstructure:"endRelative,omitempty"`

	// The namespace of the object.
	Namespace string `json:"namespace,omitempty" msgpack:"namespace,omitempty" bson:"namespace,omitempty" mapstructure:"namespace,omitempty"`

	// The result of the request.
	Result map[string]any `json:"result" msgpack:"result" bson:"-" mapstructure:"result,omitempty"`

	// The start of the time window in any format supported by
	// https://github.com/araddon/dateparse.
	Start string `json:"start,omitempty" msgpack:"start,omitempty" bson:"-" mapstructure:"start,omitempty"`

	// The relative start of the time window as time.Duration.
	StartRelative string `json:"startRelative,omitempty" msgpack:"startRelative,omitempty" bson:"-" mapstructure:"startRelative,omitempty"`

	// The trace ID to query.
	TraceID string `json:"traceID" msgpack:"traceID" bson:"-" mapstructure:"traceID,omitempty"`

	ModelVersion int `json:"-" msgpack:"-" bson:"_modelversion"`
}

// NewTrace returns a new *Trace
func NewTrace() *Trace {

	return &Trace{
		ModelVersion: 1,
		Result:       map[string]any{},
	}
}

// Identity returns the Identity of the object.
func (o *Trace) Identity() elemental.Identity {

	return TraceIdentity
}

// Identifier returns the value of the object's unique identifier.
func (o *Trace) Identifier() string {

	return o.ID
}

// SetIdentifier sets the value of the object's unique identifier.
func (o *Trace) SetIdentifier(id string) {

	o.ID = id
}

// GetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *Trace) GetBSON() (any, error) {

	if o == nil {
		return nil, nil
	}

	s := &mongoAttributesTrace{}

	if o.ID != "" {
		s.ID = bson.ObjectIdHex(o.ID)
	}
	s.Namespace = o.Namespace

	return s, nil
}

// SetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *Trace) SetBSON(raw bson.Raw) error {

	if o == nil {
		return nil
	}

	s := &mongoAttributesTrace{}
	if err := raw.Unmarshal(s); err != nil {
		return err
	}

	o.ID = s.ID.Hex()
	o.Namespace = s.Namespace

	return nil
}

// Version returns the hardcoded version of the model.
func (o *Trace) Version() int {

	return 1
}

// BleveType implements the bleve.Classifier Interface.
func (o *Trace) BleveType() string {

	return "trace"
}

// DefaultOrder returns the list of default ordering fields.
func (o *Trace) DefaultOrder() []string {

	return []string{}
}

// Doc returns the documentation for the object
func (o *Trace) Doc() string {

	return `This is a OTEL Trace.`
}

func (o *Trace) String() string {

	return fmt.Sprintf("<%s:%s>", o.Identity().Name, o.Identifier())
}

// GetEnd returns the End of the receiver.
func (o *Trace) GetEnd() string {

	return o.End
}

// SetEnd sets the property End of the receiver using the given value.
func (o *Trace) SetEnd(end string) {

	o.End = end
}

// GetEndRelative returns the EndRelative of the receiver.
func (o *Trace) GetEndRelative() string {

	return o.EndRelative
}

// GetNamespace returns the Namespace of the receiver.
func (o *Trace) GetNamespace() string {

	return o.Namespace
}

// SetNamespace sets the property Namespace of the receiver using the given value.
func (o *Trace) SetNamespace(namespace string) {

	o.Namespace = namespace
}

// GetStart returns the Start of the receiver.
func (o *Trace) GetStart() string {

	return o.Start
}

// SetStart sets the property Start of the receiver using the given value.
func (o *Trace) SetStart(start string) {

	o.Start = start
}

// GetStartRelative returns the StartRelative of the receiver.
func (o *Trace) GetStartRelative() string {

	return o.StartRelative
}

// ToSparse returns the sparse version of the model.
// The returned object will only contain the given fields. No field means entire field set.
func (o *Trace) ToSparse(fields ...string) elemental.SparseIdentifiable {

	if len(fields) == 0 {
		// nolint: goimports
		return &SparseTrace{
			ID:            &o.ID,
			End:           &o.End,
			EndRelative:   &o.EndRelative,
			Namespace:     &o.Namespace,
			Result:        &o.Result,
			Start:         &o.Start,
			StartRelative: &o.StartRelative,
			TraceID:       &o.TraceID,
		}
	}

	sp := &SparseTrace{}
	for _, f := range fields {
		switch f {
		case "ID":
			sp.ID = &(o.ID)
		case "end":
			sp.End = &(o.End)
		case "endRelative":
			sp.EndRelative = &(o.EndRelative)
		case "namespace":
			sp.Namespace = &(o.Namespace)
		case "result":
			sp.Result = &(o.Result)
		case "start":
			sp.Start = &(o.Start)
		case "startRelative":
			sp.StartRelative = &(o.StartRelative)
		case "traceID":
			sp.TraceID = &(o.TraceID)
		}
	}

	return sp
}

// Patch apply the non nil value of a *SparseTrace to the object.
func (o *Trace) Patch(sparse elemental.SparseIdentifiable) {
	if !sparse.Identity().IsEqual(o.Identity()) {
		panic("cannot patch from a parse with different identity")
	}

	so := sparse.(*SparseTrace)
	if so.ID != nil {
		o.ID = *so.ID
	}
	if so.End != nil {
		o.End = *so.End
	}
	if so.EndRelative != nil {
		o.EndRelative = *so.EndRelative
	}
	if so.Namespace != nil {
		o.Namespace = *so.Namespace
	}
	if so.Result != nil {
		o.Result = *so.Result
	}
	if so.Start != nil {
		o.Start = *so.Start
	}
	if so.StartRelative != nil {
		o.StartRelative = *so.StartRelative
	}
	if so.TraceID != nil {
		o.TraceID = *so.TraceID
	}
}

// DeepCopy returns a deep copy if the Trace.
func (o *Trace) DeepCopy() *Trace {

	if o == nil {
		return nil
	}

	out := &Trace{}
	o.DeepCopyInto(out)

	return out
}

// DeepCopyInto copies the receiver into the given *Trace.
func (o *Trace) DeepCopyInto(out *Trace) {

	target, err := copystructure.Copy(o)
	if err != nil {
		panic(fmt.Sprintf("Unable to deepcopy Trace: %s", err))
	}

	*out = *target.(*Trace)
}

// Validate valides the current information stored into the structure.
func (o *Trace) Validate() error {

	errors := elemental.Errors{}
	requiredErrors := elemental.Errors{}

	if err := ValidateDuration("endRelative", o.EndRelative); err != nil {
		errors = errors.Append(err)
	}

	if err := ValidateDuration("startRelative", o.StartRelative); err != nil {
		errors = errors.Append(err)
	}

	if err := elemental.ValidateRequiredString("traceID", o.TraceID); err != nil {
		requiredErrors = requiredErrors.Append(err)
	}

	if len(requiredErrors) > 0 {
		return requiredErrors
	}

	if len(errors) > 0 {
		return errors
	}

	return nil
}

// SpecificationForAttribute returns the AttributeSpecification for the given attribute name key.
func (*Trace) SpecificationForAttribute(name string) elemental.AttributeSpecification {

	if v, ok := TraceAttributesMap[name]; ok {
		return v
	}

	// We could not find it, so let's check on the lower case indexed spec map
	return TraceLowerCaseAttributesMap[name]
}

// AttributeSpecifications returns the full attribute specifications map.
func (*Trace) AttributeSpecifications() map[string]elemental.AttributeSpecification {

	return TraceAttributesMap
}

// ValueForAttribute returns the value for the given attribute.
// This is a very advanced function that you should not need but in some
// very specific use cases.
func (o *Trace) ValueForAttribute(name string) any {

	switch name {
	case "ID":
		return o.ID
	case "end":
		return o.End
	case "endRelative":
		return o.EndRelative
	case "namespace":
		return o.Namespace
	case "result":
		return o.Result
	case "start":
		return o.Start
	case "startRelative":
		return o.StartRelative
	case "traceID":
		return o.TraceID
	}

	return nil
}

// TraceAttributesMap represents the map of attribute for Trace.
var TraceAttributesMap = map[string]elemental.AttributeSpecification{
	"ID": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "_id",
		ConvertedName:  "ID",
		Description:    `ID is the identifier of the object.`,
		Exposed:        true,
		Filterable:     true,
		Identifier:     true,
		Name:           "ID",
		Orderable:      true,
		ReadOnly:       true,
		Stored:         true,
		Type:           "string",
	},
	"End": {
		AllowedChoices: []string{},
		ConvertedName:  "End",
		Description: `The end of the time window in any format supported by
https://github.com/araddon/dateparse.`,
		Exposed: true,
		Getter:  true,
		Name:    "end",
		Setter:  true,
		Type:    "string",
	},
	"EndRelative": {
		AllowedChoices: []string{},
		ConvertedName:  "EndRelative",
		Description:    `The relative end of the time window as time.Duration.`,
		Exposed:        true,
		Getter:         true,
		Name:           "endRelative",
		Type:           "string",
	},
	"Namespace": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "namespace",
		ConvertedName:  "Namespace",
		Description:    `The namespace of the object.`,
		Exposed:        true,
		Getter:         true,
		Name:           "namespace",
		Orderable:      true,
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Type:           "string",
	},
	"Result": {
		AllowedChoices: []string{},
		ConvertedName:  "Result",
		Description:    `The result of the request.`,
		Exposed:        true,
		Name:           "result",
		SubType:        "map[string]any",
		Type:           "external",
	},
	"Start": {
		AllowedChoices: []string{},
		ConvertedName:  "Start",
		Description: `The start of the time window in any format supported by
https://github.com/araddon/dateparse.`,
		Exposed: true,
		Getter:  true,
		Name:    "start",
		Setter:  true,
		Type:    "string",
	},
	"StartRelative": {
		AllowedChoices: []string{},
		ConvertedName:  "StartRelative",
		Description:    `The relative start of the time window as time.Duration.`,
		Exposed:        true,
		Getter:         true,
		Name:           "startRelative",
		Type:           "string",
	},
	"TraceID": {
		AllowedChoices: []string{},
		ConvertedName:  "TraceID",
		Description:    `The trace ID to query.`,
		Exposed:        true,
		Name:           "traceID",
		Required:       true,
		Type:           "string",
	},
}

// TraceLowerCaseAttributesMap represents the map of attribute for Trace.
var TraceLowerCaseAttributesMap = map[string]elemental.AttributeSpecification{
	"id": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "_id",
		ConvertedName:  "ID",
		Description:    `ID is the identifier of the object.`,
		Exposed:        true,
		Filterable:     true,
		Identifier:     true,
		Name:           "ID",
		Orderable:      true,
		ReadOnly:       true,
		Stored:         true,
		Type:           "string",
	},
	"end": {
		AllowedChoices: []string{},
		ConvertedName:  "End",
		Description: `The end of the time window in any format supported by
https://github.com/araddon/dateparse.`,
		Exposed: true,
		Getter:  true,
		Name:    "end",
		Setter:  true,
		Type:    "string",
	},
	"endrelative": {
		AllowedChoices: []string{},
		ConvertedName:  "EndRelative",
		Description:    `The relative end of the time window as time.Duration.`,
		Exposed:        true,
		Getter:         true,
		Name:           "endRelative",
		Type:           "string",
	},
	"namespace": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "namespace",
		ConvertedName:  "Namespace",
		Description:    `The namespace of the object.`,
		Exposed:        true,
		Getter:         true,
		Name:           "namespace",
		Orderable:      true,
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Type:           "string",
	},
	"result": {
		AllowedChoices: []string{},
		ConvertedName:  "Result",
		Description:    `The result of the request.`,
		Exposed:        true,
		Name:           "result",
		SubType:        "map[string]any",
		Type:           "external",
	},
	"start": {
		AllowedChoices: []string{},
		ConvertedName:  "Start",
		Description: `The start of the time window in any format supported by
https://github.com/araddon/dateparse.`,
		Exposed: true,
		Getter:  true,
		Name:    "start",
		Setter:  true,
		Type:    "string",
	},
	"startrelative": {
		AllowedChoices: []string{},
		ConvertedName:  "StartRelative",
		Description:    `The relative start of the time window as time.Duration.`,
		Exposed:        true,
		Getter:         true,
		Name:           "startRelative",
		Type:           "string",
	},
	"traceid": {
		AllowedChoices: []string{},
		ConvertedName:  "TraceID",
		Description:    `The trace ID to query.`,
		Exposed:        true,
		Name:           "traceID",
		Required:       true,
		Type:           "string",
	},
}

// SparseTracesList represents a list of SparseTraces
type SparseTracesList []*SparseTrace

// Identity returns the identity of the objects in the list.
func (o SparseTracesList) Identity() elemental.Identity {

	return TraceIdentity
}

// Copy returns a pointer to a copy the SparseTracesList.
func (o SparseTracesList) Copy() elemental.Identifiables {

	copy := slices.Clone(o)
	return &copy
}

// Append appends the objects to the a new copy of the SparseTracesList.
func (o SparseTracesList) Append(objects ...elemental.Identifiable) elemental.Identifiables {

	out := slices.Clone(o)
	for _, obj := range objects {
		out = append(out, obj.(*SparseTrace))
	}

	return out
}

// List converts the object to an elemental.IdentifiablesList.
func (o SparseTracesList) List() elemental.IdentifiablesList {

	out := make(elemental.IdentifiablesList, len(o))
	for i := range len(o) {
		out[i] = o[i]
	}

	return out
}

// DefaultOrder returns the default ordering fields of the content.
func (o SparseTracesList) DefaultOrder() []string {

	return []string{}
}

// ToPlain returns the SparseTracesList converted to TracesList.
func (o SparseTracesList) ToPlain() elemental.IdentifiablesList {

	out := make(elemental.IdentifiablesList, len(o))
	for i := range len(o) {
		out[i] = o[i].ToPlain()
	}

	return out
}

// Version returns the version of the content.
func (o SparseTracesList) Version() int {

	return 1
}

// SparseTrace represents the sparse version of a trace.
type SparseTrace struct {
	// ID is the identifier of the object.
	ID *string `json:"ID,omitempty" msgpack:"ID,omitempty" bson:"-" mapstructure:"ID,omitempty"`

	// The end of the time window in any format supported by
	// https://github.com/araddon/dateparse.
	End *string `json:"end,omitempty" msgpack:"end,omitempty" bson:"-" mapstructure:"end,omitempty"`

	// The relative end of the time window as time.Duration.
	EndRelative *string `json:"endRelative,omitempty" msgpack:"endRelative,omitempty" bson:"-" mapstructure:"endRelative,omitempty"`

	// The namespace of the object.
	Namespace *string `json:"namespace,omitempty" msgpack:"namespace,omitempty" bson:"namespace,omitempty" mapstructure:"namespace,omitempty"`

	// The result of the request.
	Result *map[string]any `json:"result,omitempty" msgpack:"result,omitempty" bson:"-" mapstructure:"result,omitempty"`

	// The start of the time window in any format supported by
	// https://github.com/araddon/dateparse.
	Start *string `json:"start,omitempty" msgpack:"start,omitempty" bson:"-" mapstructure:"start,omitempty"`

	// The relative start of the time window as time.Duration.
	StartRelative *string `json:"startRelative,omitempty" msgpack:"startRelative,omitempty" bson:"-" mapstructure:"startRelative,omitempty"`

	// The trace ID to query.
	TraceID *string `json:"traceID,omitempty" msgpack:"traceID,omitempty" bson:"-" mapstructure:"traceID,omitempty"`

	ModelVersion int `json:"-" msgpack:"-" bson:"_modelversion"`
}

// NewSparseTrace returns a new  SparseTrace.
func NewSparseTrace() *SparseTrace {
	return &SparseTrace{}
}

// Identity returns the Identity of the sparse object.
func (o *SparseTrace) Identity() elemental.Identity {

	return TraceIdentity
}

// Identifier returns the value of the sparse object's unique identifier.
func (o *SparseTrace) Identifier() string {

	if o.ID == nil {
		return ""
	}
	return *o.ID
}

// SetIdentifier sets the value of the sparse object's unique identifier.
func (o *SparseTrace) SetIdentifier(id string) {

	if id != "" {
		o.ID = &id
	} else {
		o.ID = nil
	}
}

// GetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *SparseTrace) GetBSON() (any, error) {

	if o == nil {
		return nil, nil
	}

	s := &mongoAttributesSparseTrace{}

	if o.ID != nil {
		s.ID = bson.ObjectIdHex(*o.ID)
	}
	if o.Namespace != nil {
		s.Namespace = o.Namespace
	}

	return s, nil
}

// SetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *SparseTrace) SetBSON(raw bson.Raw) error {

	if o == nil {
		return nil
	}

	s := &mongoAttributesSparseTrace{}
	if err := raw.Unmarshal(s); err != nil {
		return err
	}

	id := s.ID.Hex()
	o.ID = &id
	if s.Namespace != nil {
		o.Namespace = s.Namespace
	}

	return nil
}

// Version returns the hardcoded version of the model.
func (o *SparseTrace) Version() int {

	return 1
}

// ToPlain returns the plain version of the sparse model.
func (o *SparseTrace) ToPlain() elemental.PlainIdentifiable {

	out := NewTrace()
	if o.ID != nil {
		out.ID = *o.ID
	}
	if o.End != nil {
		out.End = *o.End
	}
	if o.EndRelative != nil {
		out.EndRelative = *o.EndRelative
	}
	if o.Namespace != nil {
		out.Namespace = *o.Namespace
	}
	if o.Result != nil {
		out.Result = *o.Result
	}
	if o.Start != nil {
		out.Start = *o.Start
	}
	if o.StartRelative != nil {
		out.StartRelative = *o.StartRelative
	}
	if o.TraceID != nil {
		out.TraceID = *o.TraceID
	}

	return out
}

// GetEnd returns the End of the receiver.
func (o *SparseTrace) GetEnd() (out string) {

	if o.End == nil {
		return
	}

	return *o.End
}

// SetEnd sets the property End of the receiver using the address of the given value.
func (o *SparseTrace) SetEnd(end string) {

	o.End = &end
}

// GetEndRelative returns the EndRelative of the receiver.
func (o *SparseTrace) GetEndRelative() (out string) {

	if o.EndRelative == nil {
		return
	}

	return *o.EndRelative
}

// GetNamespace returns the Namespace of the receiver.
func (o *SparseTrace) GetNamespace() (out string) {

	if o.Namespace == nil {
		return
	}

	return *o.Namespace
}

// SetNamespace sets the property Namespace of the receiver using the address of the given value.
func (o *SparseTrace) SetNamespace(namespace string) {

	o.Namespace = &namespace
}

// GetStart returns the Start of the receiver.
func (o *SparseTrace) GetStart() (out string) {

	if o.Start == nil {
		return
	}

	return *o.Start
}

// SetStart sets the property Start of the receiver using the address of the given value.
func (o *SparseTrace) SetStart(start string) {

	o.Start = &start
}

// GetStartRelative returns the StartRelative of the receiver.
func (o *SparseTrace) GetStartRelative() (out string) {

	if o.StartRelative == nil {
		return
	}

	return *o.StartRelative
}

// DeepCopy returns a deep copy if the SparseTrace.
func (o *SparseTrace) DeepCopy() *SparseTrace {

	if o == nil {
		return nil
	}

	out := &SparseTrace{}
	o.DeepCopyInto(out)

	return out
}

// DeepCopyInto copies the receiver into the given *SparseTrace.
func (o *SparseTrace) DeepCopyInto(out *SparseTrace) {

	target, err := copystructure.Copy(o)
	if err != nil {
		panic(fmt.Sprintf("Unable to deepcopy SparseTrace: %s", err))
	}

	*out = *target.(*SparseTrace)
}

type mongoAttributesTrace struct {
	ID        bson.ObjectId `bson:"_id,omitempty"`
	Namespace string        `bson:"namespace,omitempty"`
}
type mongoAttributesSparseTrace struct {
	ID        bson.ObjectId `bson:"_id,omitempty"`
	Namespace *string       `bson:"namespace,omitempty"`
}
