// Code generated by elegen. DO NOT EDIT.
// Source: go.acuvity.ai/elemental (templates/model.gotpl)

package api

import (
	"fmt"
	"slices"
	"time"

	"github.com/globalsign/mgo/bson"
	"github.com/mitchellh/copystructure"
	"go.acuvity.ai/elemental"
)

// SchemaVersionIdentity represents the Identity of the object.
var SchemaVersionIdentity = elemental.Identity{
	Name:     "schemaversion",
	Category: "schemaversions",
	Package:  "zerolift",
	Private:  false,
}

// SchemaVersionsList represents a list of SchemaVersions
type SchemaVersionsList []*SchemaVersion

// Identity returns the identity of the objects in the list.
func (o SchemaVersionsList) Identity() elemental.Identity {

	return SchemaVersionIdentity
}

// Copy returns a pointer to a copy the SchemaVersionsList.
func (o SchemaVersionsList) Copy() elemental.Identifiables {

	out := slices.Clone(o)
	return &out
}

// Append appends the objects to the a new copy of the SchemaVersionsList.
func (o SchemaVersionsList) Append(objects ...elemental.Identifiable) elemental.Identifiables {

	out := slices.Clone(o)
	for _, obj := range objects {
		out = append(out, obj.(*SchemaVersion))
	}

	return out
}

// List converts the object to an elemental.IdentifiablesList.
func (o SchemaVersionsList) List() elemental.IdentifiablesList {

	out := make(elemental.IdentifiablesList, len(o))
	for i := range len(o) {
		out[i] = o[i]
	}

	return out
}

// DefaultOrder returns the default ordering fields of the content.
func (o SchemaVersionsList) DefaultOrder() []string {

	return []string{}
}

// ToSparse returns the SchemaVersionsList converted to SparseSchemaVersionsList.
// Objects in the list will only contain the given fields. No field means entire field set.
func (o SchemaVersionsList) ToSparse(fields ...string) elemental.Identifiables {

	out := make(SparseSchemaVersionsList, len(o))
	for i := range len(o) {
		out[i] = o[i].ToSparse(fields...).(*SparseSchemaVersion)
	}

	return out
}

// Version returns the version of the content.
func (o SchemaVersionsList) Version() int {

	return 1
}

// SchemaVersion represents the model of a schemaversion
type SchemaVersion struct {
	// The current version of the schema.
	CurrentVersion float64 `json:"-" msgpack:"-" bson:"currentversion" mapstructure:"-,omitempty"`

	// The service the schema is applied to.
	Service string `json:"-" msgpack:"-" bson:"service" mapstructure:"-,omitempty"`

	// When the schema was upserted.
	Timestamp time.Time `json:"-" msgpack:"-" bson:"timestamp" mapstructure:"-,omitempty"`

	ModelVersion int `json:"-" msgpack:"-" bson:"_modelversion"`
}

// NewSchemaVersion returns a new *SchemaVersion
func NewSchemaVersion() *SchemaVersion {

	return &SchemaVersion{
		ModelVersion: 1,
	}
}

// Identity returns the Identity of the object.
func (o *SchemaVersion) Identity() elemental.Identity {

	return SchemaVersionIdentity
}

// Identifier returns the value of the object's unique identifier.
func (o *SchemaVersion) Identifier() string {

	return ""
}

// SetIdentifier sets the value of the object's unique identifier.
func (o *SchemaVersion) SetIdentifier(id string) {

}

// GetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *SchemaVersion) GetBSON() (any, error) {

	if o == nil {
		return nil, nil
	}

	s := &mongoAttributesSchemaVersion{}

	s.CurrentVersion = o.CurrentVersion
	s.Service = o.Service
	s.Timestamp = o.Timestamp

	return s, nil
}

// SetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *SchemaVersion) SetBSON(raw bson.Raw) error {

	if o == nil {
		return nil
	}

	s := &mongoAttributesSchemaVersion{}
	if err := raw.Unmarshal(s); err != nil {
		return err
	}

	o.CurrentVersion = s.CurrentVersion
	o.Service = s.Service
	o.Timestamp = s.Timestamp

	return nil
}

// Version returns the hardcoded version of the model.
func (o *SchemaVersion) Version() int {

	return 1
}

// BleveType implements the bleve.Classifier Interface.
func (o *SchemaVersion) BleveType() string {

	return "schemaversion"
}

// DefaultOrder returns the list of default ordering fields.
func (o *SchemaVersion) DefaultOrder() []string {

	return []string{}
}

// Doc returns the documentation for the object
func (o *SchemaVersion) Doc() string {

	return `This holds the schema version of a service.`
}

func (o *SchemaVersion) String() string {

	return fmt.Sprintf("<%s:%s>", o.Identity().Name, o.Identifier())
}

// ToSparse returns the sparse version of the model.
// The returned object will only contain the given fields. No field means entire field set.
func (o *SchemaVersion) ToSparse(fields ...string) elemental.SparseIdentifiable {

	if len(fields) == 0 {
		// nolint: goimports
		return &SparseSchemaVersion{
			CurrentVersion: &o.CurrentVersion,
			Service:        &o.Service,
			Timestamp:      &o.Timestamp,
		}
	}

	sp := &SparseSchemaVersion{}
	for _, f := range fields {
		switch f {
		case "currentVersion":
			sp.CurrentVersion = &(o.CurrentVersion)
		case "service":
			sp.Service = &(o.Service)
		case "timestamp":
			sp.Timestamp = &(o.Timestamp)
		}
	}

	return sp
}

// Patch apply the non nil value of a *SparseSchemaVersion to the object.
func (o *SchemaVersion) Patch(sparse elemental.SparseIdentifiable) {
	if !sparse.Identity().IsEqual(o.Identity()) {
		panic("cannot patch from a parse with different identity")
	}

	so := sparse.(*SparseSchemaVersion)
	if so.CurrentVersion != nil {
		o.CurrentVersion = *so.CurrentVersion
	}
	if so.Service != nil {
		o.Service = *so.Service
	}
	if so.Timestamp != nil {
		o.Timestamp = *so.Timestamp
	}
}

// DeepCopy returns a deep copy if the SchemaVersion.
func (o *SchemaVersion) DeepCopy() *SchemaVersion {

	if o == nil {
		return nil
	}

	out := &SchemaVersion{}
	o.DeepCopyInto(out)

	return out
}

// DeepCopyInto copies the receiver into the given *SchemaVersion.
func (o *SchemaVersion) DeepCopyInto(out *SchemaVersion) {

	target, err := copystructure.Copy(o)
	if err != nil {
		panic(fmt.Sprintf("Unable to deepcopy SchemaVersion: %s", err))
	}

	*out = *target.(*SchemaVersion)
}

// Validate valides the current information stored into the structure.
func (o *SchemaVersion) Validate() error {

	errors := elemental.Errors{}
	requiredErrors := elemental.Errors{}

	if len(requiredErrors) > 0 {
		return requiredErrors
	}

	if len(errors) > 0 {
		return errors
	}

	return nil
}

// SpecificationForAttribute returns the AttributeSpecification for the given attribute name key.
func (*SchemaVersion) SpecificationForAttribute(name string) elemental.AttributeSpecification {

	if v, ok := SchemaVersionAttributesMap[name]; ok {
		return v
	}

	// We could not find it, so let's check on the lower case indexed spec map
	return SchemaVersionLowerCaseAttributesMap[name]
}

// AttributeSpecifications returns the full attribute specifications map.
func (*SchemaVersion) AttributeSpecifications() map[string]elemental.AttributeSpecification {

	return SchemaVersionAttributesMap
}

// ValueForAttribute returns the value for the given attribute.
// This is a very advanced function that you should not need but in some
// very specific use cases.
func (o *SchemaVersion) ValueForAttribute(name string) any {

	switch name {
	case "currentVersion":
		return o.CurrentVersion
	case "service":
		return o.Service
	case "timestamp":
		return o.Timestamp
	}

	return nil
}

// SchemaVersionAttributesMap represents the map of attribute for SchemaVersion.
var SchemaVersionAttributesMap = map[string]elemental.AttributeSpecification{}

// SchemaVersionLowerCaseAttributesMap represents the map of attribute for SchemaVersion.
var SchemaVersionLowerCaseAttributesMap = map[string]elemental.AttributeSpecification{}

// SparseSchemaVersionsList represents a list of SparseSchemaVersions
type SparseSchemaVersionsList []*SparseSchemaVersion

// Identity returns the identity of the objects in the list.
func (o SparseSchemaVersionsList) Identity() elemental.Identity {

	return SchemaVersionIdentity
}

// Copy returns a pointer to a copy the SparseSchemaVersionsList.
func (o SparseSchemaVersionsList) Copy() elemental.Identifiables {

	copy := slices.Clone(o)
	return &copy
}

// Append appends the objects to the a new copy of the SparseSchemaVersionsList.
func (o SparseSchemaVersionsList) Append(objects ...elemental.Identifiable) elemental.Identifiables {

	out := slices.Clone(o)
	for _, obj := range objects {
		out = append(out, obj.(*SparseSchemaVersion))
	}

	return out
}

// List converts the object to an elemental.IdentifiablesList.
func (o SparseSchemaVersionsList) List() elemental.IdentifiablesList {

	out := make(elemental.IdentifiablesList, len(o))
	for i := range len(o) {
		out[i] = o[i]
	}

	return out
}

// DefaultOrder returns the default ordering fields of the content.
func (o SparseSchemaVersionsList) DefaultOrder() []string {

	return []string{}
}

// ToPlain returns the SparseSchemaVersionsList converted to SchemaVersionsList.
func (o SparseSchemaVersionsList) ToPlain() elemental.IdentifiablesList {

	out := make(elemental.IdentifiablesList, len(o))
	for i := range len(o) {
		out[i] = o[i].ToPlain()
	}

	return out
}

// Version returns the version of the content.
func (o SparseSchemaVersionsList) Version() int {

	return 1
}

// SparseSchemaVersion represents the sparse version of a schemaversion.
type SparseSchemaVersion struct {
	// The current version of the schema.
	CurrentVersion *float64 `json:"-" msgpack:"-" bson:"currentversion,omitempty" mapstructure:"-,omitempty"`

	// The service the schema is applied to.
	Service *string `json:"-" msgpack:"-" bson:"service,omitempty" mapstructure:"-,omitempty"`

	// When the schema was upserted.
	Timestamp *time.Time `json:"-" msgpack:"-" bson:"timestamp,omitempty" mapstructure:"-,omitempty"`

	ModelVersion int `json:"-" msgpack:"-" bson:"_modelversion"`
}

// NewSparseSchemaVersion returns a new  SparseSchemaVersion.
func NewSparseSchemaVersion() *SparseSchemaVersion {
	return &SparseSchemaVersion{}
}

// Identity returns the Identity of the sparse object.
func (o *SparseSchemaVersion) Identity() elemental.Identity {

	return SchemaVersionIdentity
}

// Identifier returns the value of the sparse object's unique identifier.
func (o *SparseSchemaVersion) Identifier() string {

	return ""
}

// SetIdentifier sets the value of the sparse object's unique identifier.
func (o *SparseSchemaVersion) SetIdentifier(id string) {

}

// GetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *SparseSchemaVersion) GetBSON() (any, error) {

	if o == nil {
		return nil, nil
	}

	s := &mongoAttributesSparseSchemaVersion{}

	if o.CurrentVersion != nil {
		s.CurrentVersion = o.CurrentVersion
	}
	if o.Service != nil {
		s.Service = o.Service
	}
	if o.Timestamp != nil {
		s.Timestamp = o.Timestamp
	}

	return s, nil
}

// SetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *SparseSchemaVersion) SetBSON(raw bson.Raw) error {

	if o == nil {
		return nil
	}

	s := &mongoAttributesSparseSchemaVersion{}
	if err := raw.Unmarshal(s); err != nil {
		return err
	}

	if s.CurrentVersion != nil {
		o.CurrentVersion = s.CurrentVersion
	}
	if s.Service != nil {
		o.Service = s.Service
	}
	if s.Timestamp != nil {
		o.Timestamp = s.Timestamp
	}

	return nil
}

// Version returns the hardcoded version of the model.
func (o *SparseSchemaVersion) Version() int {

	return 1
}

// ToPlain returns the plain version of the sparse model.
func (o *SparseSchemaVersion) ToPlain() elemental.PlainIdentifiable {

	out := NewSchemaVersion()
	if o.CurrentVersion != nil {
		out.CurrentVersion = *o.CurrentVersion
	}
	if o.Service != nil {
		out.Service = *o.Service
	}
	if o.Timestamp != nil {
		out.Timestamp = *o.Timestamp
	}

	return out
}

// DeepCopy returns a deep copy if the SparseSchemaVersion.
func (o *SparseSchemaVersion) DeepCopy() *SparseSchemaVersion {

	if o == nil {
		return nil
	}

	out := &SparseSchemaVersion{}
	o.DeepCopyInto(out)

	return out
}

// DeepCopyInto copies the receiver into the given *SparseSchemaVersion.
func (o *SparseSchemaVersion) DeepCopyInto(out *SparseSchemaVersion) {

	target, err := copystructure.Copy(o)
	if err != nil {
		panic(fmt.Sprintf("Unable to deepcopy SparseSchemaVersion: %s", err))
	}

	*out = *target.(*SparseSchemaVersion)
}

type mongoAttributesSchemaVersion struct {
	CurrentVersion float64   `bson:"currentversion"`
	Service        string    `bson:"service"`
	Timestamp      time.Time `bson:"timestamp"`
}
type mongoAttributesSparseSchemaVersion struct {
	CurrentVersion *float64   `bson:"currentversion,omitempty"`
	Service        *string    `bson:"service,omitempty"`
	Timestamp      *time.Time `bson:"timestamp,omitempty"`
}
