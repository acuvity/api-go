// Code generated by elegen. DO NOT EDIT.
// Source: go.acuvity.ai/elemental (templates/model.gotpl)

package api

import (
	"fmt"

	"github.com/globalsign/mgo/bson"
	"github.com/mitchellh/copystructure"
	"go.acuvity.ai/elemental"
)

// InjectorMethodValue represents the possible values for attribute "method".
type InjectorMethodValue string

const (
	// InjectorMethodDelete represents the value Delete.
	InjectorMethodDelete InjectorMethodValue = "Delete"

	// InjectorMethodGet represents the value Get.
	InjectorMethodGet InjectorMethodValue = "Get"

	// InjectorMethodHead represents the value Head.
	InjectorMethodHead InjectorMethodValue = "Head"

	// InjectorMethodOptions represents the value Options.
	InjectorMethodOptions InjectorMethodValue = "Options"

	// InjectorMethodPatch represents the value Patch.
	InjectorMethodPatch InjectorMethodValue = "Patch"

	// InjectorMethodPost represents the value Post.
	InjectorMethodPost InjectorMethodValue = "Post"

	// InjectorMethodPut represents the value Put.
	InjectorMethodPut InjectorMethodValue = "Put"
)

// Injector represents the model of a injector
type Injector struct {
	// Since JS world is the mess we all know, there are some cases when we must delay
	// the monkey patching of the XHR request.
	DelayXHRPatching bool `json:"delayXHRPatching,omitempty" msgpack:"delayXHRPatching,omitempty" bson:"delayxhrpatching,omitempty" mapstructure:"delayXHRPatching,omitempty"`

	// Optional hosts to match. This is useful in case the provider has multiple hosts
	// to discriminate which logger to use.
	Hosts []string `json:"hosts,omitempty" msgpack:"hosts,omitempty" bson:"hosts,omitempty" mapstructure:"hosts,omitempty"`

	// The method to match.
	Method InjectorMethodValue `json:"method" msgpack:"method" bson:"method" mapstructure:"method,omitempty"`

	// A regular expression to match a URL path to log.
	Path string `json:"path" msgpack:"path" bson:"path" mapstructure:"path,omitempty"`

	ModelVersion int `json:"-" msgpack:"-" bson:"_modelversion"`
}

// NewInjector returns a new *Injector
func NewInjector() *Injector {

	return &Injector{
		ModelVersion: 1,
		Hosts:        []string{},
	}
}

// GetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *Injector) GetBSON() (any, error) {

	if o == nil {
		return nil, nil
	}

	s := &mongoAttributesInjector{}

	s.DelayXHRPatching = o.DelayXHRPatching
	s.Hosts = o.Hosts
	s.Method = o.Method
	s.Path = o.Path

	return s, nil
}

// SetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *Injector) SetBSON(raw bson.Raw) error {

	if o == nil {
		return nil
	}

	s := &mongoAttributesInjector{}
	if err := raw.Unmarshal(s); err != nil {
		return err
	}

	o.DelayXHRPatching = s.DelayXHRPatching
	o.Hosts = s.Hosts
	o.Method = s.Method
	o.Path = s.Path

	return nil
}

// BleveType implements the bleve.Classifier Interface.
func (o *Injector) BleveType() string {

	return "injector"
}

// GetPath returns the Path of the receiver.
func (o *Injector) GetPath() string {

	return o.Path
}

// DeepCopy returns a deep copy if the Injector.
func (o *Injector) DeepCopy() *Injector {

	if o == nil {
		return nil
	}

	out := &Injector{}
	o.DeepCopyInto(out)

	return out
}

// DeepCopyInto copies the receiver into the given *Injector.
func (o *Injector) DeepCopyInto(out *Injector) {

	target, err := copystructure.Copy(o)
	if err != nil {
		panic(fmt.Sprintf("Unable to deepcopy Injector: %s", err))
	}

	*out = *target.(*Injector)
}

// Validate valides the current information stored into the structure.
func (o *Injector) Validate() error {

	errors := elemental.Errors{}
	requiredErrors := elemental.Errors{}

	if err := elemental.ValidateRequiredString("method", string(o.Method)); err != nil {
		requiredErrors = requiredErrors.Append(err)
	}

	if err := elemental.ValidateStringInList("method", string(o.Method), []string{"Post", "Put", "Patch", "Get", "Delete", "Options", "Head"}, false); err != nil {
		errors = errors.Append(err)
	}

	if err := elemental.ValidateRequiredString("path", o.Path); err != nil {
		requiredErrors = requiredErrors.Append(err)
	}

	if len(requiredErrors) > 0 {
		return requiredErrors
	}

	if len(errors) > 0 {
		return errors
	}

	return nil
}

// SpecificationForAttribute returns the AttributeSpecification for the given attribute name key.
func (*Injector) SpecificationForAttribute(name string) elemental.AttributeSpecification {

	if v, ok := InjectorAttributesMap[name]; ok {
		return v
	}

	// We could not find it, so let's check on the lower case indexed spec map
	return InjectorLowerCaseAttributesMap[name]
}

// AttributeSpecifications returns the full attribute specifications map.
func (*Injector) AttributeSpecifications() map[string]elemental.AttributeSpecification {

	return InjectorAttributesMap
}

// ValueForAttribute returns the value for the given attribute.
// This is a very advanced function that you should not need but in some
// very specific use cases.
func (o *Injector) ValueForAttribute(name string) any {

	switch name {
	case "delayXHRPatching":
		return o.DelayXHRPatching
	case "hosts":
		return o.Hosts
	case "method":
		return o.Method
	case "path":
		return o.Path
	}

	return nil
}

// InjectorAttributesMap represents the map of attribute for Injector.
var InjectorAttributesMap = map[string]elemental.AttributeSpecification{
	"DelayXHRPatching": {
		AllowedChoices: []string{},
		BSONFieldName:  "delayxhrpatching",
		ConvertedName:  "DelayXHRPatching",
		Description: `Since JS world is the mess we all know, there are some cases when we must delay
the monkey patching of the XHR request.`,
		Exposed: true,
		Name:    "delayXHRPatching",
		Stored:  true,
		Type:    "boolean",
	},
	"Hosts": {
		AllowedChoices: []string{},
		BSONFieldName:  "hosts",
		ConvertedName:  "Hosts",
		Description: `Optional hosts to match. This is useful in case the provider has multiple hosts
to discriminate which logger to use.`,
		Exposed: true,
		Name:    "hosts",
		Stored:  true,
		SubType: "string",
		Type:    "list",
	},
	"Method": {
		AllowedChoices: []string{"Post", "Put", "Patch", "Get", "Delete", "Options", "Head"},
		BSONFieldName:  "method",
		ConvertedName:  "Method",
		Description:    `The method to match.`,
		Exposed:        true,
		Name:           "method",
		Required:       true,
		Stored:         true,
		SubType:        "string",
		Type:           "enum",
	},
	"Path": {
		AllowedChoices: []string{},
		BSONFieldName:  "path",
		ConvertedName:  "Path",
		Description:    `A regular expression to match a URL path to log.`,
		Exposed:        true,
		Getter:         true,
		Name:           "path",
		Required:       true,
		Stored:         true,
		Type:           "string",
	},
}

// InjectorLowerCaseAttributesMap represents the map of attribute for Injector.
var InjectorLowerCaseAttributesMap = map[string]elemental.AttributeSpecification{
	"delayxhrpatching": {
		AllowedChoices: []string{},
		BSONFieldName:  "delayxhrpatching",
		ConvertedName:  "DelayXHRPatching",
		Description: `Since JS world is the mess we all know, there are some cases when we must delay
the monkey patching of the XHR request.`,
		Exposed: true,
		Name:    "delayXHRPatching",
		Stored:  true,
		Type:    "boolean",
	},
	"hosts": {
		AllowedChoices: []string{},
		BSONFieldName:  "hosts",
		ConvertedName:  "Hosts",
		Description: `Optional hosts to match. This is useful in case the provider has multiple hosts
to discriminate which logger to use.`,
		Exposed: true,
		Name:    "hosts",
		Stored:  true,
		SubType: "string",
		Type:    "list",
	},
	"method": {
		AllowedChoices: []string{"Post", "Put", "Patch", "Get", "Delete", "Options", "Head"},
		BSONFieldName:  "method",
		ConvertedName:  "Method",
		Description:    `The method to match.`,
		Exposed:        true,
		Name:           "method",
		Required:       true,
		Stored:         true,
		SubType:        "string",
		Type:           "enum",
	},
	"path": {
		AllowedChoices: []string{},
		BSONFieldName:  "path",
		ConvertedName:  "Path",
		Description:    `A regular expression to match a URL path to log.`,
		Exposed:        true,
		Getter:         true,
		Name:           "path",
		Required:       true,
		Stored:         true,
		Type:           "string",
	},
}

type mongoAttributesInjector struct {
	DelayXHRPatching bool                `bson:"delayxhrpatching,omitempty"`
	Hosts            []string            `bson:"hosts,omitempty"`
	Method           InjectorMethodValue `bson:"method"`
	Path             string              `bson:"path"`
}
