// Code generated by elegen. DO NOT EDIT.
// Source: go.acuvity.ai/elemental (templates/model.gotpl)

package api

import (
	"fmt"
	"slices"
	"time"

	"github.com/globalsign/mgo/bson"
	"github.com/mitchellh/copystructure"
	"go.acuvity.ai/elemental"
)

// AccessPolicyActionValue represents the possible values for attribute "action".
type AccessPolicyActionValue string

const (
	// AccessPolicyActionAllow represents the value Allow.
	AccessPolicyActionAllow AccessPolicyActionValue = "Allow"

	// AccessPolicyActionDeny represents the value Deny.
	AccessPolicyActionDeny AccessPolicyActionValue = "Deny"
)

// AccessPolicyIdentity represents the Identity of the object.
var AccessPolicyIdentity = elemental.Identity{
	Name:     "accesspolicy",
	Category: "accesspolicies",
	Package:  "lain",
	Private:  false,
}

// AccessPoliciesList represents a list of AccessPolicies
type AccessPoliciesList []*AccessPolicy

// Identity returns the identity of the objects in the list.
func (o AccessPoliciesList) Identity() elemental.Identity {

	return AccessPolicyIdentity
}

// Copy returns a pointer to a copy the AccessPoliciesList.
func (o AccessPoliciesList) Copy() elemental.Identifiables {

	out := slices.Clone(o)
	return &out
}

// Append appends the objects to the a new copy of the AccessPoliciesList.
func (o AccessPoliciesList) Append(objects ...elemental.Identifiable) elemental.Identifiables {

	out := slices.Clone(o)
	for _, obj := range objects {
		out = append(out, obj.(*AccessPolicy))
	}

	return out
}

// List converts the object to an elemental.IdentifiablesList.
func (o AccessPoliciesList) List() elemental.IdentifiablesList {

	out := make(elemental.IdentifiablesList, len(o))
	for i := range len(o) {
		out[i] = o[i]
	}

	return out
}

// DefaultOrder returns the default ordering fields of the content.
func (o AccessPoliciesList) DefaultOrder() []string {

	return []string{}
}

// ToSparse returns the AccessPoliciesList converted to SparseAccessPoliciesList.
// Objects in the list will only contain the given fields. No field means entire field set.
func (o AccessPoliciesList) ToSparse(fields ...string) elemental.Identifiables {

	out := make(SparseAccessPoliciesList, len(o))
	for i := range len(o) {
		out[i] = o[i].ToSparse(fields...).(*SparseAccessPolicy)
	}

	return out
}

// Version returns the version of the content.
func (o AccessPoliciesList) Version() int {

	return 1
}

// AccessPolicy represents the model of a accesspolicy
type AccessPolicy struct {
	// ID is the identifier of the object.
	ID string `json:"ID,omitempty" msgpack:"ID,omitempty" bson:"-" mapstructure:"ID,omitempty"`

	// The message that is sent if the access is denied.
	AccessDeniedMessage string `json:"accessDeniedMessage" msgpack:"accessDeniedMessage" bson:"accessdeniedmessage" mapstructure:"accessDeniedMessage,omitempty"`

	// Define if the provider is allowed or denied for the match expression.
	Action AccessPolicyActionValue `json:"action" msgpack:"action" bson:"action" mapstructure:"action,omitempty"`

	// The definition to use for alerting when action is deny.
	AlertDefinition string `json:"alertDefinition" msgpack:"alertDefinition" bson:"alertdefinition" mapstructure:"alertDefinition,omitempty"`

	// The list of content policies to apply when the user has access to the provider.
	ContentPolicies []string `json:"contentPolicies" msgpack:"contentPolicies" bson:"contentpolicies" mapstructure:"contentPolicies,omitempty"`

	// Creation date of the object.
	CreateTime time.Time `json:"createTime" msgpack:"createTime" bson:"createtime" mapstructure:"createTime,omitempty"`

	// Description of the access policy.
	Description string `json:"description" msgpack:"description" bson:"description" mapstructure:"description,omitempty"`

	// If true, the policy is disabled.
	Disabled bool `json:"disabled" msgpack:"disabled" bson:"disabled" mapstructure:"disabled,omitempty"`

	// The hash of the structure used to compare with new import version.
	ImportHash string `json:"importHash,omitempty" msgpack:"importHash,omitempty" bson:"importhash,omitempty" mapstructure:"importHash,omitempty"`

	// The user-defined import label that allows the system to group resources from the
	// same import operation.
	ImportLabel string `json:"importLabel,omitempty" msgpack:"importLabel,omitempty" bson:"importlabel,omitempty" mapstructure:"importLabel,omitempty"`

	// The match criteria used to take a decision on the access.
	Match []*Predicate `json:"match" msgpack:"match" bson:"match" mapstructure:"match,omitempty"`

	// If true, the system will not log the messages that are not considered as
	// violations.
	MinimalLogging bool `json:"minimalLogging" msgpack:"minimalLogging" bson:"minimallogging" mapstructure:"minimalLogging,omitempty"`

	// The name of the access policy.
	Name string `json:"name" msgpack:"name" bson:"name" mapstructure:"name,omitempty"`

	// The namespace of the object.
	Namespace string `json:"namespace,omitempty" msgpack:"namespace,omitempty" bson:"namespace,omitempty" mapstructure:"namespace,omitempty"`

	// If true, the system will run analysis in parallel of the user request. When this
	// is active, no further policing will be done, and no content policy will run.
	// This can be used to observe the transmitted data and have analysis report,
	// without adding latency to the end user request, at the price of not being able
	// to do any form of content moderation.
	OffbandAnalysis bool `json:"offbandAnalysis" msgpack:"offbandAnalysis" bson:"offbandanalysis" mapstructure:"offbandAnalysis,omitempty"`

	// If set, just log the decision, but don't enforce it.
	Permissive bool `json:"permissive" msgpack:"permissive" bson:"permissive" mapstructure:"permissive,omitempty"`

	// Last update date of the object.
	UpdateTime time.Time `json:"updateTime" msgpack:"updateTime" bson:"updatetime" mapstructure:"updateTime,omitempty"`

	// Hash of the object used to shard the data.
	ZHash int `json:"-" msgpack:"-" bson:"zhash" mapstructure:"-,omitempty"`

	// Sharding zone.
	Zone int `json:"-" msgpack:"-" bson:"zone" mapstructure:"-,omitempty"`

	ModelVersion int `json:"-" msgpack:"-" bson:"_modelversion"`
}

// NewAccessPolicy returns a new *AccessPolicy
func NewAccessPolicy() *AccessPolicy {

	return &AccessPolicy{
		ModelVersion:    1,
		Action:          AccessPolicyActionAllow,
		ContentPolicies: []string{},
	}
}

// Identity returns the Identity of the object.
func (o *AccessPolicy) Identity() elemental.Identity {

	return AccessPolicyIdentity
}

// Identifier returns the value of the object's unique identifier.
func (o *AccessPolicy) Identifier() string {

	return o.ID
}

// SetIdentifier sets the value of the object's unique identifier.
func (o *AccessPolicy) SetIdentifier(id string) {

	o.ID = id
}

// GetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *AccessPolicy) GetBSON() (any, error) {

	if o == nil {
		return nil, nil
	}

	s := &mongoAttributesAccessPolicy{}

	if o.ID != "" {
		s.ID = bson.ObjectIdHex(o.ID)
	}
	s.AccessDeniedMessage = o.AccessDeniedMessage
	s.Action = o.Action
	s.AlertDefinition = o.AlertDefinition
	s.ContentPolicies = o.ContentPolicies
	s.CreateTime = o.CreateTime
	s.Description = o.Description
	s.Disabled = o.Disabled
	s.ImportHash = o.ImportHash
	s.ImportLabel = o.ImportLabel
	s.Match = o.Match
	s.MinimalLogging = o.MinimalLogging
	s.Name = o.Name
	s.Namespace = o.Namespace
	s.OffbandAnalysis = o.OffbandAnalysis
	s.Permissive = o.Permissive
	s.UpdateTime = o.UpdateTime
	s.ZHash = o.ZHash
	s.Zone = o.Zone

	return s, nil
}

// SetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *AccessPolicy) SetBSON(raw bson.Raw) error {

	if o == nil {
		return nil
	}

	s := &mongoAttributesAccessPolicy{}
	if err := raw.Unmarshal(s); err != nil {
		return err
	}

	o.ID = s.ID.Hex()
	o.AccessDeniedMessage = s.AccessDeniedMessage
	o.Action = s.Action
	o.AlertDefinition = s.AlertDefinition
	o.ContentPolicies = s.ContentPolicies
	o.CreateTime = s.CreateTime
	o.Description = s.Description
	o.Disabled = s.Disabled
	o.ImportHash = s.ImportHash
	o.ImportLabel = s.ImportLabel
	o.Match = s.Match
	o.MinimalLogging = s.MinimalLogging
	o.Name = s.Name
	o.Namespace = s.Namespace
	o.OffbandAnalysis = s.OffbandAnalysis
	o.Permissive = s.Permissive
	o.UpdateTime = s.UpdateTime
	o.ZHash = s.ZHash
	o.Zone = s.Zone

	return nil
}

// Version returns the hardcoded version of the model.
func (o *AccessPolicy) Version() int {

	return 1
}

// BleveType implements the bleve.Classifier Interface.
func (o *AccessPolicy) BleveType() string {

	return "accesspolicy"
}

// DefaultOrder returns the list of default ordering fields.
func (o *AccessPolicy) DefaultOrder() []string {

	return []string{}
}

// Doc returns the documentation for the object
func (o *AccessPolicy) Doc() string {

	return `Define which teams or individuals can access a provider.`
}

func (o *AccessPolicy) String() string {

	return fmt.Sprintf("<%s:%s>", o.Identity().Name, o.Identifier())
}

// GetCreateTime returns the CreateTime of the receiver.
func (o *AccessPolicy) GetCreateTime() time.Time {

	return o.CreateTime
}

// SetCreateTime sets the property CreateTime of the receiver using the given value.
func (o *AccessPolicy) SetCreateTime(createTime time.Time) {

	o.CreateTime = createTime
}

// GetImportHash returns the ImportHash of the receiver.
func (o *AccessPolicy) GetImportHash() string {

	return o.ImportHash
}

// SetImportHash sets the property ImportHash of the receiver using the given value.
func (o *AccessPolicy) SetImportHash(importHash string) {

	o.ImportHash = importHash
}

// GetImportLabel returns the ImportLabel of the receiver.
func (o *AccessPolicy) GetImportLabel() string {

	return o.ImportLabel
}

// SetImportLabel sets the property ImportLabel of the receiver using the given value.
func (o *AccessPolicy) SetImportLabel(importLabel string) {

	o.ImportLabel = importLabel
}

// GetNamespace returns the Namespace of the receiver.
func (o *AccessPolicy) GetNamespace() string {

	return o.Namespace
}

// SetNamespace sets the property Namespace of the receiver using the given value.
func (o *AccessPolicy) SetNamespace(namespace string) {

	o.Namespace = namespace
}

// GetUpdateTime returns the UpdateTime of the receiver.
func (o *AccessPolicy) GetUpdateTime() time.Time {

	return o.UpdateTime
}

// SetUpdateTime sets the property UpdateTime of the receiver using the given value.
func (o *AccessPolicy) SetUpdateTime(updateTime time.Time) {

	o.UpdateTime = updateTime
}

// ToSparse returns the sparse version of the model.
// The returned object will only contain the given fields. No field means entire field set.
func (o *AccessPolicy) ToSparse(fields ...string) elemental.SparseIdentifiable {

	if len(fields) == 0 {
		// nolint: goimports
		return &SparseAccessPolicy{
			ID:                  &o.ID,
			AccessDeniedMessage: &o.AccessDeniedMessage,
			Action:              &o.Action,
			AlertDefinition:     &o.AlertDefinition,
			ContentPolicies:     &o.ContentPolicies,
			CreateTime:          &o.CreateTime,
			Description:         &o.Description,
			Disabled:            &o.Disabled,
			ImportHash:          &o.ImportHash,
			ImportLabel:         &o.ImportLabel,
			Match:               &o.Match,
			MinimalLogging:      &o.MinimalLogging,
			Name:                &o.Name,
			Namespace:           &o.Namespace,
			OffbandAnalysis:     &o.OffbandAnalysis,
			Permissive:          &o.Permissive,
			UpdateTime:          &o.UpdateTime,
			ZHash:               &o.ZHash,
			Zone:                &o.Zone,
		}
	}

	sp := &SparseAccessPolicy{}
	for _, f := range fields {
		switch f {
		case "ID":
			sp.ID = &(o.ID)
		case "accessDeniedMessage":
			sp.AccessDeniedMessage = &(o.AccessDeniedMessage)
		case "action":
			sp.Action = &(o.Action)
		case "alertDefinition":
			sp.AlertDefinition = &(o.AlertDefinition)
		case "contentPolicies":
			sp.ContentPolicies = &(o.ContentPolicies)
		case "createTime":
			sp.CreateTime = &(o.CreateTime)
		case "description":
			sp.Description = &(o.Description)
		case "disabled":
			sp.Disabled = &(o.Disabled)
		case "importHash":
			sp.ImportHash = &(o.ImportHash)
		case "importLabel":
			sp.ImportLabel = &(o.ImportLabel)
		case "match":
			sp.Match = &(o.Match)
		case "minimalLogging":
			sp.MinimalLogging = &(o.MinimalLogging)
		case "name":
			sp.Name = &(o.Name)
		case "namespace":
			sp.Namespace = &(o.Namespace)
		case "offbandAnalysis":
			sp.OffbandAnalysis = &(o.OffbandAnalysis)
		case "permissive":
			sp.Permissive = &(o.Permissive)
		case "updateTime":
			sp.UpdateTime = &(o.UpdateTime)
		case "zHash":
			sp.ZHash = &(o.ZHash)
		case "zone":
			sp.Zone = &(o.Zone)
		}
	}

	return sp
}

// Patch apply the non nil value of a *SparseAccessPolicy to the object.
func (o *AccessPolicy) Patch(sparse elemental.SparseIdentifiable) {
	if !sparse.Identity().IsEqual(o.Identity()) {
		panic("cannot patch from a parse with different identity")
	}

	so := sparse.(*SparseAccessPolicy)
	if so.ID != nil {
		o.ID = *so.ID
	}
	if so.AccessDeniedMessage != nil {
		o.AccessDeniedMessage = *so.AccessDeniedMessage
	}
	if so.Action != nil {
		o.Action = *so.Action
	}
	if so.AlertDefinition != nil {
		o.AlertDefinition = *so.AlertDefinition
	}
	if so.ContentPolicies != nil {
		o.ContentPolicies = *so.ContentPolicies
	}
	if so.CreateTime != nil {
		o.CreateTime = *so.CreateTime
	}
	if so.Description != nil {
		o.Description = *so.Description
	}
	if so.Disabled != nil {
		o.Disabled = *so.Disabled
	}
	if so.ImportHash != nil {
		o.ImportHash = *so.ImportHash
	}
	if so.ImportLabel != nil {
		o.ImportLabel = *so.ImportLabel
	}
	if so.Match != nil {
		o.Match = *so.Match
	}
	if so.MinimalLogging != nil {
		o.MinimalLogging = *so.MinimalLogging
	}
	if so.Name != nil {
		o.Name = *so.Name
	}
	if so.Namespace != nil {
		o.Namespace = *so.Namespace
	}
	if so.OffbandAnalysis != nil {
		o.OffbandAnalysis = *so.OffbandAnalysis
	}
	if so.Permissive != nil {
		o.Permissive = *so.Permissive
	}
	if so.UpdateTime != nil {
		o.UpdateTime = *so.UpdateTime
	}
	if so.ZHash != nil {
		o.ZHash = *so.ZHash
	}
	if so.Zone != nil {
		o.Zone = *so.Zone
	}
}

// DeepCopy returns a deep copy if the AccessPolicy.
func (o *AccessPolicy) DeepCopy() *AccessPolicy {

	if o == nil {
		return nil
	}

	out := &AccessPolicy{}
	o.DeepCopyInto(out)

	return out
}

// DeepCopyInto copies the receiver into the given *AccessPolicy.
func (o *AccessPolicy) DeepCopyInto(out *AccessPolicy) {

	target, err := copystructure.Copy(o)
	if err != nil {
		panic(fmt.Sprintf("Unable to deepcopy AccessPolicy: %s", err))
	}

	*out = *target.(*AccessPolicy)
}

// Validate valides the current information stored into the structure.
func (o *AccessPolicy) Validate() error {

	errors := elemental.Errors{}
	requiredErrors := elemental.Errors{}

	if err := elemental.ValidateStringInList("action", string(o.Action), []string{"Allow", "Deny"}, false); err != nil {
		errors = errors.Append(err)
	}

	for _, sub := range o.Match {
		if sub == nil {
			continue
		}
		elemental.ResetDefaultForZeroValues(sub)
		if err := sub.Validate(); err != nil {
			errors = errors.Append(err)
		}
	}

	if err := elemental.ValidateRequiredString("name", o.Name); err != nil {
		requiredErrors = requiredErrors.Append(err)
	}

	if err := elemental.ValidatePattern("name", o.Name, `^[a-zA-Z0-9-_/@. ]+$`, `must only contain alpha numerical characters, '-', '_', '@', '.' or space.`, true); err != nil {
		errors = errors.Append(err)
	}

	if err := ValidateName("name", o.Name); err != nil {
		errors = errors.Append(err)
	}

	// Custom object validation.
	if err := ValidateAccessPolicy(o); err != nil {
		errors = errors.Append(err)
	}

	if len(requiredErrors) > 0 {
		return requiredErrors
	}

	if len(errors) > 0 {
		return errors
	}

	return nil
}

// SpecificationForAttribute returns the AttributeSpecification for the given attribute name key.
func (*AccessPolicy) SpecificationForAttribute(name string) elemental.AttributeSpecification {

	if v, ok := AccessPolicyAttributesMap[name]; ok {
		return v
	}

	// We could not find it, so let's check on the lower case indexed spec map
	return AccessPolicyLowerCaseAttributesMap[name]
}

// AttributeSpecifications returns the full attribute specifications map.
func (*AccessPolicy) AttributeSpecifications() map[string]elemental.AttributeSpecification {

	return AccessPolicyAttributesMap
}

// ValueForAttribute returns the value for the given attribute.
// This is a very advanced function that you should not need but in some
// very specific use cases.
func (o *AccessPolicy) ValueForAttribute(name string) any {

	switch name {
	case "ID":
		return o.ID
	case "accessDeniedMessage":
		return o.AccessDeniedMessage
	case "action":
		return o.Action
	case "alertDefinition":
		return o.AlertDefinition
	case "contentPolicies":
		return o.ContentPolicies
	case "createTime":
		return o.CreateTime
	case "description":
		return o.Description
	case "disabled":
		return o.Disabled
	case "importHash":
		return o.ImportHash
	case "importLabel":
		return o.ImportLabel
	case "match":
		return o.Match
	case "minimalLogging":
		return o.MinimalLogging
	case "name":
		return o.Name
	case "namespace":
		return o.Namespace
	case "offbandAnalysis":
		return o.OffbandAnalysis
	case "permissive":
		return o.Permissive
	case "updateTime":
		return o.UpdateTime
	case "zHash":
		return o.ZHash
	case "zone":
		return o.Zone
	}

	return nil
}

// AccessPolicyAttributesMap represents the map of attribute for AccessPolicy.
var AccessPolicyAttributesMap = map[string]elemental.AttributeSpecification{
	"ID": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "_id",
		ConvertedName:  "ID",
		Description:    `ID is the identifier of the object.`,
		Exposed:        true,
		Filterable:     true,
		Identifier:     true,
		Name:           "ID",
		Orderable:      true,
		ReadOnly:       true,
		Stored:         true,
		Type:           "string",
	},
	"AccessDeniedMessage": {
		AllowedChoices: []string{},
		BSONFieldName:  "accessdeniedmessage",
		ConvertedName:  "AccessDeniedMessage",
		Description:    `The message that is sent if the access is denied.`,
		Exposed:        true,
		Name:           "accessDeniedMessage",
		Stored:         true,
		Type:           "string",
	},
	"Action": {
		AllowedChoices: []string{"Allow", "Deny"},
		BSONFieldName:  "action",
		ConvertedName:  "Action",
		DefaultValue:   AccessPolicyActionAllow,
		Description:    `Define if the provider is allowed or denied for the match expression.`,
		Exposed:        true,
		Name:           "action",
		Stored:         true,
		Type:           "enum",
	},
	"AlertDefinition": {
		AllowedChoices: []string{},
		BSONFieldName:  "alertdefinition",
		ConvertedName:  "AlertDefinition",
		Description:    `The definition to use for alerting when action is deny.`,
		Exposed:        true,
		Name:           "alertDefinition",
		Stored:         true,
		Type:           "string",
	},
	"ContentPolicies": {
		AllowedChoices: []string{},
		BSONFieldName:  "contentpolicies",
		ConvertedName:  "ContentPolicies",
		Description:    `The list of content policies to apply when the user has access to the provider.`,
		Exposed:        true,
		Name:           "contentPolicies",
		Stored:         true,
		SubType:        "string",
		Type:           "list",
	},
	"CreateTime": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "createtime",
		ConvertedName:  "CreateTime",
		Description:    `Creation date of the object.`,
		Exposed:        true,
		Getter:         true,
		Name:           "createTime",
		Orderable:      true,
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Type:           "time",
	},
	"Description": {
		AllowedChoices: []string{},
		BSONFieldName:  "description",
		ConvertedName:  "Description",
		Description:    `Description of the access policy.`,
		Exposed:        true,
		Name:           "description",
		Stored:         true,
		Type:           "string",
	},
	"Disabled": {
		AllowedChoices: []string{},
		BSONFieldName:  "disabled",
		ConvertedName:  "Disabled",
		Description:    `If true, the policy is disabled.`,
		Exposed:        true,
		Name:           "disabled",
		Stored:         true,
		Type:           "boolean",
	},
	"ImportHash": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "importhash",
		ConvertedName:  "ImportHash",
		CreationOnly:   true,
		Description:    `The hash of the structure used to compare with new import version.`,
		Exposed:        true,
		Getter:         true,
		Name:           "importHash",
		Setter:         true,
		Stored:         true,
		Type:           "string",
	},
	"ImportLabel": {
		AllowedChoices: []string{},
		BSONFieldName:  "importlabel",
		ConvertedName:  "ImportLabel",
		CreationOnly:   true,
		Description: `The user-defined import label that allows the system to group resources from the
same import operation.`,
		Exposed: true,
		Getter:  true,
		Name:    "importLabel",
		Setter:  true,
		Stored:  true,
		Type:    "string",
	},
	"Match": {
		AllowedChoices: []string{},
		BSONFieldName:  "match",
		ConvertedName:  "Match",
		Description:    `The match criteria used to take a decision on the access.`,
		Exposed:        true,
		Name:           "match",
		Stored:         true,
		SubType:        "predicate",
		Type:           "refList",
	},
	"MinimalLogging": {
		AllowedChoices: []string{},
		BSONFieldName:  "minimallogging",
		ConvertedName:  "MinimalLogging",
		Description: `If true, the system will not log the messages that are not considered as
violations.`,
		Exposed: true,
		Name:    "minimalLogging",
		Stored:  true,
		Type:    "boolean",
	},
	"Name": {
		AllowedChars:   `^[a-zA-Z0-9-_/@. ]+$`,
		AllowedChoices: []string{},
		BSONFieldName:  "name",
		ConvertedName:  "Name",
		Description:    `The name of the access policy.`,
		Exposed:        true,
		Name:           "name",
		Required:       true,
		Stored:         true,
		Type:           "string",
	},
	"Namespace": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "namespace",
		ConvertedName:  "Namespace",
		Description:    `The namespace of the object.`,
		Exposed:        true,
		Getter:         true,
		Name:           "namespace",
		Orderable:      true,
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Type:           "string",
	},
	"OffbandAnalysis": {
		AllowedChoices: []string{},
		BSONFieldName:  "offbandanalysis",
		ConvertedName:  "OffbandAnalysis",
		Description: `If true, the system will run analysis in parallel of the user request. When this
is active, no further policing will be done, and no content policy will run.
This can be used to observe the transmitted data and have analysis report,
without adding latency to the end user request, at the price of not being able
to do any form of content moderation.`,
		Exposed: true,
		Name:    "offbandAnalysis",
		Stored:  true,
		Type:    "boolean",
	},
	"Permissive": {
		AllowedChoices: []string{},
		BSONFieldName:  "permissive",
		ConvertedName:  "Permissive",
		Description:    `If set, just log the decision, but don't enforce it.`,
		Exposed:        true,
		Name:           "permissive",
		Stored:         true,
		Type:           "boolean",
	},
	"UpdateTime": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "updatetime",
		ConvertedName:  "UpdateTime",
		Description:    `Last update date of the object.`,
		Exposed:        true,
		Getter:         true,
		Name:           "updateTime",
		Orderable:      true,
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Type:           "time",
	},
}

// AccessPolicyLowerCaseAttributesMap represents the map of attribute for AccessPolicy.
var AccessPolicyLowerCaseAttributesMap = map[string]elemental.AttributeSpecification{
	"id": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "_id",
		ConvertedName:  "ID",
		Description:    `ID is the identifier of the object.`,
		Exposed:        true,
		Filterable:     true,
		Identifier:     true,
		Name:           "ID",
		Orderable:      true,
		ReadOnly:       true,
		Stored:         true,
		Type:           "string",
	},
	"accessdeniedmessage": {
		AllowedChoices: []string{},
		BSONFieldName:  "accessdeniedmessage",
		ConvertedName:  "AccessDeniedMessage",
		Description:    `The message that is sent if the access is denied.`,
		Exposed:        true,
		Name:           "accessDeniedMessage",
		Stored:         true,
		Type:           "string",
	},
	"action": {
		AllowedChoices: []string{"Allow", "Deny"},
		BSONFieldName:  "action",
		ConvertedName:  "Action",
		DefaultValue:   AccessPolicyActionAllow,
		Description:    `Define if the provider is allowed or denied for the match expression.`,
		Exposed:        true,
		Name:           "action",
		Stored:         true,
		Type:           "enum",
	},
	"alertdefinition": {
		AllowedChoices: []string{},
		BSONFieldName:  "alertdefinition",
		ConvertedName:  "AlertDefinition",
		Description:    `The definition to use for alerting when action is deny.`,
		Exposed:        true,
		Name:           "alertDefinition",
		Stored:         true,
		Type:           "string",
	},
	"contentpolicies": {
		AllowedChoices: []string{},
		BSONFieldName:  "contentpolicies",
		ConvertedName:  "ContentPolicies",
		Description:    `The list of content policies to apply when the user has access to the provider.`,
		Exposed:        true,
		Name:           "contentPolicies",
		Stored:         true,
		SubType:        "string",
		Type:           "list",
	},
	"createtime": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "createtime",
		ConvertedName:  "CreateTime",
		Description:    `Creation date of the object.`,
		Exposed:        true,
		Getter:         true,
		Name:           "createTime",
		Orderable:      true,
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Type:           "time",
	},
	"description": {
		AllowedChoices: []string{},
		BSONFieldName:  "description",
		ConvertedName:  "Description",
		Description:    `Description of the access policy.`,
		Exposed:        true,
		Name:           "description",
		Stored:         true,
		Type:           "string",
	},
	"disabled": {
		AllowedChoices: []string{},
		BSONFieldName:  "disabled",
		ConvertedName:  "Disabled",
		Description:    `If true, the policy is disabled.`,
		Exposed:        true,
		Name:           "disabled",
		Stored:         true,
		Type:           "boolean",
	},
	"importhash": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "importhash",
		ConvertedName:  "ImportHash",
		CreationOnly:   true,
		Description:    `The hash of the structure used to compare with new import version.`,
		Exposed:        true,
		Getter:         true,
		Name:           "importHash",
		Setter:         true,
		Stored:         true,
		Type:           "string",
	},
	"importlabel": {
		AllowedChoices: []string{},
		BSONFieldName:  "importlabel",
		ConvertedName:  "ImportLabel",
		CreationOnly:   true,
		Description: `The user-defined import label that allows the system to group resources from the
same import operation.`,
		Exposed: true,
		Getter:  true,
		Name:    "importLabel",
		Setter:  true,
		Stored:  true,
		Type:    "string",
	},
	"match": {
		AllowedChoices: []string{},
		BSONFieldName:  "match",
		ConvertedName:  "Match",
		Description:    `The match criteria used to take a decision on the access.`,
		Exposed:        true,
		Name:           "match",
		Stored:         true,
		SubType:        "predicate",
		Type:           "refList",
	},
	"minimallogging": {
		AllowedChoices: []string{},
		BSONFieldName:  "minimallogging",
		ConvertedName:  "MinimalLogging",
		Description: `If true, the system will not log the messages that are not considered as
violations.`,
		Exposed: true,
		Name:    "minimalLogging",
		Stored:  true,
		Type:    "boolean",
	},
	"name": {
		AllowedChars:   `^[a-zA-Z0-9-_/@. ]+$`,
		AllowedChoices: []string{},
		BSONFieldName:  "name",
		ConvertedName:  "Name",
		Description:    `The name of the access policy.`,
		Exposed:        true,
		Name:           "name",
		Required:       true,
		Stored:         true,
		Type:           "string",
	},
	"namespace": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "namespace",
		ConvertedName:  "Namespace",
		Description:    `The namespace of the object.`,
		Exposed:        true,
		Getter:         true,
		Name:           "namespace",
		Orderable:      true,
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Type:           "string",
	},
	"offbandanalysis": {
		AllowedChoices: []string{},
		BSONFieldName:  "offbandanalysis",
		ConvertedName:  "OffbandAnalysis",
		Description: `If true, the system will run analysis in parallel of the user request. When this
is active, no further policing will be done, and no content policy will run.
This can be used to observe the transmitted data and have analysis report,
without adding latency to the end user request, at the price of not being able
to do any form of content moderation.`,
		Exposed: true,
		Name:    "offbandAnalysis",
		Stored:  true,
		Type:    "boolean",
	},
	"permissive": {
		AllowedChoices: []string{},
		BSONFieldName:  "permissive",
		ConvertedName:  "Permissive",
		Description:    `If set, just log the decision, but don't enforce it.`,
		Exposed:        true,
		Name:           "permissive",
		Stored:         true,
		Type:           "boolean",
	},
	"updatetime": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "updatetime",
		ConvertedName:  "UpdateTime",
		Description:    `Last update date of the object.`,
		Exposed:        true,
		Getter:         true,
		Name:           "updateTime",
		Orderable:      true,
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Type:           "time",
	},
}

// SparseAccessPoliciesList represents a list of SparseAccessPolicies
type SparseAccessPoliciesList []*SparseAccessPolicy

// Identity returns the identity of the objects in the list.
func (o SparseAccessPoliciesList) Identity() elemental.Identity {

	return AccessPolicyIdentity
}

// Copy returns a pointer to a copy the SparseAccessPoliciesList.
func (o SparseAccessPoliciesList) Copy() elemental.Identifiables {

	copy := slices.Clone(o)
	return &copy
}

// Append appends the objects to the a new copy of the SparseAccessPoliciesList.
func (o SparseAccessPoliciesList) Append(objects ...elemental.Identifiable) elemental.Identifiables {

	out := slices.Clone(o)
	for _, obj := range objects {
		out = append(out, obj.(*SparseAccessPolicy))
	}

	return out
}

// List converts the object to an elemental.IdentifiablesList.
func (o SparseAccessPoliciesList) List() elemental.IdentifiablesList {

	out := make(elemental.IdentifiablesList, len(o))
	for i := range len(o) {
		out[i] = o[i]
	}

	return out
}

// DefaultOrder returns the default ordering fields of the content.
func (o SparseAccessPoliciesList) DefaultOrder() []string {

	return []string{}
}

// ToPlain returns the SparseAccessPoliciesList converted to AccessPoliciesList.
func (o SparseAccessPoliciesList) ToPlain() elemental.IdentifiablesList {

	out := make(elemental.IdentifiablesList, len(o))
	for i := range len(o) {
		out[i] = o[i].ToPlain()
	}

	return out
}

// Version returns the version of the content.
func (o SparseAccessPoliciesList) Version() int {

	return 1
}

// SparseAccessPolicy represents the sparse version of a accesspolicy.
type SparseAccessPolicy struct {
	// ID is the identifier of the object.
	ID *string `json:"ID,omitempty" msgpack:"ID,omitempty" bson:"-" mapstructure:"ID,omitempty"`

	// The message that is sent if the access is denied.
	AccessDeniedMessage *string `json:"accessDeniedMessage,omitempty" msgpack:"accessDeniedMessage,omitempty" bson:"accessdeniedmessage,omitempty" mapstructure:"accessDeniedMessage,omitempty"`

	// Define if the provider is allowed or denied for the match expression.
	Action *AccessPolicyActionValue `json:"action,omitempty" msgpack:"action,omitempty" bson:"action,omitempty" mapstructure:"action,omitempty"`

	// The definition to use for alerting when action is deny.
	AlertDefinition *string `json:"alertDefinition,omitempty" msgpack:"alertDefinition,omitempty" bson:"alertdefinition,omitempty" mapstructure:"alertDefinition,omitempty"`

	// The list of content policies to apply when the user has access to the provider.
	ContentPolicies *[]string `json:"contentPolicies,omitempty" msgpack:"contentPolicies,omitempty" bson:"contentpolicies,omitempty" mapstructure:"contentPolicies,omitempty"`

	// Creation date of the object.
	CreateTime *time.Time `json:"createTime,omitempty" msgpack:"createTime,omitempty" bson:"createtime,omitempty" mapstructure:"createTime,omitempty"`

	// Description of the access policy.
	Description *string `json:"description,omitempty" msgpack:"description,omitempty" bson:"description,omitempty" mapstructure:"description,omitempty"`

	// If true, the policy is disabled.
	Disabled *bool `json:"disabled,omitempty" msgpack:"disabled,omitempty" bson:"disabled,omitempty" mapstructure:"disabled,omitempty"`

	// The hash of the structure used to compare with new import version.
	ImportHash *string `json:"importHash,omitempty" msgpack:"importHash,omitempty" bson:"importhash,omitempty" mapstructure:"importHash,omitempty"`

	// The user-defined import label that allows the system to group resources from the
	// same import operation.
	ImportLabel *string `json:"importLabel,omitempty" msgpack:"importLabel,omitempty" bson:"importlabel,omitempty" mapstructure:"importLabel,omitempty"`

	// The match criteria used to take a decision on the access.
	Match *[]*Predicate `json:"match,omitempty" msgpack:"match,omitempty" bson:"match,omitempty" mapstructure:"match,omitempty"`

	// If true, the system will not log the messages that are not considered as
	// violations.
	MinimalLogging *bool `json:"minimalLogging,omitempty" msgpack:"minimalLogging,omitempty" bson:"minimallogging,omitempty" mapstructure:"minimalLogging,omitempty"`

	// The name of the access policy.
	Name *string `json:"name,omitempty" msgpack:"name,omitempty" bson:"name,omitempty" mapstructure:"name,omitempty"`

	// The namespace of the object.
	Namespace *string `json:"namespace,omitempty" msgpack:"namespace,omitempty" bson:"namespace,omitempty" mapstructure:"namespace,omitempty"`

	// If true, the system will run analysis in parallel of the user request. When this
	// is active, no further policing will be done, and no content policy will run.
	// This can be used to observe the transmitted data and have analysis report,
	// without adding latency to the end user request, at the price of not being able
	// to do any form of content moderation.
	OffbandAnalysis *bool `json:"offbandAnalysis,omitempty" msgpack:"offbandAnalysis,omitempty" bson:"offbandanalysis,omitempty" mapstructure:"offbandAnalysis,omitempty"`

	// If set, just log the decision, but don't enforce it.
	Permissive *bool `json:"permissive,omitempty" msgpack:"permissive,omitempty" bson:"permissive,omitempty" mapstructure:"permissive,omitempty"`

	// Last update date of the object.
	UpdateTime *time.Time `json:"updateTime,omitempty" msgpack:"updateTime,omitempty" bson:"updatetime,omitempty" mapstructure:"updateTime,omitempty"`

	// Hash of the object used to shard the data.
	ZHash *int `json:"-" msgpack:"-" bson:"zhash,omitempty" mapstructure:"-,omitempty"`

	// Sharding zone.
	Zone *int `json:"-" msgpack:"-" bson:"zone,omitempty" mapstructure:"-,omitempty"`

	ModelVersion int `json:"-" msgpack:"-" bson:"_modelversion"`
}

// NewSparseAccessPolicy returns a new  SparseAccessPolicy.
func NewSparseAccessPolicy() *SparseAccessPolicy {
	return &SparseAccessPolicy{}
}

// Identity returns the Identity of the sparse object.
func (o *SparseAccessPolicy) Identity() elemental.Identity {

	return AccessPolicyIdentity
}

// Identifier returns the value of the sparse object's unique identifier.
func (o *SparseAccessPolicy) Identifier() string {

	if o.ID == nil {
		return ""
	}
	return *o.ID
}

// SetIdentifier sets the value of the sparse object's unique identifier.
func (o *SparseAccessPolicy) SetIdentifier(id string) {

	if id != "" {
		o.ID = &id
	} else {
		o.ID = nil
	}
}

// GetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *SparseAccessPolicy) GetBSON() (any, error) {

	if o == nil {
		return nil, nil
	}

	s := &mongoAttributesSparseAccessPolicy{}

	if o.ID != nil {
		s.ID = bson.ObjectIdHex(*o.ID)
	}
	if o.AccessDeniedMessage != nil {
		s.AccessDeniedMessage = o.AccessDeniedMessage
	}
	if o.Action != nil {
		s.Action = o.Action
	}
	if o.AlertDefinition != nil {
		s.AlertDefinition = o.AlertDefinition
	}
	if o.ContentPolicies != nil {
		s.ContentPolicies = o.ContentPolicies
	}
	if o.CreateTime != nil {
		s.CreateTime = o.CreateTime
	}
	if o.Description != nil {
		s.Description = o.Description
	}
	if o.Disabled != nil {
		s.Disabled = o.Disabled
	}
	if o.ImportHash != nil {
		s.ImportHash = o.ImportHash
	}
	if o.ImportLabel != nil {
		s.ImportLabel = o.ImportLabel
	}
	if o.Match != nil {
		s.Match = o.Match
	}
	if o.MinimalLogging != nil {
		s.MinimalLogging = o.MinimalLogging
	}
	if o.Name != nil {
		s.Name = o.Name
	}
	if o.Namespace != nil {
		s.Namespace = o.Namespace
	}
	if o.OffbandAnalysis != nil {
		s.OffbandAnalysis = o.OffbandAnalysis
	}
	if o.Permissive != nil {
		s.Permissive = o.Permissive
	}
	if o.UpdateTime != nil {
		s.UpdateTime = o.UpdateTime
	}
	if o.ZHash != nil {
		s.ZHash = o.ZHash
	}
	if o.Zone != nil {
		s.Zone = o.Zone
	}

	return s, nil
}

// SetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *SparseAccessPolicy) SetBSON(raw bson.Raw) error {

	if o == nil {
		return nil
	}

	s := &mongoAttributesSparseAccessPolicy{}
	if err := raw.Unmarshal(s); err != nil {
		return err
	}

	id := s.ID.Hex()
	o.ID = &id
	if s.AccessDeniedMessage != nil {
		o.AccessDeniedMessage = s.AccessDeniedMessage
	}
	if s.Action != nil {
		o.Action = s.Action
	}
	if s.AlertDefinition != nil {
		o.AlertDefinition = s.AlertDefinition
	}
	if s.ContentPolicies != nil {
		o.ContentPolicies = s.ContentPolicies
	}
	if s.CreateTime != nil {
		o.CreateTime = s.CreateTime
	}
	if s.Description != nil {
		o.Description = s.Description
	}
	if s.Disabled != nil {
		o.Disabled = s.Disabled
	}
	if s.ImportHash != nil {
		o.ImportHash = s.ImportHash
	}
	if s.ImportLabel != nil {
		o.ImportLabel = s.ImportLabel
	}
	if s.Match != nil {
		o.Match = s.Match
	}
	if s.MinimalLogging != nil {
		o.MinimalLogging = s.MinimalLogging
	}
	if s.Name != nil {
		o.Name = s.Name
	}
	if s.Namespace != nil {
		o.Namespace = s.Namespace
	}
	if s.OffbandAnalysis != nil {
		o.OffbandAnalysis = s.OffbandAnalysis
	}
	if s.Permissive != nil {
		o.Permissive = s.Permissive
	}
	if s.UpdateTime != nil {
		o.UpdateTime = s.UpdateTime
	}
	if s.ZHash != nil {
		o.ZHash = s.ZHash
	}
	if s.Zone != nil {
		o.Zone = s.Zone
	}

	return nil
}

// Version returns the hardcoded version of the model.
func (o *SparseAccessPolicy) Version() int {

	return 1
}

// ToPlain returns the plain version of the sparse model.
func (o *SparseAccessPolicy) ToPlain() elemental.PlainIdentifiable {

	out := NewAccessPolicy()
	if o.ID != nil {
		out.ID = *o.ID
	}
	if o.AccessDeniedMessage != nil {
		out.AccessDeniedMessage = *o.AccessDeniedMessage
	}
	if o.Action != nil {
		out.Action = *o.Action
	}
	if o.AlertDefinition != nil {
		out.AlertDefinition = *o.AlertDefinition
	}
	if o.ContentPolicies != nil {
		out.ContentPolicies = *o.ContentPolicies
	}
	if o.CreateTime != nil {
		out.CreateTime = *o.CreateTime
	}
	if o.Description != nil {
		out.Description = *o.Description
	}
	if o.Disabled != nil {
		out.Disabled = *o.Disabled
	}
	if o.ImportHash != nil {
		out.ImportHash = *o.ImportHash
	}
	if o.ImportLabel != nil {
		out.ImportLabel = *o.ImportLabel
	}
	if o.Match != nil {
		out.Match = *o.Match
	}
	if o.MinimalLogging != nil {
		out.MinimalLogging = *o.MinimalLogging
	}
	if o.Name != nil {
		out.Name = *o.Name
	}
	if o.Namespace != nil {
		out.Namespace = *o.Namespace
	}
	if o.OffbandAnalysis != nil {
		out.OffbandAnalysis = *o.OffbandAnalysis
	}
	if o.Permissive != nil {
		out.Permissive = *o.Permissive
	}
	if o.UpdateTime != nil {
		out.UpdateTime = *o.UpdateTime
	}
	if o.ZHash != nil {
		out.ZHash = *o.ZHash
	}
	if o.Zone != nil {
		out.Zone = *o.Zone
	}

	return out
}

// GetCreateTime returns the CreateTime of the receiver.
func (o *SparseAccessPolicy) GetCreateTime() (out time.Time) {

	if o.CreateTime == nil {
		return
	}

	return *o.CreateTime
}

// SetCreateTime sets the property CreateTime of the receiver using the address of the given value.
func (o *SparseAccessPolicy) SetCreateTime(createTime time.Time) {

	o.CreateTime = &createTime
}

// GetImportHash returns the ImportHash of the receiver.
func (o *SparseAccessPolicy) GetImportHash() (out string) {

	if o.ImportHash == nil {
		return
	}

	return *o.ImportHash
}

// SetImportHash sets the property ImportHash of the receiver using the address of the given value.
func (o *SparseAccessPolicy) SetImportHash(importHash string) {

	o.ImportHash = &importHash
}

// GetImportLabel returns the ImportLabel of the receiver.
func (o *SparseAccessPolicy) GetImportLabel() (out string) {

	if o.ImportLabel == nil {
		return
	}

	return *o.ImportLabel
}

// SetImportLabel sets the property ImportLabel of the receiver using the address of the given value.
func (o *SparseAccessPolicy) SetImportLabel(importLabel string) {

	o.ImportLabel = &importLabel
}

// GetNamespace returns the Namespace of the receiver.
func (o *SparseAccessPolicy) GetNamespace() (out string) {

	if o.Namespace == nil {
		return
	}

	return *o.Namespace
}

// SetNamespace sets the property Namespace of the receiver using the address of the given value.
func (o *SparseAccessPolicy) SetNamespace(namespace string) {

	o.Namespace = &namespace
}

// GetUpdateTime returns the UpdateTime of the receiver.
func (o *SparseAccessPolicy) GetUpdateTime() (out time.Time) {

	if o.UpdateTime == nil {
		return
	}

	return *o.UpdateTime
}

// SetUpdateTime sets the property UpdateTime of the receiver using the address of the given value.
func (o *SparseAccessPolicy) SetUpdateTime(updateTime time.Time) {

	o.UpdateTime = &updateTime
}

// DeepCopy returns a deep copy if the SparseAccessPolicy.
func (o *SparseAccessPolicy) DeepCopy() *SparseAccessPolicy {

	if o == nil {
		return nil
	}

	out := &SparseAccessPolicy{}
	o.DeepCopyInto(out)

	return out
}

// DeepCopyInto copies the receiver into the given *SparseAccessPolicy.
func (o *SparseAccessPolicy) DeepCopyInto(out *SparseAccessPolicy) {

	target, err := copystructure.Copy(o)
	if err != nil {
		panic(fmt.Sprintf("Unable to deepcopy SparseAccessPolicy: %s", err))
	}

	*out = *target.(*SparseAccessPolicy)
}

type mongoAttributesAccessPolicy struct {
	ID                  bson.ObjectId           `bson:"_id,omitempty"`
	AccessDeniedMessage string                  `bson:"accessdeniedmessage"`
	Action              AccessPolicyActionValue `bson:"action"`
	AlertDefinition     string                  `bson:"alertdefinition"`
	ContentPolicies     []string                `bson:"contentpolicies"`
	CreateTime          time.Time               `bson:"createtime"`
	Description         string                  `bson:"description"`
	Disabled            bool                    `bson:"disabled"`
	ImportHash          string                  `bson:"importhash,omitempty"`
	ImportLabel         string                  `bson:"importlabel,omitempty"`
	Match               []*Predicate            `bson:"match"`
	MinimalLogging      bool                    `bson:"minimallogging"`
	Name                string                  `bson:"name"`
	Namespace           string                  `bson:"namespace,omitempty"`
	OffbandAnalysis     bool                    `bson:"offbandanalysis"`
	Permissive          bool                    `bson:"permissive"`
	UpdateTime          time.Time               `bson:"updatetime"`
	ZHash               int                     `bson:"zhash"`
	Zone                int                     `bson:"zone"`
}
type mongoAttributesSparseAccessPolicy struct {
	ID                  bson.ObjectId            `bson:"_id,omitempty"`
	AccessDeniedMessage *string                  `bson:"accessdeniedmessage,omitempty"`
	Action              *AccessPolicyActionValue `bson:"action,omitempty"`
	AlertDefinition     *string                  `bson:"alertdefinition,omitempty"`
	ContentPolicies     *[]string                `bson:"contentpolicies,omitempty"`
	CreateTime          *time.Time               `bson:"createtime,omitempty"`
	Description         *string                  `bson:"description,omitempty"`
	Disabled            *bool                    `bson:"disabled,omitempty"`
	ImportHash          *string                  `bson:"importhash,omitempty"`
	ImportLabel         *string                  `bson:"importlabel,omitempty"`
	Match               *[]*Predicate            `bson:"match,omitempty"`
	MinimalLogging      *bool                    `bson:"minimallogging,omitempty"`
	Name                *string                  `bson:"name,omitempty"`
	Namespace           *string                  `bson:"namespace,omitempty"`
	OffbandAnalysis     *bool                    `bson:"offbandanalysis,omitempty"`
	Permissive          *bool                    `bson:"permissive,omitempty"`
	UpdateTime          *time.Time               `bson:"updatetime,omitempty"`
	ZHash               *int                     `bson:"zhash,omitempty"`
	Zone                *int                     `bson:"zone,omitempty"`
}
