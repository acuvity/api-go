// Code generated by elegen. DO NOT EDIT.
// Source: go.acuvity.ai/elemental (templates/model.gotpl)

package api

import (
	"fmt"
	"slices"

	"github.com/globalsign/mgo/bson"
	"github.com/mitchellh/copystructure"
	"go.acuvity.ai/elemental"
)

// QueryRangeDirectionValue represents the possible values for attribute "direction".
type QueryRangeDirectionValue string

const (
	// QueryRangeDirectionBackward represents the value Backward.
	QueryRangeDirectionBackward QueryRangeDirectionValue = "Backward"

	// QueryRangeDirectionForward represents the value Forward.
	QueryRangeDirectionForward QueryRangeDirectionValue = "Forward"
)

// QueryRangeIdentity represents the Identity of the object.
var QueryRangeIdentity = elemental.Identity{
	Name:     "queryrange",
	Category: "queryranges",
	Package:  "snitch",
	Private:  false,
}

// QueryRangesList represents a list of QueryRanges
type QueryRangesList []*QueryRange

// Identity returns the identity of the objects in the list.
func (o QueryRangesList) Identity() elemental.Identity {

	return QueryRangeIdentity
}

// Copy returns a pointer to a copy the QueryRangesList.
func (o QueryRangesList) Copy() elemental.Identifiables {

	out := slices.Clone(o)
	return &out
}

// Append appends the objects to the a new copy of the QueryRangesList.
func (o QueryRangesList) Append(objects ...elemental.Identifiable) elemental.Identifiables {

	out := slices.Clone(o)
	for _, obj := range objects {
		out = append(out, obj.(*QueryRange))
	}

	return out
}

// List converts the object to an elemental.IdentifiablesList.
func (o QueryRangesList) List() elemental.IdentifiablesList {

	out := make(elemental.IdentifiablesList, len(o))
	for i := range len(o) {
		out[i] = o[i]
	}

	return out
}

// DefaultOrder returns the default ordering fields of the content.
func (o QueryRangesList) DefaultOrder() []string {

	return []string{}
}

// ToSparse returns the QueryRangesList converted to SparseQueryRangesList.
// Objects in the list will only contain the given fields. No field means entire field set.
func (o QueryRangesList) ToSparse(fields ...string) elemental.Identifiables {

	out := make(SparseQueryRangesList, len(o))
	for i := range len(o) {
		out[i] = o[i].ToSparse(fields...).(*SparseQueryRange)
	}

	return out
}

// Version returns the version of the content.
func (o QueryRangesList) Version() int {

	return 1
}

// QueryRange represents the model of a queryrange
type QueryRange struct {
	// ID is the identifier of the object.
	ID string `json:"ID,omitempty" msgpack:"ID,omitempty" bson:"-" mapstructure:"ID,omitempty"`

	// Determines the sort order of logs.
	Direction QueryRangeDirectionValue `json:"direction,omitempty" msgpack:"direction,omitempty" bson:"-" mapstructure:"direction,omitempty"`

	// The end of the time window in any format supported by
	// https://github.com/araddon/dateparse.
	End string `json:"end,omitempty" msgpack:"end,omitempty" bson:"-" mapstructure:"end,omitempty"`

	// The relative end of the time window as time.Duration.
	EndRelative string `json:"endRelative,omitempty" msgpack:"endRelative,omitempty" bson:"-" mapstructure:"endRelative,omitempty"`

	// the number of results to return.
	Limit int `json:"limit" msgpack:"limit" bson:"-" mapstructure:"limit,omitempty"`

	// The namespace of the object.
	Namespace string `json:"namespace,omitempty" msgpack:"namespace,omitempty" bson:"namespace,omitempty" mapstructure:"namespace,omitempty"`

	// The query in LogQL format.
	Query string `json:"query" msgpack:"query" bson:"-" mapstructure:"query,omitempty"`

	// The result of the request.
	Result []map[string]any `json:"result" msgpack:"result" bson:"-" mapstructure:"result,omitempty"`

	// The type of the result.
	ResultType string `json:"resultType,omitempty" msgpack:"resultType,omitempty" bson:"-" mapstructure:"resultType,omitempty"`

	// The start of the time window in any format supported by
	// https://github.com/araddon/dateparse.
	Start string `json:"start,omitempty" msgpack:"start,omitempty" bson:"-" mapstructure:"start,omitempty"`

	// The relative start of the time window as time.Duration.
	StartRelative string `json:"startRelative,omitempty" msgpack:"startRelative,omitempty" bson:"-" mapstructure:"startRelative,omitempty"`

	ModelVersion int `json:"-" msgpack:"-" bson:"_modelversion"`
}

// NewQueryRange returns a new *QueryRange
func NewQueryRange() *QueryRange {

	return &QueryRange{
		ModelVersion: 1,
		Direction:    QueryRangeDirectionBackward,
		Limit:        100,
		Result:       []map[string]any{},
	}
}

// Identity returns the Identity of the object.
func (o *QueryRange) Identity() elemental.Identity {

	return QueryRangeIdentity
}

// Identifier returns the value of the object's unique identifier.
func (o *QueryRange) Identifier() string {

	return o.ID
}

// SetIdentifier sets the value of the object's unique identifier.
func (o *QueryRange) SetIdentifier(id string) {

	o.ID = id
}

// GetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *QueryRange) GetBSON() (any, error) {

	if o == nil {
		return nil, nil
	}

	s := &mongoAttributesQueryRange{}

	if o.ID != "" {
		s.ID = bson.ObjectIdHex(o.ID)
	}
	s.Namespace = o.Namespace

	return s, nil
}

// SetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *QueryRange) SetBSON(raw bson.Raw) error {

	if o == nil {
		return nil
	}

	s := &mongoAttributesQueryRange{}
	if err := raw.Unmarshal(s); err != nil {
		return err
	}

	o.ID = s.ID.Hex()
	o.Namespace = s.Namespace

	return nil
}

// Version returns the hardcoded version of the model.
func (o *QueryRange) Version() int {

	return 1
}

// BleveType implements the bleve.Classifier Interface.
func (o *QueryRange) BleveType() string {

	return "queryrange"
}

// DefaultOrder returns the list of default ordering fields.
func (o *QueryRange) DefaultOrder() []string {

	return []string{}
}

// Doc returns the documentation for the object
func (o *QueryRange) Doc() string {

	return `This is a Log.`
}

func (o *QueryRange) String() string {

	return fmt.Sprintf("<%s:%s>", o.Identity().Name, o.Identifier())
}

// GetEnd returns the End of the receiver.
func (o *QueryRange) GetEnd() string {

	return o.End
}

// SetEnd sets the property End of the receiver using the given value.
func (o *QueryRange) SetEnd(end string) {

	o.End = end
}

// GetEndRelative returns the EndRelative of the receiver.
func (o *QueryRange) GetEndRelative() string {

	return o.EndRelative
}

// GetNamespace returns the Namespace of the receiver.
func (o *QueryRange) GetNamespace() string {

	return o.Namespace
}

// SetNamespace sets the property Namespace of the receiver using the given value.
func (o *QueryRange) SetNamespace(namespace string) {

	o.Namespace = namespace
}

// GetStart returns the Start of the receiver.
func (o *QueryRange) GetStart() string {

	return o.Start
}

// SetStart sets the property Start of the receiver using the given value.
func (o *QueryRange) SetStart(start string) {

	o.Start = start
}

// GetStartRelative returns the StartRelative of the receiver.
func (o *QueryRange) GetStartRelative() string {

	return o.StartRelative
}

// ToSparse returns the sparse version of the model.
// The returned object will only contain the given fields. No field means entire field set.
func (o *QueryRange) ToSparse(fields ...string) elemental.SparseIdentifiable {

	if len(fields) == 0 {
		// nolint: goimports
		return &SparseQueryRange{
			ID:            &o.ID,
			Direction:     &o.Direction,
			End:           &o.End,
			EndRelative:   &o.EndRelative,
			Limit:         &o.Limit,
			Namespace:     &o.Namespace,
			Query:         &o.Query,
			Result:        &o.Result,
			ResultType:    &o.ResultType,
			Start:         &o.Start,
			StartRelative: &o.StartRelative,
		}
	}

	sp := &SparseQueryRange{}
	for _, f := range fields {
		switch f {
		case "ID":
			sp.ID = &(o.ID)
		case "direction":
			sp.Direction = &(o.Direction)
		case "end":
			sp.End = &(o.End)
		case "endRelative":
			sp.EndRelative = &(o.EndRelative)
		case "limit":
			sp.Limit = &(o.Limit)
		case "namespace":
			sp.Namespace = &(o.Namespace)
		case "query":
			sp.Query = &(o.Query)
		case "result":
			sp.Result = &(o.Result)
		case "resultType":
			sp.ResultType = &(o.ResultType)
		case "start":
			sp.Start = &(o.Start)
		case "startRelative":
			sp.StartRelative = &(o.StartRelative)
		}
	}

	return sp
}

// Patch apply the non nil value of a *SparseQueryRange to the object.
func (o *QueryRange) Patch(sparse elemental.SparseIdentifiable) {
	if !sparse.Identity().IsEqual(o.Identity()) {
		panic("cannot patch from a parse with different identity")
	}

	so := sparse.(*SparseQueryRange)
	if so.ID != nil {
		o.ID = *so.ID
	}
	if so.Direction != nil {
		o.Direction = *so.Direction
	}
	if so.End != nil {
		o.End = *so.End
	}
	if so.EndRelative != nil {
		o.EndRelative = *so.EndRelative
	}
	if so.Limit != nil {
		o.Limit = *so.Limit
	}
	if so.Namespace != nil {
		o.Namespace = *so.Namespace
	}
	if so.Query != nil {
		o.Query = *so.Query
	}
	if so.Result != nil {
		o.Result = *so.Result
	}
	if so.ResultType != nil {
		o.ResultType = *so.ResultType
	}
	if so.Start != nil {
		o.Start = *so.Start
	}
	if so.StartRelative != nil {
		o.StartRelative = *so.StartRelative
	}
}

// DeepCopy returns a deep copy if the QueryRange.
func (o *QueryRange) DeepCopy() *QueryRange {

	if o == nil {
		return nil
	}

	out := &QueryRange{}
	o.DeepCopyInto(out)

	return out
}

// DeepCopyInto copies the receiver into the given *QueryRange.
func (o *QueryRange) DeepCopyInto(out *QueryRange) {

	target, err := copystructure.Copy(o)
	if err != nil {
		panic(fmt.Sprintf("Unable to deepcopy QueryRange: %s", err))
	}

	*out = *target.(*QueryRange)
}

// Validate valides the current information stored into the structure.
func (o *QueryRange) Validate() error {

	errors := elemental.Errors{}
	requiredErrors := elemental.Errors{}

	if err := elemental.ValidateStringInList("direction", string(o.Direction), []string{"Forward", "Backward"}, false); err != nil {
		errors = errors.Append(err)
	}

	if err := ValidateDuration("endRelative", o.EndRelative); err != nil {
		errors = errors.Append(err)
	}

	if err := elemental.ValidateRequiredString("query", o.Query); err != nil {
		requiredErrors = requiredErrors.Append(err)
	}

	if err := ValidateDuration("startRelative", o.StartRelative); err != nil {
		errors = errors.Append(err)
	}

	if len(requiredErrors) > 0 {
		return requiredErrors
	}

	if len(errors) > 0 {
		return errors
	}

	return nil
}

// SpecificationForAttribute returns the AttributeSpecification for the given attribute name key.
func (*QueryRange) SpecificationForAttribute(name string) elemental.AttributeSpecification {

	if v, ok := QueryRangeAttributesMap[name]; ok {
		return v
	}

	// We could not find it, so let's check on the lower case indexed spec map
	return QueryRangeLowerCaseAttributesMap[name]
}

// AttributeSpecifications returns the full attribute specifications map.
func (*QueryRange) AttributeSpecifications() map[string]elemental.AttributeSpecification {

	return QueryRangeAttributesMap
}

// ValueForAttribute returns the value for the given attribute.
// This is a very advanced function that you should not need but in some
// very specific use cases.
func (o *QueryRange) ValueForAttribute(name string) any {

	switch name {
	case "ID":
		return o.ID
	case "direction":
		return o.Direction
	case "end":
		return o.End
	case "endRelative":
		return o.EndRelative
	case "limit":
		return o.Limit
	case "namespace":
		return o.Namespace
	case "query":
		return o.Query
	case "result":
		return o.Result
	case "resultType":
		return o.ResultType
	case "start":
		return o.Start
	case "startRelative":
		return o.StartRelative
	}

	return nil
}

// QueryRangeAttributesMap represents the map of attribute for QueryRange.
var QueryRangeAttributesMap = map[string]elemental.AttributeSpecification{
	"ID": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "_id",
		ConvertedName:  "ID",
		Description:    `ID is the identifier of the object.`,
		Exposed:        true,
		Filterable:     true,
		Identifier:     true,
		Name:           "ID",
		Orderable:      true,
		ReadOnly:       true,
		Stored:         true,
		Type:           "string",
	},
	"Direction": {
		AllowedChoices: []string{"Forward", "Backward"},
		ConvertedName:  "Direction",
		DefaultValue:   QueryRangeDirectionBackward,
		Description:    `Determines the sort order of logs.`,
		Exposed:        true,
		Name:           "direction",
		Type:           "enum",
	},
	"End": {
		AllowedChoices: []string{},
		ConvertedName:  "End",
		Description: `The end of the time window in any format supported by
https://github.com/araddon/dateparse.`,
		Exposed: true,
		Getter:  true,
		Name:    "end",
		Setter:  true,
		Type:    "string",
	},
	"EndRelative": {
		AllowedChoices: []string{},
		ConvertedName:  "EndRelative",
		Description:    `The relative end of the time window as time.Duration.`,
		Exposed:        true,
		Getter:         true,
		Name:           "endRelative",
		Type:           "string",
	},
	"Limit": {
		AllowedChoices: []string{},
		ConvertedName:  "Limit",
		DefaultValue:   100,
		Description:    `the number of results to return.`,
		Exposed:        true,
		Name:           "limit",
		Type:           "integer",
	},
	"Namespace": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "namespace",
		ConvertedName:  "Namespace",
		Description:    `The namespace of the object.`,
		Exposed:        true,
		Getter:         true,
		Name:           "namespace",
		Orderable:      true,
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Type:           "string",
	},
	"Query": {
		AllowedChoices: []string{},
		ConvertedName:  "Query",
		Description:    `The query in LogQL format.`,
		Exposed:        true,
		Name:           "query",
		Required:       true,
		Type:           "string",
	},
	"Result": {
		AllowedChoices: []string{},
		ConvertedName:  "Result",
		Description:    `The result of the request.`,
		Exposed:        true,
		Name:           "result",
		SubType:        "[]map[string]any",
		Type:           "external",
	},
	"ResultType": {
		AllowedChoices: []string{},
		ConvertedName:  "ResultType",
		Description:    `The type of the result.`,
		Exposed:        true,
		Name:           "resultType",
		Type:           "string",
	},
	"Start": {
		AllowedChoices: []string{},
		ConvertedName:  "Start",
		Description: `The start of the time window in any format supported by
https://github.com/araddon/dateparse.`,
		Exposed: true,
		Getter:  true,
		Name:    "start",
		Setter:  true,
		Type:    "string",
	},
	"StartRelative": {
		AllowedChoices: []string{},
		ConvertedName:  "StartRelative",
		Description:    `The relative start of the time window as time.Duration.`,
		Exposed:        true,
		Getter:         true,
		Name:           "startRelative",
		Type:           "string",
	},
}

// QueryRangeLowerCaseAttributesMap represents the map of attribute for QueryRange.
var QueryRangeLowerCaseAttributesMap = map[string]elemental.AttributeSpecification{
	"id": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "_id",
		ConvertedName:  "ID",
		Description:    `ID is the identifier of the object.`,
		Exposed:        true,
		Filterable:     true,
		Identifier:     true,
		Name:           "ID",
		Orderable:      true,
		ReadOnly:       true,
		Stored:         true,
		Type:           "string",
	},
	"direction": {
		AllowedChoices: []string{"Forward", "Backward"},
		ConvertedName:  "Direction",
		DefaultValue:   QueryRangeDirectionBackward,
		Description:    `Determines the sort order of logs.`,
		Exposed:        true,
		Name:           "direction",
		Type:           "enum",
	},
	"end": {
		AllowedChoices: []string{},
		ConvertedName:  "End",
		Description: `The end of the time window in any format supported by
https://github.com/araddon/dateparse.`,
		Exposed: true,
		Getter:  true,
		Name:    "end",
		Setter:  true,
		Type:    "string",
	},
	"endrelative": {
		AllowedChoices: []string{},
		ConvertedName:  "EndRelative",
		Description:    `The relative end of the time window as time.Duration.`,
		Exposed:        true,
		Getter:         true,
		Name:           "endRelative",
		Type:           "string",
	},
	"limit": {
		AllowedChoices: []string{},
		ConvertedName:  "Limit",
		DefaultValue:   100,
		Description:    `the number of results to return.`,
		Exposed:        true,
		Name:           "limit",
		Type:           "integer",
	},
	"namespace": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "namespace",
		ConvertedName:  "Namespace",
		Description:    `The namespace of the object.`,
		Exposed:        true,
		Getter:         true,
		Name:           "namespace",
		Orderable:      true,
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Type:           "string",
	},
	"query": {
		AllowedChoices: []string{},
		ConvertedName:  "Query",
		Description:    `The query in LogQL format.`,
		Exposed:        true,
		Name:           "query",
		Required:       true,
		Type:           "string",
	},
	"result": {
		AllowedChoices: []string{},
		ConvertedName:  "Result",
		Description:    `The result of the request.`,
		Exposed:        true,
		Name:           "result",
		SubType:        "[]map[string]any",
		Type:           "external",
	},
	"resulttype": {
		AllowedChoices: []string{},
		ConvertedName:  "ResultType",
		Description:    `The type of the result.`,
		Exposed:        true,
		Name:           "resultType",
		Type:           "string",
	},
	"start": {
		AllowedChoices: []string{},
		ConvertedName:  "Start",
		Description: `The start of the time window in any format supported by
https://github.com/araddon/dateparse.`,
		Exposed: true,
		Getter:  true,
		Name:    "start",
		Setter:  true,
		Type:    "string",
	},
	"startrelative": {
		AllowedChoices: []string{},
		ConvertedName:  "StartRelative",
		Description:    `The relative start of the time window as time.Duration.`,
		Exposed:        true,
		Getter:         true,
		Name:           "startRelative",
		Type:           "string",
	},
}

// SparseQueryRangesList represents a list of SparseQueryRanges
type SparseQueryRangesList []*SparseQueryRange

// Identity returns the identity of the objects in the list.
func (o SparseQueryRangesList) Identity() elemental.Identity {

	return QueryRangeIdentity
}

// Copy returns a pointer to a copy the SparseQueryRangesList.
func (o SparseQueryRangesList) Copy() elemental.Identifiables {

	copy := slices.Clone(o)
	return &copy
}

// Append appends the objects to the a new copy of the SparseQueryRangesList.
func (o SparseQueryRangesList) Append(objects ...elemental.Identifiable) elemental.Identifiables {

	out := slices.Clone(o)
	for _, obj := range objects {
		out = append(out, obj.(*SparseQueryRange))
	}

	return out
}

// List converts the object to an elemental.IdentifiablesList.
func (o SparseQueryRangesList) List() elemental.IdentifiablesList {

	out := make(elemental.IdentifiablesList, len(o))
	for i := range len(o) {
		out[i] = o[i]
	}

	return out
}

// DefaultOrder returns the default ordering fields of the content.
func (o SparseQueryRangesList) DefaultOrder() []string {

	return []string{}
}

// ToPlain returns the SparseQueryRangesList converted to QueryRangesList.
func (o SparseQueryRangesList) ToPlain() elemental.IdentifiablesList {

	out := make(elemental.IdentifiablesList, len(o))
	for i := range len(o) {
		out[i] = o[i].ToPlain()
	}

	return out
}

// Version returns the version of the content.
func (o SparseQueryRangesList) Version() int {

	return 1
}

// SparseQueryRange represents the sparse version of a queryrange.
type SparseQueryRange struct {
	// ID is the identifier of the object.
	ID *string `json:"ID,omitempty" msgpack:"ID,omitempty" bson:"-" mapstructure:"ID,omitempty"`

	// Determines the sort order of logs.
	Direction *QueryRangeDirectionValue `json:"direction,omitempty" msgpack:"direction,omitempty" bson:"-" mapstructure:"direction,omitempty"`

	// The end of the time window in any format supported by
	// https://github.com/araddon/dateparse.
	End *string `json:"end,omitempty" msgpack:"end,omitempty" bson:"-" mapstructure:"end,omitempty"`

	// The relative end of the time window as time.Duration.
	EndRelative *string `json:"endRelative,omitempty" msgpack:"endRelative,omitempty" bson:"-" mapstructure:"endRelative,omitempty"`

	// the number of results to return.
	Limit *int `json:"limit,omitempty" msgpack:"limit,omitempty" bson:"-" mapstructure:"limit,omitempty"`

	// The namespace of the object.
	Namespace *string `json:"namespace,omitempty" msgpack:"namespace,omitempty" bson:"namespace,omitempty" mapstructure:"namespace,omitempty"`

	// The query in LogQL format.
	Query *string `json:"query,omitempty" msgpack:"query,omitempty" bson:"-" mapstructure:"query,omitempty"`

	// The result of the request.
	Result *[]map[string]any `json:"result,omitempty" msgpack:"result,omitempty" bson:"-" mapstructure:"result,omitempty"`

	// The type of the result.
	ResultType *string `json:"resultType,omitempty" msgpack:"resultType,omitempty" bson:"-" mapstructure:"resultType,omitempty"`

	// The start of the time window in any format supported by
	// https://github.com/araddon/dateparse.
	Start *string `json:"start,omitempty" msgpack:"start,omitempty" bson:"-" mapstructure:"start,omitempty"`

	// The relative start of the time window as time.Duration.
	StartRelative *string `json:"startRelative,omitempty" msgpack:"startRelative,omitempty" bson:"-" mapstructure:"startRelative,omitempty"`

	ModelVersion int `json:"-" msgpack:"-" bson:"_modelversion"`
}

// NewSparseQueryRange returns a new  SparseQueryRange.
func NewSparseQueryRange() *SparseQueryRange {
	return &SparseQueryRange{}
}

// Identity returns the Identity of the sparse object.
func (o *SparseQueryRange) Identity() elemental.Identity {

	return QueryRangeIdentity
}

// Identifier returns the value of the sparse object's unique identifier.
func (o *SparseQueryRange) Identifier() string {

	if o.ID == nil {
		return ""
	}
	return *o.ID
}

// SetIdentifier sets the value of the sparse object's unique identifier.
func (o *SparseQueryRange) SetIdentifier(id string) {

	if id != "" {
		o.ID = &id
	} else {
		o.ID = nil
	}
}

// GetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *SparseQueryRange) GetBSON() (any, error) {

	if o == nil {
		return nil, nil
	}

	s := &mongoAttributesSparseQueryRange{}

	if o.ID != nil {
		s.ID = bson.ObjectIdHex(*o.ID)
	}
	if o.Namespace != nil {
		s.Namespace = o.Namespace
	}

	return s, nil
}

// SetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *SparseQueryRange) SetBSON(raw bson.Raw) error {

	if o == nil {
		return nil
	}

	s := &mongoAttributesSparseQueryRange{}
	if err := raw.Unmarshal(s); err != nil {
		return err
	}

	id := s.ID.Hex()
	o.ID = &id
	if s.Namespace != nil {
		o.Namespace = s.Namespace
	}

	return nil
}

// Version returns the hardcoded version of the model.
func (o *SparseQueryRange) Version() int {

	return 1
}

// ToPlain returns the plain version of the sparse model.
func (o *SparseQueryRange) ToPlain() elemental.PlainIdentifiable {

	out := NewQueryRange()
	if o.ID != nil {
		out.ID = *o.ID
	}
	if o.Direction != nil {
		out.Direction = *o.Direction
	}
	if o.End != nil {
		out.End = *o.End
	}
	if o.EndRelative != nil {
		out.EndRelative = *o.EndRelative
	}
	if o.Limit != nil {
		out.Limit = *o.Limit
	}
	if o.Namespace != nil {
		out.Namespace = *o.Namespace
	}
	if o.Query != nil {
		out.Query = *o.Query
	}
	if o.Result != nil {
		out.Result = *o.Result
	}
	if o.ResultType != nil {
		out.ResultType = *o.ResultType
	}
	if o.Start != nil {
		out.Start = *o.Start
	}
	if o.StartRelative != nil {
		out.StartRelative = *o.StartRelative
	}

	return out
}

// GetEnd returns the End of the receiver.
func (o *SparseQueryRange) GetEnd() (out string) {

	if o.End == nil {
		return
	}

	return *o.End
}

// SetEnd sets the property End of the receiver using the address of the given value.
func (o *SparseQueryRange) SetEnd(end string) {

	o.End = &end
}

// GetEndRelative returns the EndRelative of the receiver.
func (o *SparseQueryRange) GetEndRelative() (out string) {

	if o.EndRelative == nil {
		return
	}

	return *o.EndRelative
}

// GetNamespace returns the Namespace of the receiver.
func (o *SparseQueryRange) GetNamespace() (out string) {

	if o.Namespace == nil {
		return
	}

	return *o.Namespace
}

// SetNamespace sets the property Namespace of the receiver using the address of the given value.
func (o *SparseQueryRange) SetNamespace(namespace string) {

	o.Namespace = &namespace
}

// GetStart returns the Start of the receiver.
func (o *SparseQueryRange) GetStart() (out string) {

	if o.Start == nil {
		return
	}

	return *o.Start
}

// SetStart sets the property Start of the receiver using the address of the given value.
func (o *SparseQueryRange) SetStart(start string) {

	o.Start = &start
}

// GetStartRelative returns the StartRelative of the receiver.
func (o *SparseQueryRange) GetStartRelative() (out string) {

	if o.StartRelative == nil {
		return
	}

	return *o.StartRelative
}

// DeepCopy returns a deep copy if the SparseQueryRange.
func (o *SparseQueryRange) DeepCopy() *SparseQueryRange {

	if o == nil {
		return nil
	}

	out := &SparseQueryRange{}
	o.DeepCopyInto(out)

	return out
}

// DeepCopyInto copies the receiver into the given *SparseQueryRange.
func (o *SparseQueryRange) DeepCopyInto(out *SparseQueryRange) {

	target, err := copystructure.Copy(o)
	if err != nil {
		panic(fmt.Sprintf("Unable to deepcopy SparseQueryRange: %s", err))
	}

	*out = *target.(*SparseQueryRange)
}

type mongoAttributesQueryRange struct {
	ID        bson.ObjectId `bson:"_id,omitempty"`
	Namespace string        `bson:"namespace,omitempty"`
}
type mongoAttributesSparseQueryRange struct {
	ID        bson.ObjectId `bson:"_id,omitempty"`
	Namespace *string       `bson:"namespace,omitempty"`
}
