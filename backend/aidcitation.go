// Code generated by elegen. DO NOT EDIT.
// Source: go.acuvity.ai/elemental (templates/model.gotpl)

package api

import (
	"fmt"

	"github.com/globalsign/mgo/bson"
	"github.com/mitchellh/copystructure"
	"go.acuvity.ai/elemental"
)

// AIDCitation represents the model of a aidcitation
type AIDCitation struct {
	// An URL for the risk.
	URL string `json:"URL,omitempty" msgpack:"URL,omitempty" bson:"url,omitempty" mapstructure:"URL,omitempty"`

	// A quote extracted from the source.
	Quote string `json:"quote,omitempty" msgpack:"quote,omitempty" bson:"quote,omitempty" mapstructure:"quote,omitempty"`

	// The title of the page.
	Title string `json:"title,omitempty" msgpack:"title,omitempty" bson:"title,omitempty" mapstructure:"title,omitempty"`

	ModelVersion int `json:"-" msgpack:"-" bson:"_modelversion"`
}

// NewAIDCitation returns a new *AIDCitation
func NewAIDCitation() *AIDCitation {

	return &AIDCitation{
		ModelVersion: 1,
	}
}

// GetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *AIDCitation) GetBSON() (any, error) {

	if o == nil {
		return nil, nil
	}

	s := &mongoAttributesAIDCitation{}

	s.URL = o.URL
	s.Quote = o.Quote
	s.Title = o.Title

	return s, nil
}

// SetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *AIDCitation) SetBSON(raw bson.Raw) error {

	if o == nil || raw.Kind == bson.ElementNil {
		return bson.ErrSetZero
	}

	s := &mongoAttributesAIDCitation{}
	if err := raw.Unmarshal(s); err != nil {
		return err
	}

	o.URL = s.URL
	o.Quote = s.Quote
	o.Title = s.Title

	return nil
}

// BleveType implements the bleve.Classifier Interface.
func (o *AIDCitation) BleveType() string {

	return "aidcitation"
}

// DeepCopy returns a deep copy if the AIDCitation.
func (o *AIDCitation) DeepCopy() *AIDCitation {

	if o == nil {
		return nil
	}

	out := &AIDCitation{}
	o.DeepCopyInto(out)

	return out
}

// DeepCopyInto copies the receiver into the given *AIDCitation.
func (o *AIDCitation) DeepCopyInto(out *AIDCitation) {

	target, err := copystructure.Copy(o)
	if err != nil {
		panic(fmt.Sprintf("Unable to deepcopy AIDCitation: %s", err))
	}

	*out = *target.(*AIDCitation)
}

// Validate valides the current information stored into the structure.
func (o *AIDCitation) Validate() error {

	errors := elemental.Errors{}
	requiredErrors := elemental.Errors{}

	if err := elemental.ValidateRequiredString("URL", o.URL); err != nil {
		requiredErrors = requiredErrors.Append(err)
	}

	if err := elemental.ValidateRequiredString("quote", o.Quote); err != nil {
		requiredErrors = requiredErrors.Append(err)
	}

	if err := elemental.ValidateRequiredString("title", o.Title); err != nil {
		requiredErrors = requiredErrors.Append(err)
	}

	if len(requiredErrors) > 0 {
		return requiredErrors
	}

	if len(errors) > 0 {
		return errors
	}

	return nil
}

// SpecificationForAttribute returns the AttributeSpecification for the given attribute name key.
func (*AIDCitation) SpecificationForAttribute(name string) elemental.AttributeSpecification {

	if v, ok := AIDCitationAttributesMap[name]; ok {
		return v
	}

	// We could not find it, so let's check on the lower case indexed spec map
	return AIDCitationLowerCaseAttributesMap[name]
}

// AttributeSpecifications returns the full attribute specifications map.
func (*AIDCitation) AttributeSpecifications() map[string]elemental.AttributeSpecification {

	return AIDCitationAttributesMap
}

// ValueForAttribute returns the value for the given attribute.
// This is a very advanced function that you should not need but in some
// very specific use cases.
func (o *AIDCitation) ValueForAttribute(name string) any {

	switch name {
	case "URL":
		return o.URL
	case "quote":
		return o.Quote
	case "title":
		return o.Title
	}

	return nil
}

// AIDCitationAttributesMap represents the map of attribute for AIDCitation.
var AIDCitationAttributesMap = map[string]elemental.AttributeSpecification{
	"URL": {
		AllowedChoices: []string{},
		BSONFieldName:  "url",
		ConvertedName:  "URL",
		Description:    `An URL for the risk.`,
		Exposed:        true,
		Name:           "URL",
		Required:       true,
		Stored:         true,
		Type:           "string",
	},
	"Quote": {
		AllowedChoices: []string{},
		BSONFieldName:  "quote",
		ConvertedName:  "Quote",
		Description:    `A quote extracted from the source.`,
		Exposed:        true,
		Name:           "quote",
		Required:       true,
		Stored:         true,
		Type:           "string",
	},
	"Title": {
		AllowedChoices: []string{},
		BSONFieldName:  "title",
		ConvertedName:  "Title",
		Description:    `The title of the page.`,
		Exposed:        true,
		Name:           "title",
		Required:       true,
		Stored:         true,
		Type:           "string",
	},
}

// AIDCitationLowerCaseAttributesMap represents the map of attribute for AIDCitation.
var AIDCitationLowerCaseAttributesMap = map[string]elemental.AttributeSpecification{
	"url": {
		AllowedChoices: []string{},
		BSONFieldName:  "url",
		ConvertedName:  "URL",
		Description:    `An URL for the risk.`,
		Exposed:        true,
		Name:           "URL",
		Required:       true,
		Stored:         true,
		Type:           "string",
	},
	"quote": {
		AllowedChoices: []string{},
		BSONFieldName:  "quote",
		ConvertedName:  "Quote",
		Description:    `A quote extracted from the source.`,
		Exposed:        true,
		Name:           "quote",
		Required:       true,
		Stored:         true,
		Type:           "string",
	},
	"title": {
		AllowedChoices: []string{},
		BSONFieldName:  "title",
		ConvertedName:  "Title",
		Description:    `The title of the page.`,
		Exposed:        true,
		Name:           "title",
		Required:       true,
		Stored:         true,
		Type:           "string",
	},
}

type mongoAttributesAIDCitation struct {
	URL   string `bson:"url,omitempty"`
	Quote string `bson:"quote,omitempty"`
	Title string `bson:"title,omitempty"`
}
