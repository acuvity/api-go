// Code generated by elegen. DO NOT EDIT.
// Source: go.acuvity.ai/elemental (templates/model.gotpl)

package api

import (
	"fmt"

	"github.com/globalsign/mgo/bson"
	"github.com/mitchellh/copystructure"
	"go.acuvity.ai/elemental"
)

// Analysis represents the model of a analysis
type Analysis struct {
	// The list of analysis chained to this analyzer analysis.
	Analyses []*Analysis `json:"analyses,omitempty" msgpack:"analyses,omitempty" bson:"-" mapstructure:"analyses,omitempty"`

	// The ID of the analyzer.
	AnalyzerID string `json:"analyzerID" msgpack:"analyzerID" bson:"-" mapstructure:"analyzerID,omitempty"`

	// The list of detections the analyzer returned.
	Detections []*Detection `json:"detections,omitempty" msgpack:"detections,omitempty" bson:"-" mapstructure:"detections,omitempty"`

	// The time taken by the analyzer.
	Duration float64 `json:"duration,omitempty" msgpack:"duration,omitempty" bson:"-" mapstructure:"duration,omitempty"`

	// A list of detections that matches the detection matchers criteria set on
	// analyzers,
	// triggering their execution.
	MatchingDetections []*Detection `json:"matchingDetections,omitempty" msgpack:"matchingDetections,omitempty" bson:"-" mapstructure:"matchingDetections,omitempty"`

	// The reason the analyzer was skipped.
	SkippedReason string `json:"skippedReason,omitempty" msgpack:"skippedReason,omitempty" bson:"-" mapstructure:"skippedReason,omitempty"`

	ModelVersion int `json:"-" msgpack:"-" bson:"_modelversion"`
}

// NewAnalysis returns a new *Analysis
func NewAnalysis() *Analysis {

	return &Analysis{
		ModelVersion: 1,
	}
}

// GetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *Analysis) GetBSON() (any, error) {

	if o == nil {
		return nil, nil
	}

	s := &mongoAttributesAnalysis{}

	return s, nil
}

// SetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *Analysis) SetBSON(raw bson.Raw) error {

	if o == nil {
		return nil
	}

	s := &mongoAttributesAnalysis{}
	if err := raw.Unmarshal(s); err != nil {
		return err
	}

	return nil
}

// BleveType implements the bleve.Classifier Interface.
func (o *Analysis) BleveType() string {

	return "analysis"
}

// DeepCopy returns a deep copy if the Analysis.
func (o *Analysis) DeepCopy() *Analysis {

	if o == nil {
		return nil
	}

	out := &Analysis{}
	o.DeepCopyInto(out)

	return out
}

// DeepCopyInto copies the receiver into the given *Analysis.
func (o *Analysis) DeepCopyInto(out *Analysis) {

	target, err := copystructure.Copy(o)
	if err != nil {
		panic(fmt.Sprintf("Unable to deepcopy Analysis: %s", err))
	}

	*out = *target.(*Analysis)
}

// Validate valides the current information stored into the structure.
func (o *Analysis) Validate() error {

	errors := elemental.Errors{}
	requiredErrors := elemental.Errors{}

	for _, sub := range o.Analyses {
		if sub == nil {
			continue
		}
		elemental.ResetDefaultForZeroValues(sub)
		if err := sub.Validate(); err != nil {
			errors = errors.Append(err)
		}
	}

	for _, sub := range o.Detections {
		if sub == nil {
			continue
		}
		elemental.ResetDefaultForZeroValues(sub)
		if err := sub.Validate(); err != nil {
			errors = errors.Append(err)
		}
	}

	for _, sub := range o.MatchingDetections {
		if sub == nil {
			continue
		}
		elemental.ResetDefaultForZeroValues(sub)
		if err := sub.Validate(); err != nil {
			errors = errors.Append(err)
		}
	}

	if len(requiredErrors) > 0 {
		return requiredErrors
	}

	if len(errors) > 0 {
		return errors
	}

	return nil
}

// SpecificationForAttribute returns the AttributeSpecification for the given attribute name key.
func (*Analysis) SpecificationForAttribute(name string) elemental.AttributeSpecification {

	if v, ok := AnalysisAttributesMap[name]; ok {
		return v
	}

	// We could not find it, so let's check on the lower case indexed spec map
	return AnalysisLowerCaseAttributesMap[name]
}

// AttributeSpecifications returns the full attribute specifications map.
func (*Analysis) AttributeSpecifications() map[string]elemental.AttributeSpecification {

	return AnalysisAttributesMap
}

// ValueForAttribute returns the value for the given attribute.
// This is a very advanced function that you should not need but in some
// very specific use cases.
func (o *Analysis) ValueForAttribute(name string) any {

	switch name {
	case "analyses":
		return o.Analyses
	case "analyzerID":
		return o.AnalyzerID
	case "detections":
		return o.Detections
	case "duration":
		return o.Duration
	case "matchingDetections":
		return o.MatchingDetections
	case "skippedReason":
		return o.SkippedReason
	}

	return nil
}

// AnalysisAttributesMap represents the map of attribute for Analysis.
var AnalysisAttributesMap = map[string]elemental.AttributeSpecification{
	"Analyses": {
		AllowedChoices: []string{},
		ConvertedName:  "Analyses",
		Description:    `The list of analysis chained to this analyzer analysis.`,
		Exposed:        true,
		Name:           "analyses",
		SubType:        "analysis",
		Type:           "refList",
	},
	"AnalyzerID": {
		AllowedChoices: []string{},
		ConvertedName:  "AnalyzerID",
		Description:    `The ID of the analyzer.`,
		Exposed:        true,
		Name:           "analyzerID",
		Type:           "string",
	},
	"Detections": {
		AllowedChoices: []string{},
		ConvertedName:  "Detections",
		Description:    `The list of detections the analyzer returned.`,
		Exposed:        true,
		Name:           "detections",
		SubType:        "detection",
		Type:           "refList",
	},
	"Duration": {
		AllowedChoices: []string{},
		ConvertedName:  "Duration",
		Description:    `The time taken by the analyzer.`,
		Exposed:        true,
		Name:           "duration",
		Type:           "float",
	},
	"MatchingDetections": {
		AllowedChoices: []string{},
		ConvertedName:  "MatchingDetections",
		Description: `A list of detections that matches the detection matchers criteria set on
analyzers,
triggering their execution.`,
		Exposed: true,
		Name:    "matchingDetections",
		SubType: "detection",
		Type:    "refList",
	},
	"SkippedReason": {
		AllowedChoices: []string{},
		ConvertedName:  "SkippedReason",
		Description:    `The reason the analyzer was skipped.`,
		Exposed:        true,
		Name:           "skippedReason",
		Type:           "string",
	},
}

// AnalysisLowerCaseAttributesMap represents the map of attribute for Analysis.
var AnalysisLowerCaseAttributesMap = map[string]elemental.AttributeSpecification{
	"analyses": {
		AllowedChoices: []string{},
		ConvertedName:  "Analyses",
		Description:    `The list of analysis chained to this analyzer analysis.`,
		Exposed:        true,
		Name:           "analyses",
		SubType:        "analysis",
		Type:           "refList",
	},
	"analyzerid": {
		AllowedChoices: []string{},
		ConvertedName:  "AnalyzerID",
		Description:    `The ID of the analyzer.`,
		Exposed:        true,
		Name:           "analyzerID",
		Type:           "string",
	},
	"detections": {
		AllowedChoices: []string{},
		ConvertedName:  "Detections",
		Description:    `The list of detections the analyzer returned.`,
		Exposed:        true,
		Name:           "detections",
		SubType:        "detection",
		Type:           "refList",
	},
	"duration": {
		AllowedChoices: []string{},
		ConvertedName:  "Duration",
		Description:    `The time taken by the analyzer.`,
		Exposed:        true,
		Name:           "duration",
		Type:           "float",
	},
	"matchingdetections": {
		AllowedChoices: []string{},
		ConvertedName:  "MatchingDetections",
		Description: `A list of detections that matches the detection matchers criteria set on
analyzers,
triggering their execution.`,
		Exposed: true,
		Name:    "matchingDetections",
		SubType: "detection",
		Type:    "refList",
	},
	"skippedreason": {
		AllowedChoices: []string{},
		ConvertedName:  "SkippedReason",
		Description:    `The reason the analyzer was skipped.`,
		Exposed:        true,
		Name:           "skippedReason",
		Type:           "string",
	},
}

type mongoAttributesAnalysis struct {
}
