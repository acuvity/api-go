// Code generated by elegen. DO NOT EDIT.
// Source: go.acuvity.ai/elemental (templates/model.gotpl)

package api

import (
	"fmt"
	"slices"
	"time"

	"github.com/globalsign/mgo/bson"
	"github.com/mitchellh/copystructure"
	"go.acuvity.ai/elemental"
)

// DataSetSensitivityValue represents the possible values for attribute "sensitivity".
type DataSetSensitivityValue string

const (
	// DataSetSensitivityHigh represents the value High.
	DataSetSensitivityHigh DataSetSensitivityValue = "High"

	// DataSetSensitivityLow represents the value Low.
	DataSetSensitivityLow DataSetSensitivityValue = "Low"

	// DataSetSensitivityMedium represents the value Medium.
	DataSetSensitivityMedium DataSetSensitivityValue = "Medium"
)

// DataSetIdentity represents the Identity of the object.
var DataSetIdentity = elemental.Identity{
	Name:     "dataset",
	Category: "datasets",
	Package:  "lain",
	Private:  false,
}

// DataSetsList represents a list of DataSets
type DataSetsList []*DataSet

// Identity returns the identity of the objects in the list.
func (o DataSetsList) Identity() elemental.Identity {

	return DataSetIdentity
}

// Copy returns a pointer to a copy the DataSetsList.
func (o DataSetsList) Copy() elemental.Identifiables {

	out := slices.Clone(o)
	return &out
}

// Append appends the objects to the a new copy of the DataSetsList.
func (o DataSetsList) Append(objects ...elemental.Identifiable) elemental.Identifiables {

	out := slices.Clone(o)
	for _, obj := range objects {
		out = append(out, obj.(*DataSet))
	}

	return out
}

// List converts the object to an elemental.IdentifiablesList.
func (o DataSetsList) List() elemental.IdentifiablesList {

	out := make(elemental.IdentifiablesList, len(o))
	for i := range len(o) {
		out[i] = o[i]
	}

	return out
}

// DefaultOrder returns the default ordering fields of the content.
func (o DataSetsList) DefaultOrder() []string {

	return []string{}
}

// ToSparse returns the DataSetsList converted to SparseDataSetsList.
// Objects in the list will only contain the given fields. No field means entire field set.
func (o DataSetsList) ToSparse(fields ...string) elemental.Identifiables {

	out := make(SparseDataSetsList, len(o))
	for i := range len(o) {
		out[i] = o[i].ToSparse(fields...).(*SparseDataSet)
	}

	return out
}

// Version returns the version of the content.
func (o DataSetsList) Version() int {

	return 1
}

// DataSet represents the model of a dataset
type DataSet struct {
	// ID is the identifier of the object.
	ID string `json:"ID,omitempty" msgpack:"ID,omitempty" bson:"-" mapstructure:"ID,omitempty"`

	// Creation date of the object.
	CreateTime time.Time `json:"createTime" msgpack:"createTime" bson:"createtime" mapstructure:"createTime,omitempty"`

	// A list of all the data types which are associated to this data set.
	DataTypes []string `json:"dataTypes" msgpack:"dataTypes" bson:"datatypes" mapstructure:"dataTypes,omitempty"`

	// Description of the dataSet.
	Description string `json:"description" msgpack:"description" bson:"description" mapstructure:"description,omitempty"`

	// Friendly name of the object.
	FriendlyName string `json:"friendlyName" msgpack:"friendlyName" bson:"friendlyname" mapstructure:"friendlyName,omitempty"`

	// The hash of the structure used to compare with new import version.
	ImportHash string `json:"importHash,omitempty" msgpack:"importHash,omitempty" bson:"importhash,omitempty" mapstructure:"importHash,omitempty"`

	// The user-defined import label that allows the system to group resources from the
	// same import operation.
	ImportLabel string `json:"importLabel,omitempty" msgpack:"importLabel,omitempty" bson:"importlabel,omitempty" mapstructure:"importLabel,omitempty"`

	// The internal reference name of the object. It is a sanitized version of Friendly
	// Name if empty.
	Name string `json:"name" msgpack:"name" bson:"name" mapstructure:"name,omitempty"`

	// The namespace of the object.
	Namespace string `json:"namespace,omitempty" msgpack:"namespace,omitempty" bson:"namespace,omitempty" mapstructure:"namespace,omitempty"`

	// Propagates the object to all child namespaces. This is always true.
	Propagate bool `json:"propagate" msgpack:"propagate" bson:"propagate" mapstructure:"propagate,omitempty"`

	// Describe the sensitity of the dataSet.
	Sensitivity DataSetSensitivityValue `json:"sensitivity" msgpack:"sensitivity" bson:"sensitivity" mapstructure:"sensitivity,omitempty"`

	// Last update date of the object.
	UpdateTime time.Time `json:"updateTime" msgpack:"updateTime" bson:"updatetime" mapstructure:"updateTime,omitempty"`

	// Hash of the object used to shard the data.
	ZHash int `json:"-" msgpack:"-" bson:"zhash" mapstructure:"-,omitempty"`

	// Sharding zone.
	Zone int `json:"-" msgpack:"-" bson:"zone" mapstructure:"-,omitempty"`

	ModelVersion int `json:"-" msgpack:"-" bson:"_modelversion"`
}

// NewDataSet returns a new *DataSet
func NewDataSet() *DataSet {

	return &DataSet{
		ModelVersion: 1,
		DataTypes:    []string{},
		Propagate:    true,
		Sensitivity:  DataSetSensitivityHigh,
	}
}

// Identity returns the Identity of the object.
func (o *DataSet) Identity() elemental.Identity {

	return DataSetIdentity
}

// Identifier returns the value of the object's unique identifier.
func (o *DataSet) Identifier() string {

	return o.ID
}

// SetIdentifier sets the value of the object's unique identifier.
func (o *DataSet) SetIdentifier(id string) {

	o.ID = id
}

// GetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *DataSet) GetBSON() (any, error) {

	if o == nil {
		return nil, nil
	}

	s := &mongoAttributesDataSet{}

	if o.ID != "" {
		s.ID = bson.ObjectIdHex(o.ID)
	}
	s.CreateTime = o.CreateTime
	s.DataTypes = o.DataTypes
	s.Description = o.Description
	s.FriendlyName = o.FriendlyName
	s.ImportHash = o.ImportHash
	s.ImportLabel = o.ImportLabel
	s.Name = o.Name
	s.Namespace = o.Namespace
	s.Propagate = o.Propagate
	s.Sensitivity = o.Sensitivity
	s.UpdateTime = o.UpdateTime
	s.ZHash = o.ZHash
	s.Zone = o.Zone

	return s, nil
}

// SetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *DataSet) SetBSON(raw bson.Raw) error {

	if o == nil {
		return nil
	}

	s := &mongoAttributesDataSet{}
	if err := raw.Unmarshal(s); err != nil {
		return err
	}

	o.ID = s.ID.Hex()
	o.CreateTime = s.CreateTime
	o.DataTypes = s.DataTypes
	o.Description = s.Description
	o.FriendlyName = s.FriendlyName
	o.ImportHash = s.ImportHash
	o.ImportLabel = s.ImportLabel
	o.Name = s.Name
	o.Namespace = s.Namespace
	o.Propagate = s.Propagate
	o.Sensitivity = s.Sensitivity
	o.UpdateTime = s.UpdateTime
	o.ZHash = s.ZHash
	o.Zone = s.Zone

	return nil
}

// Version returns the hardcoded version of the model.
func (o *DataSet) Version() int {

	return 1
}

// BleveType implements the bleve.Classifier Interface.
func (o *DataSet) BleveType() string {

	return "dataset"
}

// DefaultOrder returns the list of default ordering fields.
func (o *DataSet) DefaultOrder() []string {

	return []string{}
}

// Doc returns the documentation for the object
func (o *DataSet) Doc() string {

	return `Allows to create a dataSet.`
}

func (o *DataSet) String() string {

	return fmt.Sprintf("<%s:%s>", o.Identity().Name, o.Identifier())
}

// GetCreateTime returns the CreateTime of the receiver.
func (o *DataSet) GetCreateTime() time.Time {

	return o.CreateTime
}

// SetCreateTime sets the property CreateTime of the receiver using the given value.
func (o *DataSet) SetCreateTime(createTime time.Time) {

	o.CreateTime = createTime
}

// GetImportHash returns the ImportHash of the receiver.
func (o *DataSet) GetImportHash() string {

	return o.ImportHash
}

// SetImportHash sets the property ImportHash of the receiver using the given value.
func (o *DataSet) SetImportHash(importHash string) {

	o.ImportHash = importHash
}

// GetImportLabel returns the ImportLabel of the receiver.
func (o *DataSet) GetImportLabel() string {

	return o.ImportLabel
}

// SetImportLabel sets the property ImportLabel of the receiver using the given value.
func (o *DataSet) SetImportLabel(importLabel string) {

	o.ImportLabel = importLabel
}

// GetNamespace returns the Namespace of the receiver.
func (o *DataSet) GetNamespace() string {

	return o.Namespace
}

// SetNamespace sets the property Namespace of the receiver using the given value.
func (o *DataSet) SetNamespace(namespace string) {

	o.Namespace = namespace
}

// GetPropagate returns the Propagate of the receiver.
func (o *DataSet) GetPropagate() bool {

	return o.Propagate
}

// SetPropagate sets the property Propagate of the receiver using the given value.
func (o *DataSet) SetPropagate(propagate bool) {

	o.Propagate = propagate
}

// GetUpdateTime returns the UpdateTime of the receiver.
func (o *DataSet) GetUpdateTime() time.Time {

	return o.UpdateTime
}

// SetUpdateTime sets the property UpdateTime of the receiver using the given value.
func (o *DataSet) SetUpdateTime(updateTime time.Time) {

	o.UpdateTime = updateTime
}

// ToSparse returns the sparse version of the model.
// The returned object will only contain the given fields. No field means entire field set.
func (o *DataSet) ToSparse(fields ...string) elemental.SparseIdentifiable {

	if len(fields) == 0 {
		// nolint: goimports
		return &SparseDataSet{
			ID:           &o.ID,
			CreateTime:   &o.CreateTime,
			DataTypes:    &o.DataTypes,
			Description:  &o.Description,
			FriendlyName: &o.FriendlyName,
			ImportHash:   &o.ImportHash,
			ImportLabel:  &o.ImportLabel,
			Name:         &o.Name,
			Namespace:    &o.Namespace,
			Propagate:    &o.Propagate,
			Sensitivity:  &o.Sensitivity,
			UpdateTime:   &o.UpdateTime,
			ZHash:        &o.ZHash,
			Zone:         &o.Zone,
		}
	}

	sp := &SparseDataSet{}
	for _, f := range fields {
		switch f {
		case "ID":
			sp.ID = &(o.ID)
		case "createTime":
			sp.CreateTime = &(o.CreateTime)
		case "dataTypes":
			sp.DataTypes = &(o.DataTypes)
		case "description":
			sp.Description = &(o.Description)
		case "friendlyName":
			sp.FriendlyName = &(o.FriendlyName)
		case "importHash":
			sp.ImportHash = &(o.ImportHash)
		case "importLabel":
			sp.ImportLabel = &(o.ImportLabel)
		case "name":
			sp.Name = &(o.Name)
		case "namespace":
			sp.Namespace = &(o.Namespace)
		case "propagate":
			sp.Propagate = &(o.Propagate)
		case "sensitivity":
			sp.Sensitivity = &(o.Sensitivity)
		case "updateTime":
			sp.UpdateTime = &(o.UpdateTime)
		case "zHash":
			sp.ZHash = &(o.ZHash)
		case "zone":
			sp.Zone = &(o.Zone)
		}
	}

	return sp
}

// Patch apply the non nil value of a *SparseDataSet to the object.
func (o *DataSet) Patch(sparse elemental.SparseIdentifiable) {
	if !sparse.Identity().IsEqual(o.Identity()) {
		panic("cannot patch from a parse with different identity")
	}

	so := sparse.(*SparseDataSet)
	if so.ID != nil {
		o.ID = *so.ID
	}
	if so.CreateTime != nil {
		o.CreateTime = *so.CreateTime
	}
	if so.DataTypes != nil {
		o.DataTypes = *so.DataTypes
	}
	if so.Description != nil {
		o.Description = *so.Description
	}
	if so.FriendlyName != nil {
		o.FriendlyName = *so.FriendlyName
	}
	if so.ImportHash != nil {
		o.ImportHash = *so.ImportHash
	}
	if so.ImportLabel != nil {
		o.ImportLabel = *so.ImportLabel
	}
	if so.Name != nil {
		o.Name = *so.Name
	}
	if so.Namespace != nil {
		o.Namespace = *so.Namespace
	}
	if so.Propagate != nil {
		o.Propagate = *so.Propagate
	}
	if so.Sensitivity != nil {
		o.Sensitivity = *so.Sensitivity
	}
	if so.UpdateTime != nil {
		o.UpdateTime = *so.UpdateTime
	}
	if so.ZHash != nil {
		o.ZHash = *so.ZHash
	}
	if so.Zone != nil {
		o.Zone = *so.Zone
	}
}

// DeepCopy returns a deep copy if the DataSet.
func (o *DataSet) DeepCopy() *DataSet {

	if o == nil {
		return nil
	}

	out := &DataSet{}
	o.DeepCopyInto(out)

	return out
}

// DeepCopyInto copies the receiver into the given *DataSet.
func (o *DataSet) DeepCopyInto(out *DataSet) {

	target, err := copystructure.Copy(o)
	if err != nil {
		panic(fmt.Sprintf("Unable to deepcopy DataSet: %s", err))
	}

	*out = *target.(*DataSet)
}

// Validate valides the current information stored into the structure.
func (o *DataSet) Validate() error {

	errors := elemental.Errors{}
	requiredErrors := elemental.Errors{}

	if err := elemental.ValidateRequiredString("friendlyName", o.FriendlyName); err != nil {
		requiredErrors = requiredErrors.Append(err)
	}

	if err := ValidateFriendlyName("friendlyName", o.FriendlyName); err != nil {
		errors = errors.Append(err)
	}

	if err := elemental.ValidatePattern("name", o.Name, `^[a-zA-Z0-9-_]+$`, `must only contain alpha numerical characters, '-' or '_'.`, false); err != nil {
		errors = errors.Append(err)
	}

	if err := elemental.ValidateStringInList("sensitivity", string(o.Sensitivity), []string{"Low", "Medium", "High"}, false); err != nil {
		errors = errors.Append(err)
	}

	if len(requiredErrors) > 0 {
		return requiredErrors
	}

	if len(errors) > 0 {
		return errors
	}

	return nil
}

// SpecificationForAttribute returns the AttributeSpecification for the given attribute name key.
func (*DataSet) SpecificationForAttribute(name string) elemental.AttributeSpecification {

	if v, ok := DataSetAttributesMap[name]; ok {
		return v
	}

	// We could not find it, so let's check on the lower case indexed spec map
	return DataSetLowerCaseAttributesMap[name]
}

// AttributeSpecifications returns the full attribute specifications map.
func (*DataSet) AttributeSpecifications() map[string]elemental.AttributeSpecification {

	return DataSetAttributesMap
}

// ValueForAttribute returns the value for the given attribute.
// This is a very advanced function that you should not need but in some
// very specific use cases.
func (o *DataSet) ValueForAttribute(name string) any {

	switch name {
	case "ID":
		return o.ID
	case "createTime":
		return o.CreateTime
	case "dataTypes":
		return o.DataTypes
	case "description":
		return o.Description
	case "friendlyName":
		return o.FriendlyName
	case "importHash":
		return o.ImportHash
	case "importLabel":
		return o.ImportLabel
	case "name":
		return o.Name
	case "namespace":
		return o.Namespace
	case "propagate":
		return o.Propagate
	case "sensitivity":
		return o.Sensitivity
	case "updateTime":
		return o.UpdateTime
	case "zHash":
		return o.ZHash
	case "zone":
		return o.Zone
	}

	return nil
}

// DataSetAttributesMap represents the map of attribute for DataSet.
var DataSetAttributesMap = map[string]elemental.AttributeSpecification{
	"ID": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "_id",
		ConvertedName:  "ID",
		Description:    `ID is the identifier of the object.`,
		Exposed:        true,
		Filterable:     true,
		Identifier:     true,
		Name:           "ID",
		Orderable:      true,
		ReadOnly:       true,
		Stored:         true,
		Type:           "string",
	},
	"CreateTime": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "createtime",
		ConvertedName:  "CreateTime",
		Description:    `Creation date of the object.`,
		Exposed:        true,
		Getter:         true,
		Name:           "createTime",
		Orderable:      true,
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Type:           "time",
	},
	"DataTypes": {
		AllowedChoices: []string{},
		BSONFieldName:  "datatypes",
		ConvertedName:  "DataTypes",
		Description:    `A list of all the data types which are associated to this data set.`,
		Exposed:        true,
		Name:           "dataTypes",
		Stored:         true,
		SubType:        "string",
		Type:           "list",
	},
	"Description": {
		AllowedChoices: []string{},
		BSONFieldName:  "description",
		ConvertedName:  "Description",
		Description:    `Description of the dataSet.`,
		Exposed:        true,
		Name:           "description",
		Stored:         true,
		Type:           "string",
	},
	"FriendlyName": {
		AllowedChoices: []string{},
		BSONFieldName:  "friendlyname",
		ConvertedName:  "FriendlyName",
		Description:    `Friendly name of the object.`,
		Exposed:        true,
		Name:           "friendlyName",
		Required:       true,
		Stored:         true,
		Type:           "string",
	},
	"ImportHash": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "importhash",
		ConvertedName:  "ImportHash",
		CreationOnly:   true,
		Description:    `The hash of the structure used to compare with new import version.`,
		Exposed:        true,
		Getter:         true,
		Name:           "importHash",
		Setter:         true,
		Stored:         true,
		Type:           "string",
	},
	"ImportLabel": {
		AllowedChoices: []string{},
		BSONFieldName:  "importlabel",
		ConvertedName:  "ImportLabel",
		CreationOnly:   true,
		Description: `The user-defined import label that allows the system to group resources from the
same import operation.`,
		Exposed: true,
		Getter:  true,
		Name:    "importLabel",
		Setter:  true,
		Stored:  true,
		Type:    "string",
	},
	"Name": {
		AllowedChars:   `^[a-zA-Z0-9-_]+$`,
		AllowedChoices: []string{},
		BSONFieldName:  "name",
		ConvertedName:  "Name",
		CreationOnly:   true,
		Description: `The internal reference name of the object. It is a sanitized version of Friendly
Name if empty.`,
		Exposed: true,
		Name:    "name",
		Stored:  true,
		Type:    "string",
	},
	"Namespace": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "namespace",
		ConvertedName:  "Namespace",
		Description:    `The namespace of the object.`,
		Exposed:        true,
		Getter:         true,
		Name:           "namespace",
		Orderable:      true,
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Type:           "string",
	},
	"Propagate": {
		AllowedChoices: []string{},
		BSONFieldName:  "propagate",
		ConvertedName:  "Propagate",
		DefaultValue:   true,
		Description:    `Propagates the object to all child namespaces. This is always true.`,
		Exposed:        true,
		Getter:         true,
		Name:           "propagate",
		Setter:         true,
		Stored:         true,
		Type:           "boolean",
	},
	"Sensitivity": {
		AllowedChoices: []string{"Low", "Medium", "High"},
		BSONFieldName:  "sensitivity",
		ConvertedName:  "Sensitivity",
		DefaultValue:   DataSetSensitivityHigh,
		Description:    `Describe the sensitity of the dataSet.`,
		Exposed:        true,
		Name:           "sensitivity",
		Stored:         true,
		Type:           "enum",
	},
	"UpdateTime": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "updatetime",
		ConvertedName:  "UpdateTime",
		Description:    `Last update date of the object.`,
		Exposed:        true,
		Getter:         true,
		Name:           "updateTime",
		Orderable:      true,
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Type:           "time",
	},
}

// DataSetLowerCaseAttributesMap represents the map of attribute for DataSet.
var DataSetLowerCaseAttributesMap = map[string]elemental.AttributeSpecification{
	"id": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "_id",
		ConvertedName:  "ID",
		Description:    `ID is the identifier of the object.`,
		Exposed:        true,
		Filterable:     true,
		Identifier:     true,
		Name:           "ID",
		Orderable:      true,
		ReadOnly:       true,
		Stored:         true,
		Type:           "string",
	},
	"createtime": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "createtime",
		ConvertedName:  "CreateTime",
		Description:    `Creation date of the object.`,
		Exposed:        true,
		Getter:         true,
		Name:           "createTime",
		Orderable:      true,
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Type:           "time",
	},
	"datatypes": {
		AllowedChoices: []string{},
		BSONFieldName:  "datatypes",
		ConvertedName:  "DataTypes",
		Description:    `A list of all the data types which are associated to this data set.`,
		Exposed:        true,
		Name:           "dataTypes",
		Stored:         true,
		SubType:        "string",
		Type:           "list",
	},
	"description": {
		AllowedChoices: []string{},
		BSONFieldName:  "description",
		ConvertedName:  "Description",
		Description:    `Description of the dataSet.`,
		Exposed:        true,
		Name:           "description",
		Stored:         true,
		Type:           "string",
	},
	"friendlyname": {
		AllowedChoices: []string{},
		BSONFieldName:  "friendlyname",
		ConvertedName:  "FriendlyName",
		Description:    `Friendly name of the object.`,
		Exposed:        true,
		Name:           "friendlyName",
		Required:       true,
		Stored:         true,
		Type:           "string",
	},
	"importhash": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "importhash",
		ConvertedName:  "ImportHash",
		CreationOnly:   true,
		Description:    `The hash of the structure used to compare with new import version.`,
		Exposed:        true,
		Getter:         true,
		Name:           "importHash",
		Setter:         true,
		Stored:         true,
		Type:           "string",
	},
	"importlabel": {
		AllowedChoices: []string{},
		BSONFieldName:  "importlabel",
		ConvertedName:  "ImportLabel",
		CreationOnly:   true,
		Description: `The user-defined import label that allows the system to group resources from the
same import operation.`,
		Exposed: true,
		Getter:  true,
		Name:    "importLabel",
		Setter:  true,
		Stored:  true,
		Type:    "string",
	},
	"name": {
		AllowedChars:   `^[a-zA-Z0-9-_]+$`,
		AllowedChoices: []string{},
		BSONFieldName:  "name",
		ConvertedName:  "Name",
		CreationOnly:   true,
		Description: `The internal reference name of the object. It is a sanitized version of Friendly
Name if empty.`,
		Exposed: true,
		Name:    "name",
		Stored:  true,
		Type:    "string",
	},
	"namespace": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "namespace",
		ConvertedName:  "Namespace",
		Description:    `The namespace of the object.`,
		Exposed:        true,
		Getter:         true,
		Name:           "namespace",
		Orderable:      true,
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Type:           "string",
	},
	"propagate": {
		AllowedChoices: []string{},
		BSONFieldName:  "propagate",
		ConvertedName:  "Propagate",
		DefaultValue:   true,
		Description:    `Propagates the object to all child namespaces. This is always true.`,
		Exposed:        true,
		Getter:         true,
		Name:           "propagate",
		Setter:         true,
		Stored:         true,
		Type:           "boolean",
	},
	"sensitivity": {
		AllowedChoices: []string{"Low", "Medium", "High"},
		BSONFieldName:  "sensitivity",
		ConvertedName:  "Sensitivity",
		DefaultValue:   DataSetSensitivityHigh,
		Description:    `Describe the sensitity of the dataSet.`,
		Exposed:        true,
		Name:           "sensitivity",
		Stored:         true,
		Type:           "enum",
	},
	"updatetime": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "updatetime",
		ConvertedName:  "UpdateTime",
		Description:    `Last update date of the object.`,
		Exposed:        true,
		Getter:         true,
		Name:           "updateTime",
		Orderable:      true,
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Type:           "time",
	},
}

// SparseDataSetsList represents a list of SparseDataSets
type SparseDataSetsList []*SparseDataSet

// Identity returns the identity of the objects in the list.
func (o SparseDataSetsList) Identity() elemental.Identity {

	return DataSetIdentity
}

// Copy returns a pointer to a copy the SparseDataSetsList.
func (o SparseDataSetsList) Copy() elemental.Identifiables {

	copy := slices.Clone(o)
	return &copy
}

// Append appends the objects to the a new copy of the SparseDataSetsList.
func (o SparseDataSetsList) Append(objects ...elemental.Identifiable) elemental.Identifiables {

	out := slices.Clone(o)
	for _, obj := range objects {
		out = append(out, obj.(*SparseDataSet))
	}

	return out
}

// List converts the object to an elemental.IdentifiablesList.
func (o SparseDataSetsList) List() elemental.IdentifiablesList {

	out := make(elemental.IdentifiablesList, len(o))
	for i := range len(o) {
		out[i] = o[i]
	}

	return out
}

// DefaultOrder returns the default ordering fields of the content.
func (o SparseDataSetsList) DefaultOrder() []string {

	return []string{}
}

// ToPlain returns the SparseDataSetsList converted to DataSetsList.
func (o SparseDataSetsList) ToPlain() elemental.IdentifiablesList {

	out := make(elemental.IdentifiablesList, len(o))
	for i := range len(o) {
		out[i] = o[i].ToPlain()
	}

	return out
}

// Version returns the version of the content.
func (o SparseDataSetsList) Version() int {

	return 1
}

// SparseDataSet represents the sparse version of a dataset.
type SparseDataSet struct {
	// ID is the identifier of the object.
	ID *string `json:"ID,omitempty" msgpack:"ID,omitempty" bson:"-" mapstructure:"ID,omitempty"`

	// Creation date of the object.
	CreateTime *time.Time `json:"createTime,omitempty" msgpack:"createTime,omitempty" bson:"createtime,omitempty" mapstructure:"createTime,omitempty"`

	// A list of all the data types which are associated to this data set.
	DataTypes *[]string `json:"dataTypes,omitempty" msgpack:"dataTypes,omitempty" bson:"datatypes,omitempty" mapstructure:"dataTypes,omitempty"`

	// Description of the dataSet.
	Description *string `json:"description,omitempty" msgpack:"description,omitempty" bson:"description,omitempty" mapstructure:"description,omitempty"`

	// Friendly name of the object.
	FriendlyName *string `json:"friendlyName,omitempty" msgpack:"friendlyName,omitempty" bson:"friendlyname,omitempty" mapstructure:"friendlyName,omitempty"`

	// The hash of the structure used to compare with new import version.
	ImportHash *string `json:"importHash,omitempty" msgpack:"importHash,omitempty" bson:"importhash,omitempty" mapstructure:"importHash,omitempty"`

	// The user-defined import label that allows the system to group resources from the
	// same import operation.
	ImportLabel *string `json:"importLabel,omitempty" msgpack:"importLabel,omitempty" bson:"importlabel,omitempty" mapstructure:"importLabel,omitempty"`

	// The internal reference name of the object. It is a sanitized version of Friendly
	// Name if empty.
	Name *string `json:"name,omitempty" msgpack:"name,omitempty" bson:"name,omitempty" mapstructure:"name,omitempty"`

	// The namespace of the object.
	Namespace *string `json:"namespace,omitempty" msgpack:"namespace,omitempty" bson:"namespace,omitempty" mapstructure:"namespace,omitempty"`

	// Propagates the object to all child namespaces. This is always true.
	Propagate *bool `json:"propagate,omitempty" msgpack:"propagate,omitempty" bson:"propagate,omitempty" mapstructure:"propagate,omitempty"`

	// Describe the sensitity of the dataSet.
	Sensitivity *DataSetSensitivityValue `json:"sensitivity,omitempty" msgpack:"sensitivity,omitempty" bson:"sensitivity,omitempty" mapstructure:"sensitivity,omitempty"`

	// Last update date of the object.
	UpdateTime *time.Time `json:"updateTime,omitempty" msgpack:"updateTime,omitempty" bson:"updatetime,omitempty" mapstructure:"updateTime,omitempty"`

	// Hash of the object used to shard the data.
	ZHash *int `json:"-" msgpack:"-" bson:"zhash,omitempty" mapstructure:"-,omitempty"`

	// Sharding zone.
	Zone *int `json:"-" msgpack:"-" bson:"zone,omitempty" mapstructure:"-,omitempty"`

	ModelVersion int `json:"-" msgpack:"-" bson:"_modelversion"`
}

// NewSparseDataSet returns a new  SparseDataSet.
func NewSparseDataSet() *SparseDataSet {
	return &SparseDataSet{}
}

// Identity returns the Identity of the sparse object.
func (o *SparseDataSet) Identity() elemental.Identity {

	return DataSetIdentity
}

// Identifier returns the value of the sparse object's unique identifier.
func (o *SparseDataSet) Identifier() string {

	if o.ID == nil {
		return ""
	}
	return *o.ID
}

// SetIdentifier sets the value of the sparse object's unique identifier.
func (o *SparseDataSet) SetIdentifier(id string) {

	if id != "" {
		o.ID = &id
	} else {
		o.ID = nil
	}
}

// GetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *SparseDataSet) GetBSON() (any, error) {

	if o == nil {
		return nil, nil
	}

	s := &mongoAttributesSparseDataSet{}

	if o.ID != nil {
		s.ID = bson.ObjectIdHex(*o.ID)
	}
	if o.CreateTime != nil {
		s.CreateTime = o.CreateTime
	}
	if o.DataTypes != nil {
		s.DataTypes = o.DataTypes
	}
	if o.Description != nil {
		s.Description = o.Description
	}
	if o.FriendlyName != nil {
		s.FriendlyName = o.FriendlyName
	}
	if o.ImportHash != nil {
		s.ImportHash = o.ImportHash
	}
	if o.ImportLabel != nil {
		s.ImportLabel = o.ImportLabel
	}
	if o.Name != nil {
		s.Name = o.Name
	}
	if o.Namespace != nil {
		s.Namespace = o.Namespace
	}
	if o.Propagate != nil {
		s.Propagate = o.Propagate
	}
	if o.Sensitivity != nil {
		s.Sensitivity = o.Sensitivity
	}
	if o.UpdateTime != nil {
		s.UpdateTime = o.UpdateTime
	}
	if o.ZHash != nil {
		s.ZHash = o.ZHash
	}
	if o.Zone != nil {
		s.Zone = o.Zone
	}

	return s, nil
}

// SetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *SparseDataSet) SetBSON(raw bson.Raw) error {

	if o == nil {
		return nil
	}

	s := &mongoAttributesSparseDataSet{}
	if err := raw.Unmarshal(s); err != nil {
		return err
	}

	id := s.ID.Hex()
	o.ID = &id
	if s.CreateTime != nil {
		o.CreateTime = s.CreateTime
	}
	if s.DataTypes != nil {
		o.DataTypes = s.DataTypes
	}
	if s.Description != nil {
		o.Description = s.Description
	}
	if s.FriendlyName != nil {
		o.FriendlyName = s.FriendlyName
	}
	if s.ImportHash != nil {
		o.ImportHash = s.ImportHash
	}
	if s.ImportLabel != nil {
		o.ImportLabel = s.ImportLabel
	}
	if s.Name != nil {
		o.Name = s.Name
	}
	if s.Namespace != nil {
		o.Namespace = s.Namespace
	}
	if s.Propagate != nil {
		o.Propagate = s.Propagate
	}
	if s.Sensitivity != nil {
		o.Sensitivity = s.Sensitivity
	}
	if s.UpdateTime != nil {
		o.UpdateTime = s.UpdateTime
	}
	if s.ZHash != nil {
		o.ZHash = s.ZHash
	}
	if s.Zone != nil {
		o.Zone = s.Zone
	}

	return nil
}

// Version returns the hardcoded version of the model.
func (o *SparseDataSet) Version() int {

	return 1
}

// ToPlain returns the plain version of the sparse model.
func (o *SparseDataSet) ToPlain() elemental.PlainIdentifiable {

	out := NewDataSet()
	if o.ID != nil {
		out.ID = *o.ID
	}
	if o.CreateTime != nil {
		out.CreateTime = *o.CreateTime
	}
	if o.DataTypes != nil {
		out.DataTypes = *o.DataTypes
	}
	if o.Description != nil {
		out.Description = *o.Description
	}
	if o.FriendlyName != nil {
		out.FriendlyName = *o.FriendlyName
	}
	if o.ImportHash != nil {
		out.ImportHash = *o.ImportHash
	}
	if o.ImportLabel != nil {
		out.ImportLabel = *o.ImportLabel
	}
	if o.Name != nil {
		out.Name = *o.Name
	}
	if o.Namespace != nil {
		out.Namespace = *o.Namespace
	}
	if o.Propagate != nil {
		out.Propagate = *o.Propagate
	}
	if o.Sensitivity != nil {
		out.Sensitivity = *o.Sensitivity
	}
	if o.UpdateTime != nil {
		out.UpdateTime = *o.UpdateTime
	}
	if o.ZHash != nil {
		out.ZHash = *o.ZHash
	}
	if o.Zone != nil {
		out.Zone = *o.Zone
	}

	return out
}

// GetCreateTime returns the CreateTime of the receiver.
func (o *SparseDataSet) GetCreateTime() (out time.Time) {

	if o.CreateTime == nil {
		return
	}

	return *o.CreateTime
}

// SetCreateTime sets the property CreateTime of the receiver using the address of the given value.
func (o *SparseDataSet) SetCreateTime(createTime time.Time) {

	o.CreateTime = &createTime
}

// GetImportHash returns the ImportHash of the receiver.
func (o *SparseDataSet) GetImportHash() (out string) {

	if o.ImportHash == nil {
		return
	}

	return *o.ImportHash
}

// SetImportHash sets the property ImportHash of the receiver using the address of the given value.
func (o *SparseDataSet) SetImportHash(importHash string) {

	o.ImportHash = &importHash
}

// GetImportLabel returns the ImportLabel of the receiver.
func (o *SparseDataSet) GetImportLabel() (out string) {

	if o.ImportLabel == nil {
		return
	}

	return *o.ImportLabel
}

// SetImportLabel sets the property ImportLabel of the receiver using the address of the given value.
func (o *SparseDataSet) SetImportLabel(importLabel string) {

	o.ImportLabel = &importLabel
}

// GetNamespace returns the Namespace of the receiver.
func (o *SparseDataSet) GetNamespace() (out string) {

	if o.Namespace == nil {
		return
	}

	return *o.Namespace
}

// SetNamespace sets the property Namespace of the receiver using the address of the given value.
func (o *SparseDataSet) SetNamespace(namespace string) {

	o.Namespace = &namespace
}

// GetPropagate returns the Propagate of the receiver.
func (o *SparseDataSet) GetPropagate() (out bool) {

	if o.Propagate == nil {
		return
	}

	return *o.Propagate
}

// SetPropagate sets the property Propagate of the receiver using the address of the given value.
func (o *SparseDataSet) SetPropagate(propagate bool) {

	o.Propagate = &propagate
}

// GetUpdateTime returns the UpdateTime of the receiver.
func (o *SparseDataSet) GetUpdateTime() (out time.Time) {

	if o.UpdateTime == nil {
		return
	}

	return *o.UpdateTime
}

// SetUpdateTime sets the property UpdateTime of the receiver using the address of the given value.
func (o *SparseDataSet) SetUpdateTime(updateTime time.Time) {

	o.UpdateTime = &updateTime
}

// DeepCopy returns a deep copy if the SparseDataSet.
func (o *SparseDataSet) DeepCopy() *SparseDataSet {

	if o == nil {
		return nil
	}

	out := &SparseDataSet{}
	o.DeepCopyInto(out)

	return out
}

// DeepCopyInto copies the receiver into the given *SparseDataSet.
func (o *SparseDataSet) DeepCopyInto(out *SparseDataSet) {

	target, err := copystructure.Copy(o)
	if err != nil {
		panic(fmt.Sprintf("Unable to deepcopy SparseDataSet: %s", err))
	}

	*out = *target.(*SparseDataSet)
}

type mongoAttributesDataSet struct {
	ID           bson.ObjectId           `bson:"_id,omitempty"`
	CreateTime   time.Time               `bson:"createtime"`
	DataTypes    []string                `bson:"datatypes"`
	Description  string                  `bson:"description"`
	FriendlyName string                  `bson:"friendlyname"`
	ImportHash   string                  `bson:"importhash,omitempty"`
	ImportLabel  string                  `bson:"importlabel,omitempty"`
	Name         string                  `bson:"name"`
	Namespace    string                  `bson:"namespace,omitempty"`
	Propagate    bool                    `bson:"propagate"`
	Sensitivity  DataSetSensitivityValue `bson:"sensitivity"`
	UpdateTime   time.Time               `bson:"updatetime"`
	ZHash        int                     `bson:"zhash"`
	Zone         int                     `bson:"zone"`
}
type mongoAttributesSparseDataSet struct {
	ID           bson.ObjectId            `bson:"_id,omitempty"`
	CreateTime   *time.Time               `bson:"createtime,omitempty"`
	DataTypes    *[]string                `bson:"datatypes,omitempty"`
	Description  *string                  `bson:"description,omitempty"`
	FriendlyName *string                  `bson:"friendlyname,omitempty"`
	ImportHash   *string                  `bson:"importhash,omitempty"`
	ImportLabel  *string                  `bson:"importlabel,omitempty"`
	Name         *string                  `bson:"name,omitempty"`
	Namespace    *string                  `bson:"namespace,omitempty"`
	Propagate    *bool                    `bson:"propagate,omitempty"`
	Sensitivity  *DataSetSensitivityValue `bson:"sensitivity,omitempty"`
	UpdateTime   *time.Time               `bson:"updatetime,omitempty"`
	ZHash        *int                     `bson:"zhash,omitempty"`
	Zone         *int                     `bson:"zone,omitempty"`
}
